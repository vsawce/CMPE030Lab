
build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/lpc40xx/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000342d

Program Header:
0x70000001 off    0x000197cc vaddr 0x000097cc paddr 0x000097cc align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009884 memsz 0x00009884 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009884 align 2**16
         filesz 0x00000d00 memsz 0x00000d00 flags rw-
    LOAD off    0x00020d00 vaddr 0x10000d00 paddr 0x10000d00 align 2**16
         filesz 0x00000000 memsz 0x00000a20 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000097b4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000d00  10000000  00009884  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  20000000  20000000  00020d00  2**2
                  CONTENTS
  3 .bss          00000a20  10000d00  10000d00  00020d00  2**3
                  ALLOC
  4 .ARM.extab    00000018  000097b4  000097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx    000000b8  000097cc  000097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  00020d00  2**2
                  CONTENTS
  7 .noinit_RAM2  00000000  20000000  20000000  00020d00  2**2
                  CONTENTS
  8 .noinit       00000000  10001720  10001720  00020d00  2**2
                  CONTENTS
  9 .ARM.attributes 00000030  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY
 10 .comment      00000079  00000000  00000000  00020d30  2**0
                  CONTENTS, READONLY
 11 .debug_info   0009d8af  00000000  00000000  00020da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000688c  00000000  00000000  000be658  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013a0  00000000  00000000  000c4ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001300  00000000  00000000  000c6284  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b273  00000000  00000000  000c7584  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0003e37b  00000000  00000000  000d27f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000062ec  00000000  00000000  00110b74  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000d00 l    d  .bss	00000000 .bss
000097b4 l    d  .ARM.extab	00000000 .ARM.extab
000097cc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001720 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00008ea8 l     O .text	00000004 config::kSystemClockRateMhz
00004b30 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004b4c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00008eac l     O .text	00000004 config::kRtosFrequency
00004b70 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004b8c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000507c l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00005098 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00005a60 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000c74 l     O .data	00000004 (anonymous namespace)::system_controller
10001354 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000c78 l     O .data	00000008 (anonymous namespace)::uart0
10000c80 l     O .data	00000008 (anonymous namespace)::system_timer
10000c94 l     O .data	00000004 (anonymous namespace)::interrupt_controller
00005e88 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005eac l     F .text	00000038 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
000096c8 l     O .text	0000000c sjsu::InitializePlatform()::file
000063d0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00006574 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000065e4 l     F .text	0000016c __static_initialization_and_destruction_0(int, int)
00006a5a l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/vsawce/Documents/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/vsawce/Documents/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000032c l     F .text	00000000 __do_global_dtors_aux
10000d00 l       .bss	00000001 completed.10274
00000350 l     F .text	00000000 frame_dummy
10000d04 l       .bss	00000018 object.10279
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000770 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000078c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00001040 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000105c l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002930 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002cec l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002d9c l     F .text	00000028 __tcf_0
00002dc4 l     F .text	000002d0 __static_initialization_and_destruction_0(int, int)
00003094 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
000030a4 l     F .text	00000026 _Unwind_GetGR
000031f8 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00003254 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv
00000000 l    df *ABS*	00000000 exceptions.cpp
0000341c l       .text	00000000 handler2_address_const
000034ac l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00003508 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
100012bc l     O .bss	00000064 pxReadyTasksLists
10001320 l     O .bss	00000004 uxTopReadyPriority
10001324 l     O .bss	00000004 xYieldPending
10001328 l     O .bss	00000004 uxSchedulerSuspended
1000132c l     O .bss	00000004 ulTaskSwitchedInTime
10001330 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
0000368c l     F .text	0000002e _out_buffer(char, void*, unsigned int, unsigned int)
0000372c l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00003748 l     F .text	0000002e _strlen(char const*)
00003776 l     F .text	00000028 _is_digit(char)
0000379e l     F .text	00000048 _atoi(char const**)
000037e6 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00003a28 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00003af8 l     F .text	000000de _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00008e7c l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00003bd8 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
0000401c l     F .text	000008d6 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00004990 l     F .text	000000c8 _trace_write_semihosting_stdout(char const*, unsigned int)
10001334 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00006a90 l       .text	00000000 pxCurrentTCBConst2
00006b00 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00007204 l     F .text	00000012 selfrel_offset31
00007218 l     F .text	0000005c search_EIT_table
00007274 l     F .text	00000028 __gnu_unwind_get_pr_addr
0000729c l     F .text	0000009c get_eit_entry
00007338 l     F .text	00000058 restore_non_core_regs
00007390 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
0000739c l     F .text	00000004 __gnu_unwind_24bit.isra.0
000073a0 l     F .text	00000002 _Unwind_DebugHook
000073a4 l     F .text	0000003a unwind_phase2
000073e0 l     F .text	000000ca unwind_phase2_forced
000075b8 l     F .text	00000018 _Unwind_GetGR
00007600 l     F .text	00000018 _Unwind_SetGR
00007690 l     F .text	000002a8 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00007d68 l     F .text	00000036 next_unwind_byte
00007da0 l     F .text	0000001a _Unwind_GetGR.constprop.0
00007dbc l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000ca0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000030cc  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00001cc4  w    F .text	00000034 sjsu::Button::Button(sjsu::Gpio const&)
00007d20 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000074b0 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00000fcc  w    F .text	0000001c sjsu::lpc40xx::Gpio::LocalInterruptRegister() const
00004c28  w    F .text	0000004c sjsu::cortex::SystemTimer::SystemTimerHandler()
00002bf6  w    F .text	00000020 std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)
10001350  w    O .bss	00000001 sjsu::cortex::SystemTimer::dwt_counter
00002534  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00004c74  w    F .text	00000022 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
100012a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi1
100000b4  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c1
00003300  w    F .text	0000006c sjsu::InitializeBssSection()
000035dc g     F .text	00000010 _getpid
00009600  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00000bbc  w    F .text	00000070 sjsu::lpc40xx::Gpio::InterruptHandler()
00001cf8  w    F .text	0000003c sjsu::Button::Initialize()
00001a5e  w    F .text	0000016c sjsu::GraphicalTerminal::printf(char const*, ...)
00004d34  w    F .text	00000078 sjsu::cortex::SystemTimer::GetCount()
0000965c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
10000c90  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::current_vector
00004b04  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
0000503c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
000006a0  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const
10001278  w    O .bss	00000004 guard variable for sjsu::Uptime
10001718  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController<43u, 5ul>::table
10000c14  w    O .data	00000004 sjsu::newlib::in
10001294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c1
000062d0  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
10001710  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00000d84  w    F .text	0000002e sjsu::lpc40xx::Gpio::Toggle() const
000004e0  w    F .text	00000014 sjsu::lpc40xx::Pin::Initialize() const
00004e3c  w    F .text	00000020 sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const
000007c8  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
000081ac g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
10000038  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c1
000048f4 g     F .text	00000044 printf
00000964  w    F .text	00000018 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
00000f84  w    F .text	00000048 sjsu::lpc40xx::Gpio::IsAValidPort() const
0000088c  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000000 g       *ABS*	00000000 __vectors_start__
00002d3e  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()
0000649a  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
00001488  w    F .text	00000016 sjsu::Ssd1306::GetHeight()
00006144  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
1000053c  w    O .data	000006d4 sjtwo::Oled()::oled_display
00000648  w    F .text	0000001e sjsu::Gpio::SetHigh() const
00002296  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
000067dc  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)
00006278  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()
0000645c  w    F .text	0000001e std::array<std::function<void ()>, 59u>::operator[](unsigned int)
00008464  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kDataBit
000069d2  w    F .text	0000001a std::array<std::function<void ()>, 59u>::data()
00002aaa  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()
00001926  w    F .text	00000022 sjsu::Graphics::Update()
00003158  w    F .text	00000098 sjsu::debug::PrintBacktrace(bool, void*)
000009d8  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
000084a4  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso1
20000000 g       *ABS*	00000000 __base_RAM2
00007bdc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00007cfc g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
000010ac  w    F .text	00000108 sjsu::lpc40xx::Spi::Initialize() const
00001770  w    F .text	00000020 sjsu::Ssd1306::Clear()
10000d1c  w    O .bss	00000004 sjsu::InterruptController::platform_interrupt_controller
00009884 g       .ARM.exidx	00000000 __exidx_end
000084d8  w    O .text	0000001c vtable for sjsu::Button
000008a8  w    F .text	00000020 sjsu::Gpio::Gpio()
000081e4  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00005ee4 g     F .text	00000014 ThreadRuntimeCounter
00007938 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
00002af4  w    F .text	00000018 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00004bec  w    F .text	0000001c sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)
00005238  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00008494  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck0
100012b8 g     O .bss	00000004 pxCurrentTCB
0000186c  w    F .text	0000002e sjsu::PixelDisplay::Color_t::Color_t()
000027de  w    F .text	00000020 bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())
00008088 g     F .text	0000000a .hidden _Unwind_GetRegionStart
00008434  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c0SdaPin
00002b0c  w    F .text	00000016 std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
000004b0  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
00007cfc g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
000057f4  w    F .text	00000038 sjsu::Uart::Read() const
000095f8  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00002d56  w    F .text	00000018 void (* const&std::_Any_data::_M_access<void (*)()>() const)()
000006bc  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)
10010000 g       *ABS*	00000000 __top_SRAM
1000171c g     O .bss	00000004 errno
00009884 g       .ARM.exidx	00000000 _etext
0000610e  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000598  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00005330  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
10001270  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled
0000847c  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister1::kSlaveModeBit
00007d44 g     F .text	00000022 .hidden _Unwind_Backtrace
0000186c  w    F .text	0000002e sjsu::PixelDisplay::Color_t::Color_t()
10000d20  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00006c60 g     F .text	00000160 .hidden __aeabi_fadd
10001260  w    O .bss	00000010 sjtwo::Oled()::oled
00006c5c g     F .text	00000164 .hidden __subsf3
00005438  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00009694  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00007bbc g     F .text	00000018 .hidden __restore_core_regs
00007bfc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00006a02  w    F .text	0000002c __gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00002784  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000062d0  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000095f4  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
0000189a  w    F .text	0000006a sjsu::Graphics::Graphics(sjsu::PixelDisplay&)
000096e8  w    O .text	00000020 vtable for sjsu::lpc40xx::Uart
000081e8  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00005778  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000074ac g     F .text	00000004 .hidden _Unwind_GetCFA
00008120 g     F .text	0000001c memcpy
0000549c  w    F .text	00000198 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006b20 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00001654  w    F .text	000000da sjsu::Ssd1306::InitializationPanel()
000075d0 g     F .text	0000002e .hidden _Unwind_VRS_Set
000060a8  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00001e64  w    F .text	00000018 sjsu::Button::GetGpio()
00006f10 g     F .text	00000000 .hidden __aeabi_uldivmod
10001720 g       .noinit	00000000 _noinit
00005450  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000091c  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
00003638 g     F .text	00000048 puts
00000a82  w    F .text	00000030 sjsu::lpc17xx::Pin::PinRegisterLookup() const
000012a4  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00005858  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
0000616a  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
0000101e  w    F .text	00000022 units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)
0000270a  w    F .text	00000024 std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)
00008520  w    O .text	00000018 vtable for sjsu::lpc40xx::Spi
00001e44  w    F .text	00000020 sjsu::Button::ResetState()
00005164  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
10000c20  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
000003f2  w    F .text	00000022 std::_Function_base::_M_empty() const
0000814c g     F .text	00000050 _raise_r
00006dc8 g     F .text	0000001c .hidden __aeabi_i2f
000057c0  w    F .text	0000001e sjsu::Pin::PullUp() const
00002a58  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)
10000d4c  w    O .bss	00000400 sjsu::lpc40xx::Gpio::handlers
10010000 g       *ABS*	00000000 __top_RAM
00000fe8  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00006aa0 g     F .text	00000066 xPortPendSVHandler
00004938 g     F .text	0000002c vsnprintf
00002692  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000534  w    O .data	00000008 sjtwo::spi1
00000e08  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
00000666  w    F .text	0000001e sjsu::Gpio::SetLow() const
0000070c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
0000055c  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
000081d0 g     F .text	00000004 _getpid_r
0000582c  w    F .text	0000002a sjsu::Uart::PollingFlush() const
00001c5e  w    F .text	0000003a sjsu::GraphicalTerminal::ClearRow(unsigned long)
00007618 g     F .text	00000076 .hidden __gnu_Unwind_Backtrace
000064ee  w    F .text	00000086 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
10000000 g     O .data	00000000 .hidden __dso_handle
00002270  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
0000088c  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00008474  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kDividerBit
00001590  w    F .text	000000c4 sjsu::Ssd1306::Initialize()
00008480  w    O .text	00000002 sjsu::lpc40xx::Spi::StatusRegister::kDataLineBusyBit
00001d34  w    F .text	00000088 sjsu::Button::Released()
10010000 g       *ABS*	00000000 StackTop
000008c8  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00006920  w    F .text	00000034 sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)
00006314  w    F .text	00000042 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)
000061e6  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00006f40 g     F .text	000002c2 .hidden __udivmoddi4
00005fdc  w    F .text	00000036 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000000fc g       .text	00000000 bss_section_table
00008454  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c2SdaPin
000081ec  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00004ee8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00006250  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
00007bec g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
000026e6  w    F .text	00000024 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())
20008000 g       *ABS*	00000000 __top_RAM2
000025cc  w    F .text	00000044 sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)
00001320  w    F .text	000000f0 sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const
1000123c  w    O .bss	00000020 sjtwo::Oled()::oled_dc
00007944 g     F .text	00000278 .hidden _Unwind_VRS_Pop
00007940  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000134  w    O .data	00000400 font8x8_basic
00004e5c  w    F .text	0000008c sjsu::cortex::SystemTimer::StartTimer() const
1000128c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00000e08  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
00007d44 g     F .text	00000022 .hidden ___Unwind_Backtrace
000029a4  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00003114  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
000096ac  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00000e24  w    F .text	000000dc sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)
00008578  w    O .text	00000024 vtable for sjsu::Gpio
000019f0  w    F .text	00000040 sjsu::Graphics::DrawPixel(unsigned long, unsigned long)
20000000 g       *ABS*	00000000 __user_heap_base
1000011c  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi2
000097cc g       .ARM.extab	00000000 __exidx_start
00006850  w    F .text	0000002e void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
000065b6  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00000684  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
0000681c  w    F .text	00000018 std::array<std::function<void ()>, 59u>::begin()
0000843c  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c0SclPin
000080d8 g     F .text	00000048 __libc_init_array
00006750  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)
000059d0  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00007cb4 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
0000272e  w    F .text	00000056 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00002b70  w    F .text	00000016 std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
000084ac  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck1
00004f54  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000080ac g     F .text	0000000e abort
00007cd8 g     F .text	00000022 .hidden ___Unwind_Resume
00004f3c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000c60  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
000084c4  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck2
000064b0  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
10001274  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000014dc  w    F .text	000000b4 sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)
00006994  w    F .text	0000003e std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00080000 g       *ABS*	00000000 __top_FLASH
10000104  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi1
00006b08 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
10001238  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled_cs
00002838  w    F .text	0000001c std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)
00002cae  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
0000039a  w    F .text	00000016 std::_Any_data::_M_access() const
000081f0  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00000c2c  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
00006ba8 g     F .text	0000000a std::terminate()
00000460  w    F .text	0000001e sjsu::Pin::PullDown() const
000011e8  w    F .text	00000038 sjsu::lpc40xx::Spi::Transfer(unsigned short) const
00006bb4 g     F .text	0000009e .hidden __aeabi_d2f
00007c04 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000003cc  w    F .text	00000026 std::_Function_base::~_Function_base()
000060a8  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000029c8  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00006c5c g     F .text	00000164 .hidden __aeabi_fsub
00005cf6  w    F .text	00000092 sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00001a30  w    F .text	0000002e sjsu::GraphicalTerminal::Initialize()
00002406  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
10001714  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00003404 g     F .text	00000026 ArmHardFaultHandler
100012ac  w    O .bss	00000004 guard variable for sjtwo::led1
000000e4 g       .text	00000000 section_table_start
00000f00  w    F .text	00000084 sjsu::lpc40xx::Gpio::DetachInterrupt() const
000012fc  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10001720 g       .bss	00000000 _ebss
00006a44  w    F .text	00000016 std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])
10000098  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c0
00002a8a  w    F .text	00000020 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)
00001410  w    F .text	0000003a sjsu::PixelDisplay::Color_t::IsBlank()
00005e64  w    F .text	00000024 sjsu::lpc40xx::Uart::FifoHasData() const
00001472  w    F .text	00000016 sjsu::Ssd1306::GetWidth()
00001220  w    F .text	00000018 auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)
00009708  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
000023b4  w    F .text	0000002c std::function<void ()>::operator()() const
000025a8  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00009744  w    O .text	0000000e sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file
10000c30  w    O .data	00000004 sjsu::cortex::SystemTimer::ticks_per_millisecond
000051e0  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00004dac  w    F .text	00000090 sjsu::cortex::SystemTimer::Initialize() const
0000074e  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006df4 g     F .text	0000007c .hidden __floatdisf
0000846c  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kPolarityBit
00001904  w    F .text	00000022 sjsu::Graphics::Initialize()
000057de  w    F .text	00000016 sjsu::Uart::Flush() const
000011b4  w    F .text	00000034 sjsu::lpc40xx::Spi::IsBusBusy() const
0000967c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00003380 g     F .text	00000084 GetRegistersFromStack
00006954  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()
000063a0  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
00002516  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
00001238  w    F .text	00000054 sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const
1000127c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
000081f8  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
000027fe  w    F .text	00000016 std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())
0000036c  w    F .text	00000018 operator new(unsigned int, void*)
00000c2c  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00007bd4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
1000125c  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled_dc
00005ef8  w    F .text	000000e4 sjsu::InitializePlatform()
10001190  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00009754 g     O .text	00000020 __sf_fake_stderr
0000180e  w    F .text	0000005e sjsu::Ssd1306::Update()
0000128c  w    F .text	00000018 unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const
000029a4  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00006b98 g     F .text	00000010 std::get_terminate()
0000855c  w    O .text	0000001c vtable for sjsu::lpc17xx::Pin
10001720 g       .bss	00000000 end
000022ec  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10001218  w    O .bss	00000020 sjtwo::Oled()::oled_cs
00007cd8 g     F .text	00000022 .hidden _Unwind_Resume
0000757c g     F .text	0000000c .hidden _Unwind_DeleteException
00007578 g     F .text	00000002 .hidden _Unwind_Complete
000052e8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
000026b0  w    F .text	00000020 bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00000000 g       *ABS*	00000000 __base_Flash
000036ba g     F .text	00000072 _out_chunk(char, void*, unsigned int, unsigned int)
00001bca  w    F .text	00000094 sjsu::GraphicalTerminal::Update()
0000972c  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
10000008  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c0
00002ac2  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00009610  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
0000042c  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
00004972 g     F .text	0000001e trace_write
00006780  w    F .text	0000005c sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)
00008470  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kPhaseBit
00002320  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
1000170c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
10000d00 g       .bss	00000000 _bss
00009644  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000059fc  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecimal(float)
000060f4  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
10001348  w    O .bss	00000008 sjsu::cortex::SystemTimer::millisecond_count
00004964 g     F .text	0000000e trace_initialize
0000097c  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
00006b82 g     F .text	00000006 __cxa_pure_virtual
00005474  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
0000647a  w    F .text	00000020 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const
00006dc8 g     F .text	0000001c .hidden __floatsisf
00002570  w    F .text	00000038 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00009684  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10001194  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007dc0 g     F .text	0000029c .hidden __gnu_unwind_execute
000050c8  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007be4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000496  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002610  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00005058  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
000085b8  w    O .text	0000001c vtable for sjsu::Pin
000022d2  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()
10001720 g       .noinit	00000000 _end_noinit
10001198  w    O .bss	00000020 sjtwo::led0
000003b0  w    F .text	0000001c std::_Function_base::_Function_base()
00002bc4  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)
000051bc  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00003518 g     F .text	000000c4 vTaskSwitchContext
00002458  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
000095fc  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00004c08  w    F .text	00000020 sjsu::SystemController::SetPlatformController(sjsu::SystemController*)
0000608e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00007524 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00006356  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
000080bc g     F .text	0000001c __cxa_atexit
10001168  w    O .bss	00000028 sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00001948  w    F .text	00000022 sjsu::Graphics::Clear()
00004a58  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
0000968c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00007bf4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00004f78  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000069ec  w    F .text	00000016 std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)
0000239a  w    F .text	0000001a std::function<void ()>::function()
000081f4  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
00000a04  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
0000189a  w    F .text	0000006a sjsu::Graphics::Graphics(sjsu::PixelDisplay&)
00002c2e  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00006de4 g     F .text	0000008c .hidden __floatundisf
10000d40  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00007cb4 g     F .text	00000022 .hidden _Unwind_RaiseException
000080a8  w    F .text	00000002 .hidden __aeabi_ldiv0
00000dee  w    F .text	0000001a std::function<void ()>::~function()
10000c38  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
0000336c  w    F .text	00000014 sjsu::SystemInitialize()
10001338  w    O .bss	00000010 sjsu::cortex::SystemTimer::callback
00002c16  w    F .text	00000018 void (**&std::_Any_data::_M_access<void (**)()>())()
00006dc0 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
00008484  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi0
00000818  w    F .text	0000002c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000d28  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002b22  w    F .text	0000004e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
10001284  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00000a4c  w    F .text	00000036 sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)
00006b38 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000006e0  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
0000687e  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)
000004b0  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
00009774 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
0000239a  w    F .text	0000001a std::function<void ()>::function()
00006898  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)
000056fc  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00000414  w    F .text	00000018 sjsu::InterruptController::GetPlatformController()
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00004cea  w    F .text	0000004a std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
0000813c g     F .text	00000010 memset
00001e7c g     F .text	000003f4 main
00004a9c  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00005dda  w    F .text	0000004e sjsu::lpc40xx::Uart::Read(void*, unsigned int) const
0000849c  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi1
00006df4 g     F .text	0000007c .hidden __aeabi_l2f
20000000 g       *ABS*	00000000 heap
000084f4  w    O .text	0000002c vtable for sjsu::Ssd1306
00006b88 g     F .text	00000006 std::__throw_bad_function_call()
00004abc  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
000096b4  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
0000859c  w    O .text	0000001c vtable for sjsu::lpc40xx::Pin
00006bb4 g     F .text	0000009e .hidden __truncdfsf2
00000320 g       .text	00000000 __init_array_end
00006a70 g     F .text	00000026 vPortSVCHandler
00001dbc  w    F .text	00000088 sjsu::Button::Pressed()
00000000 g       *ABS*	00000000 __base_FLASH
10000d24  w    O .bss	00000004 sjsu::SystemController::platform_system_controller
100000d0  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c2
00009608  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
00001cc4  w    F .text	00000034 sjsu::Button::Button(sjsu::Gpio const&)
10000c18  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006de4 g     F .text	0000008c .hidden __aeabi_ul2f
00004bb0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00007510 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000003cc  w    F .text	00000026 std::_Function_base::~_Function_base()
00002c60  w    F .text	00000018 std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
000028aa  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
000028aa  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
000084bc  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso2
000053fc  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000dee  w    F .text	0000001a std::function<void ()>::~function()
0000266a  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()
00000908  w    F .text	00000014 sjsu::lpc17xx::Pin::Initialize() const
00002d6e  w    F .text	00000016 void (* const*std::__addressof<void (* const)()>(void (* const&)()))()
00007568 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10001280  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
10000c10  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
000065b6  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00006222  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00000320 g     F .text	00000000 _fini
00007bbc g     F .text	00000018 .hidden restore_core_regs
000051fc  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00008428  w    O .text	00000009 sjsu::lpc40xx::Gpio::IsAValidPort() const::file
00007ca0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00004c96  w    F .text	00000054 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
0000145e  w    F .text	00000014 sjsu::PixelDisplay::Disable()
000096a4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00000db2  w    F .text	00000024 sjsu::lpc40xx::Gpio::Read() const
000007b0  w    F .text	00000018 sjsu::SystemController::GetPlatformController()
000024e2  w    F .text	00000034 std::function<void ()>::operator=(decltype(nullptr))
00001790  w    F .text	0000007e sjsu::Ssd1306::DrawPixel(long, long, sjsu::PixelDisplay::Color_t)
000008a8  w    F .text	00000020 sjsu::Gpio::Gpio()
10000c4c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00002c78  w    F .text	00000020 std::function<void ()>::operator bool() const
00005e40  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
100011f8  w    O .bss	00000020 sjtwo::led3
00006c54 g     F .text	0000016c .hidden __aeabi_frsub
0000042c  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
000028ee  w    F .text	00000042 std::function<void ()>::swap(std::function<void ()>&)
10000c9c g     O .data	00000004 _impure_ptr
0000960c  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
0000108c  w    F .text	0000001e units::linear_scale<float>::operator()() const
00004ae4  w    F .text	00000020 sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)
100000ec  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi0
00000ab4  w    F .text	00000074 sjsu::lpc40xx::Gpio::GpioRegister(int)
000053c0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000030c g       .text	00000000 __preinit_array_end
00006a2e  w    F .text	00000016 void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
000005cc  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
0000242a  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00005d88  w    F .text	00000052 sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const
00004f00  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00002b86  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
000029e4  w    F .text	00000074 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00008094 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
0000962c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
10001708  w    O .bss	00000004 guard variable for sjsu::cortex::SystemTimer::callback
00006072  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006598  w    F .text	0000001e std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)
00000d40  w    F .text	00000044 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
0000342c g     F .text	00000080 ArmResetHandler
000068c8  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)
00002d84  w    F .text	00000018 void (*&std::_Any_data::_M_access<void (*)()>())()
00002552  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
00007588 g     F .text	0000002e .hidden _Unwind_VRS_Get
000003b0  w    F .text	0000001c std::_Function_base::_Function_base()
10000c98 g     O .data	00000004 __cxxabiv1::__terminate_handler
00007c8c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
100012a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi2
0000526c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00002814  w    F .text	00000024 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())
000052a0  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00003608 g     F .text	00000030 _write
0000805c g     F .text	0000002a .hidden __gnu_unwind_frame
00008468  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kFrameBit
00007d20 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
10000d00 g       .data	00000000 _edata
00001c98  w    F .text	0000002c sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)
1000114c  w    O .bss	00000018 sjsu::lpc40xx::Gpio::GpioRegister(int)::port
10001358  w    O .bss	000003b0 sjsu::cortex::InterruptController<43u, 5ul>::table
00006012  w    F .text	00000060 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000d48  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
00005e28  w    F .text	00000018 sjsu::lpc40xx::Uart::HasData() const
00000cd8  w    F .text	00000068 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
00008538  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
100012b0  w    O .bss	00000004 guard variable for sjtwo::led2
00008478  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister1::kSpiEnable
00002854  w    F .text	00000056 std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
10001290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c0
0000845c  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c2SclPin
10000c8c  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::nvic
00009614  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00002d10  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()
0000618e  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
10000c88  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::scb
00006dc0 g     F .text	00000024 .hidden __floatunsisf
00006b8e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00007c48 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000084cc  w    O .text	0000000c sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)::file
000095f0  w    O .text	00000004 sjsu::cortex::SystemTimer::kFixedPointScaling
000035ec g     F .text	0000001a _kill
00003264  w    F .text	0000009c sjsu::InitializeDataSection()
00006834  w    F .text	0000001c std::array<std::function<void ()>, 59u>::end()
0000294c  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00006250  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
00000844  w    F .text	00000048 sjsu::DefaultUptime()
00002320  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00009794 g     O .text	00000020 __sf_fake_stdout
00008444  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c1SdaPin
100012a8  w    O .bss	00000004 guard variable for sjtwo::led0
10000068  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c2
000008c8  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
0000030c g       .text	00000000 __init_array_start
000080a8  w    F .text	00000002 .hidden __aeabi_idiv0
000023e0  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000024ac  w    F .text	00000036 std::function<void ()>::operator=(std::function<void ()> const&)
00002c98  w    F .text	00000016 std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
00000384  w    F .text	00000016 std::_Any_data::_M_access()
000084b4  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi2
000060dc  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000844c  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c1SclPin
00003680 g     F .text	0000000c _exit
0000969c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000c34  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
100011b8  w    O .bss	00000020 sjtwo::led1
10001298  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c2
0000072e  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00005938  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
1000129c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi0
00000dd6  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
0000047e  w    F .text	00000018 sjsu::Pin::GetPort() const
00002d28  w    F .text	00000016 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()
000081d4 g     F .text	00000010 strlen
00001730  w    F .text	00000040 sjsu::Ssd1306::SetHorizontalAddressMode()
10000d30  w    O .bss	00000010 sjsu::Uptime
000004f4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
0000793c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
0000149e  w    F .text	0000003e sjsu::Ssd1306::AvailableColors()
100011d8  w    O .bss	00000020 sjtwo::led2
00006444  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)
0000848c  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso0
00005634  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006b58 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00005984  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
000096d4  w    O .text	00000014 vtable for sjsu::cortex::InterruptController<43u, 5ul>
10000c28  w    O .data	00000008 sjsu::cortex::SystemTimer::nanoseconds_per_tick
000063ec  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
0000196c  w    F .text	00000084 sjsu::Graphics::DrawCharacter(long, long, char)
00000528  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000144a  w    F .text	00000014 sjsu::PixelDisplay::Enable()
0000030c g       .text	00000000 __preinit_array_start
000025cc  w    F .text	00000044 sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)
0000637e  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00005378  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
10001288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::handlers
00006e70 g     F .text	00000000 .hidden __aeabi_ldivmod
000031f0  w    F .text	00000008 sjsu::Halt()
100012b4  w    O .bss	00000004 guard variable for sjtwo::led3
00000ba8  w    F .text	00000014 sjsu::lpc40xx::Gpio::InterruptStatus()
00009604  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00006b78 g     F .text	0000000a __aeabi_atexit
00002458  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
00006072  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006c60 g     F .text	00000160 .hidden __addsf3
000022ec  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00002374  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
00000b28  w    F .text	00000080 sjsu::lpc40xx::Gpio::InterruptRegister(int)
10000d44  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
00009674  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
00005c4c  w    F .text	000000aa sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000c1c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
0000819c g     F .text	00000010 raise
10001164  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::GpioRegister(int)::port
000026d0  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 2d 34 00 00 79 62 00 00 05 34 00 00     ....-4..yb...4..
      10:	79 62 00 00 79 62 00 00 79 62 00 00 00 00 00 00     yb..yb..yb......
	...
      2c:	71 6a 00 00 79 62 00 00 00 00 00 00 a1 6a 00 00     qj..yb.......j..
      3c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      4c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      5c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      6c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      7c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      8c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      9c:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      ac:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      bc:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      cc:	79 62 00 00 79 62 00 00 79 62 00 00 79 62 00 00     yb..yb..yb..yb..
      dc:	79 62 00 00 79 62 00 00                             yb..yb..

000000e4 <data_section_table>:
      e4:	00009884 	.word	0x00009884
      e8:	10000000 	.word	0x10000000
      ec:	00000d00 	.word	0x00000d00
      f0:	00009884 	.word	0x00009884
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	10000d00 	.word	0x10000d00
     100:	00000a20 	.word	0x00000a20
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000351 	.word	0x00000351
     310:	00003095 	.word	0x00003095
     314:	00003255 	.word	0x00003255
     318:	00003509 	.word	0x00003509
     31c:	00006a5b 	.word	0x00006a5b

00000320 <_fini>:
     320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     322:	bf00      	nop
     324:	bcf8      	pop	{r3, r4, r5, r6, r7}
     326:	bc08      	pop	{r3}
     328:	469e      	mov	lr, r3
     32a:	4770      	bx	lr

0000032c <__do_global_dtors_aux>:
     32c:	b510      	push	{r4, lr}
     32e:	4c05      	ldr	r4, [pc, #20]	; (344 <__do_global_dtors_aux+0x18>)
     330:	7823      	ldrb	r3, [r4, #0]
     332:	b933      	cbnz	r3, 342 <__do_global_dtors_aux+0x16>
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <__do_global_dtors_aux+0x1c>)
     336:	b113      	cbz	r3, 33e <__do_global_dtors_aux+0x12>
     338:	4804      	ldr	r0, [pc, #16]	; (34c <__do_global_dtors_aux+0x20>)
     33a:	f3af 8000 	nop.w
     33e:	2301      	movs	r3, #1
     340:	7023      	strb	r3, [r4, #0]
     342:	bd10      	pop	{r4, pc}
     344:	10000d00 	.word	0x10000d00
     348:	00000000 	.word	0x00000000
     34c:	000097cc 	.word	0x000097cc

00000350 <frame_dummy>:
     350:	b508      	push	{r3, lr}
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <frame_dummy+0x10>)
     354:	b11b      	cbz	r3, 35e <frame_dummy+0xe>
     356:	4903      	ldr	r1, [pc, #12]	; (364 <frame_dummy+0x14>)
     358:	4803      	ldr	r0, [pc, #12]	; (368 <frame_dummy+0x18>)
     35a:	f3af 8000 	nop.w
     35e:	bd08      	pop	{r3, pc}
     360:	00000000 	.word	0x00000000
     364:	10000d04 	.word	0x10000d04
     368:	000097cc 	.word	0x000097cc

0000036c <operator new(unsigned int, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	6039      	str	r1, [r7, #0]
     376:	683b      	ldr	r3, [r7, #0]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	f85d 7b04 	ldr.w	r7, [sp], #4
     382:	4770      	bx	lr

00000384 <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
     384:	b480      	push	{r7}
     386:	b083      	sub	sp, #12
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	4618      	mov	r0, r3
     390:	370c      	adds	r7, #12
     392:	46bd      	mov	sp, r7
     394:	f85d 7b04 	ldr.w	r7, [sp], #4
     398:	4770      	bx	lr

0000039a <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
     39a:	b480      	push	{r7}
     39c:	b083      	sub	sp, #12
     39e:	af00      	add	r7, sp, #0
     3a0:	6078      	str	r0, [r7, #4]
     3a2:	687b      	ldr	r3, [r7, #4]
     3a4:	4618      	mov	r0, r3
     3a6:	370c      	adds	r7, #12
     3a8:	46bd      	mov	sp, r7
     3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ae:	4770      	bx	lr

000003b0 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	2200      	movs	r2, #0
     3bc:	609a      	str	r2, [r3, #8]
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	4618      	mov	r0, r3
     3c2:	370c      	adds	r7, #12
     3c4:	46bd      	mov	sp, r7
     3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ca:	4770      	bx	lr

000003cc <std::_Function_base::~_Function_base()>:

    ~_Function_base()
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	689b      	ldr	r3, [r3, #8]
     3d8:	2b00      	cmp	r3, #0
     3da:	d005      	beq.n	3e8 <std::_Function_base::~_Function_base()+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	689b      	ldr	r3, [r3, #8]
     3e0:	6878      	ldr	r0, [r7, #4]
     3e2:	6879      	ldr	r1, [r7, #4]
     3e4:	2203      	movs	r2, #3
     3e6:	4798      	blx	r3
    }
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	4618      	mov	r0, r3
     3ec:	3708      	adds	r7, #8
     3ee:	46bd      	mov	sp, r7
     3f0:	bd80      	pop	{r7, pc}

000003f2 <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
     3f2:	b480      	push	{r7}
     3f4:	b083      	sub	sp, #12
     3f6:	af00      	add	r7, sp, #0
     3f8:	6078      	str	r0, [r7, #4]
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	689b      	ldr	r3, [r3, #8]
     3fe:	2b00      	cmp	r3, #0
     400:	bf0c      	ite	eq
     402:	2301      	moveq	r3, #1
     404:	2300      	movne	r3, #0
     406:	b2db      	uxtb	r3, r3
     408:	4618      	mov	r0, r3
     40a:	370c      	adds	r7, #12
     40c:	46bd      	mov	sp, r7
     40e:	f85d 7b04 	ldr.w	r7, [sp], #4
     412:	4770      	bx	lr

00000414 <sjsu::InterruptController::GetPlatformController()>:
  static void SetPlatformController(InterruptController * interrupt_controller)
  {
    platform_interrupt_controller = interrupt_controller;
  }
  /// Retrieve a reference of the platforms interrupt controller
  static sjsu::InterruptController & GetPlatformController()
     414:	b480      	push	{r7}
     416:	af00      	add	r7, sp, #0
  {
    return *platform_interrupt_controller;
     418:	4b03      	ldr	r3, [pc, #12]	; (428 <sjsu::InterruptController::GetPlatformController()+0x14>)
     41a:	681b      	ldr	r3, [r3, #0]
  }
     41c:	4618      	mov	r0, r3
     41e:	46bd      	mov	sp, r7
     420:	f85d 7b04 	ldr.w	r7, [sp], #4
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	10000d1c 	.word	0x10000d1c

0000042c <sjsu::Pin::Pin(unsigned char, unsigned char)>:
    /// resistor.
    kRepeater
  };

  /// Set internal port and pin values.
  constexpr Pin(uint8_t port, uint8_t pin) : port_(port), pin_(pin) {}
     42c:	b480      	push	{r7}
     42e:	b083      	sub	sp, #12
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	460b      	mov	r3, r1
     436:	70fb      	strb	r3, [r7, #3]
     438:	4613      	mov	r3, r2
     43a:	70bb      	strb	r3, [r7, #2]
     43c:	4a07      	ldr	r2, [pc, #28]	; (45c <sjsu::Pin::Pin(unsigned char, unsigned char)+0x30>)
     43e:	687b      	ldr	r3, [r7, #4]
     440:	601a      	str	r2, [r3, #0]
     442:	687b      	ldr	r3, [r7, #4]
     444:	78fa      	ldrb	r2, [r7, #3]
     446:	711a      	strb	r2, [r3, #4]
     448:	687b      	ldr	r3, [r7, #4]
     44a:	78ba      	ldrb	r2, [r7, #2]
     44c:	715a      	strb	r2, [r3, #5]
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	370c      	adds	r7, #12
     454:	46bd      	mov	sp, r7
     456:	f85d 7b04 	ldr.w	r7, [sp], #4
     45a:	4770      	bx	lr
     45c:	000085c0 	.word	0x000085c0

00000460 <sjsu::Pin::PullDown() const>:
  {
    SetPull(Resistor::kPullUp);
  }

  /// Attach internal pull down resistor to pin
  void PullDown() const
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
  {
    SetPull(Resistor::kPullDown);
     468:	687b      	ldr	r3, [r7, #4]
     46a:	681b      	ldr	r3, [r3, #0]
     46c:	3308      	adds	r3, #8
     46e:	681b      	ldr	r3, [r3, #0]
     470:	2101      	movs	r1, #1
     472:	6878      	ldr	r0, [r7, #4]
     474:	4798      	blx	r3
  }
     476:	bf00      	nop
     478:	3708      	adds	r7, #8
     47a:	46bd      	mov	sp, r7
     47c:	bd80      	pop	{r7, pc}

0000047e <sjsu::Pin::GetPort() const>:
  {
    SetPull(Resistor::kNone);
  }

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     47e:	b480      	push	{r7}
     480:	b083      	sub	sp, #12
     482:	af00      	add	r7, sp, #0
     484:	6078      	str	r0, [r7, #4]
  {
    return port_;
     486:	687b      	ldr	r3, [r7, #4]
     488:	791b      	ldrb	r3, [r3, #4]
  }
     48a:	4618      	mov	r0, r3
     48c:	370c      	adds	r7, #12
     48e:	46bd      	mov	sp, r7
     490:	f85d 7b04 	ldr.w	r7, [sp], #4
     494:	4770      	bx	lr

00000496 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     496:	b480      	push	{r7}
     498:	b083      	sub	sp, #12
     49a:	af00      	add	r7, sp, #0
     49c:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     49e:	687b      	ldr	r3, [r7, #4]
     4a0:	795b      	ldrb	r3, [r3, #5]
  }
     4a2:	4618      	mov	r0, r3
     4a4:	370c      	adds	r7, #12
     4a6:	46bd      	mov	sp, r7
     4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ac:	4770      	bx	lr
     4ae:	Address 0x00000000000004ae is out of bounds.


000004b0 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>:

  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}
     4b0:	b580      	push	{r7, lr}
     4b2:	b082      	sub	sp, #8
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
     4b8:	460b      	mov	r3, r1
     4ba:	70fb      	strb	r3, [r7, #3]
     4bc:	4613      	mov	r3, r2
     4be:	70bb      	strb	r3, [r7, #2]
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	78ba      	ldrb	r2, [r7, #2]
     4c4:	78f9      	ldrb	r1, [r7, #3]
     4c6:	4618      	mov	r0, r3
     4c8:	f7ff ffb0 	bl	42c <sjsu::Pin::Pin(unsigned char, unsigned char)>
     4cc:	4a03      	ldr	r2, [pc, #12]	; (4dc <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)+0x2c>)
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	601a      	str	r2, [r3, #0]
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	4618      	mov	r0, r3
     4d6:	3708      	adds	r7, #8
     4d8:	46bd      	mov	sp, r7
     4da:	bd80      	pop	{r7, pc}
     4dc:	000085a4 	.word	0x000085a4

000004e0 <sjsu::lpc40xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     4e0:	b480      	push	{r7}
     4e2:	b083      	sub	sp, #12
     4e4:	af00      	add	r7, sp, #0
     4e6:	6078      	str	r0, [r7, #4]
     4e8:	bf00      	nop
     4ea:	370c      	adds	r7, #12
     4ec:	46bd      	mov	sp, r7
     4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f2:	4770      	bx	lr

000004f4 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     4f4:	b580      	push	{r7, lr}
     4f6:	b082      	sub	sp, #8
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	460b      	mov	r3, r1
     4fe:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     500:	4b08      	ldr	r3, [pc, #32]	; (524 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     502:	78f9      	ldrb	r1, [r7, #3]
     504:	781a      	ldrb	r2, [r3, #0]
     506:	785b      	ldrb	r3, [r3, #1]
     508:	021b      	lsls	r3, r3, #8
     50a:	431a      	orrs	r2, r3
     50c:	2300      	movs	r3, #0
     50e:	f362 030f 	bfi	r3, r2, #0, #16
     512:	461a      	mov	r2, r3
     514:	6878      	ldr	r0, [r7, #4]
     516:	f000 f859 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     51a:	bf00      	nop
     51c:	3708      	adds	r7, #8
     51e:	46bd      	mov	sp, r7
     520:	bd80      	pop	{r7, pc}
     522:	bf00      	nop
     524:	000081e4 	.word	0x000081e4

00000528 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     528:	b580      	push	{r7, lr}
     52a:	b082      	sub	sp, #8
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
     530:	460b      	mov	r3, r1
     532:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     534:	4b08      	ldr	r3, [pc, #32]	; (558 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     536:	78f9      	ldrb	r1, [r7, #3]
     538:	781a      	ldrb	r2, [r3, #0]
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	021b      	lsls	r3, r3, #8
     53e:	431a      	orrs	r2, r3
     540:	2300      	movs	r3, #0
     542:	f362 030f 	bfi	r3, r2, #0, #16
     546:	461a      	mov	r2, r3
     548:	6878      	ldr	r0, [r7, #4]
     54a:	f000 f83f 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     54e:	bf00      	nop
     550:	3708      	adds	r7, #8
     552:	46bd      	mov	sp, r7
     554:	bd80      	pop	{r7, pc}
     556:	bf00      	nop
     558:	000081e8 	.word	0x000081e8

0000055c <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     55c:	b580      	push	{r7, lr}
     55e:	b082      	sub	sp, #8
     560:	af00      	add	r7, sp, #0
     562:	6078      	str	r0, [r7, #4]
     564:	460b      	mov	r3, r1
     566:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     568:	78fb      	ldrb	r3, [r7, #3]
     56a:	f083 0301 	eor.w	r3, r3, #1
     56e:	b2db      	uxtb	r3, r3
     570:	4619      	mov	r1, r3
     572:	4b08      	ldr	r3, [pc, #32]	; (594 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     574:	781a      	ldrb	r2, [r3, #0]
     576:	785b      	ldrb	r3, [r3, #1]
     578:	021b      	lsls	r3, r3, #8
     57a:	431a      	orrs	r2, r3
     57c:	2300      	movs	r3, #0
     57e:	f362 030f 	bfi	r3, r2, #0, #16
     582:	461a      	mov	r2, r3
     584:	6878      	ldr	r0, [r7, #4]
     586:	f000 f821 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     58a:	bf00      	nop
     58c:	3708      	adds	r7, #8
     58e:	46bd      	mov	sp, r7
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop
     594:	000081ec 	.word	0x000081ec

00000598 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
     5a0:	460b      	mov	r3, r1
     5a2:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     5a4:	78f9      	ldrb	r1, [r7, #3]
     5a6:	4b08      	ldr	r3, [pc, #32]	; (5c8 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     5a8:	781a      	ldrb	r2, [r3, #0]
     5aa:	785b      	ldrb	r3, [r3, #1]
     5ac:	021b      	lsls	r3, r3, #8
     5ae:	431a      	orrs	r2, r3
     5b0:	2300      	movs	r3, #0
     5b2:	f362 030f 	bfi	r3, r2, #0, #16
     5b6:	461a      	mov	r2, r3
     5b8:	6878      	ldr	r0, [r7, #4]
     5ba:	f000 f807 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     5be:	bf00      	nop
     5c0:	3708      	adds	r7, #8
     5c2:	46bd      	mov	sp, r7
     5c4:	bd80      	pop	{r7, pc}
     5c6:	bf00      	nop
     5c8:	000081f0 	.word	0x000081f0

000005cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	b087      	sub	sp, #28
     5d0:	af00      	add	r7, sp, #0
     5d2:	60f8      	str	r0, [r7, #12]
     5d4:	460b      	mov	r3, r1
     5d6:	80ba      	strh	r2, [r7, #4]
     5d8:	72fb      	strb	r3, [r7, #11]
     5da:	68fb      	ldr	r3, [r7, #12]
     5dc:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     5de:	4b19      	ldr	r3, [pc, #100]	; (644 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     5e0:	681c      	ldr	r4, [r3, #0]
     5e2:	693b      	ldr	r3, [r7, #16]
     5e4:	4618      	mov	r0, r3
     5e6:	f7ff ff4a 	bl	47e <sjsu::Pin::GetPort() const>
     5ea:	4603      	mov	r3, r0
     5ec:	461d      	mov	r5, r3
     5ee:	693b      	ldr	r3, [r7, #16]
     5f0:	4618      	mov	r0, r3
     5f2:	f7ff ff50 	bl	496 <sjsu::Pin::GetPin() const>
     5f6:	4603      	mov	r3, r0
     5f8:	461a      	mov	r2, r3
     5fa:	016b      	lsls	r3, r5, #5
     5fc:	4413      	add	r3, r2
     5fe:	009b      	lsls	r3, r3, #2
     600:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     602:	681b      	ldr	r3, [r3, #0]
     604:	7af9      	ldrb	r1, [r7, #11]
     606:	687a      	ldr	r2, [r7, #4]
     608:	4618      	mov	r0, r3
     60a:	f001 fe31 	bl	2270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     60e:	4605      	mov	r5, r0
     610:	68fb      	ldr	r3, [r7, #12]
     612:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     614:	4b0b      	ldr	r3, [pc, #44]	; (644 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     616:	681c      	ldr	r4, [r3, #0]
     618:	697b      	ldr	r3, [r7, #20]
     61a:	4618      	mov	r0, r3
     61c:	f7ff ff2f 	bl	47e <sjsu::Pin::GetPort() const>
     620:	4603      	mov	r3, r0
     622:	461e      	mov	r6, r3
     624:	697b      	ldr	r3, [r7, #20]
     626:	4618      	mov	r0, r3
     628:	f7ff ff35 	bl	496 <sjsu::Pin::GetPin() const>
     62c:	4603      	mov	r3, r0
     62e:	461a      	mov	r2, r3
     630:	0173      	lsls	r3, r6, #5
     632:	4413      	add	r3, r2
     634:	009b      	lsls	r3, r3, #2
     636:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     638:	601d      	str	r5, [r3, #0]
  }
     63a:	bf00      	nop
     63c:	371c      	adds	r7, #28
     63e:	46bd      	mov	sp, r7
     640:	bdf0      	pop	{r4, r5, r6, r7, pc}
     642:	bf00      	nop
     644:	10000d20 	.word	0x10000d20

00000648 <sjsu::Gpio::SetHigh() const>:

  // ==============================
  // Utility Methods
  // ==============================
  /// Set pin to HIGH voltage
  void SetHigh() const
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  {
    Set(State::kHigh);
     650:	687b      	ldr	r3, [r7, #4]
     652:	681b      	ldr	r3, [r3, #0]
     654:	3304      	adds	r3, #4
     656:	681b      	ldr	r3, [r3, #0]
     658:	2101      	movs	r1, #1
     65a:	6878      	ldr	r0, [r7, #4]
     65c:	4798      	blx	r3
  }
     65e:	bf00      	nop
     660:	3708      	adds	r7, #8
     662:	46bd      	mov	sp, r7
     664:	bd80      	pop	{r7, pc}

00000666 <sjsu::Gpio::SetLow() const>:
  /// Set pin to LOW voltage
  void SetLow() const
     666:	b580      	push	{r7, lr}
     668:	b082      	sub	sp, #8
     66a:	af00      	add	r7, sp, #0
     66c:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
     66e:	687b      	ldr	r3, [r7, #4]
     670:	681b      	ldr	r3, [r3, #0]
     672:	3304      	adds	r3, #4
     674:	681b      	ldr	r3, [r3, #0]
     676:	2100      	movs	r1, #0
     678:	6878      	ldr	r0, [r7, #4]
     67a:	4798      	blx	r3
  }
     67c:	bf00      	nop
     67e:	3708      	adds	r7, #8
     680:	46bd      	mov	sp, r7
     682:	bd80      	pop	{r7, pc}

00000684 <sjsu::Gpio::SetAsOutput() const>:
  void SetAsInput() const
  {
    SetDirection(Direction::kInput);
  }
  /// Set pin direction as output
  void SetAsOutput() const
     684:	b580      	push	{r7, lr}
     686:	b082      	sub	sp, #8
     688:	af00      	add	r7, sp, #0
     68a:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	681b      	ldr	r3, [r3, #0]
     690:	681b      	ldr	r3, [r3, #0]
     692:	2101      	movs	r1, #1
     694:	6878      	ldr	r0, [r7, #4]
     696:	4798      	blx	r3
  }
     698:	bf00      	nop
     69a:	3708      	adds	r7, #8
     69c:	46bd      	mov	sp, r7
     69e:	bd80      	pop	{r7, pc}

000006a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     6a0:	b480      	push	{r7}
     6a2:	b083      	sub	sp, #12
     6a4:	af00      	add	r7, sp, #0
     6a6:	6078      	str	r0, [r7, #4]
	{ return __r; }
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
     6ae:	4610      	mov	r0, r2
     6b0:	4619      	mov	r1, r3
     6b2:	370c      	adds	r7, #12
     6b4:	46bd      	mov	sp, r7
     6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ba:	4770      	bx	lr

000006bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     6bc:	b480      	push	{r7}
     6be:	b083      	sub	sp, #12
     6c0:	af00      	add	r7, sp, #0
     6c2:	6078      	str	r0, [r7, #4]
     6c4:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
     6cc:	6879      	ldr	r1, [r7, #4]
     6ce:	e9c1 2300 	strd	r2, r3, [r1]
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	4618      	mov	r0, r3
     6d6:	370c      	adds	r7, #12
     6d8:	46bd      	mov	sp, r7
     6da:	f85d 7b04 	ldr.w	r7, [sp], #4
     6de:	4770      	bx	lr

000006e0 <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	e9c7 0100 	strd	r0, r1, [r7]
     6ea:	e9d7 0100 	ldrd	r0, r1, [r7]
     6ee:	f006 fb79 	bl	6de4 <__aeabi_ul2f>
     6f2:	4602      	mov	r2, r0
     6f4:	f107 030c 	add.w	r3, r7, #12
     6f8:	ee00 2a10 	vmov	s0, r2
     6fc:	4618      	mov	r0, r3
     6fe:	f000 f805 	bl	70c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     702:	68fb      	ldr	r3, [r7, #12]
     704:	4618      	mov	r0, r3
     706:	3710      	adds	r7, #16
     708:	46bd      	mov	sp, r7
     70a:	bd80      	pop	{r7, pc}

0000070c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     70c:	b580      	push	{r7, lr}
     70e:	b082      	sub	sp, #8
     710:	af00      	add	r7, sp, #0
     712:	6078      	str	r0, [r7, #4]
     714:	ed87 0a00 	vstr	s0, [r7]
     718:	687b      	ldr	r3, [r7, #4]
     71a:	463a      	mov	r2, r7
     71c:	4611      	mov	r1, r2
     71e:	4618      	mov	r0, r3
     720:	f000 f805 	bl	72e <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     724:	687b      	ldr	r3, [r7, #4]
     726:	4618      	mov	r0, r3
     728:	3708      	adds	r7, #8
     72a:	46bd      	mov	sp, r7
     72c:	bd80      	pop	{r7, pc}

0000072e <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     72e:	b480      	push	{r7}
     730:	b083      	sub	sp, #12
     732:	af00      	add	r7, sp, #0
     734:	6078      	str	r0, [r7, #4]
     736:	6039      	str	r1, [r7, #0]
     738:	683b      	ldr	r3, [r7, #0]
     73a:	681a      	ldr	r2, [r3, #0]
     73c:	687b      	ldr	r3, [r7, #4]
     73e:	601a      	str	r2, [r3, #0]
     740:	687b      	ldr	r3, [r7, #4]
     742:	4618      	mov	r0, r3
     744:	370c      	adds	r7, #12
     746:	46bd      	mov	sp, r7
     748:	f85d 7b04 	ldr.w	r7, [sp], #4
     74c:	4770      	bx	lr

0000074e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     74e:	b580      	push	{r7, lr}
     750:	b082      	sub	sp, #8
     752:	af00      	add	r7, sp, #0
     754:	6078      	str	r0, [r7, #4]
     756:	ed87 0a00 	vstr	s0, [r7]
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	463a      	mov	r2, r7
     75e:	4611      	mov	r1, r2
     760:	4618      	mov	r0, r3
     762:	f7ff ffe4 	bl	72e <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     766:	687b      	ldr	r3, [r7, #4]
     768:	4618      	mov	r0, r3
     76a:	3708      	adds	r7, #8
     76c:	46bd      	mov	sp, r7
     76e:	bd80      	pop	{r7, pc}

00000770 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     770:	b580      	push	{r7, lr}
     772:	b086      	sub	sp, #24
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     778:	6878      	ldr	r0, [r7, #4]
     77a:	f000 f807 	bl	78c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     77e:	eef0 7a40 	vmov.f32	s15, s0
	}
     782:	eeb0 0a67 	vmov.f32	s0, s15
     786:	3718      	adds	r7, #24
     788:	46bd      	mov	sp, r7
     78a:	bd80      	pop	{r7, pc}

0000078c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     78c:	b480      	push	{r7}
     78e:	b085      	sub	sp, #20
     790:	af00      	add	r7, sp, #0
     792:	60f8      	str	r0, [r7, #12]
     794:	7239      	strb	r1, [r7, #8]
     796:	713a      	strb	r2, [r7, #4]
     798:	703b      	strb	r3, [r7, #0]
			return value;
     79a:	68fb      	ldr	r3, [r7, #12]
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	ee07 3a90 	vmov	s15, r3
		}
     7a2:	eeb0 0a67 	vmov.f32	s0, s15
     7a6:	3714      	adds	r7, #20
     7a8:	46bd      	mov	sp, r7
     7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     7ae:	4770      	bx	lr

000007b0 <sjsu::SystemController::GetPlatformController()>:
  static void SetPlatformController(SystemController * system_controller)
  {
    platform_system_controller = system_controller;
  }
  /// Retrieve a reference of the platforms system controller
  static sjsu::SystemController & GetPlatformController()
     7b0:	b480      	push	{r7}
     7b2:	af00      	add	r7, sp, #0
  {
    return *platform_system_controller;
     7b4:	4b03      	ldr	r3, [pc, #12]	; (7c4 <sjsu::SystemController::GetPlatformController()+0x14>)
     7b6:	681b      	ldr	r3, [r3, #0]
  }
     7b8:	4618      	mov	r0, r3
     7ba:	46bd      	mov	sp, r7
     7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c0:	4770      	bx	lr
     7c2:	bf00      	nop
     7c4:	10000d24 	.word	0x10000d24

000007c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     7c8:	b580      	push	{r7, lr}
     7ca:	b086      	sub	sp, #24
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
     7d0:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	3308      	adds	r3, #8
     7d8:	681b      	ldr	r3, [r3, #0]
     7da:	6839      	ldr	r1, [r7, #0]
     7dc:	6878      	ldr	r0, [r7, #4]
     7de:	4798      	blx	r3
     7e0:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     7e2:	f04f 0300 	mov.w	r3, #0
     7e6:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7e8:	697b      	ldr	r3, [r7, #20]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d00f      	beq.n	80e <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	681b      	ldr	r3, [r3, #0]
     7f2:	330c      	adds	r3, #12
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	6878      	ldr	r0, [r7, #4]
     7f8:	4798      	blx	r3
     7fa:	4603      	mov	r3, r0
     7fc:	613b      	str	r3, [r7, #16]
     7fe:	f107 0310 	add.w	r3, r7, #16
     802:	6979      	ldr	r1, [r7, #20]
     804:	4618      	mov	r0, r3
     806:	f001 fd46 	bl	2296 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     80a:	4603      	mov	r3, r0
     80c:	60fb      	str	r3, [r7, #12]
    }
    return result;
     80e:	68fb      	ldr	r3, [r7, #12]
  }
     810:	4618      	mov	r0, r3
     812:	3718      	adds	r7, #24
     814:	46bd      	mov	sp, r7
     816:	bd80      	pop	{r7, pc}

00000818 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
	_GLIBCXX17_CONSTEXPR duration
	operator--(int)
	{ return duration(__r--); }

	_GLIBCXX17_CONSTEXPR duration&
	operator+=(const duration& __d)
     818:	b5b0      	push	{r4, r5, r7, lr}
     81a:	b082      	sub	sp, #8
     81c:	af00      	add	r7, sp, #0
     81e:	6078      	str	r0, [r7, #4]
     820:	6039      	str	r1, [r7, #0]
	{
	  __r += __d.count();
     822:	6838      	ldr	r0, [r7, #0]
     824:	f7ff ff3c 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     828:	687b      	ldr	r3, [r7, #4]
     82a:	e9d3 2300 	ldrd	r2, r3, [r3]
     82e:	1884      	adds	r4, r0, r2
     830:	eb41 0503 	adc.w	r5, r1, r3
     834:	687b      	ldr	r3, [r7, #4]
     836:	e9c3 4500 	strd	r4, r5, [r3]
	  return *this;
     83a:	687b      	ldr	r3, [r7, #4]
	}
     83c:	4618      	mov	r0, r3
     83e:	3708      	adds	r7, #8
     840:	46bd      	mov	sp, r7
     842:	bdb0      	pop	{r4, r5, r7, pc}

00000844 <sjsu::DefaultUptime()>:
/// means to keep time. It should not be used in production.
///
/// @return the current number of fake uptime nanoseconds that increments each
/// time this function is called.
inline std::chrono::nanoseconds DefaultUptime()
{
     844:	b580      	push	{r7, lr}
     846:	b086      	sub	sp, #24
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
  static std::chrono::nanoseconds default_uptime = 0ns;
  default_uptime += 1us;
     84c:	f107 0310 	add.w	r3, r7, #16
     850:	4618      	mov	r0, r3
     852:	f001 fd3e 	bl	22d2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>
     856:	f107 0210 	add.w	r2, r7, #16
     85a:	f107 0308 	add.w	r3, r7, #8
     85e:	4611      	mov	r1, r2
     860:	4618      	mov	r0, r3
     862:	f001 fd43 	bl	22ec <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     866:	f107 0308 	add.w	r3, r7, #8
     86a:	4619      	mov	r1, r3
     86c:	4806      	ldr	r0, [pc, #24]	; (888 <sjsu::DefaultUptime()+0x44>)
     86e:	f7ff ffd3 	bl	818 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  return default_uptime;
     872:	6879      	ldr	r1, [r7, #4]
     874:	4b04      	ldr	r3, [pc, #16]	; (888 <sjsu::DefaultUptime()+0x44>)
     876:	e9d3 2300 	ldrd	r2, r3, [r3]
     87a:	e9c1 2300 	strd	r2, r3, [r1]
}
     87e:	6878      	ldr	r0, [r7, #4]
     880:	3718      	adds	r7, #24
     882:	46bd      	mov	sp, r7
     884:	bd80      	pop	{r7, pc}
     886:	bf00      	nop
     888:	10000d28 	.word	0x10000d28

0000088c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     88c:	b580      	push	{r7, lr}
     88e:	b082      	sub	sp, #8
     890:	af00      	add	r7, sp, #0
     892:	6078      	str	r0, [r7, #4]
     894:	687b      	ldr	r3, [r7, #4]
     896:	4618      	mov	r0, r3
     898:	f7ff fd98 	bl	3cc <std::_Function_base::~_Function_base()>
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	4618      	mov	r0, r3
     8a0:	3708      	adds	r7, #8
     8a2:	46bd      	mov	sp, r7
     8a4:	bd80      	pop	{r7, pc}
     8a6:	Address 0x00000000000008a6 is out of bounds.


000008a8 <sjsu::Gpio::Gpio()>:
class Gpio
     8a8:	b480      	push	{r7}
     8aa:	b083      	sub	sp, #12
     8ac:	af00      	add	r7, sp, #0
     8ae:	6078      	str	r0, [r7, #4]
     8b0:	4a04      	ldr	r2, [pc, #16]	; (8c4 <sjsu::Gpio::Gpio()+0x1c>)
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	601a      	str	r2, [r3, #0]
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	4618      	mov	r0, r3
     8ba:	370c      	adds	r7, #12
     8bc:	46bd      	mov	sp, r7
     8be:	f85d 7b04 	ldr.w	r7, [sp], #4
     8c2:	4770      	bx	lr
     8c4:	00008580 	.word	0x00008580

000008c8 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>:
  }
  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin)
     8c8:	b590      	push	{r4, r7, lr}
     8ca:	b083      	sub	sp, #12
     8cc:	af00      	add	r7, sp, #0
     8ce:	6078      	str	r0, [r7, #4]
     8d0:	460b      	mov	r3, r1
     8d2:	70fb      	strb	r3, [r7, #3]
     8d4:	4613      	mov	r3, r2
     8d6:	70bb      	strb	r3, [r7, #2]
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	78ba      	ldrb	r2, [r7, #2]
     8dc:	78f9      	ldrb	r1, [r7, #3]
     8de:	4618      	mov	r0, r3
     8e0:	f7ff fda4 	bl	42c <sjsu::Pin::Pin(unsigned char, unsigned char)>
     8e4:	4a07      	ldr	r2, [pc, #28]	; (904 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)+0x3c>)
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	601a      	str	r2, [r3, #0]
     8ea:	687c      	ldr	r4, [r7, #4]
     8ec:	78bb      	ldrb	r3, [r7, #2]
     8ee:	4618      	mov	r0, r3
     8f0:	f000 f8ac 	bl	a4c <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>
     8f4:	4603      	mov	r3, r0
     8f6:	80e3      	strh	r3, [r4, #6]
  {
  }
     8f8:	687b      	ldr	r3, [r7, #4]
     8fa:	4618      	mov	r0, r3
     8fc:	370c      	adds	r7, #12
     8fe:	46bd      	mov	sp, r7
     900:	bd90      	pop	{r4, r7, pc}
     902:	bf00      	nop
     904:	00008564 	.word	0x00008564

00000908 <sjsu::lpc17xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     908:	b480      	push	{r7}
     90a:	b083      	sub	sp, #12
     90c:	af00      	add	r7, sp, #0
     90e:	6078      	str	r0, [r7, #4]
     910:	bf00      	nop
     912:	370c      	adds	r7, #12
     914:	46bd      	mov	sp, r7
     916:	f85d 7b04 	ldr.w	r7, [sp], #4
     91a:	4770      	bx	lr

0000091c <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     91c:	b590      	push	{r4, r7, lr}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
     924:	460b      	mov	r3, r1
     926:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
     928:	6878      	ldr	r0, [r7, #4]
     92a:	f000 f8aa 	bl	a82 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     92e:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     930:	4b0b      	ldr	r3, [pc, #44]	; (960 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     932:	681b      	ldr	r3, [r3, #0]
     934:	68fa      	ldr	r2, [r7, #12]
     936:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
     93a:	4b09      	ldr	r3, [pc, #36]	; (960 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     93c:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     93e:	687b      	ldr	r3, [r7, #4]
     940:	78f9      	ldrb	r1, [r7, #3]
     942:	88da      	ldrh	r2, [r3, #6]
     944:	2300      	movs	r3, #0
     946:	f362 030f 	bfi	r3, r2, #0, #16
     94a:	461a      	mov	r2, r3
     94c:	f001 fc90 	bl	2270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     950:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
     952:	68fb      	ldr	r3, [r7, #12]
     954:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
     958:	bf00      	nop
     95a:	3714      	adds	r7, #20
     95c:	46bd      	mov	sp, r7
     95e:	bd90      	pop	{r4, r7, pc}
     960:	10000d40 	.word	0x10000d40

00000964 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	4603      	mov	r3, r0
     96c:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
     96e:	79fb      	ldrb	r3, [r7, #7]
}
     970:	4618      	mov	r0, r3
     972:	370c      	adds	r7, #12
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     97c:	b5b0      	push	{r4, r5, r7, lr}
     97e:	b084      	sub	sp, #16
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
     984:	460b      	mov	r3, r1
     986:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
     988:	6878      	ldr	r0, [r7, #4]
     98a:	f000 f87a 	bl	a82 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     98e:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
     990:	4b0f      	ldr	r3, [pc, #60]	; (9d0 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	68fa      	ldr	r2, [r7, #12]
     996:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
     99a:	78fb      	ldrb	r3, [r7, #3]
     99c:	4618      	mov	r0, r3
     99e:	f7ff ffe1 	bl	964 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
     9a2:	4603      	mov	r3, r0
     9a4:	461a      	mov	r2, r3
     9a6:	4b0b      	ldr	r3, [pc, #44]	; (9d4 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
     9a8:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
     9aa:	4b09      	ldr	r3, [pc, #36]	; (9d0 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     9ac:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	88da      	ldrh	r2, [r3, #6]
     9b2:	2300      	movs	r3, #0
     9b4:	f362 030f 	bfi	r3, r2, #0, #16
     9b8:	461a      	mov	r2, r3
     9ba:	4628      	mov	r0, r5
     9bc:	f001 fc58 	bl	2270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     9c0:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
     9c8:	bf00      	nop
     9ca:	3710      	adds	r7, #16
     9cc:	46bd      	mov	sp, r7
     9ce:	bdb0      	pop	{r4, r5, r7, pc}
     9d0:	10000d44 	.word	0x10000d44
     9d4:	000081f4 	.word	0x000081f4

000009d8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
     9d8:	b580      	push	{r7, lr}
     9da:	b082      	sub	sp, #8
     9dc:	af00      	add	r7, sp, #0
     9de:	6078      	str	r0, [r7, #4]
     9e0:	460b      	mov	r3, r1
     9e2:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
     9e4:	2357      	movs	r3, #87	; 0x57
     9e6:	4a04      	ldr	r2, [pc, #16]	; (9f8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
     9e8:	4904      	ldr	r1, [pc, #16]	; (9fc <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
     9ea:	4805      	ldr	r0, [pc, #20]	; (a00 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
     9ec:	f003 ff82 	bl	48f4 <printf>
  }
     9f0:	bf00      	nop
     9f2:	3708      	adds	r7, #8
     9f4:	46bd      	mov	sp, r7
     9f6:	bd80      	pop	{r7, pc}
     9f8:	00008200 	.word	0x00008200
     9fc:	000081f8 	.word	0x000081f8
     a00:	00008240 	.word	0x00008240

00000a04 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     a04:	b5b0      	push	{r4, r5, r7, lr}
     a06:	b084      	sub	sp, #16
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	460b      	mov	r3, r1
     a0e:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     a10:	4b0d      	ldr	r3, [pc, #52]	; (a48 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	687a      	ldr	r2, [r7, #4]
     a16:	7912      	ldrb	r2, [r2, #4]
     a18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     a20:	733b      	strb	r3, [r7, #12]
     a22:	2301      	movs	r3, #1
     a24:	737b      	strb	r3, [r7, #13]
     a26:	4b08      	ldr	r3, [pc, #32]	; (a48 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     a28:	681c      	ldr	r4, [r3, #0]
     a2a:	687b      	ldr	r3, [r7, #4]
     a2c:	791b      	ldrb	r3, [r3, #4]
     a2e:	461d      	mov	r5, r3
     a30:	78fb      	ldrb	r3, [r7, #3]
     a32:	68fa      	ldr	r2, [r7, #12]
     a34:	4619      	mov	r1, r3
     a36:	f001 fc9d 	bl	2374 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
     a3a:	4603      	mov	r3, r0
     a3c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
     a40:	bf00      	nop
     a42:	3710      	adds	r7, #16
     a44:	46bd      	mov	sp, r7
     a46:	bdb0      	pop	{r4, r5, r7, pc}
     a48:	10000d48 	.word	0x10000d48

00000a4c <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>:

 private:
  /// Utility function for generating bitmasks for specific pins.
  static constexpr bit::Mask GetPinsBitmask(uint8_t pin)
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	4603      	mov	r3, r0
     a54:	71fb      	strb	r3, [r7, #7]
  {
    return {
      .position = static_cast<uint8_t>((pin * 2) % kNumberOfPins),
     a56:	79fb      	ldrb	r3, [r7, #7]
     a58:	005b      	lsls	r3, r3, #1
     a5a:	b2db      	uxtb	r3, r3
     a5c:	f003 031e 	and.w	r3, r3, #30
     a60:	b2db      	uxtb	r3, r3
      .width    = 2,
    };
     a62:	733b      	strb	r3, [r7, #12]
     a64:	2302      	movs	r3, #2
     a66:	737b      	strb	r3, [r7, #13]
     a68:	2300      	movs	r3, #0
     a6a:	7b3a      	ldrb	r2, [r7, #12]
     a6c:	f362 0307 	bfi	r3, r2, #0, #8
     a70:	7b7a      	ldrb	r2, [r7, #13]
     a72:	f362 230f 	bfi	r3, r2, #8, #8
  }
     a76:	4618      	mov	r0, r3
     a78:	3714      	adds	r7, #20
     a7a:	46bd      	mov	sp, r7
     a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a80:	4770      	bx	lr

00000a82 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
     a82:	b480      	push	{r7}
     a84:	b085      	sub	sp, #20
     a86:	af00      	add	r7, sp, #0
     a88:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	795b      	ldrb	r3, [r3, #5]
     a8e:	2b0f      	cmp	r3, #15
     a90:	d901      	bls.n	a96 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
     a92:	2301      	movs	r3, #1
     a94:	e000      	b.n	a98 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
     a96:	2300      	movs	r3, #0
     a98:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	791b      	ldrb	r3, [r3, #4]
     a9e:	005b      	lsls	r3, r3, #1
     aa0:	461a      	mov	r2, r3
     aa2:	68fb      	ldr	r3, [r7, #12]
     aa4:	4413      	add	r3, r2
  }
     aa6:	4618      	mov	r0, r3
     aa8:	3714      	adds	r7, #20
     aaa:	46bd      	mov	sp, r7
     aac:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab0:	4770      	bx	lr
     ab2:	Address 0x0000000000000ab2 is out of bounds.


00000ab4 <sjsu::lpc40xx::Gpio::GpioRegister(int)>:
  /// @param port_index - which gpio port to get a pointer of.
  /// @return returns a pointer to a LPC_GPIO_TypeDef pointer internal to this
  /// function. The purpose for the double pointer nature is to allow test code
  /// to re-assign the lookup table contents simply by running this function and
  /// assigning the returned result to what ever block of memory you desire.
  static lpc40xx::LPC_GPIO_TypeDef ** GpioRegister(int port_index)
     ab4:	b480      	push	{r7}
     ab6:	b083      	sub	sp, #12
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[] = {
        lpc40xx::LPC_GPIO0, lpc40xx::LPC_GPIO1, lpc40xx::LPC_GPIO2,
        lpc40xx::LPC_GPIO3, lpc40xx::LPC_GPIO4, lpc40xx::LPC_GPIO5,
      };
     abc:	4b12      	ldr	r3, [pc, #72]	; (b08 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	f003 0301 	and.w	r3, r3, #1
     ac4:	2b00      	cmp	r3, #0
     ac6:	d114      	bne.n	af2 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x3e>
     ac8:	4a10      	ldr	r2, [pc, #64]	; (b0c <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x58>)
     aca:	4b11      	ldr	r3, [pc, #68]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     acc:	601a      	str	r2, [r3, #0]
     ace:	4a11      	ldr	r2, [pc, #68]	; (b14 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x60>)
     ad0:	4b0f      	ldr	r3, [pc, #60]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     ad2:	605a      	str	r2, [r3, #4]
     ad4:	4a10      	ldr	r2, [pc, #64]	; (b18 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x64>)
     ad6:	4b0e      	ldr	r3, [pc, #56]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     ad8:	609a      	str	r2, [r3, #8]
     ada:	4a10      	ldr	r2, [pc, #64]	; (b1c <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x68>)
     adc:	4b0c      	ldr	r3, [pc, #48]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     ade:	60da      	str	r2, [r3, #12]
     ae0:	4a0f      	ldr	r2, [pc, #60]	; (b20 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x6c>)
     ae2:	4b0b      	ldr	r3, [pc, #44]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     ae4:	611a      	str	r2, [r3, #16]
     ae6:	4a0f      	ldr	r2, [pc, #60]	; (b24 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x70>)
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     aea:	615a      	str	r2, [r3, #20]
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     aee:	2201      	movs	r2, #1
     af0:	601a      	str	r2, [r3, #0]
      return &port[port_index];
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	009b      	lsls	r3, r3, #2
     af6:	4a06      	ldr	r2, [pc, #24]	; (b10 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     af8:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[6];
      return &port[port_index];
    }
  }
     afa:	4618      	mov	r0, r3
     afc:	370c      	adds	r7, #12
     afe:	46bd      	mov	sp, r7
     b00:	f85d 7b04 	ldr.w	r7, [sp], #4
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	10001164 	.word	0x10001164
     b0c:	20098000 	.word	0x20098000
     b10:	1000114c 	.word	0x1000114c
     b14:	20098020 	.word	0x20098020
     b18:	20098040 	.word	0x20098040
     b1c:	20098060 	.word	0x20098060
     b20:	20098080 	.word	0x20098080
     b24:	200980a0 	.word	0x200980a0

00000b28 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>:
  ///
  /// @param interrupt_index - which interrupt port you want to work with. Only
  ///        0 and 1 are valid.
  /// @return returns a pointer to a GpioInterruptRegisterMap_t object internal
  /// to this function.
  static GpioInterruptRegisterMap_t * InterruptRegister(int interrupt_index)
     b28:	b480      	push	{r7}
     b2a:	b083      	sub	sp, #12
     b2c:	af00      	add	r7, sp, #0
     b2e:	6078      	str	r0, [r7, #4]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
        },
      };
     b30:	4b1a      	ldr	r3, [pc, #104]	; (b9c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	f003 0301 	and.w	r3, r3, #1
     b38:	2b00      	cmp	r3, #0
     b3a:	d122      	bne.n	b82 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x5a>
     b3c:	4b18      	ldr	r3, [pc, #96]	; (ba0 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO0IntStatR),
     b3e:	4a19      	ldr	r2, [pc, #100]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b40:	3204      	adds	r2, #4
      };
     b42:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO0IntStatF),
     b44:	4a17      	ldr	r2, [pc, #92]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b46:	3208      	adds	r2, #8
      };
     b48:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO0IntClr),
     b4a:	4a16      	ldr	r2, [pc, #88]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b4c:	320c      	adds	r2, #12
      };
     b4e:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO0IntEnR),
     b50:	4a14      	ldr	r2, [pc, #80]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b52:	3210      	adds	r2, #16
      };
     b54:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO0IntEnF),
     b56:	4a13      	ldr	r2, [pc, #76]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b58:	3214      	adds	r2, #20
      };
     b5a:	611a      	str	r2, [r3, #16]
     b5c:	3314      	adds	r3, #20
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO2IntStatR),
     b5e:	4a11      	ldr	r2, [pc, #68]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b60:	3224      	adds	r2, #36	; 0x24
      };
     b62:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
     b64:	4a0f      	ldr	r2, [pc, #60]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b66:	3228      	adds	r2, #40	; 0x28
      };
     b68:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
     b6a:	4a0e      	ldr	r2, [pc, #56]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b6c:	322c      	adds	r2, #44	; 0x2c
      };
     b6e:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
     b70:	4a0c      	ldr	r2, [pc, #48]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b72:	3230      	adds	r2, #48	; 0x30
      };
     b74:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
     b76:	4a0b      	ldr	r2, [pc, #44]	; (ba4 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b78:	3234      	adds	r2, #52	; 0x34
      };
     b7a:	611a      	str	r2, [r3, #16]
     b7c:	4b07      	ldr	r3, [pc, #28]	; (b9c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     b7e:	2201      	movs	r2, #1
     b80:	601a      	str	r2, [r3, #0]
      return &interrupt[interrupt_index];
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	4613      	mov	r3, r2
     b86:	009b      	lsls	r3, r3, #2
     b88:	4413      	add	r3, r2
     b8a:	009b      	lsls	r3, r3, #2
     b8c:	4a04      	ldr	r2, [pc, #16]	; (ba0 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
     b8e:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static GpioInterruptRegisterMap_t interrupt[kInterruptPorts];
      return &interrupt[interrupt_index];
    }
  }
     b90:	4618      	mov	r0, r3
     b92:	370c      	adds	r7, #12
     b94:	46bd      	mov	sp, r7
     b96:	f85d 7b04 	ldr.w	r7, [sp], #4
     b9a:	4770      	bx	lr
     b9c:	10001190 	.word	0x10001190
     ba0:	10001168 	.word	0x10001168
     ba4:	40028080 	.word	0x40028080

00000ba8 <sjsu::lpc40xx::Gpio::InterruptStatus()>:

  /// @return a pointer to the interrupt status register based on the current
  /// building platform.
  static volatile uint32_t * InterruptStatus()
     ba8:	b480      	push	{r7}
     baa:	af00      	add	r7, sp, #0
  {
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      return &lpc40xx::LPC_GPIOINT->IntStatus;
     bac:	4b02      	ldr	r3, [pc, #8]	; (bb8 <sjsu::lpc40xx::Gpio::InterruptStatus()+0x10>)
    else  // Used for unit testing
    {
      static volatile uint32_t status;
      return &status;
    }
  }
     bae:	4618      	mov	r0, r3
     bb0:	46bd      	mov	sp, r7
     bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb6:	4770      	bx	lr
     bb8:	40028080 	.word	0x40028080

00000bbc <sjsu::lpc40xx::Gpio::InterruptHandler()>:

  /// The gpio interrupt handler that calls the attached interrupt callbacks.
  static void InterruptHandler()
     bbc:	b580      	push	{r7, lr}
     bbe:	b084      	sub	sp, #16
     bc0:	af00      	add	r7, sp, #0
  {
    int triggered_port;
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      triggered_port = *InterruptStatus() >> 2;
     bc2:	f7ff fff1 	bl	ba8 <sjsu::lpc40xx::Gpio::InterruptStatus()>
     bc6:	4603      	mov	r3, r0
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	089b      	lsrs	r3, r3, #2
     bcc:	60fb      	str	r3, [r7, #12]
    else
    {
      triggered_port = *InterruptStatus() >> 2;
    }

    auto * interrupt  = InterruptRegister(triggered_port);
     bce:	68f8      	ldr	r0, [r7, #12]
     bd0:	f7ff ffaa 	bl	b28 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     bd4:	60b8      	str	r0, [r7, #8]
    int status        = *interrupt->rising_status | *interrupt->falling_status;
     bd6:	68bb      	ldr	r3, [r7, #8]
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	681a      	ldr	r2, [r3, #0]
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	685b      	ldr	r3, [r3, #4]
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	4313      	orrs	r3, r2
     be4:	607b      	str	r3, [r7, #4]
    int triggered_pin = __builtin_ctz(status);
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	fa93 f3a3 	rbit	r3, r3
     bec:	fab3 f383 	clz	r3, r3
     bf0:	603b      	str	r3, [r7, #0]

    handlers[triggered_port][triggered_pin]();
     bf2:	68fb      	ldr	r3, [r7, #12]
     bf4:	015a      	lsls	r2, r3, #5
     bf6:	683b      	ldr	r3, [r7, #0]
     bf8:	4413      	add	r3, r2
     bfa:	011b      	lsls	r3, r3, #4
     bfc:	4a0a      	ldr	r2, [pc, #40]	; (c28 <sjsu::lpc40xx::Gpio::InterruptHandler()+0x6c>)
     bfe:	4413      	add	r3, r2
     c00:	4618      	mov	r0, r3
     c02:	f001 fbd7 	bl	23b4 <std::function<void ()>::operator()() const>
    *interrupt->clear |= (1 << triggered_pin);
     c06:	68bb      	ldr	r3, [r7, #8]
     c08:	689b      	ldr	r3, [r3, #8]
     c0a:	681a      	ldr	r2, [r3, #0]
     c0c:	2101      	movs	r1, #1
     c0e:	683b      	ldr	r3, [r7, #0]
     c10:	fa01 f303 	lsl.w	r3, r1, r3
     c14:	4619      	mov	r1, r3
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	689b      	ldr	r3, [r3, #8]
     c1a:	430a      	orrs	r2, r1
     c1c:	601a      	str	r2, [r3, #0]
  }
     c1e:	bf00      	nop
     c20:	3710      	adds	r7, #16
     c22:	46bd      	mov	sp, r7
     c24:	bd80      	pop	{r7, pc}
     c26:	bf00      	nop
     c28:	10000d4c 	.word	0x10000d4c

00000c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>:
  /// For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  ///
  /// @param port_number - port number
  /// @param pin_number - pin number
  /// @param pin - pointer to an sjsu::Pin, keep as nullptr to ignore this a
  constexpr Gpio(uint8_t port_number,
     c2c:	b580      	push	{r7, lr}
     c2e:	b084      	sub	sp, #16
     c30:	af00      	add	r7, sp, #0
     c32:	60f8      	str	r0, [r7, #12]
     c34:	607b      	str	r3, [r7, #4]
     c36:	460b      	mov	r3, r1
     c38:	72fb      	strb	r3, [r7, #11]
     c3a:	4613      	mov	r3, r2
     c3c:	72bb      	strb	r3, [r7, #10]
      : kLpc17xxPin(port_number, pin_number),
        kLpc40xxPin(port_number, pin_number),
        pin_obj_(nullptr),
        gpio_port_(nullptr),
        pin_(pin_number),
        interrupt_index_(0)
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	4618      	mov	r0, r3
     c42:	f7ff fe31 	bl	8a8 <sjsu::Gpio::Gpio()>
     c46:	4a23      	ldr	r2, [pc, #140]	; (cd4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0xa8>)
     c48:	68fb      	ldr	r3, [r7, #12]
     c4a:	601a      	str	r2, [r3, #0]
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	3304      	adds	r3, #4
     c50:	7aba      	ldrb	r2, [r7, #10]
     c52:	7af9      	ldrb	r1, [r7, #11]
     c54:	4618      	mov	r0, r3
     c56:	f7ff fe37 	bl	8c8 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>
     c5a:	68fb      	ldr	r3, [r7, #12]
     c5c:	330c      	adds	r3, #12
     c5e:	7aba      	ldrb	r2, [r7, #10]
     c60:	7af9      	ldrb	r1, [r7, #11]
     c62:	4618      	mov	r0, r3
     c64:	f7ff fc24 	bl	4b0 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>
     c68:	68fb      	ldr	r3, [r7, #12]
     c6a:	2200      	movs	r2, #0
     c6c:	615a      	str	r2, [r3, #20]
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	2200      	movs	r2, #0
     c72:	619a      	str	r2, [r3, #24]
     c74:	68fb      	ldr	r3, [r7, #12]
     c76:	7aba      	ldrb	r2, [r7, #10]
     c78:	771a      	strb	r2, [r3, #28]
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	2200      	movs	r2, #0
     c7e:	775a      	strb	r2, [r3, #29]
  {
    // Assign pin object pointer
    if (pin == nullptr)
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	2b00      	cmp	r3, #0
     c84:	d105      	bne.n	c92 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x66>
    {
      if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
      {
        pin_obj_ = &kLpc40xxPin;
     c86:	68fb      	ldr	r3, [r7, #12]
     c88:	f103 020c 	add.w	r2, r3, #12
     c8c:	68fb      	ldr	r3, [r7, #12]
     c8e:	615a      	str	r2, [r3, #20]
     c90:	e002      	b.n	c98 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x6c>
        pin_obj_ = &sjsu::GetInactive<sjsu::Pin>();
      }
    }
    else
    {
      pin_obj_ = pin;
     c92:	68fb      	ldr	r3, [r7, #12]
     c94:	687a      	ldr	r2, [r7, #4]
     c96:	615a      	str	r2, [r3, #20]
    }

    // Assign interrupt_index_ pointer
    if (port_number == 2)
     c98:	7afb      	ldrb	r3, [r7, #11]
     c9a:	2b02      	cmp	r3, #2
     c9c:	d103      	bne.n	ca6 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x7a>
    {
      interrupt_index_ = 1;
     c9e:	68fb      	ldr	r3, [r7, #12]
     ca0:	2201      	movs	r2, #1
     ca2:	775a      	strb	r2, [r3, #29]
     ca4:	e009      	b.n	cba <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else if (port_number == 0)
     ca6:	7afb      	ldrb	r3, [r7, #11]
     ca8:	2b00      	cmp	r3, #0
     caa:	d103      	bne.n	cb4 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x88>
    {
      interrupt_index_ = 0;
     cac:	68fb      	ldr	r3, [r7, #12]
     cae:	2200      	movs	r2, #0
     cb0:	775a      	strb	r2, [r3, #29]
     cb2:	e002      	b.n	cba <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else
    {
      interrupt_index_ = kInterruptPorts;
     cb4:	68fb      	ldr	r3, [r7, #12]
     cb6:	2202      	movs	r2, #2
     cb8:	775a      	strb	r2, [r3, #29]
    }

    // Assign gpio port
    gpio_port_ = *GpioRegister(port_number);
     cba:	7afb      	ldrb	r3, [r7, #11]
     cbc:	4618      	mov	r0, r3
     cbe:	f7ff fef9 	bl	ab4 <sjsu::lpc40xx::Gpio::GpioRegister(int)>
     cc2:	4603      	mov	r3, r0
     cc4:	681a      	ldr	r2, [r3, #0]
     cc6:	68fb      	ldr	r3, [r7, #12]
     cc8:	619a      	str	r2, [r3, #24]
  }
     cca:	68fb      	ldr	r3, [r7, #12]
     ccc:	4618      	mov	r0, r3
     cce:	3710      	adds	r7, #16
     cd0:	46bd      	mov	sp, r7
     cd2:	bd80      	pop	{r7, pc}
     cd4:	00008540 	.word	0x00008540

00000cd8 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  void SetDirection(Direction direction) const override
     cd8:	b590      	push	{r4, r7, lr}
     cda:	b085      	sub	sp, #20
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
     ce0:	460b      	mov	r3, r1
     ce2:	70fb      	strb	r3, [r7, #3]
  {
    /// Pin function is zero fall pins on the LPC40xx and LPC17xx.
    constexpr uint8_t kGpioFunction = 0;
     ce4:	2300      	movs	r3, #0
     ce6:	73fb      	strb	r3, [r7, #15]
    pin_obj_->SetPinFunction(kGpioFunction);
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	695b      	ldr	r3, [r3, #20]
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	3304      	adds	r3, #4
     cf0:	681b      	ldr	r3, [r3, #0]
     cf2:	687a      	ldr	r2, [r7, #4]
     cf4:	6952      	ldr	r2, [r2, #20]
     cf6:	2100      	movs	r1, #0
     cf8:	4610      	mov	r0, r2
     cfa:	4798      	blx	r3

    if (direction == Direction::kInput)
     cfc:	78fb      	ldrb	r3, [r7, #3]
     cfe:	2b00      	cmp	r3, #0
     d00:	d10d      	bne.n	d1e <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x46>
    {
      gpio_port_->DIR = bit::Clear(gpio_port_->DIR, pin_);
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	699b      	ldr	r3, [r3, #24]
     d06:	681a      	ldr	r2, [r3, #0]
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	7f1b      	ldrb	r3, [r3, #28]
     d0c:	4619      	mov	r1, r3
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	699c      	ldr	r4, [r3, #24]
     d12:	4610      	mov	r0, r2
     d14:	f001 fb64 	bl	23e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     d18:	4603      	mov	r3, r0
     d1a:	6023      	str	r3, [r4, #0]
    }
    else
    {
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
    }
  }
     d1c:	e00c      	b.n	d38 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x60>
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	699b      	ldr	r3, [r3, #24]
     d22:	681a      	ldr	r2, [r3, #0]
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	7f1b      	ldrb	r3, [r3, #28]
     d28:	4619      	mov	r1, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	699c      	ldr	r4, [r3, #24]
     d2e:	4610      	mov	r0, r2
     d30:	f001 fb69 	bl	2406 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     d34:	4603      	mov	r3, r0
     d36:	6023      	str	r3, [r4, #0]
  }
     d38:	bf00      	nop
     d3a:	3714      	adds	r7, #20
     d3c:	46bd      	mov	sp, r7
     d3e:	bd90      	pop	{r4, r7, pc}

00000d40 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  void Set(State output = kHigh) const override
     d40:	b480      	push	{r7}
     d42:	b083      	sub	sp, #12
     d44:	af00      	add	r7, sp, #0
     d46:	6078      	str	r0, [r7, #4]
     d48:	460b      	mov	r3, r1
     d4a:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     d4c:	78fb      	ldrb	r3, [r7, #3]
     d4e:	2b01      	cmp	r3, #1
     d50:	d109      	bne.n	d66 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x26>
    {
      gpio_port_->SET = (1 << pin_);
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	7f1b      	ldrb	r3, [r3, #28]
     d56:	461a      	mov	r2, r3
     d58:	2301      	movs	r3, #1
     d5a:	fa03 f202 	lsl.w	r2, r3, r2
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	699b      	ldr	r3, [r3, #24]
     d62:	619a      	str	r2, [r3, #24]
    }
    else
    {
      gpio_port_->CLR = (1 << pin_);
    }
  }
     d64:	e008      	b.n	d78 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x38>
      gpio_port_->CLR = (1 << pin_);
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	7f1b      	ldrb	r3, [r3, #28]
     d6a:	461a      	mov	r2, r3
     d6c:	2301      	movs	r3, #1
     d6e:	fa03 f202 	lsl.w	r2, r3, r2
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	699b      	ldr	r3, [r3, #24]
     d76:	61da      	str	r2, [r3, #28]
  }
     d78:	bf00      	nop
     d7a:	370c      	adds	r7, #12
     d7c:	46bd      	mov	sp, r7
     d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
     d82:	4770      	bx	lr

00000d84 <sjsu::lpc40xx::Gpio::Toggle() const>:
  void Toggle() const override
     d84:	b480      	push	{r7}
     d86:	b083      	sub	sp, #12
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
  {
    gpio_port_->PIN ^= (1 << pin_);
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	699b      	ldr	r3, [r3, #24]
     d90:	695a      	ldr	r2, [r3, #20]
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	7f1b      	ldrb	r3, [r3, #28]
     d96:	4619      	mov	r1, r3
     d98:	2301      	movs	r3, #1
     d9a:	408b      	lsls	r3, r1
     d9c:	4619      	mov	r1, r3
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	699b      	ldr	r3, [r3, #24]
     da2:	404a      	eors	r2, r1
     da4:	615a      	str	r2, [r3, #20]
  }
     da6:	bf00      	nop
     da8:	370c      	adds	r7, #12
     daa:	46bd      	mov	sp, r7
     dac:	f85d 7b04 	ldr.w	r7, [sp], #4
     db0:	4770      	bx	lr

00000db2 <sjsu::lpc40xx::Gpio::Read() const>:
  bool Read() const override
     db2:	b580      	push	{r7, lr}
     db4:	b082      	sub	sp, #8
     db6:	af00      	add	r7, sp, #0
     db8:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port_->PIN, pin_);
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	699b      	ldr	r3, [r3, #24]
     dbe:	695a      	ldr	r2, [r3, #20]
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	7f1b      	ldrb	r3, [r3, #28]
     dc4:	4619      	mov	r1, r3
     dc6:	4610      	mov	r0, r2
     dc8:	f001 fb2f 	bl	242a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     dcc:	4603      	mov	r3, r0
  }
     dce:	4618      	mov	r0, r3
     dd0:	3708      	adds	r7, #8
     dd2:	46bd      	mov	sp, r7
     dd4:	bd80      	pop	{r7, pc}

00000dd6 <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     dd6:	b480      	push	{r7}
     dd8:	b083      	sub	sp, #12
     dda:	af00      	add	r7, sp, #0
     ddc:	6078      	str	r0, [r7, #4]
  {
    return *pin_obj_;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	695b      	ldr	r3, [r3, #20]
  }
     de2:	4618      	mov	r0, r3
     de4:	370c      	adds	r7, #12
     de6:	46bd      	mov	sp, r7
     de8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dec:	4770      	bx	lr

00000dee <std::function<void ()>::~function()>:
     dee:	b580      	push	{r7, lr}
     df0:	b082      	sub	sp, #8
     df2:	af00      	add	r7, sp, #0
     df4:	6078      	str	r0, [r7, #4]
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	4618      	mov	r0, r3
     dfa:	f7ff fae7 	bl	3cc <std::_Function_base::~_Function_base()>
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	4618      	mov	r0, r3
     e02:	3708      	adds	r7, #8
     e04:	46bd      	mov	sp, r7
     e06:	bd80      	pop	{r7, pc}

00000e08 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>:
  struct RegistrationInfo_t
     e08:	b580      	push	{r7, lr}
     e0a:	b082      	sub	sp, #8
     e0c:	af00      	add	r7, sp, #0
     e0e:	6078      	str	r0, [r7, #4]
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	3304      	adds	r3, #4
     e14:	4618      	mov	r0, r3
     e16:	f7ff ffea 	bl	dee <std::function<void ()>::~function()>
     e1a:	687b      	ldr	r3, [r7, #4]
     e1c:	4618      	mov	r0, r3
     e1e:	3708      	adds	r7, #8
     e20:	46bd      	mov	sp, r7
     e22:	bd80      	pop	{r7, pc}

00000e24 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>:

  /// Assign the developer's ISR and sets the selected edge that the gpio
  /// interrupt will be triggered on.
  void AttachInterrupt(InterruptCallback callback, Edge edge) override
     e24:	b5b0      	push	{r4, r5, r7, lr}
     e26:	b08c      	sub	sp, #48	; 0x30
     e28:	af00      	add	r7, sp, #0
     e2a:	60f8      	str	r0, [r7, #12]
     e2c:	60b9      	str	r1, [r7, #8]
     e2e:	4613      	mov	r3, r2
     e30:	71fb      	strb	r3, [r7, #7]
  {
    if (!IsAValidPort())
     e32:	68f8      	ldr	r0, [r7, #12]
     e34:	f000 f8a6 	bl	f84 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     e38:	4603      	mov	r3, r0
     e3a:	f083 0301 	eor.w	r3, r3, #1
     e3e:	b2db      	uxtb	r3, r3
     e40:	2b00      	cmp	r3, #0
     e42:	d155      	bne.n	ef0 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xcc>
          .interrupt_handler        = InterruptHandler,
      });
    }
    else  // For LPC40xx and host tests
    {
      sjsu::InterruptController::GetPlatformController().Enable({
     e44:	f7ff fae6 	bl	414 <sjsu::InterruptController::GetPlatformController()>
     e48:	4604      	mov	r4, r0
          .interrupt_request_number = lpc40xx::GPIO_IRQn,
          .interrupt_handler        = InterruptHandler,
      });
     e4a:	6823      	ldr	r3, [r4, #0]
     e4c:	3304      	adds	r3, #4
     e4e:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
     e50:	2326      	movs	r3, #38	; 0x26
     e52:	617b      	str	r3, [r7, #20]
     e54:	f107 0314 	add.w	r3, r7, #20
     e58:	3304      	adds	r3, #4
     e5a:	4927      	ldr	r1, [pc, #156]	; (ef8 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd4>)
     e5c:	4618      	mov	r0, r3
     e5e:	f001 fafb 	bl	2458 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
     e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e66:	62bb      	str	r3, [r7, #40]	; 0x28
     e68:	f107 0314 	add.w	r3, r7, #20
     e6c:	4619      	mov	r1, r3
     e6e:	4620      	mov	r0, r4
     e70:	47a8      	blx	r5
      });
     e72:	f107 0314 	add.w	r3, r7, #20
     e76:	4618      	mov	r0, r3
     e78:	f7ff ffc6 	bl	e08 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
    }

    handlers[interrupt_index_][pin_] = callback;
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	7f5b      	ldrb	r3, [r3, #29]
     e80:	4619      	mov	r1, r3
     e82:	68fb      	ldr	r3, [r7, #12]
     e84:	7f1b      	ldrb	r3, [r3, #28]
     e86:	461a      	mov	r2, r3
     e88:	014b      	lsls	r3, r1, #5
     e8a:	4413      	add	r3, r2
     e8c:	011b      	lsls	r3, r3, #4
     e8e:	4a1b      	ldr	r2, [pc, #108]	; (efc <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd8>)
     e90:	4413      	add	r3, r2
     e92:	68b9      	ldr	r1, [r7, #8]
     e94:	4618      	mov	r0, r3
     e96:	f001 fb09 	bl	24ac <std::function<void ()>::operator=(std::function<void ()> const&)>

    auto * interrupt = LocalInterruptRegister();
     e9a:	68f8      	ldr	r0, [r7, #12]
     e9c:	f000 f896 	bl	fcc <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeRising)
     ea2:	79fb      	ldrb	r3, [r7, #7]
     ea4:	2b02      	cmp	r3, #2
     ea6:	d002      	beq.n	eae <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0x8a>
     ea8:	79fb      	ldrb	r3, [r7, #7]
     eaa:	2b00      	cmp	r3, #0
     eac:	d10c      	bne.n	ec8 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xa4>
    {
      *interrupt->rising_enable = bit::Set(*interrupt->rising_enable, pin_);
     eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eb0:	68db      	ldr	r3, [r3, #12]
     eb2:	681a      	ldr	r2, [r3, #0]
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	7f1b      	ldrb	r3, [r3, #28]
     eb8:	4619      	mov	r1, r3
     eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ebc:	68dc      	ldr	r4, [r3, #12]
     ebe:	4610      	mov	r0, r2
     ec0:	f001 faa1 	bl	2406 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     ec4:	4603      	mov	r3, r0
     ec6:	6023      	str	r3, [r4, #0]
    }
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeFalling)
     ec8:	79fb      	ldrb	r3, [r7, #7]
     eca:	2b02      	cmp	r3, #2
     ecc:	d002      	beq.n	ed4 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xb0>
     ece:	79fb      	ldrb	r3, [r7, #7]
     ed0:	2b01      	cmp	r3, #1
     ed2:	d10e      	bne.n	ef2 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
    {
      *interrupt->falling_enable = bit::Set(*interrupt->falling_enable, pin_);
     ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ed6:	691b      	ldr	r3, [r3, #16]
     ed8:	681a      	ldr	r2, [r3, #0]
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	7f1b      	ldrb	r3, [r3, #28]
     ede:	4619      	mov	r1, r3
     ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ee2:	691c      	ldr	r4, [r3, #16]
     ee4:	4610      	mov	r0, r2
     ee6:	f001 fa8e 	bl	2406 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     eea:	4603      	mov	r3, r0
     eec:	6023      	str	r3, [r4, #0]
     eee:	e000      	b.n	ef2 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
      return;
     ef0:	bf00      	nop
    }
  }
     ef2:	3730      	adds	r7, #48	; 0x30
     ef4:	46bd      	mov	sp, r7
     ef6:	bdb0      	pop	{r4, r5, r7, pc}
     ef8:	00000bbd 	.word	0x00000bbd
     efc:	10000d4c 	.word	0x10000d4c

00000f00 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  /// Removes the developer's ISR and clears the selected edge of the gpio
  /// interrupt from being triggered.
  void DetachInterrupt() const override
     f00:	b590      	push	{r4, r7, lr}
     f02:	b085      	sub	sp, #20
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
  {
    if (!IsAValidPort())
     f08:	6878      	ldr	r0, [r7, #4]
     f0a:	f000 f83b 	bl	f84 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     f0e:	4603      	mov	r3, r0
     f10:	f083 0301 	eor.w	r3, r3, #1
     f14:	b2db      	uxtb	r3, r3
     f16:	2b00      	cmp	r3, #0
     f18:	d12d      	bne.n	f76 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x76>
    {
      return;
    }

    handlers[interrupt_index_][pin_] = nullptr;
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	7f5b      	ldrb	r3, [r3, #29]
     f1e:	4619      	mov	r1, r3
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	7f1b      	ldrb	r3, [r3, #28]
     f24:	461a      	mov	r2, r3
     f26:	014b      	lsls	r3, r1, #5
     f28:	4413      	add	r3, r2
     f2a:	011b      	lsls	r3, r3, #4
     f2c:	4a14      	ldr	r2, [pc, #80]	; (f80 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x80>)
     f2e:	4413      	add	r3, r2
     f30:	2100      	movs	r1, #0
     f32:	4618      	mov	r0, r3
     f34:	f001 fad5 	bl	24e2 <std::function<void ()>::operator=(decltype(nullptr))>

    auto * interrupt           = LocalInterruptRegister();
     f38:	6878      	ldr	r0, [r7, #4]
     f3a:	f000 f847 	bl	fcc <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     f3e:	60f8      	str	r0, [r7, #12]
    *interrupt->rising_enable  = bit::Clear(*interrupt->rising_enable, pin_);
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	68db      	ldr	r3, [r3, #12]
     f44:	681a      	ldr	r2, [r3, #0]
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	7f1b      	ldrb	r3, [r3, #28]
     f4a:	4619      	mov	r1, r3
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	68dc      	ldr	r4, [r3, #12]
     f50:	4610      	mov	r0, r2
     f52:	f001 fa45 	bl	23e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     f56:	4603      	mov	r3, r0
     f58:	6023      	str	r3, [r4, #0]
    *interrupt->falling_enable = bit::Clear(*interrupt->falling_enable, pin_);
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	691b      	ldr	r3, [r3, #16]
     f5e:	681a      	ldr	r2, [r3, #0]
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	7f1b      	ldrb	r3, [r3, #28]
     f64:	4619      	mov	r1, r3
     f66:	68fb      	ldr	r3, [r7, #12]
     f68:	691c      	ldr	r4, [r3, #16]
     f6a:	4610      	mov	r0, r2
     f6c:	f001 fa38 	bl	23e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     f70:	4603      	mov	r3, r0
     f72:	6023      	str	r3, [r4, #0]
     f74:	e000      	b.n	f78 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x78>
      return;
     f76:	bf00      	nop
  }
     f78:	3714      	adds	r7, #20
     f7a:	46bd      	mov	sp, r7
     f7c:	bd90      	pop	{r4, r7, pc}
     f7e:	bf00      	nop
     f80:	10000d4c 	.word	0x10000d4c

00000f84 <sjsu::lpc40xx::Gpio::IsAValidPort() const>:

 private:
  /// Checks if the selected gpio port is valid for external interrupts.
  bool IsAValidPort() const
     f84:	b580      	push	{r7, lr}
     f86:	b084      	sub	sp, #16
     f88:	af00      	add	r7, sp, #0
     f8a:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = !(interrupt_index_ == kInterruptPorts);
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	7f5b      	ldrb	r3, [r3, #29]
     f90:	2b02      	cmp	r3, #2
     f92:	bf14      	ite	ne
     f94:	2301      	movne	r3, #1
     f96:	2300      	moveq	r3, #0
     f98:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(
     f9a:	7bfb      	ldrb	r3, [r7, #15]
     f9c:	f083 0301 	eor.w	r3, r3, #1
     fa0:	b2db      	uxtb	r3, r3
     fa2:	2b00      	cmp	r3, #0
     fa4:	d006      	beq.n	fb4 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x30>
     fa6:	f44f 73a5 	mov.w	r3, #330	; 0x14a
     faa:	4a05      	ldr	r2, [pc, #20]	; (fc0 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x3c>)
     fac:	4905      	ldr	r1, [pc, #20]	; (fc4 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x40>)
     fae:	4806      	ldr	r0, [pc, #24]	; (fc8 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x44>)
     fb0:	f003 fca0 	bl	48f4 <printf>
        is_valid,
        "This gpio port cannot be used for External Interrupts. Need "
        "to use GPIOs on Port 0 or 2.");
    return is_valid;
     fb4:	7bfb      	ldrb	r3, [r7, #15]
  }
     fb6:	4618      	mov	r0, r3
     fb8:	3710      	adds	r7, #16
     fba:	46bd      	mov	sp, r7
     fbc:	bd80      	pop	{r7, pc}
     fbe:	bf00      	nop
     fc0:	00008290 	.word	0x00008290
     fc4:	00008428 	.word	0x00008428
     fc8:	000082c0 	.word	0x000082c0

00000fcc <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>:

  GpioInterruptRegisterMap_t * LocalInterruptRegister() const
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
  {
    return InterruptRegister(interrupt_index_);
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	7f5b      	ldrb	r3, [r3, #29]
     fd8:	4618      	mov	r0, r3
     fda:	f7ff fda5 	bl	b28 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     fde:	4603      	mov	r3, r0
  }
     fe0:	4618      	mov	r0, r3
     fe2:	3708      	adds	r7, #8
     fe4:	46bd      	mov	sp, r7
     fe6:	bd80      	pop	{r7, pc}

00000fe8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr unit_t(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept :
     fe8:	b590      	push	{r4, r7, lr}
     fea:	b085      	sub	sp, #20
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
     ff0:	6039      	str	r1, [r7, #0]
		nls(units::convert<UnitsRhs, Units, T>(rhs.m_value), std::true_type() /*store linear value*/)
     ff2:	687c      	ldr	r4, [r7, #4]
     ff4:	683b      	ldr	r3, [r7, #0]
     ff6:	4618      	mov	r0, r3
     ff8:	f000 f822 	bl	1040 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     ffc:	eef0 7a40 	vmov.f32	s15, s0
    1000:	edc7 7a02 	vstr	s15, [r7, #8]
    1004:	f107 020c 	add.w	r2, r7, #12
    1008:	f107 0308 	add.w	r3, r7, #8
    100c:	4619      	mov	r1, r3
    100e:	4620      	mov	r0, r4
    1010:	f000 f805 	bl	101e <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>
		}
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	4618      	mov	r0, r3
    1018:	3714      	adds	r7, #20
    101a:	46bd      	mov	sp, r7
    101c:	bd90      	pop	{r4, r7, pc}

0000101e <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    101e:	b480      	push	{r7}
    1020:	b085      	sub	sp, #20
    1022:	af00      	add	r7, sp, #0
    1024:	60f8      	str	r0, [r7, #12]
    1026:	60b9      	str	r1, [r7, #8]
    1028:	607a      	str	r2, [r7, #4]
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	681a      	ldr	r2, [r3, #0]
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	601a      	str	r2, [r3, #0]
    1032:	68fb      	ldr	r3, [r7, #12]
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    1040:	b580      	push	{r7, lr}
    1042:	b086      	sub	sp, #24
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    1048:	6878      	ldr	r0, [r7, #4]
    104a:	f000 f807 	bl	105c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    104e:	eef0 7a40 	vmov.f32	s15, s0
	}
    1052:	eeb0 0a67 	vmov.f32	s0, s15
    1056:	3718      	adds	r7, #24
    1058:	46bd      	mov	sp, r7
    105a:	bd80      	pop	{r7, pc}

0000105c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    105c:	b480      	push	{r7}
    105e:	b085      	sub	sp, #20
    1060:	af00      	add	r7, sp, #0
    1062:	60f8      	str	r0, [r7, #12]
    1064:	7239      	strb	r1, [r7, #8]
    1066:	713a      	strb	r2, [r7, #4]
    1068:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	edd3 7a00 	vldr	s15, [r3]
    1070:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1088 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    1074:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    1078:	eeb0 0a67 	vmov.f32	s0, s15
    107c:	3714      	adds	r7, #20
    107e:	46bd      	mov	sp, r7
    1080:	f85d 7b04 	ldr.w	r7, [sp], #4
    1084:	4770      	bx	lr
    1086:	bf00      	nop
    1088:	49742400 	.word	0x49742400

0000108c <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    108c:	b480      	push	{r7}
    108e:	b083      	sub	sp, #12
    1090:	af00      	add	r7, sp, #0
    1092:	6078      	str	r0, [r7, #4]
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	681b      	ldr	r3, [r3, #0]
    1098:	ee07 3a90 	vmov	s15, r3
    109c:	eeb0 0a67 	vmov.f32	s0, s15
    10a0:	370c      	adds	r7, #12
    10a2:	46bd      	mov	sp, r7
    10a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10a8:	4770      	bx	lr
    10aa:	Address 0x00000000000010aa is out of bounds.


000010ac <sjsu::lpc40xx::Spi::Initialize() const>:
  explicit constexpr Spi(const Bus_t & bus) : bus_(bus) {}
  /// This METHOD MUST BE EXECUTED before any other method can be called.
  /// Powers on the peripheral, activates the SSP pins and enables the SSP
  /// peripheral.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  Status Initialize() const override
    10ac:	b590      	push	{r4, r7, lr}
    10ae:	b085      	sub	sp, #20
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
  {
    constexpr uint8_t kSpiFormatCode = 0b00;
    10b4:	2300      	movs	r3, #0
    10b6:	73fb      	strb	r3, [r7, #15]

    // Power up peripheral
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    10b8:	f7ff fb7a 	bl	7b0 <sjsu::SystemController::GetPlatformController()>
    10bc:	4603      	mov	r3, r0
        bus_.power_on_bit);
    10be:	681a      	ldr	r2, [r3, #0]
    10c0:	3214      	adds	r2, #20
    10c2:	6812      	ldr	r2, [r2, #0]
    10c4:	6879      	ldr	r1, [r7, #4]
    10c6:	6849      	ldr	r1, [r1, #4]
    10c8:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    10ca:	4618      	mov	r0, r3
    10cc:	4790      	blx	r2
    // Enable SSP pins
    bus_.mosi.SetPinFunction(bus_.pin_function_id);
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	685b      	ldr	r3, [r3, #4]
    10d2:	689b      	ldr	r3, [r3, #8]
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	3304      	adds	r3, #4
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	687a      	ldr	r2, [r7, #4]
    10dc:	6852      	ldr	r2, [r2, #4]
    10de:	6890      	ldr	r0, [r2, #8]
    10e0:	687a      	ldr	r2, [r7, #4]
    10e2:	6852      	ldr	r2, [r2, #4]
    10e4:	7d12      	ldrb	r2, [r2, #20]
    10e6:	4611      	mov	r1, r2
    10e8:	4798      	blx	r3
    bus_.miso.SetPinFunction(bus_.pin_function_id);
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	685b      	ldr	r3, [r3, #4]
    10ee:	68db      	ldr	r3, [r3, #12]
    10f0:	681b      	ldr	r3, [r3, #0]
    10f2:	3304      	adds	r3, #4
    10f4:	681b      	ldr	r3, [r3, #0]
    10f6:	687a      	ldr	r2, [r7, #4]
    10f8:	6852      	ldr	r2, [r2, #4]
    10fa:	68d0      	ldr	r0, [r2, #12]
    10fc:	687a      	ldr	r2, [r7, #4]
    10fe:	6852      	ldr	r2, [r2, #4]
    1100:	7d12      	ldrb	r2, [r2, #20]
    1102:	4611      	mov	r1, r2
    1104:	4798      	blx	r3
    bus_.sck.SetPinFunction(bus_.pin_function_id);
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	685b      	ldr	r3, [r3, #4]
    110a:	691b      	ldr	r3, [r3, #16]
    110c:	681b      	ldr	r3, [r3, #0]
    110e:	3304      	adds	r3, #4
    1110:	681b      	ldr	r3, [r3, #0]
    1112:	687a      	ldr	r2, [r7, #4]
    1114:	6852      	ldr	r2, [r2, #4]
    1116:	6910      	ldr	r0, [r2, #16]
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	6852      	ldr	r2, [r2, #4]
    111c:	7d12      	ldrb	r2, [r2, #20]
    111e:	4611      	mov	r1, r2
    1120:	4798      	blx	r3
    // Set SSP frame format to SPI
    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, kSpiFormatCode, ControlRegister0::kFrameBit);
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	685b      	ldr	r3, [r3, #4]
    1126:	681b      	ldr	r3, [r3, #0]
    1128:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 = bit::Insert(
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	685b      	ldr	r3, [r3, #4]
    112e:	681c      	ldr	r4, [r3, #0]
    1130:	4b1d      	ldr	r3, [pc, #116]	; (11a8 <sjsu::lpc40xx::Spi::Initialize() const+0xfc>)
    1132:	781a      	ldrb	r2, [r3, #0]
    1134:	785b      	ldrb	r3, [r3, #1]
    1136:	021b      	lsls	r3, r3, #8
    1138:	431a      	orrs	r2, r3
    113a:	2300      	movs	r3, #0
    113c:	f362 030f 	bfi	r3, r2, #0, #16
    1140:	461a      	mov	r2, r3
    1142:	2100      	movs	r1, #0
    1144:	f001 f894 	bl	2270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1148:	4603      	mov	r3, r0
    114a:	6023      	str	r3, [r4, #0]
    // Set SPI to master mode by clearing
    bus_.registers->CR1 =
        bit::Clear(bus_.registers->CR1, ControlRegister1::kSlaveModeBit);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	685b      	ldr	r3, [r3, #4]
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	6858      	ldr	r0, [r3, #4]
    bus_.registers->CR1 =
    1154:	687b      	ldr	r3, [r7, #4]
    1156:	685b      	ldr	r3, [r3, #4]
    1158:	681c      	ldr	r4, [r3, #0]
        bit::Clear(bus_.registers->CR1, ControlRegister1::kSlaveModeBit);
    115a:	4b14      	ldr	r3, [pc, #80]	; (11ac <sjsu::lpc40xx::Spi::Initialize() const+0x100>)
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	785b      	ldrb	r3, [r3, #1]
    1160:	021b      	lsls	r3, r3, #8
    1162:	431a      	orrs	r2, r3
    1164:	2300      	movs	r3, #0
    1166:	f362 030f 	bfi	r3, r2, #0, #16
    116a:	4619      	mov	r1, r3
    116c:	f001 f9d3 	bl	2516 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1170:	4603      	mov	r3, r0
    bus_.registers->CR1 =
    1172:	6063      	str	r3, [r4, #4]
    // Enable SSP
    bus_.registers->CR1 =
        bit::Set(bus_.registers->CR1, ControlRegister1::kSpiEnable);
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	685b      	ldr	r3, [r3, #4]
    1178:	681b      	ldr	r3, [r3, #0]
    117a:	6858      	ldr	r0, [r3, #4]
    bus_.registers->CR1 =
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	685b      	ldr	r3, [r3, #4]
    1180:	681c      	ldr	r4, [r3, #0]
        bit::Set(bus_.registers->CR1, ControlRegister1::kSpiEnable);
    1182:	4b0b      	ldr	r3, [pc, #44]	; (11b0 <sjsu::lpc40xx::Spi::Initialize() const+0x104>)
    1184:	781a      	ldrb	r2, [r3, #0]
    1186:	785b      	ldrb	r3, [r3, #1]
    1188:	021b      	lsls	r3, r3, #8
    118a:	431a      	orrs	r2, r3
    118c:	2300      	movs	r3, #0
    118e:	f362 030f 	bfi	r3, r2, #0, #16
    1192:	4619      	mov	r1, r3
    1194:	f001 f9ce 	bl	2534 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1198:	4603      	mov	r3, r0
    bus_.registers->CR1 =
    119a:	6063      	str	r3, [r4, #4]
    return Status::kSuccess;
    119c:	2300      	movs	r3, #0
  }
    119e:	4618      	mov	r0, r3
    11a0:	3714      	adds	r7, #20
    11a2:	46bd      	mov	sp, r7
    11a4:	bd90      	pop	{r4, r7, pc}
    11a6:	bf00      	nop
    11a8:	00008468 	.word	0x00008468
    11ac:	0000847c 	.word	0x0000847c
    11b0:	00008478 	.word	0x00008478

000011b4 <sjsu::lpc40xx::Spi::IsBusBusy() const>:
  }

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsBusBusy() const
    11b4:	b580      	push	{r7, lr}
    11b6:	b082      	sub	sp, #8
    11b8:	af00      	add	r7, sp, #0
    11ba:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(bus_.registers->SR, StatusRegister::kDataLineBusyBit);
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	685b      	ldr	r3, [r3, #4]
    11c0:	681b      	ldr	r3, [r3, #0]
    11c2:	68d8      	ldr	r0, [r3, #12]
    11c4:	4b07      	ldr	r3, [pc, #28]	; (11e4 <sjsu::lpc40xx::Spi::IsBusBusy() const+0x30>)
    11c6:	781a      	ldrb	r2, [r3, #0]
    11c8:	785b      	ldrb	r3, [r3, #1]
    11ca:	021b      	lsls	r3, r3, #8
    11cc:	431a      	orrs	r2, r3
    11ce:	2300      	movs	r3, #0
    11d0:	f362 030f 	bfi	r3, r2, #0, #16
    11d4:	4619      	mov	r1, r3
    11d6:	f001 f9bc 	bl	2552 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    11da:	4603      	mov	r3, r0
  }
    11dc:	4618      	mov	r0, r3
    11de:	3708      	adds	r7, #8
    11e0:	46bd      	mov	sp, r7
    11e2:	bd80      	pop	{r7, pc}
    11e4:	00008480 	.word	0x00008480

000011e8 <sjsu::lpc40xx::Spi::Transfer(unsigned short) const>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) const override
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	6078      	str	r0, [r7, #4]
    11f0:	460b      	mov	r3, r1
    11f2:	807b      	strh	r3, [r7, #2]
  {
    bus_.registers->DR = data;
    11f4:	687b      	ldr	r3, [r7, #4]
    11f6:	685b      	ldr	r3, [r3, #4]
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	887a      	ldrh	r2, [r7, #2]
    11fc:	609a      	str	r2, [r3, #8]
    while (IsBusBusy())
    11fe:	6878      	ldr	r0, [r7, #4]
    1200:	f7ff ffd8 	bl	11b4 <sjsu::lpc40xx::Spi::IsBusBusy() const>
    1204:	4603      	mov	r3, r0
    1206:	2b00      	cmp	r3, #0
    1208:	d001      	beq.n	120e <sjsu::lpc40xx::Spi::Transfer(unsigned short) const+0x26>
    {
      continue;
    120a:	bf00      	nop
    while (IsBusBusy())
    120c:	e7f7      	b.n	11fe <sjsu::lpc40xx::Spi::Transfer(unsigned short) const+0x16>
    }
    return static_cast<uint16_t>(bus_.registers->DR);
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	685b      	ldr	r3, [r3, #4]
    1212:	681b      	ldr	r3, [r3, #0]
    1214:	689b      	ldr	r3, [r3, #8]
    1216:	b29b      	uxth	r3, r3
  }
    1218:	4618      	mov	r0, r3
    121a:	3708      	adds	r7, #8
    121c:	46bd      	mov	sp, r7
    121e:	bd80      	pop	{r7, pc}

00001220 <auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)>:
constexpr auto Value(Enum enum_type_value)
    1220:	b480      	push	{r7}
    1222:	b083      	sub	sp, #12
    1224:	af00      	add	r7, sp, #0
    1226:	4603      	mov	r3, r0
    1228:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    122a:	79fb      	ldrb	r3, [r7, #7]
}
    122c:	4618      	mov	r0, r3
    122e:	370c      	adds	r7, #12
    1230:	46bd      	mov	sp, r7
    1232:	f85d 7b04 	ldr.w	r7, [sp], #4
    1236:	4770      	bx	lr

00001238 <sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const>:

  /// Sets the various modes for the Peripheral
  /// @param size - number of bits per frame
  void SetDataSize(DataSize size) const override
    1238:	b590      	push	{r4, r7, lr}
    123a:	b085      	sub	sp, #20
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
    1240:	460b      	mov	r3, r1
    1242:	70fb      	strb	r3, [r7, #3]
  {
    // NOTE: In UM10562 page 611, you will see that DSS (Data Size Select) is
    // equal to the bit transfer minus 1. So we can add 3 to our DataSize enum
    // to get the appropriate tranfer code.
    constexpr uint8_t kBitTransferCodeOffset = 3;
    1244:	2303      	movs	r3, #3
    1246:	73fb      	strb	r3, [r7, #15]
    uint8_t size_code =
        static_cast<uint8_t>(Value(size) + kBitTransferCodeOffset);
    1248:	78fb      	ldrb	r3, [r7, #3]
    124a:	4618      	mov	r0, r3
    124c:	f7ff ffe8 	bl	1220 <auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)>
    1250:	4603      	mov	r3, r0
    1252:	3303      	adds	r3, #3
    1254:	73bb      	strb	r3, [r7, #14]

    bus_.registers->CR0 =
        bit::Insert(bus_.registers->CR0, size_code, ControlRegister0::kDataBit);
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	685b      	ldr	r3, [r3, #4]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 =
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	685b      	ldr	r3, [r3, #4]
    1262:	681c      	ldr	r4, [r3, #0]
        bit::Insert(bus_.registers->CR0, size_code, ControlRegister0::kDataBit);
    1264:	4b08      	ldr	r3, [pc, #32]	; (1288 <sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const+0x50>)
    1266:	7bb9      	ldrb	r1, [r7, #14]
    1268:	781a      	ldrb	r2, [r3, #0]
    126a:	785b      	ldrb	r3, [r3, #1]
    126c:	021b      	lsls	r3, r3, #8
    126e:	431a      	orrs	r2, r3
    1270:	2300      	movs	r3, #0
    1272:	f362 030f 	bfi	r3, r2, #0, #16
    1276:	461a      	mov	r2, r3
    1278:	f000 fffa 	bl	2270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    127c:	4603      	mov	r3, r0
    bus_.registers->CR0 =
    127e:	6023      	str	r3, [r4, #0]
  }
    1280:	bf00      	nop
    1282:	3714      	adds	r7, #20
    1284:	46bd      	mov	sp, r7
    1286:	bd90      	pop	{r4, r7, pc}
    1288:	00008464 	.word	0x00008464

0000128c <unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const>:
		inline constexpr Ty to() const noexcept
    128c:	b580      	push	{r7, lr}
    128e:	b082      	sub	sp, #8
    1290:	af00      	add	r7, sp, #0
    1292:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1294:	6878      	ldr	r0, [r7, #4]
    1296:	f001 f96b 	bl	2570 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    129a:	4603      	mov	r3, r0
		}
    129c:	4618      	mov	r0, r3
    129e:	3708      	adds	r7, #8
    12a0:	46bd      	mov	sp, r7
    12a2:	bd80      	pop	{r7, pc}

000012a4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    12a4:	b580      	push	{r7, lr}
    12a6:	ed2d 8b02 	vpush	{d8}
    12aa:	b084      	sub	sp, #16
    12ac:	af00      	add	r7, sp, #0
    12ae:	6078      	str	r0, [r7, #4]
    12b0:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	4618      	mov	r0, r3
    12b6:	f7ff fee9 	bl	108c <units::linear_scale<float>::operator()() const>
    12ba:	eeb0 8a40 	vmov.f32	s16, s0
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	4618      	mov	r0, r3
    12c2:	f7ff fee3 	bl	108c <units::linear_scale<float>::operator()() const>
    12c6:	eef0 7a40 	vmov.f32	s15, s0
    12ca:	edc7 7a03 	vstr	s15, [r7, #12]
    12ce:	f107 030c 	add.w	r3, r7, #12
    12d2:	4618      	mov	r0, r3
    12d4:	f7ff fa4c 	bl	770 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    12d8:	eeb0 7a40 	vmov.f32	s14, s0
    12dc:	eec8 7a07 	vdiv.f32	s15, s16, s14
    12e0:	f107 0308 	add.w	r3, r7, #8
    12e4:	eeb0 0a67 	vmov.f32	s0, s15
    12e8:	4618      	mov	r0, r3
    12ea:	f000 f807 	bl	12fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    12ee:	68bb      	ldr	r3, [r7, #8]
	}
    12f0:	4618      	mov	r0, r3
    12f2:	3710      	adds	r7, #16
    12f4:	46bd      	mov	sp, r7
    12f6:	ecbd 8b02 	vpop	{d8}
    12fa:	bd80      	pop	{r7, pc}

000012fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    12fc:	b580      	push	{r7, lr}
    12fe:	b082      	sub	sp, #8
    1300:	af00      	add	r7, sp, #0
    1302:	6078      	str	r0, [r7, #4]
    1304:	ed87 0a00 	vstr	s0, [r7]
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	463a      	mov	r2, r7
    130c:	4611      	mov	r1, r2
    130e:	4618      	mov	r0, r3
    1310:	f7ff fa0d 	bl	72e <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	4618      	mov	r0, r3
    1318:	3708      	adds	r7, #8
    131a:	46bd      	mov	sp, r7
    131c:	bd80      	pop	{r7, pc}
    131e:	Address 0x000000000000131e is out of bounds.


00001320 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const>:
  /// @param positive_clock_on_idle - maintain bus on clock false=low or
  ///        false=high between frames
  /// @param read_miso_on_rising - capture serial data on true=first or
  ///        1=second clock cycle
  /// @param frequency - serial clock rate
  void SetClock(units::frequency::hertz_t frequency,
    1320:	b590      	push	{r4, r7, lr}
    1322:	b089      	sub	sp, #36	; 0x24
    1324:	af00      	add	r7, sp, #0
    1326:	60f8      	str	r0, [r7, #12]
    1328:	60b9      	str	r1, [r7, #8]
    132a:	4611      	mov	r1, r2
    132c:	461a      	mov	r2, r3
    132e:	460b      	mov	r3, r1
    1330:	71fb      	strb	r3, [r7, #7]
    1332:	4613      	mov	r3, r2
    1334:	71bb      	strb	r3, [r7, #6]
                bool positive_clock_on_idle = false,
                bool read_miso_on_rising    = false) const override
  {
    bus_.registers->CR0 = bit::Insert(bus_.registers->CR0,
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	685b      	ldr	r3, [r3, #4]
    133a:	681b      	ldr	r3, [r3, #0]
    133c:	6818      	ldr	r0, [r3, #0]
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	685b      	ldr	r3, [r3, #4]
    1342:	681c      	ldr	r4, [r3, #0]
    1344:	4b2f      	ldr	r3, [pc, #188]	; (1404 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xe4>)
    1346:	79f9      	ldrb	r1, [r7, #7]
    1348:	781a      	ldrb	r2, [r3, #0]
    134a:	785b      	ldrb	r3, [r3, #1]
    134c:	021b      	lsls	r3, r3, #8
    134e:	431a      	orrs	r2, r3
    1350:	2300      	movs	r3, #0
    1352:	f362 030f 	bfi	r3, r2, #0, #16
    1356:	461a      	mov	r2, r3
    1358:	f001 f80c 	bl	2374 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    135c:	4603      	mov	r3, r0
    135e:	6023      	str	r3, [r4, #0]
                                      positive_clock_on_idle,
                                      ControlRegister0::kPolarityBit);

    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, read_miso_on_rising, ControlRegister0::kPhaseBit);
    1360:	68fb      	ldr	r3, [r7, #12]
    1362:	685b      	ldr	r3, [r3, #4]
    1364:	681b      	ldr	r3, [r3, #0]
    1366:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 = bit::Insert(
    1368:	68fb      	ldr	r3, [r7, #12]
    136a:	685b      	ldr	r3, [r3, #4]
    136c:	681c      	ldr	r4, [r3, #0]
    136e:	4b26      	ldr	r3, [pc, #152]	; (1408 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xe8>)
    1370:	79b9      	ldrb	r1, [r7, #6]
    1372:	781a      	ldrb	r2, [r3, #0]
    1374:	785b      	ldrb	r3, [r3, #1]
    1376:	021b      	lsls	r3, r3, #8
    1378:	431a      	orrs	r2, r3
    137a:	2300      	movs	r3, #0
    137c:	f362 030f 	bfi	r3, r2, #0, #16
    1380:	461a      	mov	r2, r3
    1382:	f000 fff7 	bl	2374 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    1386:	4603      	mov	r3, r0
    1388:	6023      	str	r3, [r4, #0]

    auto system_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    138a:	f7ff fa11 	bl	7b0 <sjsu::SystemController::GetPlatformController()>
    138e:	4602      	mov	r2, r0
            bus_.power_on_bit);
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	685b      	ldr	r3, [r3, #4]
    1394:	3304      	adds	r3, #4
    1396:	4619      	mov	r1, r3
    1398:	4610      	mov	r0, r2
    139a:	f7ff fa15 	bl	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    139e:	4603      	mov	r3, r0
    13a0:	617b      	str	r3, [r7, #20]

    uint16_t prescaler = (system_frequency / frequency).to<uint16_t>();
    13a2:	f107 0208 	add.w	r2, r7, #8
    13a6:	f107 0314 	add.w	r3, r7, #20
    13aa:	4611      	mov	r1, r2
    13ac:	4618      	mov	r0, r3
    13ae:	f7ff ff79 	bl	12a4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    13b2:	4603      	mov	r3, r0
    13b4:	61bb      	str	r3, [r7, #24]
    13b6:	f107 0318 	add.w	r3, r7, #24
    13ba:	4618      	mov	r0, r3
    13bc:	f7ff ff66 	bl	128c <unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const>
    13c0:	4603      	mov	r3, r0
    13c2:	83fb      	strh	r3, [r7, #30]
    // Store lower half of prescalar in clock prescalar register
    bus_.registers->CPSR = prescaler & 0xFF;
    13c4:	8bfa      	ldrh	r2, [r7, #30]
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	685b      	ldr	r3, [r3, #4]
    13ca:	681b      	ldr	r3, [r3, #0]
    13cc:	b2d2      	uxtb	r2, r2
    13ce:	611a      	str	r2, [r3, #16]
    // Store upper 8 bit half of the prescalar in control register 0
    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, prescaler >> 8, ControlRegister0::kDividerBit);
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	685b      	ldr	r3, [r3, #4]
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	6818      	ldr	r0, [r3, #0]
    13d8:	8bfb      	ldrh	r3, [r7, #30]
    bus_.registers->CR0 = bit::Insert(
    13da:	1219      	asrs	r1, r3, #8
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	685b      	ldr	r3, [r3, #4]
    13e0:	681c      	ldr	r4, [r3, #0]
    13e2:	4b0a      	ldr	r3, [pc, #40]	; (140c <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xec>)
    13e4:	781a      	ldrb	r2, [r3, #0]
    13e6:	785b      	ldrb	r3, [r3, #1]
    13e8:	021b      	lsls	r3, r3, #8
    13ea:	431a      	orrs	r2, r3
    13ec:	2300      	movs	r3, #0
    13ee:	f362 030f 	bfi	r3, r2, #0, #16
    13f2:	461a      	mov	r2, r3
    13f4:	f001 f8d8 	bl	25a8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    13f8:	4603      	mov	r3, r0
    13fa:	6023      	str	r3, [r4, #0]
  }
    13fc:	bf00      	nop
    13fe:	3724      	adds	r7, #36	; 0x24
    1400:	46bd      	mov	sp, r7
    1402:	bd90      	pop	{r4, r7, pc}
    1404:	0000846c 	.word	0x0000846c
    1408:	00008470 	.word	0x00008470
    140c:	00008474 	.word	0x00008474

00001410 <sjsu::PixelDisplay::Color_t::IsBlank()>:
      return red == 0 && green == 0 && blue == 0 && alpha == 0;
    }
    /// @returns true if the Color_t definitions is
    ///          { .red = 0, .green = 0, .blue = 0, .alpha = 0} which indicates
    ///           no color and invisible.
    bool IsBlank()
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    {
      return red == 0 && green == 0 && blue == 0 && alpha == 0;
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	781b      	ldrb	r3, [r3, #0]
    141c:	2b00      	cmp	r3, #0
    141e:	d10d      	bne.n	143c <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	785b      	ldrb	r3, [r3, #1]
    1424:	2b00      	cmp	r3, #0
    1426:	d109      	bne.n	143c <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	789b      	ldrb	r3, [r3, #2]
    142c:	2b00      	cmp	r3, #0
    142e:	d105      	bne.n	143c <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	78db      	ldrb	r3, [r3, #3]
    1434:	2b00      	cmp	r3, #0
    1436:	d101      	bne.n	143c <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    1438:	2301      	movs	r3, #1
    143a:	e000      	b.n	143e <sjsu::PixelDisplay::Color_t::IsBlank()+0x2e>
    143c:	2300      	movs	r3, #0
    }
    143e:	4618      	mov	r0, r3
    1440:	370c      	adds	r7, #12
    1442:	46bd      	mov	sp, r7
    1444:	f85d 7b04 	ldr.w	r7, [sp], #4
    1448:	4770      	bx	lr

0000144a <sjsu::PixelDisplay::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
    144a:	b480      	push	{r7}
    144c:	b083      	sub	sp, #12
    144e:	af00      	add	r7, sp, #0
    1450:	6078      	str	r0, [r7, #4]
    1452:	bf00      	nop
    1454:	370c      	adds	r7, #12
    1456:	46bd      	mov	sp, r7
    1458:	f85d 7b04 	ldr.w	r7, [sp], #4
    145c:	4770      	bx	lr

0000145e <sjsu::PixelDisplay::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
    145e:	b480      	push	{r7}
    1460:	b083      	sub	sp, #12
    1462:	af00      	add	r7, sp, #0
    1464:	6078      	str	r0, [r7, #4]
    1466:	bf00      	nop
    1468:	370c      	adds	r7, #12
    146a:	46bd      	mov	sp, r7
    146c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1470:	4770      	bx	lr

00001472 <sjsu::Ssd1306::GetWidth()>:
  constexpr Ssd1306(sjsu::Spi & spi, sjsu::Gpio & cs, sjsu::Gpio & dc)
      : spi_(spi), cs_(cs), dc_(dc), bitmap_{}
  {
  }

  size_t GetWidth() override
    1472:	b480      	push	{r7}
    1474:	b083      	sub	sp, #12
    1476:	af00      	add	r7, sp, #0
    1478:	6078      	str	r0, [r7, #4]
  {
    return kWidth;
    147a:	2380      	movs	r3, #128	; 0x80
  }
    147c:	4618      	mov	r0, r3
    147e:	370c      	adds	r7, #12
    1480:	46bd      	mov	sp, r7
    1482:	f85d 7b04 	ldr.w	r7, [sp], #4
    1486:	4770      	bx	lr

00001488 <sjsu::Ssd1306::GetHeight()>:
  size_t GetHeight() override
    1488:	b480      	push	{r7}
    148a:	b083      	sub	sp, #12
    148c:	af00      	add	r7, sp, #0
    148e:	6078      	str	r0, [r7, #4]
  {
    return kHeight;
    1490:	2340      	movs	r3, #64	; 0x40
  }
    1492:	4618      	mov	r0, r3
    1494:	370c      	adds	r7, #12
    1496:	46bd      	mov	sp, r7
    1498:	f85d 7b04 	ldr.w	r7, [sp], #4
    149c:	4770      	bx	lr

0000149e <sjsu::Ssd1306::AvailableColors()>:
  Color_t AvailableColors() override
    149e:	b480      	push	{r7}
    14a0:	b085      	sub	sp, #20
    14a2:	af00      	add	r7, sp, #0
    14a4:	6078      	str	r0, [r7, #4]
    return Color_t{
      .red   = 0,
      .green = 0,
      .blue  = 0,
      .alpha = 1,
    };
    14a6:	2300      	movs	r3, #0
    14a8:	733b      	strb	r3, [r7, #12]
    14aa:	2300      	movs	r3, #0
    14ac:	737b      	strb	r3, [r7, #13]
    14ae:	2300      	movs	r3, #0
    14b0:	73bb      	strb	r3, [r7, #14]
    14b2:	2301      	movs	r3, #1
    14b4:	73fb      	strb	r3, [r7, #15]
    14b6:	2300      	movs	r3, #0
    14b8:	7b3a      	ldrb	r2, [r7, #12]
    14ba:	f362 0307 	bfi	r3, r2, #0, #8
    14be:	7b7a      	ldrb	r2, [r7, #13]
    14c0:	f362 230f 	bfi	r3, r2, #8, #8
    14c4:	7bba      	ldrb	r2, [r7, #14]
    14c6:	f362 4317 	bfi	r3, r2, #16, #8
    14ca:	7bfa      	ldrb	r2, [r7, #15]
    14cc:	f362 631f 	bfi	r3, r2, #24, #8
  }
    14d0:	4618      	mov	r0, r3
    14d2:	3714      	adds	r7, #20
    14d4:	46bd      	mov	sp, r7
    14d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14da:	4770      	bx	lr

000014dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
    14dc:	b580      	push	{r7, lr}
    14de:	b088      	sub	sp, #32
    14e0:	af02      	add	r7, sp, #8
    14e2:	60f8      	str	r0, [r7, #12]
    14e4:	60b9      	str	r1, [r7, #8]
    14e6:	607a      	str	r2, [r7, #4]
    14e8:	603b      	str	r3, [r7, #0]
  {
    dc_.Set(static_cast<sjsu::Gpio::State>(transaction));
    14ea:	68fb      	ldr	r3, [r7, #12]
    14ec:	68db      	ldr	r3, [r3, #12]
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	3304      	adds	r3, #4
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	68fa      	ldr	r2, [r7, #12]
    14f6:	68d2      	ldr	r2, [r2, #12]
    14f8:	6879      	ldr	r1, [r7, #4]
    14fa:	b2c9      	uxtb	r1, r1
    14fc:	4610      	mov	r0, r2
    14fe:	4798      	blx	r3
    cs_.Set(sjsu::Gpio::State::kLow);
    1500:	68fb      	ldr	r3, [r7, #12]
    1502:	689b      	ldr	r3, [r3, #8]
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	3304      	adds	r3, #4
    1508:	681b      	ldr	r3, [r3, #0]
    150a:	68fa      	ldr	r2, [r7, #12]
    150c:	6892      	ldr	r2, [r2, #8]
    150e:	2100      	movs	r1, #0
    1510:	4610      	mov	r0, r2
    1512:	4798      	blx	r3
    for (size_t i = 0; i < size; i++)
    1514:	2300      	movs	r3, #0
    1516:	617b      	str	r3, [r7, #20]
    1518:	697a      	ldr	r2, [r7, #20]
    151a:	683b      	ldr	r3, [r7, #0]
    151c:	429a      	cmp	r2, r3
    151e:	d222      	bcs.n	1566 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x8a>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
    1520:	683a      	ldr	r2, [r7, #0]
    1522:	697b      	ldr	r3, [r7, #20]
    1524:	1ad3      	subs	r3, r2, r3
    1526:	3b01      	subs	r3, #1
    1528:	00db      	lsls	r3, r3, #3
    152a:	68ba      	ldr	r2, [r7, #8]
    152c:	fa22 f303 	lsr.w	r3, r2, r3
    1530:	74fb      	strb	r3, [r7, #19]
      if (transaction == Transaction::kCommand)
    1532:	687b      	ldr	r3, [r7, #4]
    1534:	2b00      	cmp	r3, #0
    1536:	d107      	bne.n	1548 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x6c>
      {
        LOG_DEBUG("send = 0x%X", send);
    1538:	7cfb      	ldrb	r3, [r7, #19]
    153a:	9300      	str	r3, [sp, #0]
    153c:	233f      	movs	r3, #63	; 0x3f
    153e:	4a11      	ldr	r2, [pc, #68]	; (1584 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xa8>)
    1540:	4911      	ldr	r1, [pc, #68]	; (1588 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xac>)
    1542:	4812      	ldr	r0, [pc, #72]	; (158c <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xb0>)
    1544:	f003 f9d6 	bl	48f4 <printf>
      }
      spi_.Transfer(send);
    1548:	68fb      	ldr	r3, [r7, #12]
    154a:	685b      	ldr	r3, [r3, #4]
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	3304      	adds	r3, #4
    1550:	681b      	ldr	r3, [r3, #0]
    1552:	68fa      	ldr	r2, [r7, #12]
    1554:	6852      	ldr	r2, [r2, #4]
    1556:	7cf9      	ldrb	r1, [r7, #19]
    1558:	b289      	uxth	r1, r1
    155a:	4610      	mov	r0, r2
    155c:	4798      	blx	r3
    for (size_t i = 0; i < size; i++)
    155e:	697b      	ldr	r3, [r7, #20]
    1560:	3301      	adds	r3, #1
    1562:	617b      	str	r3, [r7, #20]
    1564:	e7d8      	b.n	1518 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x3c>
    }
    cs_.Set(sjsu::Gpio::State::kHigh);
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	689b      	ldr	r3, [r3, #8]
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	3304      	adds	r3, #4
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	68fa      	ldr	r2, [r7, #12]
    1572:	6892      	ldr	r2, [r2, #8]
    1574:	2101      	movs	r1, #1
    1576:	4610      	mov	r0, r2
    1578:	4798      	blx	r3
  }
    157a:	bf00      	nop
    157c:	3718      	adds	r7, #24
    157e:	46bd      	mov	sp, r7
    1580:	bd80      	pop	{r7, pc}
    1582:	bf00      	nop
    1584:	00008358 	.word	0x00008358
    1588:	000084cc 	.word	0x000084cc
    158c:	000083a0 	.word	0x000083a0

00001590 <sjsu::Ssd1306::Initialize()>:

  void Initialize() override
    1590:	b5b0      	push	{r4, r5, r7, lr}
    1592:	b084      	sub	sp, #16
    1594:	af00      	add	r7, sp, #0
    1596:	6078      	str	r0, [r7, #4]
  {
    cs_.SetDirection(sjsu::Gpio::Direction::kOutput);
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	689b      	ldr	r3, [r3, #8]
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	687a      	ldr	r2, [r7, #4]
    15a2:	6892      	ldr	r2, [r2, #8]
    15a4:	2101      	movs	r1, #1
    15a6:	4610      	mov	r0, r2
    15a8:	4798      	blx	r3
    dc_.SetDirection(sjsu::Gpio::Direction::kOutput);
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	68db      	ldr	r3, [r3, #12]
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	687a      	ldr	r2, [r7, #4]
    15b4:	68d2      	ldr	r2, [r2, #12]
    15b6:	2101      	movs	r1, #1
    15b8:	4610      	mov	r0, r2
    15ba:	4798      	blx	r3
    cs_.Set(sjsu::Gpio::State::kHigh);
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	689b      	ldr	r3, [r3, #8]
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	3304      	adds	r3, #4
    15c4:	681b      	ldr	r3, [r3, #0]
    15c6:	687a      	ldr	r2, [r7, #4]
    15c8:	6892      	ldr	r2, [r2, #8]
    15ca:	2101      	movs	r1, #1
    15cc:	4610      	mov	r0, r2
    15ce:	4798      	blx	r3
    dc_.Set(sjsu::Gpio::State::kHigh);
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	68db      	ldr	r3, [r3, #12]
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	3304      	adds	r3, #4
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	687a      	ldr	r2, [r7, #4]
    15dc:	68d2      	ldr	r2, [r2, #12]
    15de:	2101      	movs	r1, #1
    15e0:	4610      	mov	r0, r2
    15e2:	4798      	blx	r3

    spi_.Initialize();
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	685b      	ldr	r3, [r3, #4]
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	687a      	ldr	r2, [r7, #4]
    15ee:	6852      	ldr	r2, [r2, #4]
    15f0:	4610      	mov	r0, r2
    15f2:	4798      	blx	r3
    spi_.SetDataSize(sjsu::Spi::DataSize::kEight);
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	685b      	ldr	r3, [r3, #4]
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	3308      	adds	r3, #8
    15fc:	681b      	ldr	r3, [r3, #0]
    15fe:	687a      	ldr	r2, [r7, #4]
    1600:	6852      	ldr	r2, [r2, #4]
    1602:	2104      	movs	r1, #4
    1604:	4610      	mov	r0, r2
    1606:	4798      	blx	r3
    spi_.SetClock(2_MHz);
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	685b      	ldr	r3, [r3, #4]
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	330c      	adds	r3, #12
    1610:	681c      	ldr	r4, [r3, #0]
    1612:	687b      	ldr	r3, [r7, #4]
    1614:	685d      	ldr	r5, [r3, #4]
    1616:	f04f 0002 	mov.w	r0, #2
    161a:	f04f 0100 	mov.w	r1, #0
    161e:	f7ff f85f 	bl	6e0 <units::literals::operator"" _MHz(unsigned long long)>
    1622:	4603      	mov	r3, r0
    1624:	60fb      	str	r3, [r7, #12]
    1626:	f107 020c 	add.w	r2, r7, #12
    162a:	f107 0308 	add.w	r3, r7, #8
    162e:	4611      	mov	r1, r2
    1630:	4618      	mov	r0, r3
    1632:	f7ff fcd9 	bl	fe8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1636:	2300      	movs	r3, #0
    1638:	2200      	movs	r2, #0
    163a:	68b9      	ldr	r1, [r7, #8]
    163c:	4628      	mov	r0, r5
    163e:	47a0      	blx	r4

    Clear();
    1640:	6878      	ldr	r0, [r7, #4]
    1642:	f000 f895 	bl	1770 <sjsu::Ssd1306::Clear()>
    InitializationPanel();
    1646:	6878      	ldr	r0, [r7, #4]
    1648:	f000 f804 	bl	1654 <sjsu::Ssd1306::InitializationPanel()>
  }
    164c:	bf00      	nop
    164e:	3710      	adds	r7, #16
    1650:	46bd      	mov	sp, r7
    1652:	bdb0      	pop	{r4, r5, r7, pc}

00001654 <sjsu::Ssd1306::InitializationPanel()>:

  void InitializationPanel()
    1654:	b580      	push	{r7, lr}
    1656:	b082      	sub	sp, #8
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
    165c:	2301      	movs	r3, #1
    165e:	2200      	movs	r2, #0
    1660:	21ae      	movs	r1, #174	; 0xae
    1662:	6878      	ldr	r0, [r7, #4]
    1664:	f7ff ff3a 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
    1668:	2302      	movs	r3, #2
    166a:	2200      	movs	r2, #0
    166c:	f24d 5180 	movw	r1, #54656	; 0xd580
    1670:	6878      	ldr	r0, [r7, #4]
    1672:	f7ff ff33 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
    1676:	2302      	movs	r3, #2
    1678:	2200      	movs	r2, #0
    167a:	f64a 013f 	movw	r1, #43071	; 0xa83f
    167e:	6878      	ldr	r0, [r7, #4]
    1680:	f7ff ff2c 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
    1684:	2302      	movs	r3, #2
    1686:	2200      	movs	r2, #0
    1688:	f44f 4153 	mov.w	r1, #54016	; 0xd300
    168c:	6878      	ldr	r0, [r7, #4]
    168e:	f7ff ff25 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
    1692:	2301      	movs	r3, #1
    1694:	2200      	movs	r2, #0
    1696:	2140      	movs	r1, #64	; 0x40
    1698:	6878      	ldr	r0, [r7, #4]
    169a:	f7ff ff1f 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
    169e:	2302      	movs	r3, #2
    16a0:	2200      	movs	r2, #0
    16a2:	f648 5114 	movw	r1, #36116	; 0x8d14
    16a6:	6878      	ldr	r0, [r7, #4]
    16a8:	f7ff ff18 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
    16ac:	2301      	movs	r3, #1
    16ae:	2200      	movs	r2, #0
    16b0:	21a1      	movs	r1, #161	; 0xa1
    16b2:	6878      	ldr	r0, [r7, #4]
    16b4:	f7ff ff12 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
    16b8:	2301      	movs	r3, #1
    16ba:	2200      	movs	r2, #0
    16bc:	21c8      	movs	r1, #200	; 0xc8
    16be:	6878      	ldr	r0, [r7, #4]
    16c0:	f7ff ff0c 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
    16c4:	2302      	movs	r3, #2
    16c6:	2200      	movs	r2, #0
    16c8:	f64d 2112 	movw	r1, #55826	; 0xda12
    16cc:	6878      	ldr	r0, [r7, #4]
    16ce:	f7ff ff05 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
    16d2:	2302      	movs	r3, #2
    16d4:	2200      	movs	r2, #0
    16d6:	f248 11cf 	movw	r1, #33231	; 0x81cf
    16da:	6878      	ldr	r0, [r7, #4]
    16dc:	f7ff fefe 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
    16e0:	2302      	movs	r3, #2
    16e2:	2200      	movs	r2, #0
    16e4:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
    16e8:	6878      	ldr	r0, [r7, #4]
    16ea:	f7ff fef7 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
    16ee:	2302      	movs	r3, #2
    16f0:	2200      	movs	r2, #0
    16f2:	f64d 3140 	movw	r1, #56128	; 0xdb40
    16f6:	6878      	ldr	r0, [r7, #4]
    16f8:	f7ff fef0 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
    16fc:	6878      	ldr	r0, [r7, #4]
    16fe:	f000 f817 	bl	1730 <sjsu::Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
    1702:	2301      	movs	r3, #1
    1704:	2200      	movs	r2, #0
    1706:	21a4      	movs	r1, #164	; 0xa4
    1708:	6878      	ldr	r0, [r7, #4]
    170a:	f7ff fee7 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
    170e:	2301      	movs	r3, #1
    1710:	2200      	movs	r2, #0
    1712:	21a6      	movs	r1, #166	; 0xa6
    1714:	6878      	ldr	r0, [r7, #4]
    1716:	f7ff fee1 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
    171a:	2301      	movs	r3, #1
    171c:	2200      	movs	r2, #0
    171e:	21af      	movs	r1, #175	; 0xaf
    1720:	6878      	ldr	r0, [r7, #4]
    1722:	f7ff fedb 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
  }
    1726:	bf00      	nop
    1728:	3708      	adds	r7, #8
    172a:	46bd      	mov	sp, r7
    172c:	bd80      	pop	{r7, pc}
    172e:	Address 0x000000000000172e is out of bounds.


00001730 <sjsu::Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
    1730:	b580      	push	{r7, lr}
    1732:	b082      	sub	sp, #8
    1734:	af00      	add	r7, sp, #0
    1736:	6078      	str	r0, [r7, #4]
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
    1738:	2302      	movs	r3, #2
    173a:	2200      	movs	r2, #0
    173c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1740:	6878      	ldr	r0, [r7, #4]
    1742:	f7ff fecb 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
    1746:	2303      	movs	r3, #3
    1748:	2200      	movs	r2, #0
    174a:	4907      	ldr	r1, [pc, #28]	; (1768 <sjsu::Ssd1306::SetHorizontalAddressMode()+0x38>)
    174c:	6878      	ldr	r0, [r7, #4]
    174e:	f7ff fec5 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
    1752:	2303      	movs	r3, #3
    1754:	2200      	movs	r2, #0
    1756:	4905      	ldr	r1, [pc, #20]	; (176c <sjsu::Ssd1306::SetHorizontalAddressMode()+0x3c>)
    1758:	6878      	ldr	r0, [r7, #4]
    175a:	f7ff febf 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
  }
    175e:	bf00      	nop
    1760:	3708      	adds	r7, #8
    1762:	46bd      	mov	sp, r7
    1764:	bd80      	pop	{r7, pc}
    1766:	bf00      	nop
    1768:	0021007f 	.word	0x0021007f
    176c:	00220007 	.word	0x00220007

00001770 <sjsu::Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() override
    1770:	b580      	push	{r7, lr}
    1772:	b082      	sub	sp, #8
    1774:	af00      	add	r7, sp, #0
    1776:	6078      	str	r0, [r7, #4]
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	3310      	adds	r3, #16
    177c:	f240 62c1 	movw	r2, #1729	; 0x6c1
    1780:	2100      	movs	r1, #0
    1782:	4618      	mov	r0, r3
    1784:	f006 fcda 	bl	813c <memset>
  }
    1788:	bf00      	nop
    178a:	3708      	adds	r7, #8
    178c:	46bd      	mov	sp, r7
    178e:	bd80      	pop	{r7, pc}

00001790 <sjsu::Ssd1306::DrawPixel(long, long, sjsu::PixelDisplay::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) override
    1790:	b580      	push	{r7, lr}
    1792:	b08c      	sub	sp, #48	; 0x30
    1794:	af00      	add	r7, sp, #0
    1796:	60f8      	str	r0, [r7, #12]
    1798:	60b9      	str	r1, [r7, #8]
    179a:	607a      	str	r2, [r7, #4]
    179c:	603b      	str	r3, [r7, #0]
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	f003 0307 	and.w	r3, r3, #7
    17a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	10db      	asrs	r3, r3, #3
    17aa:	62bb      	str	r3, [r7, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
    17ac:	2201      	movs	r2, #1
    17ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17b0:	fa02 f303 	lsl.w	r3, r2, r3
    17b4:	43db      	mvns	r3, r3
    17b6:	627b      	str	r3, [r7, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = !color.IsBlank();
    17b8:	463b      	mov	r3, r7
    17ba:	4618      	mov	r0, r3
    17bc:	f7ff fe28 	bl	1410 <sjsu::PixelDisplay::Color_t::IsBlank()>
    17c0:	4603      	mov	r3, r0
    17c2:	f083 0301 	eor.w	r3, r3, #1
    17c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
    17ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	fa02 f303 	lsl.w	r3, r2, r3
    17d4:	61fb      	str	r3, [r7, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
    17d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    17d8:	4613      	mov	r3, r2
    17da:	015b      	lsls	r3, r3, #5
    17dc:	4413      	add	r3, r2
    17de:	009b      	lsls	r3, r3, #2
    17e0:	4413      	add	r3, r2
    17e2:	68ba      	ldr	r2, [r7, #8]
    17e4:	4413      	add	r3, r2
    17e6:	3310      	adds	r3, #16
    17e8:	68fa      	ldr	r2, [r7, #12]
    17ea:	4413      	add	r3, r2
    17ec:	61bb      	str	r3, [r7, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
    17ee:	69bb      	ldr	r3, [r7, #24]
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	461a      	mov	r2, r3
    17f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17f6:	4013      	ands	r3, r2
    17f8:	69fa      	ldr	r2, [r7, #28]
    17fa:	4313      	orrs	r3, r2
    17fc:	617b      	str	r3, [r7, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
    17fe:	697b      	ldr	r3, [r7, #20]
    1800:	b2da      	uxtb	r2, r3
    1802:	69bb      	ldr	r3, [r7, #24]
    1804:	701a      	strb	r2, [r3, #0]
  }
    1806:	bf00      	nop
    1808:	3730      	adds	r7, #48	; 0x30
    180a:	46bd      	mov	sp, r7
    180c:	bd80      	pop	{r7, pc}

0000180e <sjsu::Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() override
    180e:	b580      	push	{r7, lr}
    1810:	b084      	sub	sp, #16
    1812:	af00      	add	r7, sp, #0
    1814:	6078      	str	r0, [r7, #4]
  {
    SetHorizontalAddressMode();
    1816:	6878      	ldr	r0, [r7, #4]
    1818:	f7ff ff8a 	bl	1730 <sjsu::Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
    181c:	2300      	movs	r3, #0
    181e:	60fb      	str	r3, [r7, #12]
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	2b07      	cmp	r3, #7
    1824:	d81e      	bhi.n	1864 <sjsu::Ssd1306::Update()+0x56>
    {
      for (size_t column = 0; column < kColumns; column++)
    1826:	2300      	movs	r3, #0
    1828:	60bb      	str	r3, [r7, #8]
    182a:	68bb      	ldr	r3, [r7, #8]
    182c:	2b7f      	cmp	r3, #127	; 0x7f
    182e:	d815      	bhi.n	185c <sjsu::Ssd1306::Update()+0x4e>
      {
        Write(bitmap_[row][column], Transaction::kData);
    1830:	6879      	ldr	r1, [r7, #4]
    1832:	68fa      	ldr	r2, [r7, #12]
    1834:	4613      	mov	r3, r2
    1836:	015b      	lsls	r3, r3, #5
    1838:	4413      	add	r3, r2
    183a:	009b      	lsls	r3, r3, #2
    183c:	4413      	add	r3, r2
    183e:	18ca      	adds	r2, r1, r3
    1840:	68bb      	ldr	r3, [r7, #8]
    1842:	4413      	add	r3, r2
    1844:	3310      	adds	r3, #16
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	4619      	mov	r1, r3
    184a:	2301      	movs	r3, #1
    184c:	2201      	movs	r2, #1
    184e:	6878      	ldr	r0, [r7, #4]
    1850:	f7ff fe44 	bl	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
    1854:	68bb      	ldr	r3, [r7, #8]
    1856:	3301      	adds	r3, #1
    1858:	60bb      	str	r3, [r7, #8]
    185a:	e7e6      	b.n	182a <sjsu::Ssd1306::Update()+0x1c>
    for (size_t row = 0; row < kRows; row++)
    185c:	68fb      	ldr	r3, [r7, #12]
    185e:	3301      	adds	r3, #1
    1860:	60fb      	str	r3, [r7, #12]
    1862:	e7dd      	b.n	1820 <sjsu::Ssd1306::Update()+0x12>
      }
    }
  }
    1864:	bf00      	nop
    1866:	3710      	adds	r7, #16
    1868:	46bd      	mov	sp, r7
    186a:	bd80      	pop	{r7, pc}

0000186c <sjsu::PixelDisplay::Color_t::Color_t()>:
  struct Color_t
    186c:	b480      	push	{r7}
    186e:	b083      	sub	sp, #12
    1870:	af00      	add	r7, sp, #0
    1872:	6078      	str	r0, [r7, #4]
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	2200      	movs	r2, #0
    1878:	701a      	strb	r2, [r3, #0]
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	2200      	movs	r2, #0
    187e:	705a      	strb	r2, [r3, #1]
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	2200      	movs	r2, #0
    1884:	709a      	strb	r2, [r3, #2]
    1886:	687b      	ldr	r3, [r7, #4]
    1888:	2200      	movs	r2, #0
    188a:	70da      	strb	r2, [r3, #3]
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	4618      	mov	r0, r3
    1890:	370c      	adds	r7, #12
    1892:	46bd      	mov	sp, r7
    1894:	f85d 7b04 	ldr.w	r7, [sp], #4
    1898:	4770      	bx	lr

0000189a <sjsu::Graphics::Graphics(sjsu::PixelDisplay&)>:
{
 public:
  /// Constructor for a graphics object.
  ///
  /// @param display - reference to a pixel display
  explicit Graphics(PixelDisplay & display)
    189a:	b590      	push	{r4, r7, lr}
    189c:	b083      	sub	sp, #12
    189e:	af00      	add	r7, sp, #0
    18a0:	6078      	str	r0, [r7, #4]
    18a2:	6039      	str	r1, [r7, #0]
      : display_(display), color_(), width_(0), height_(0)
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	683a      	ldr	r2, [r7, #0]
    18a8:	601a      	str	r2, [r3, #0]
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	2200      	movs	r2, #0
    18ae:	605a      	str	r2, [r3, #4]
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	3304      	adds	r3, #4
    18b4:	4618      	mov	r0, r3
    18b6:	f7ff ffd9 	bl	186c <sjsu::PixelDisplay::Color_t::Color_t()>
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	2200      	movs	r2, #0
    18be:	609a      	str	r2, [r3, #8]
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	2200      	movs	r2, #0
    18c4:	60da      	str	r2, [r3, #12]
  {
    width_  = display.GetWidth();
    18c6:	683b      	ldr	r3, [r7, #0]
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	681b      	ldr	r3, [r3, #0]
    18cc:	6838      	ldr	r0, [r7, #0]
    18ce:	4798      	blx	r3
    18d0:	4602      	mov	r2, r0
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	609a      	str	r2, [r3, #8]
    height_ = display.GetHeight();
    18d6:	683b      	ldr	r3, [r7, #0]
    18d8:	681b      	ldr	r3, [r3, #0]
    18da:	3304      	adds	r3, #4
    18dc:	681b      	ldr	r3, [r3, #0]
    18de:	6838      	ldr	r0, [r7, #0]
    18e0:	4798      	blx	r3
    18e2:	4602      	mov	r2, r0
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	60da      	str	r2, [r3, #12]
    color_  = display.AvailableColors();
    18e8:	683b      	ldr	r3, [r7, #0]
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	3308      	adds	r3, #8
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	687c      	ldr	r4, [r7, #4]
    18f2:	6838      	ldr	r0, [r7, #0]
    18f4:	4798      	blx	r3
    18f6:	4603      	mov	r3, r0
    18f8:	6063      	str	r3, [r4, #4]
  }
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	4618      	mov	r0, r3
    18fe:	370c      	adds	r7, #12
    1900:	46bd      	mov	sp, r7
    1902:	bd90      	pop	{r4, r7, pc}

00001904 <sjsu::Graphics::Initialize()>:

  /// Initialize display hardware.
  void Initialize()
    1904:	b580      	push	{r7, lr}
    1906:	b082      	sub	sp, #8
    1908:	af00      	add	r7, sp, #0
    190a:	6078      	str	r0, [r7, #4]
  {
    display_.Initialize();
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	681b      	ldr	r3, [r3, #0]
    1912:	330c      	adds	r3, #12
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	687a      	ldr	r2, [r7, #4]
    1918:	6812      	ldr	r2, [r2, #0]
    191a:	4610      	mov	r0, r2
    191c:	4798      	blx	r3
  }
    191e:	bf00      	nop
    1920:	3708      	adds	r7, #8
    1922:	46bd      	mov	sp, r7
    1924:	bd80      	pop	{r7, pc}

00001926 <sjsu::Graphics::Update()>:

  /// Update the display.
  void Update()
    1926:	b580      	push	{r7, lr}
    1928:	b082      	sub	sp, #8
    192a:	af00      	add	r7, sp, #0
    192c:	6078      	str	r0, [r7, #4]
  {
    display_.Update();
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	3320      	adds	r3, #32
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	687a      	ldr	r2, [r7, #4]
    193a:	6812      	ldr	r2, [r2, #0]
    193c:	4610      	mov	r0, r2
    193e:	4798      	blx	r3
  }
    1940:	bf00      	nop
    1942:	3708      	adds	r7, #8
    1944:	46bd      	mov	sp, r7
    1946:	bd80      	pop	{r7, pc}

00001948 <sjsu::Graphics::Clear()>:
  {
    display_.Disable();
  }

  /// Clears the display.
  void Clear()
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  {
    display_.Clear();
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	3318      	adds	r3, #24
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	687a      	ldr	r2, [r7, #4]
    195c:	6812      	ldr	r2, [r2, #0]
    195e:	4610      	mov	r0, r2
    1960:	4798      	blx	r3
  }
    1962:	bf00      	nop
    1964:	3708      	adds	r7, #8
    1966:	46bd      	mov	sp, r7
    1968:	bd80      	pop	{r7, pc}
    196a:	Address 0x000000000000196a is out of bounds.


0000196c <sjsu::Graphics::DrawCharacter(long, long, char)>:
  /// Draw a character on the display.
  ///
  /// @param x0 - X coordinate to start printing to the screen
  /// @param y0 - Y coordinate to start printing to the screen
  /// @param letter - The character to write to the screen
  void DrawCharacter(int32_t x0, int32_t y0, char letter)
    196c:	b580      	push	{r7, lr}
    196e:	b088      	sub	sp, #32
    1970:	af00      	add	r7, sp, #0
    1972:	60f8      	str	r0, [r7, #12]
    1974:	60b9      	str	r1, [r7, #8]
    1976:	607a      	str	r2, [r7, #4]
    1978:	70fb      	strb	r3, [r7, #3]
  {
    int32_t letter_position = int32_t{ letter };
    197a:	78fb      	ldrb	r3, [r7, #3]
    197c:	617b      	str	r3, [r7, #20]

    PixelDisplay::Color_t foreground = color_;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	685b      	ldr	r3, [r3, #4]
    1982:	613b      	str	r3, [r7, #16]

    for (int32_t y = 0; y < 8; y++)
    1984:	2300      	movs	r3, #0
    1986:	61fb      	str	r3, [r7, #28]
    1988:	69fb      	ldr	r3, [r7, #28]
    198a:	2b07      	cmp	r3, #7
    198c:	dc26      	bgt.n	19dc <sjsu::Graphics::DrawCharacter(long, long, char)+0x70>
    {
      for (int32_t x = 0; x < 8; x++)
    198e:	2300      	movs	r3, #0
    1990:	61bb      	str	r3, [r7, #24]
    1992:	69bb      	ldr	r3, [r7, #24]
    1994:	2b07      	cmp	r3, #7
    1996:	dc1d      	bgt.n	19d4 <sjsu::Graphics::DrawCharacter(long, long, char)+0x68>
      {
        if (font8x8_basic[letter_position][y] & (1 << x))
    1998:	4a14      	ldr	r2, [pc, #80]	; (19ec <sjsu::Graphics::DrawCharacter(long, long, char)+0x80>)
    199a:	697b      	ldr	r3, [r7, #20]
    199c:	00db      	lsls	r3, r3, #3
    199e:	441a      	add	r2, r3
    19a0:	69fb      	ldr	r3, [r7, #28]
    19a2:	4413      	add	r3, r2
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	461a      	mov	r2, r3
    19a8:	69bb      	ldr	r3, [r7, #24]
    19aa:	fa42 f303 	asr.w	r3, r2, r3
    19ae:	f003 0301 	and.w	r3, r3, #1
    19b2:	2b00      	cmp	r3, #0
    19b4:	d00a      	beq.n	19cc <sjsu::Graphics::DrawCharacter(long, long, char)+0x60>
        {
          DrawPixel(x0 + x, y0 + y);
    19b6:	68ba      	ldr	r2, [r7, #8]
    19b8:	69bb      	ldr	r3, [r7, #24]
    19ba:	4413      	add	r3, r2
    19bc:	4619      	mov	r1, r3
    19be:	687a      	ldr	r2, [r7, #4]
    19c0:	69fb      	ldr	r3, [r7, #28]
    19c2:	4413      	add	r3, r2
    19c4:	461a      	mov	r2, r3
    19c6:	68f8      	ldr	r0, [r7, #12]
    19c8:	f000 f812 	bl	19f0 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)>
      for (int32_t x = 0; x < 8; x++)
    19cc:	69bb      	ldr	r3, [r7, #24]
    19ce:	3301      	adds	r3, #1
    19d0:	61bb      	str	r3, [r7, #24]
    19d2:	e7de      	b.n	1992 <sjsu::Graphics::DrawCharacter(long, long, char)+0x26>
    for (int32_t y = 0; y < 8; y++)
    19d4:	69fb      	ldr	r3, [r7, #28]
    19d6:	3301      	adds	r3, #1
    19d8:	61fb      	str	r3, [r7, #28]
    19da:	e7d5      	b.n	1988 <sjsu::Graphics::DrawCharacter(long, long, char)+0x1c>
        }
      }
    }
    color_ = foreground;
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	693a      	ldr	r2, [r7, #16]
    19e0:	605a      	str	r2, [r3, #4]
  }
    19e2:	bf00      	nop
    19e4:	3720      	adds	r7, #32
    19e6:	46bd      	mov	sp, r7
    19e8:	bd80      	pop	{r7, pc}
    19ea:	bf00      	nop
    19ec:	10000134 	.word	0x10000134

000019f0 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)>:

  /// Put a pixel on a specific position.
  ///
  /// @param x - x coordinate to place the coordinate.
  /// @param y - y coordinate to place the coordinate.
  void DrawPixel(uint32_t x, uint32_t y)
    19f0:	b590      	push	{r4, r7, lr}
    19f2:	b085      	sub	sp, #20
    19f4:	af00      	add	r7, sp, #0
    19f6:	60f8      	str	r0, [r7, #12]
    19f8:	60b9      	str	r1, [r7, #8]
    19fa:	607a      	str	r2, [r7, #4]
  {
    // Pixels outside of the bounds of the screen will not be drawn.
    if (x <= width_ && y <= height_)
    19fc:	68fb      	ldr	r3, [r7, #12]
    19fe:	689b      	ldr	r3, [r3, #8]
    1a00:	68ba      	ldr	r2, [r7, #8]
    1a02:	429a      	cmp	r2, r3
    1a04:	d810      	bhi.n	1a28 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)+0x38>
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	68db      	ldr	r3, [r3, #12]
    1a0a:	687a      	ldr	r2, [r7, #4]
    1a0c:	429a      	cmp	r2, r3
    1a0e:	d80b      	bhi.n	1a28 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)+0x38>
    {
      display_.DrawPixel(x, y, color_);
    1a10:	68fb      	ldr	r3, [r7, #12]
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	681b      	ldr	r3, [r3, #0]
    1a16:	331c      	adds	r3, #28
    1a18:	681c      	ldr	r4, [r3, #0]
    1a1a:	68fb      	ldr	r3, [r7, #12]
    1a1c:	6818      	ldr	r0, [r3, #0]
    1a1e:	68b9      	ldr	r1, [r7, #8]
    1a20:	687a      	ldr	r2, [r7, #4]
    1a22:	68fb      	ldr	r3, [r7, #12]
    1a24:	685b      	ldr	r3, [r3, #4]
    1a26:	47a0      	blx	r4
    }
  }
    1a28:	bf00      	nop
    1a2a:	3714      	adds	r7, #20
    1a2c:	46bd      	mov	sp, r7
    1a2e:	bd90      	pop	{r4, r7, pc}

00001a30 <sjsu::GraphicalTerminal::Initialize()>:
        graphics_(graphics),
        cache_(cache->buffer)
  {
  }

  void Initialize()
    1a30:	b580      	push	{r7, lr}
    1a32:	b082      	sub	sp, #8
    1a34:	af00      	add	r7, sp, #0
    1a36:	6078      	str	r0, [r7, #4]
  {
    graphics_->Initialize();
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	695b      	ldr	r3, [r3, #20]
    1a3c:	4618      	mov	r0, r3
    1a3e:	f7ff ff61 	bl	1904 <sjsu::Graphics::Initialize()>
    graphics_->Clear();
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	695b      	ldr	r3, [r3, #20]
    1a46:	4618      	mov	r0, r3
    1a48:	f7ff ff7e 	bl	1948 <sjsu::Graphics::Clear()>
    graphics_->Update();
    1a4c:	687b      	ldr	r3, [r7, #4]
    1a4e:	695b      	ldr	r3, [r3, #20]
    1a50:	4618      	mov	r0, r3
    1a52:	f7ff ff68 	bl	1926 <sjsu::Graphics::Update()>
  }
    1a56:	bf00      	nop
    1a58:	3708      	adds	r7, #8
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bd80      	pop	{r7, pc}

00001a5e <sjsu::GraphicalTerminal::printf(char const*, ...)>:

  int printf(const char * format, ...)  // NOLINT
    1a5e:	b40e      	push	{r1, r2, r3}
    1a60:	b590      	push	{r4, r7, lr}
    1a62:	b0c6      	sub	sp, #280	; 0x118
    1a64:	af00      	add	r7, sp, #0
    1a66:	1d3b      	adds	r3, r7, #4
    1a68:	6018      	str	r0, [r3, #0]
  {
    char buffer[256];

    va_list args;
    va_start(args, format);
    1a6a:	f507 7294 	add.w	r2, r7, #296	; 0x128
    1a6e:	f107 0308 	add.w	r3, r7, #8
    1a72:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-nonliteral"
    uint32_t characters = vsnprintf(buffer, sizeof(buffer), format, args);
    1a74:	f107 0308 	add.w	r3, r7, #8
    1a78:	f107 000c 	add.w	r0, r7, #12
    1a7c:	681b      	ldr	r3, [r3, #0]
    1a7e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    1a82:	f44f 7180 	mov.w	r1, #256	; 0x100
    1a86:	f002 ff57 	bl	4938 <vsnprintf>
    1a8a:	4603      	mov	r3, r0
    1a8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
#pragma GCC diagnostic pop
    va_end(args);

    uint32_t pos = 0;
    1a90:	2300      	movs	r3, #0
    1a92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    for (; pos < characters; pos++)
    1a96:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    1a9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    1a9e:	429a      	cmp	r2, r3
    1aa0:	d253      	bcs.n	1b4a <sjsu::GraphicalTerminal::printf(char const*, ...)+0xec>
    {
      char character = buffer[pos];
    1aa2:	f107 020c 	add.w	r2, r7, #12
    1aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    1aaa:	4413      	add	r3, r2
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      switch (character)
    1ab2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
    1ab6:	2b0a      	cmp	r3, #10
    1ab8:	d10b      	bne.n	1ad2 <sjsu::GraphicalTerminal::printf(char const*, ...)+0x74>
      {
        case '\n':
          column_ = 0;
    1aba:	1d3b      	adds	r3, r7, #4
    1abc:	681b      	ldr	r3, [r3, #0]
    1abe:	2200      	movs	r2, #0
    1ac0:	605a      	str	r2, [r3, #4]
          row_++;
    1ac2:	1d3b      	adds	r3, r7, #4
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	681b      	ldr	r3, [r3, #0]
    1ac8:	1c5a      	adds	r2, r3, #1
    1aca:	1d3b      	adds	r3, r7, #4
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	601a      	str	r2, [r3, #0]
          break;
    1ad0:	e035      	b.n	1b3e <sjsu::GraphicalTerminal::printf(char const*, ...)+0xe0>
        default:
          GetChar((row_ + row_start_) % max_rows_, column_) = character;
    1ad2:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
    1ad6:	1d3b      	adds	r3, r7, #4
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	681a      	ldr	r2, [r3, #0]
    1adc:	1d3b      	adds	r3, r7, #4
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	689b      	ldr	r3, [r3, #8]
    1ae2:	4413      	add	r3, r2
    1ae4:	1d3a      	adds	r2, r7, #4
    1ae6:	6812      	ldr	r2, [r2, #0]
    1ae8:	68d2      	ldr	r2, [r2, #12]
    1aea:	fbb3 f1f2 	udiv	r1, r3, r2
    1aee:	fb02 f201 	mul.w	r2, r2, r1
    1af2:	1a99      	subs	r1, r3, r2
    1af4:	1d3b      	adds	r3, r7, #4
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	685a      	ldr	r2, [r3, #4]
    1afa:	1d3b      	adds	r3, r7, #4
    1afc:	6818      	ldr	r0, [r3, #0]
    1afe:	f000 f8cb 	bl	1c98 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1b02:	4603      	mov	r3, r0
    1b04:	4622      	mov	r2, r4
    1b06:	701a      	strb	r2, [r3, #0]
          column_++;
    1b08:	1d3b      	adds	r3, r7, #4
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	685b      	ldr	r3, [r3, #4]
    1b0e:	1c5a      	adds	r2, r3, #1
    1b10:	1d3b      	adds	r3, r7, #4
    1b12:	681b      	ldr	r3, [r3, #0]
    1b14:	605a      	str	r2, [r3, #4]
          if (column_ >= max_columns_)
    1b16:	1d3b      	adds	r3, r7, #4
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	685a      	ldr	r2, [r3, #4]
    1b1c:	1d3b      	adds	r3, r7, #4
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	691b      	ldr	r3, [r3, #16]
    1b22:	429a      	cmp	r2, r3
    1b24:	d30a      	bcc.n	1b3c <sjsu::GraphicalTerminal::printf(char const*, ...)+0xde>
          {
            column_ = 0;
    1b26:	1d3b      	adds	r3, r7, #4
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	2200      	movs	r2, #0
    1b2c:	605a      	str	r2, [r3, #4]
            row_++;
    1b2e:	1d3b      	adds	r3, r7, #4
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	1c5a      	adds	r2, r3, #1
    1b36:	1d3b      	adds	r3, r7, #4
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	601a      	str	r2, [r3, #0]
          }
          break;
    1b3c:	bf00      	nop
    for (; pos < characters; pos++)
    1b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    1b42:	3301      	adds	r3, #1
    1b44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    1b48:	e7a5      	b.n	1a96 <sjsu::GraphicalTerminal::printf(char const*, ...)+0x38>
      }
    }
    Update();
    1b4a:	1d3b      	adds	r3, r7, #4
    1b4c:	6818      	ldr	r0, [r3, #0]
    1b4e:	f000 f83c 	bl	1bca <sjsu::GraphicalTerminal::Update()>
    if (row_ >= max_rows_)
    1b52:	1d3b      	adds	r3, r7, #4
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	681a      	ldr	r2, [r3, #0]
    1b58:	1d3b      	adds	r3, r7, #4
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	68db      	ldr	r3, [r3, #12]
    1b5e:	429a      	cmp	r2, r3
    1b60:	d329      	bcc.n	1bb6 <sjsu::GraphicalTerminal::printf(char const*, ...)+0x158>
    {
      row_start_ = (row_start_ + 1) % max_rows_;
    1b62:	1d3b      	adds	r3, r7, #4
    1b64:	681b      	ldr	r3, [r3, #0]
    1b66:	689b      	ldr	r3, [r3, #8]
    1b68:	3301      	adds	r3, #1
    1b6a:	1d3a      	adds	r2, r7, #4
    1b6c:	6812      	ldr	r2, [r2, #0]
    1b6e:	68d2      	ldr	r2, [r2, #12]
    1b70:	fbb3 f1f2 	udiv	r1, r3, r2
    1b74:	fb02 f201 	mul.w	r2, r2, r1
    1b78:	1a9a      	subs	r2, r3, r2
    1b7a:	1d3b      	adds	r3, r7, #4
    1b7c:	681b      	ldr	r3, [r3, #0]
    1b7e:	609a      	str	r2, [r3, #8]
      row_       = max_rows_ - 1;
    1b80:	1d3b      	adds	r3, r7, #4
    1b82:	681b      	ldr	r3, [r3, #0]
    1b84:	68db      	ldr	r3, [r3, #12]
    1b86:	1e5a      	subs	r2, r3, #1
    1b88:	1d3b      	adds	r3, r7, #4
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	601a      	str	r2, [r3, #0]
      ClearRow((row_ + row_start_) % max_rows_);
    1b8e:	1d3b      	adds	r3, r7, #4
    1b90:	681b      	ldr	r3, [r3, #0]
    1b92:	681a      	ldr	r2, [r3, #0]
    1b94:	1d3b      	adds	r3, r7, #4
    1b96:	681b      	ldr	r3, [r3, #0]
    1b98:	689b      	ldr	r3, [r3, #8]
    1b9a:	4413      	add	r3, r2
    1b9c:	1d3a      	adds	r2, r7, #4
    1b9e:	6812      	ldr	r2, [r2, #0]
    1ba0:	68d2      	ldr	r2, [r2, #12]
    1ba2:	fbb3 f1f2 	udiv	r1, r3, r2
    1ba6:	fb02 f201 	mul.w	r2, r2, r1
    1baa:	1a9a      	subs	r2, r3, r2
    1bac:	1d3b      	adds	r3, r7, #4
    1bae:	4611      	mov	r1, r2
    1bb0:	6818      	ldr	r0, [r3, #0]
    1bb2:	f000 f854 	bl	1c5e <sjsu::GraphicalTerminal::ClearRow(unsigned long)>
    }
    return pos;
    1bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  }
    1bba:	4618      	mov	r0, r3
    1bbc:	f507 778c 	add.w	r7, r7, #280	; 0x118
    1bc0:	46bd      	mov	sp, r7
    1bc2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    1bc6:	b003      	add	sp, #12
    1bc8:	4770      	bx	lr

00001bca <sjsu::GraphicalTerminal::Update()>:
  {
    column_ = 0;
    return *this;
  }

  GraphicalTerminal & Update()
    1bca:	b590      	push	{r4, r7, lr}
    1bcc:	b087      	sub	sp, #28
    1bce:	af00      	add	r7, sp, #0
    1bd0:	6078      	str	r0, [r7, #4]
  {
    graphics_->Clear();
    1bd2:	687b      	ldr	r3, [r7, #4]
    1bd4:	695b      	ldr	r3, [r3, #20]
    1bd6:	4618      	mov	r0, r3
    1bd8:	f7ff feb6 	bl	1948 <sjsu::Graphics::Clear()>
    for (int32_t i = 0; i < static_cast<int32_t>(max_rows_); i++)
    1bdc:	2300      	movs	r3, #0
    1bde:	617b      	str	r3, [r7, #20]
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	68db      	ldr	r3, [r3, #12]
    1be4:	461a      	mov	r2, r3
    1be6:	697b      	ldr	r3, [r7, #20]
    1be8:	4293      	cmp	r3, r2
    1bea:	da2e      	bge.n	1c4a <sjsu::GraphicalTerminal::Update()+0x80>
    {
      for (int32_t j = 0; j < static_cast<int32_t>(max_columns_); j++)
    1bec:	2300      	movs	r3, #0
    1bee:	613b      	str	r3, [r7, #16]
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	691b      	ldr	r3, [r3, #16]
    1bf4:	461a      	mov	r2, r3
    1bf6:	693b      	ldr	r3, [r7, #16]
    1bf8:	4293      	cmp	r3, r2
    1bfa:	da22      	bge.n	1c42 <sjsu::GraphicalTerminal::Update()+0x78>
      {
        int32_t x = j * kCharacterWidth;
    1bfc:	693b      	ldr	r3, [r7, #16]
    1bfe:	00db      	lsls	r3, r3, #3
    1c00:	60fb      	str	r3, [r7, #12]
        int32_t y = i * kCharacterHeight;
    1c02:	697b      	ldr	r3, [r7, #20]
    1c04:	00db      	lsls	r3, r3, #3
    1c06:	60bb      	str	r3, [r7, #8]
        graphics_->DrawCharacter(
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	695c      	ldr	r4, [r3, #20]
            x, y, GetChar(((i + row_start_) % max_rows_), j));
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	689a      	ldr	r2, [r3, #8]
    1c10:	697b      	ldr	r3, [r7, #20]
    1c12:	4413      	add	r3, r2
    1c14:	687a      	ldr	r2, [r7, #4]
    1c16:	68d2      	ldr	r2, [r2, #12]
    1c18:	fbb3 f1f2 	udiv	r1, r3, r2
    1c1c:	fb02 f201 	mul.w	r2, r2, r1
    1c20:	1a9b      	subs	r3, r3, r2
    1c22:	693a      	ldr	r2, [r7, #16]
    1c24:	4619      	mov	r1, r3
    1c26:	6878      	ldr	r0, [r7, #4]
    1c28:	f000 f836 	bl	1c98 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1c2c:	4603      	mov	r3, r0
        graphics_->DrawCharacter(
    1c2e:	781b      	ldrb	r3, [r3, #0]
    1c30:	68ba      	ldr	r2, [r7, #8]
    1c32:	68f9      	ldr	r1, [r7, #12]
    1c34:	4620      	mov	r0, r4
    1c36:	f7ff fe99 	bl	196c <sjsu::Graphics::DrawCharacter(long, long, char)>
      for (int32_t j = 0; j < static_cast<int32_t>(max_columns_); j++)
    1c3a:	693b      	ldr	r3, [r7, #16]
    1c3c:	3301      	adds	r3, #1
    1c3e:	613b      	str	r3, [r7, #16]
    1c40:	e7d6      	b.n	1bf0 <sjsu::GraphicalTerminal::Update()+0x26>
    for (int32_t i = 0; i < static_cast<int32_t>(max_rows_); i++)
    1c42:	697b      	ldr	r3, [r7, #20]
    1c44:	3301      	adds	r3, #1
    1c46:	617b      	str	r3, [r7, #20]
    1c48:	e7ca      	b.n	1be0 <sjsu::GraphicalTerminal::Update()+0x16>
      }
    }
    graphics_->Update();
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	695b      	ldr	r3, [r3, #20]
    1c4e:	4618      	mov	r0, r3
    1c50:	f7ff fe69 	bl	1926 <sjsu::Graphics::Update()>
    return *this;
    1c54:	687b      	ldr	r3, [r7, #4]
  }
    1c56:	4618      	mov	r0, r3
    1c58:	371c      	adds	r7, #28
    1c5a:	46bd      	mov	sp, r7
    1c5c:	bd90      	pop	{r4, r7, pc}

00001c5e <sjsu::GraphicalTerminal::ClearRow(unsigned long)>:

  GraphicalTerminal & ClearRow(uint32_t row_location)
    1c5e:	b580      	push	{r7, lr}
    1c60:	b084      	sub	sp, #16
    1c62:	af00      	add	r7, sp, #0
    1c64:	6078      	str	r0, [r7, #4]
    1c66:	6039      	str	r1, [r7, #0]
  {
    for (uint32_t i = 0; i < max_columns_; i++)
    1c68:	2300      	movs	r3, #0
    1c6a:	60fb      	str	r3, [r7, #12]
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	691b      	ldr	r3, [r3, #16]
    1c70:	68fa      	ldr	r2, [r7, #12]
    1c72:	429a      	cmp	r2, r3
    1c74:	d20b      	bcs.n	1c8e <sjsu::GraphicalTerminal::ClearRow(unsigned long)+0x30>
    {
      GetChar(row_location, i) = ' ';
    1c76:	68fa      	ldr	r2, [r7, #12]
    1c78:	6839      	ldr	r1, [r7, #0]
    1c7a:	6878      	ldr	r0, [r7, #4]
    1c7c:	f000 f80c 	bl	1c98 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1c80:	4603      	mov	r3, r0
    1c82:	2220      	movs	r2, #32
    1c84:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < max_columns_; i++)
    1c86:	68fb      	ldr	r3, [r7, #12]
    1c88:	3301      	adds	r3, #1
    1c8a:	60fb      	str	r3, [r7, #12]
    1c8c:	e7ee      	b.n	1c6c <sjsu::GraphicalTerminal::ClearRow(unsigned long)+0xe>
    }
    return *this;
    1c8e:	687b      	ldr	r3, [r7, #4]
  }
    1c90:	4618      	mov	r0, r3
    1c92:	3710      	adds	r7, #16
    1c94:	46bd      	mov	sp, r7
    1c96:	bd80      	pop	{r7, pc}

00001c98 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>:
    graphics_->Update();
    return *this;
  }

 private:
  char & GetChar(uint32_t row, uint32_t column)
    1c98:	b480      	push	{r7}
    1c9a:	b085      	sub	sp, #20
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	60f8      	str	r0, [r7, #12]
    1ca0:	60b9      	str	r1, [r7, #8]
    1ca2:	607a      	str	r2, [r7, #4]
  {
    return cache_[(row * max_columns_) + column];
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	699a      	ldr	r2, [r3, #24]
    1ca8:	68fb      	ldr	r3, [r7, #12]
    1caa:	691b      	ldr	r3, [r3, #16]
    1cac:	68b9      	ldr	r1, [r7, #8]
    1cae:	fb01 f103 	mul.w	r1, r1, r3
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	440b      	add	r3, r1
    1cb6:	4413      	add	r3, r2
  }
    1cb8:	4618      	mov	r0, r3
    1cba:	3714      	adds	r7, #20
    1cbc:	46bd      	mov	sp, r7
    1cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc2:	4770      	bx	lr

00001cc4 <sjsu::Button::Button(sjsu::Gpio const&)>:
/// using a sjsu::Gpio object.
class Button
{
 public:
  /// Button Constructor
  constexpr explicit Button(const sjsu::Gpio & button)
    1cc4:	b480      	push	{r7}
    1cc6:	b083      	sub	sp, #12
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	6039      	str	r1, [r7, #0]
      : button_(button), was_pressed_(false), was_released_(false)
    1cce:	4a09      	ldr	r2, [pc, #36]	; (1cf4 <sjsu::Button::Button(sjsu::Gpio const&)+0x30>)
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	601a      	str	r2, [r3, #0]
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	683a      	ldr	r2, [r7, #0]
    1cd8:	605a      	str	r2, [r3, #4]
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	2200      	movs	r2, #0
    1cde:	721a      	strb	r2, [r3, #8]
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	2200      	movs	r2, #0
    1ce4:	725a      	strb	r2, [r3, #9]
  {
  }
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	4618      	mov	r0, r3
    1cea:	370c      	adds	r7, #12
    1cec:	46bd      	mov	sp, r7
    1cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cf2:	4770      	bx	lr
    1cf4:	000084e0 	.word	0x000084e0

00001cf8 <sjsu::Button::Initialize()>:
  /// Initialize the Gpio for use as a button. Must be called before calling
  /// anything else.
  virtual void Initialize()
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b082      	sub	sp, #8
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	6078      	str	r0, [r7, #4]
  {
    button_.SetDirection(sjsu::Gpio::Direction::kInput);
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	685b      	ldr	r3, [r3, #4]
    1d04:	681b      	ldr	r3, [r3, #0]
    1d06:	681b      	ldr	r3, [r3, #0]
    1d08:	687a      	ldr	r2, [r7, #4]
    1d0a:	6852      	ldr	r2, [r2, #4]
    1d0c:	2100      	movs	r1, #0
    1d0e:	4610      	mov	r0, r2
    1d10:	4798      	blx	r3
    button_.GetPin().PullDown();
    1d12:	687b      	ldr	r3, [r7, #4]
    1d14:	685b      	ldr	r3, [r3, #4]
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	3310      	adds	r3, #16
    1d1a:	681b      	ldr	r3, [r3, #0]
    1d1c:	687a      	ldr	r2, [r7, #4]
    1d1e:	6852      	ldr	r2, [r2, #4]
    1d20:	4610      	mov	r0, r2
    1d22:	4798      	blx	r3
    1d24:	4603      	mov	r3, r0
    1d26:	4618      	mov	r0, r3
    1d28:	f7fe fb9a 	bl	460 <sjsu::Pin::PullDown() const>
  }
    1d2c:	bf00      	nop
    1d2e:	3708      	adds	r7, #8
    1d30:	46bd      	mov	sp, r7
    1d32:	bd80      	pop	{r7, pc}

00001d34 <sjsu::Button::Released()>:
  /// Usage:
  /// In order for this to work, the Released() method needs to be called
  /// periodically to check that the state of the pin has changed. If it is not
  /// called fast enough, it may miss a transition of the signal from HIGH to
  /// LOW.
  virtual bool Released()
    1d34:	b580      	push	{r7, lr}
    1d36:	b084      	sub	sp, #16
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
  {
    bool result = false;
    1d3c:	2300      	movs	r3, #0
    1d3e:	73fb      	strb	r3, [r7, #15]
    if (button_.Read() && !was_pressed_)
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	681b      	ldr	r3, [r3, #0]
    1d46:	330c      	adds	r3, #12
    1d48:	681b      	ldr	r3, [r3, #0]
    1d4a:	687a      	ldr	r2, [r7, #4]
    1d4c:	6852      	ldr	r2, [r2, #4]
    1d4e:	4610      	mov	r0, r2
    1d50:	4798      	blx	r3
    1d52:	4603      	mov	r3, r0
    1d54:	2b00      	cmp	r3, #0
    1d56:	d008      	beq.n	1d6a <sjsu::Button::Released()+0x36>
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	7a1b      	ldrb	r3, [r3, #8]
    1d5c:	f083 0301 	eor.w	r3, r3, #1
    1d60:	b2db      	uxtb	r3, r3
    1d62:	2b00      	cmp	r3, #0
    1d64:	d001      	beq.n	1d6a <sjsu::Button::Released()+0x36>
    1d66:	2301      	movs	r3, #1
    1d68:	e000      	b.n	1d6c <sjsu::Button::Released()+0x38>
    1d6a:	2300      	movs	r3, #0
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d003      	beq.n	1d78 <sjsu::Button::Released()+0x44>
    {
      was_pressed_ = true;
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	2201      	movs	r2, #1
    1d74:	721a      	strb	r2, [r3, #8]
    1d76:	e01c      	b.n	1db2 <sjsu::Button::Released()+0x7e>
    }
    else if (!button_.Read() && was_pressed_)
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	685b      	ldr	r3, [r3, #4]
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	330c      	adds	r3, #12
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	687a      	ldr	r2, [r7, #4]
    1d84:	6852      	ldr	r2, [r2, #4]
    1d86:	4610      	mov	r0, r2
    1d88:	4798      	blx	r3
    1d8a:	4603      	mov	r3, r0
    1d8c:	f083 0301 	eor.w	r3, r3, #1
    1d90:	b2db      	uxtb	r3, r3
    1d92:	2b00      	cmp	r3, #0
    1d94:	d005      	beq.n	1da2 <sjsu::Button::Released()+0x6e>
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	7a1b      	ldrb	r3, [r3, #8]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d001      	beq.n	1da2 <sjsu::Button::Released()+0x6e>
    1d9e:	2301      	movs	r3, #1
    1da0:	e000      	b.n	1da4 <sjsu::Button::Released()+0x70>
    1da2:	2300      	movs	r3, #0
    1da4:	2b00      	cmp	r3, #0
    1da6:	d004      	beq.n	1db2 <sjsu::Button::Released()+0x7e>
    {
      result       = true;
    1da8:	2301      	movs	r3, #1
    1daa:	73fb      	strb	r3, [r7, #15]
      was_pressed_ = false;
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	2200      	movs	r2, #0
    1db0:	721a      	strb	r2, [r3, #8]
    }
    return result;
    1db2:	7bfb      	ldrb	r3, [r7, #15]
  }
    1db4:	4618      	mov	r0, r3
    1db6:	3710      	adds	r7, #16
    1db8:	46bd      	mov	sp, r7
    1dba:	bd80      	pop	{r7, pc}

00001dbc <sjsu::Button::Pressed()>:
  /// Same documentation as Released() but for the Pressed() state.
  virtual bool Pressed()
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b084      	sub	sp, #16
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
  {
    bool result = false;
    1dc4:	2300      	movs	r3, #0
    1dc6:	73fb      	strb	r3, [r7, #15]
    if (!button_.Read() && !was_released_)
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	685b      	ldr	r3, [r3, #4]
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	330c      	adds	r3, #12
    1dd0:	681b      	ldr	r3, [r3, #0]
    1dd2:	687a      	ldr	r2, [r7, #4]
    1dd4:	6852      	ldr	r2, [r2, #4]
    1dd6:	4610      	mov	r0, r2
    1dd8:	4798      	blx	r3
    1dda:	4603      	mov	r3, r0
    1ddc:	f083 0301 	eor.w	r3, r3, #1
    1de0:	b2db      	uxtb	r3, r3
    1de2:	2b00      	cmp	r3, #0
    1de4:	d008      	beq.n	1df8 <sjsu::Button::Pressed()+0x3c>
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	7a5b      	ldrb	r3, [r3, #9]
    1dea:	f083 0301 	eor.w	r3, r3, #1
    1dee:	b2db      	uxtb	r3, r3
    1df0:	2b00      	cmp	r3, #0
    1df2:	d001      	beq.n	1df8 <sjsu::Button::Pressed()+0x3c>
    1df4:	2301      	movs	r3, #1
    1df6:	e000      	b.n	1dfa <sjsu::Button::Pressed()+0x3e>
    1df8:	2300      	movs	r3, #0
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d003      	beq.n	1e06 <sjsu::Button::Pressed()+0x4a>
    {
      was_released_ = true;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	2201      	movs	r2, #1
    1e02:	725a      	strb	r2, [r3, #9]
    1e04:	e019      	b.n	1e3a <sjsu::Button::Pressed()+0x7e>
    }
    else if (button_.Read() && was_released_)
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	685b      	ldr	r3, [r3, #4]
    1e0a:	681b      	ldr	r3, [r3, #0]
    1e0c:	330c      	adds	r3, #12
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	687a      	ldr	r2, [r7, #4]
    1e12:	6852      	ldr	r2, [r2, #4]
    1e14:	4610      	mov	r0, r2
    1e16:	4798      	blx	r3
    1e18:	4603      	mov	r3, r0
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d005      	beq.n	1e2a <sjsu::Button::Pressed()+0x6e>
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	7a5b      	ldrb	r3, [r3, #9]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d001      	beq.n	1e2a <sjsu::Button::Pressed()+0x6e>
    1e26:	2301      	movs	r3, #1
    1e28:	e000      	b.n	1e2c <sjsu::Button::Pressed()+0x70>
    1e2a:	2300      	movs	r3, #0
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d004      	beq.n	1e3a <sjsu::Button::Pressed()+0x7e>
    {
      result        = true;
    1e30:	2301      	movs	r3, #1
    1e32:	73fb      	strb	r3, [r7, #15]
      was_released_ = false;
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	2200      	movs	r2, #0
    1e38:	725a      	strb	r2, [r3, #9]
    }
    return result;
    1e3a:	7bfb      	ldrb	r3, [r7, #15]
  }
    1e3c:	4618      	mov	r0, r3
    1e3e:	3710      	adds	r7, #16
    1e40:	46bd      	mov	sp, r7
    1e42:	bd80      	pop	{r7, pc}

00001e44 <sjsu::Button::ResetState()>:
  /// Resets the internal state of the button controller.
  virtual void ResetState()
    1e44:	b480      	push	{r7}
    1e46:	b083      	sub	sp, #12
    1e48:	af00      	add	r7, sp, #0
    1e4a:	6078      	str	r0, [r7, #4]
  {
    was_pressed_  = false;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	2200      	movs	r2, #0
    1e50:	721a      	strb	r2, [r3, #8]
    was_released_ = false;
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	2200      	movs	r2, #0
    1e56:	725a      	strb	r2, [r3, #9]
  }
    1e58:	bf00      	nop
    1e5a:	370c      	adds	r7, #12
    1e5c:	46bd      	mov	sp, r7
    1e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e62:	4770      	bx	lr

00001e64 <sjsu::Button::GetGpio()>:
  /// @returns a reference to the internal sjsu::Gpio object.
  virtual const sjsu::Gpio & GetGpio()
    1e64:	b480      	push	{r7}
    1e66:	b083      	sub	sp, #12
    1e68:	af00      	add	r7, sp, #0
    1e6a:	6078      	str	r0, [r7, #4]
  {
    return button_;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	685b      	ldr	r3, [r3, #4]
  }
    1e70:	4618      	mov	r0, r3
    1e72:	370c      	adds	r7, #12
    1e74:	46bd      	mov	sp, r7
    1e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e7a:	4770      	bx	lr

00001e7c <main>:
#include "L3_Application/graphical_terminal.hpp"
#include "L2_HAL/switches/button.hpp"
#include "utility/log.hpp"
#include "utility/time.hpp"
int main()
{
    1e7c:	b5b0      	push	{r4, r5, r7, lr}
    1e7e:	b0e2      	sub	sp, #392	; 0x188
    1e80:	af00      	add	r7, sp, #0

  oled_terminal.printf("Binary Total:\n");
  for (int j = 3; j >= 0; j--) //print array of numbers (binaryArr) which represents the binary of the decimal given
    oled_terminal.printf("%d",binaryArr[j]);
 
  return (0);
    1e82:	466b      	mov	r3, sp
    1e84:	461d      	mov	r5, r3
  inline static sjsu::lpc40xx::Gpio led2 = sjsu::lpc40xx::Gpio(1, 24);
  inline static sjsu::lpc40xx::Gpio led3 = sjsu::lpc40xx::Gpio(1, 18);

  [[gnu::always_inline]] inline static sjsu::Graphics & Oled()
  {
    static sjsu::lpc40xx::Gpio oled_cs = sjsu::lpc40xx::Gpio(1, 22);
    1e86:	4bd8      	ldr	r3, [pc, #864]	; (21e8 <main+0x36c>)
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	f003 0301 	and.w	r3, r3, #1
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d108      	bne.n	1ea4 <main+0x28>
    1e92:	2300      	movs	r3, #0
    1e94:	2216      	movs	r2, #22
    1e96:	2101      	movs	r1, #1
    1e98:	48d4      	ldr	r0, [pc, #848]	; (21ec <main+0x370>)
    1e9a:	f7fe fec7 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1e9e:	4bd2      	ldr	r3, [pc, #840]	; (21e8 <main+0x36c>)
    1ea0:	2201      	movs	r2, #1
    1ea2:	601a      	str	r2, [r3, #0]
    static sjsu::lpc40xx::Gpio oled_dc = sjsu::lpc40xx::Gpio(1, 25);
    1ea4:	4bd2      	ldr	r3, [pc, #840]	; (21f0 <main+0x374>)
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	f003 0301 	and.w	r3, r3, #1
    1eac:	2b00      	cmp	r3, #0
    1eae:	d108      	bne.n	1ec2 <main+0x46>
    1eb0:	2300      	movs	r3, #0
    1eb2:	2219      	movs	r2, #25
    1eb4:	2101      	movs	r1, #1
    1eb6:	48cf      	ldr	r0, [pc, #828]	; (21f4 <main+0x378>)
    1eb8:	f7fe feb8 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1ebc:	4bcc      	ldr	r3, [pc, #816]	; (21f0 <main+0x374>)
    1ebe:	2201      	movs	r2, #1
    1ec0:	601a      	str	r2, [r3, #0]
    static sjsu::Ssd1306 oled_display(spi1, oled_cs, oled_dc);
    static sjsu::Graphics oled(oled_display);
    1ec2:	4bcd      	ldr	r3, [pc, #820]	; (21f8 <main+0x37c>)
    1ec4:	681b      	ldr	r3, [r3, #0]
    1ec6:	f003 0301 	and.w	r3, r3, #1
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d106      	bne.n	1edc <main+0x60>
    1ece:	49cb      	ldr	r1, [pc, #812]	; (21fc <main+0x380>)
    1ed0:	48cb      	ldr	r0, [pc, #812]	; (2200 <main+0x384>)
    1ed2:	f7ff fce2 	bl	189a <sjsu::Graphics::Graphics(sjsu::PixelDisplay&)>
    1ed6:	4bc8      	ldr	r3, [pc, #800]	; (21f8 <main+0x37c>)
    1ed8:	2201      	movs	r2, #1
    1eda:	601a      	str	r2, [r3, #0]
    return oled;
    1edc:	4bc8      	ldr	r3, [pc, #800]	; (2200 <main+0x384>)
  sjsu::Graphics & oled_graphics = sjtwo::Oled();
    1ede:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    cache;
    1ee2:	2300      	movs	r3, #0
    1ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    1ee8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
    1eec:	227c      	movs	r2, #124	; 0x7c
    1eee:	2100      	movs	r1, #0
    1ef0:	4618      	mov	r0, r3
    1ef2:	f006 f923 	bl	813c <memset>
  sjsu::GraphicalTerminal oled_terminal(&oled_graphics, &cache);
    1ef6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
    1efa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    1efe:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
    1f02:	4618      	mov	r0, r3
    1f04:	f000 fb62 	bl	25cc <sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)>
  oled_terminal.Initialize();
    1f08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    1f0c:	4618      	mov	r0, r3
    1f0e:	f7ff fd8f 	bl	1a30 <sjsu::GraphicalTerminal::Initialize()>
  sjsu::lpc40xx::Gpio button_gpio0(1, 19);
    1f12:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
    1f16:	2300      	movs	r3, #0
    1f18:	2213      	movs	r2, #19
    1f1a:	2101      	movs	r1, #1
    1f1c:	f7fe fe86 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::lpc40xx::Gpio button_gpio1(1, 15);
    1f20:	f107 0080 	add.w	r0, r7, #128	; 0x80
    1f24:	2300      	movs	r3, #0
    1f26:	220f      	movs	r2, #15
    1f28:	2101      	movs	r1, #1
    1f2a:	f7fe fe7f 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::lpc40xx::Gpio button_gpio2(0, 30);
    1f2e:	f107 0060 	add.w	r0, r7, #96	; 0x60
    1f32:	2300      	movs	r3, #0
    1f34:	221e      	movs	r2, #30
    1f36:	2100      	movs	r1, #0
    1f38:	f7fe fe78 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::lpc40xx::Gpio button_gpio3(0, 29);
    1f3c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    1f40:	2300      	movs	r3, #0
    1f42:	221d      	movs	r2, #29
    1f44:	2100      	movs	r1, #0
    1f46:	f7fe fe71 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::Button button0(button_gpio0);
    1f4a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
    1f4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1f52:	4611      	mov	r1, r2
    1f54:	4618      	mov	r0, r3
    1f56:	f7ff feb5 	bl	1cc4 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjsu::Button button1(button_gpio1);
    1f5a:	f107 0280 	add.w	r2, r7, #128	; 0x80
    1f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    1f62:	4611      	mov	r1, r2
    1f64:	4618      	mov	r0, r3
    1f66:	f7ff fead 	bl	1cc4 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjsu::Button button2(button_gpio2);
    1f6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    1f6e:	f107 031c 	add.w	r3, r7, #28
    1f72:	4611      	mov	r1, r2
    1f74:	4618      	mov	r0, r3
    1f76:	f7ff fea5 	bl	1cc4 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjsu::Button button3(button_gpio3);
    1f7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1f7e:	f107 0310 	add.w	r3, r7, #16
    1f82:	4611      	mov	r1, r2
    1f84:	4618      	mov	r0, r3
    1f86:	f7ff fe9d 	bl	1cc4 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjtwo::led1.SetAsOutput();
    1f8a:	489e      	ldr	r0, [pc, #632]	; (2204 <main+0x388>)
    1f8c:	f7fe fb7a 	bl	684 <sjsu::Gpio::SetAsOutput() const>
  sjtwo::led2.SetAsOutput();
    1f90:	489d      	ldr	r0, [pc, #628]	; (2208 <main+0x38c>)
    1f92:	f7fe fb77 	bl	684 <sjsu::Gpio::SetAsOutput() const>
  sjtwo::led3.SetAsOutput();
    1f96:	489d      	ldr	r0, [pc, #628]	; (220c <main+0x390>)
    1f98:	f7fe fb74 	bl	684 <sjsu::Gpio::SetAsOutput() const>
  sjtwo::led1.SetHigh(); //off
    1f9c:	4899      	ldr	r0, [pc, #612]	; (2204 <main+0x388>)
    1f9e:	f7fe fb53 	bl	648 <sjsu::Gpio::SetHigh() const>
  sjtwo::led2.SetHigh();      
    1fa2:	4899      	ldr	r0, [pc, #612]	; (2208 <main+0x38c>)
    1fa4:	f7fe fb50 	bl	648 <sjsu::Gpio::SetHigh() const>
  sjtwo::led3.SetHigh();
    1fa8:	4898      	ldr	r0, [pc, #608]	; (220c <main+0x390>)
    1faa:	f7fe fb4d 	bl	648 <sjsu::Gpio::SetHigh() const>
  button0.Initialize();
    1fae:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1fb2:	4618      	mov	r0, r3
    1fb4:	f7ff fea0 	bl	1cf8 <sjsu::Button::Initialize()>
  button1.Initialize();
    1fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
    1fbc:	4618      	mov	r0, r3
    1fbe:	f7ff fe9b 	bl	1cf8 <sjsu::Button::Initialize()>
  button2.Initialize();
    1fc2:	f107 031c 	add.w	r3, r7, #28
    1fc6:	4618      	mov	r0, r3
    1fc8:	f7ff fe96 	bl	1cf8 <sjsu::Button::Initialize()>
  button3.Initialize();
    1fcc:	f107 0310 	add.w	r3, r7, #16
    1fd0:	4618      	mov	r0, r3
    1fd2:	f7ff fe91 	bl	1cf8 <sjsu::Button::Initialize()>
  int b0 = 0;
    1fd6:	2300      	movs	r3, #0
    1fd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  int b1 = 0;
    1fdc:	2300      	movs	r3, #0
    1fde:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  int b2 = 0;
    1fe2:	2300      	movs	r3, #0
    1fe4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  int amntNum = 2;
    1fe8:	2302      	movs	r3, #2
    1fea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  int decimals[amntNum]; 
    1fee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
    1ff2:	1e5c      	subs	r4, r3, #1
    1ff4:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
    1ff8:	4623      	mov	r3, r4
    1ffa:	3301      	adds	r3, #1
    1ffc:	4618      	mov	r0, r3
    1ffe:	f04f 0100 	mov.w	r1, #0
    2002:	f04f 0200 	mov.w	r2, #0
    2006:	f04f 0300 	mov.w	r3, #0
    200a:	014b      	lsls	r3, r1, #5
    200c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    2010:	0142      	lsls	r2, r0, #5
    2012:	4623      	mov	r3, r4
    2014:	3301      	adds	r3, #1
    2016:	4618      	mov	r0, r3
    2018:	f04f 0100 	mov.w	r1, #0
    201c:	f04f 0200 	mov.w	r2, #0
    2020:	f04f 0300 	mov.w	r3, #0
    2024:	014b      	lsls	r3, r1, #5
    2026:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    202a:	0142      	lsls	r2, r0, #5
    202c:	4623      	mov	r3, r4
    202e:	3301      	adds	r3, #1
    2030:	009b      	lsls	r3, r3, #2
    2032:	3307      	adds	r3, #7
    2034:	08db      	lsrs	r3, r3, #3
    2036:	00db      	lsls	r3, r3, #3
    2038:	ebad 0d03 	sub.w	sp, sp, r3
    203c:	466b      	mov	r3, sp
    203e:	3303      	adds	r3, #3
    2040:	089b      	lsrs	r3, r3, #2
    2042:	009b      	lsls	r3, r3, #2
    2044:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  int counter = 0;
    2048:	2300      	movs	r3, #0
    204a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  int total = 0;
    204e:	2300      	movs	r3, #0
    2050:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  while (counter < amntNum) {
    2054:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
    2058:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
    205c:	429a      	cmp	r2, r3
    205e:	da6d      	bge.n	213c <main+0x2c0>
    if (button1.Pressed() == 1) {//LSB, SWB1
    2060:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2064:	4618      	mov	r0, r3
    2066:	f7ff fea9 	bl	1dbc <sjsu::Button::Pressed()>
    206a:	4603      	mov	r3, r0
    206c:	2b01      	cmp	r3, #1
    206e:	bf0c      	ite	eq
    2070:	2301      	moveq	r3, #1
    2072:	2300      	movne	r3, #0
    2074:	b2db      	uxtb	r3, r3
    2076:	2b00      	cmp	r3, #0
    2078:	d005      	beq.n	2086 <main+0x20a>
      b0 = 1;
    207a:	2301      	movs	r3, #1
    207c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      sjtwo::led1.SetLow(); //on
    2080:	4860      	ldr	r0, [pc, #384]	; (2204 <main+0x388>)
    2082:	f7fe faf0 	bl	666 <sjsu::Gpio::SetLow() const>
    if (button2.Pressed() == 1) {//SWB2
    2086:	f107 031c 	add.w	r3, r7, #28
    208a:	4618      	mov	r0, r3
    208c:	f7ff fe96 	bl	1dbc <sjsu::Button::Pressed()>
    2090:	4603      	mov	r3, r0
    2092:	2b01      	cmp	r3, #1
    2094:	bf0c      	ite	eq
    2096:	2301      	moveq	r3, #1
    2098:	2300      	movne	r3, #0
    209a:	b2db      	uxtb	r3, r3
    209c:	2b00      	cmp	r3, #0
    209e:	d005      	beq.n	20ac <main+0x230>
      b1 = 1;
    20a0:	2301      	movs	r3, #1
    20a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      sjtwo::led2.SetLow(); 
    20a6:	4858      	ldr	r0, [pc, #352]	; (2208 <main+0x38c>)
    20a8:	f7fe fadd 	bl	666 <sjsu::Gpio::SetLow() const>
    if (button3.Pressed() == 1) {//MSB, SWB3
    20ac:	f107 0310 	add.w	r3, r7, #16
    20b0:	4618      	mov	r0, r3
    20b2:	f7ff fe83 	bl	1dbc <sjsu::Button::Pressed()>
    20b6:	4603      	mov	r3, r0
    20b8:	2b01      	cmp	r3, #1
    20ba:	bf0c      	ite	eq
    20bc:	2301      	moveq	r3, #1
    20be:	2300      	movne	r3, #0
    20c0:	b2db      	uxtb	r3, r3
    20c2:	2b00      	cmp	r3, #0
    20c4:	d005      	beq.n	20d2 <main+0x256>
      b2 = 1;
    20c6:	2301      	movs	r3, #1
    20c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      sjtwo::led3.SetLow();
    20cc:	484f      	ldr	r0, [pc, #316]	; (220c <main+0x390>)
    20ce:	f7fe faca 	bl	666 <sjsu::Gpio::SetLow() const>
    if (button0.Pressed() == 1) {//Exit, SWB0
    20d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    20d6:	4618      	mov	r0, r3
    20d8:	f7ff fe70 	bl	1dbc <sjsu::Button::Pressed()>
    20dc:	4603      	mov	r3, r0
    20de:	2b01      	cmp	r3, #1
    20e0:	bf0c      	ite	eq
    20e2:	2301      	moveq	r3, #1
    20e4:	2300      	movne	r3, #0
    20e6:	b2db      	uxtb	r3, r3
    20e8:	2b00      	cmp	r3, #0
    20ea:	d0b3      	beq.n	2054 <main+0x1d8>
      decimals[counter] = (b2*4) + (b1*2) + b0;
    20ec:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    20f0:	005a      	lsls	r2, r3, #1
    20f2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
    20f6:	4413      	add	r3, r2
    20f8:	005a      	lsls	r2, r3, #1
    20fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
    20fe:	18d1      	adds	r1, r2, r3
    2100:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
    2104:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
    2108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      sjtwo::led1.SetHigh();
    210c:	483d      	ldr	r0, [pc, #244]	; (2204 <main+0x388>)
    210e:	f7fe fa9b 	bl	648 <sjsu::Gpio::SetHigh() const>
      sjtwo::led2.SetHigh();      
    2112:	483d      	ldr	r0, [pc, #244]	; (2208 <main+0x38c>)
    2114:	f7fe fa98 	bl	648 <sjsu::Gpio::SetHigh() const>
      sjtwo::led3.SetHigh();
    2118:	483c      	ldr	r0, [pc, #240]	; (220c <main+0x390>)
    211a:	f7fe fa95 	bl	648 <sjsu::Gpio::SetHigh() const>
      b0 = 0;
    211e:	2300      	movs	r3, #0
    2120:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      b1 = 0;
    2124:	2300      	movs	r3, #0
    2126:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      b2 = 0;
    212a:	2300      	movs	r3, #0
    212c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      counter++;
    2130:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
    2134:	3301      	adds	r3, #1
    2136:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  while (counter < amntNum) {
    213a:	e78b      	b.n	2054 <main+0x1d8>
  for (counter = 0; counter < amntNum; counter++) { //add all elements in decimals array together
    213c:	2300      	movs	r3, #0
    213e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    2142:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
    2146:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
    214a:	429a      	cmp	r2, r3
    214c:	da10      	bge.n	2170 <main+0x2f4>
    total += decimals[counter];
    214e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
    2152:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
    2156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    215a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
    215e:	4413      	add	r3, r2
    2160:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (counter = 0; counter < amntNum; counter++) { //add all elements in decimals array together
    2164:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
    2168:	3301      	adds	r3, #1
    216a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    216e:	e7e8      	b.n	2142 <main+0x2c6>
  oled_terminal.printf("Decimal 1: %d\n", decimals[0]); //first number inputted by user
    2170:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
    2174:	681a      	ldr	r2, [r3, #0]
    2176:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    217a:	4925      	ldr	r1, [pc, #148]	; (2210 <main+0x394>)
    217c:	4618      	mov	r0, r3
    217e:	f7ff fc6e 	bl	1a5e <sjsu::GraphicalTerminal::printf(char const*, ...)>
  oled_terminal.printf("Decimal 2: %d\n", decimals[1]); //second number inputted by user
    2182:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
    2186:	685a      	ldr	r2, [r3, #4]
    2188:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    218c:	4921      	ldr	r1, [pc, #132]	; (2214 <main+0x398>)
    218e:	4618      	mov	r0, r3
    2190:	f7ff fc65 	bl	1a5e <sjsu::GraphicalTerminal::printf(char const*, ...)>
  oled_terminal.printf("Decimal Total:\n%d\n", total); //first and second number added together
    2194:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2198:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
    219c:	491e      	ldr	r1, [pc, #120]	; (2218 <main+0x39c>)
    219e:	4618      	mov	r0, r3
    21a0:	f7ff fc5d 	bl	1a5e <sjsu::GraphicalTerminal::printf(char const*, ...)>
  for (int i = 0; total > 0; i++) { //convert decimal to binary
    21a4:	2300      	movs	r3, #0
    21a6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    21aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    21ae:	2b00      	cmp	r3, #0
    21b0:	dd34      	ble.n	221c <main+0x3a0>
    binaryArr[i] = total%2;
    21b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    21b6:	2b00      	cmp	r3, #0
    21b8:	f003 0301 	and.w	r3, r3, #1
    21bc:	bfb8      	it	lt
    21be:	425b      	neglt	r3, r3
    21c0:	4619      	mov	r1, r3
    21c2:	463b      	mov	r3, r7
    21c4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
    21c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    total /= 2;
    21cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
    21d0:	0fda      	lsrs	r2, r3, #31
    21d2:	4413      	add	r3, r2
    21d4:	105b      	asrs	r3, r3, #1
    21d6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (int i = 0; total > 0; i++) { //convert decimal to binary
    21da:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
    21de:	3301      	adds	r3, #1
    21e0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    21e4:	e7e1      	b.n	21aa <main+0x32e>
    21e6:	bf00      	nop
    21e8:	10001238 	.word	0x10001238
    21ec:	10001218 	.word	0x10001218
    21f0:	1000125c 	.word	0x1000125c
    21f4:	1000123c 	.word	0x1000123c
    21f8:	10001270 	.word	0x10001270
    21fc:	1000053c 	.word	0x1000053c
    2200:	10001260 	.word	0x10001260
    2204:	100011b8 	.word	0x100011b8
    2208:	100011d8 	.word	0x100011d8
    220c:	100011f8 	.word	0x100011f8
    2210:	000083e0 	.word	0x000083e0
    2214:	000083f0 	.word	0x000083f0
    2218:	00008400 	.word	0x00008400
  oled_terminal.printf("Binary Total:\n");
    221c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2220:	4911      	ldr	r1, [pc, #68]	; (2268 <main+0x3ec>)
    2222:	4618      	mov	r0, r3
    2224:	f7ff fc1b 	bl	1a5e <sjsu::GraphicalTerminal::printf(char const*, ...)>
  for (int j = 3; j >= 0; j--) //print array of numbers (binaryArr) which represents the binary of the decimal given
    2228:	2303      	movs	r3, #3
    222a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    222e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
    2232:	2b00      	cmp	r3, #0
    2234:	db10      	blt.n	2258 <main+0x3dc>
    oled_terminal.printf("%d",binaryArr[j]);
    2236:	463b      	mov	r3, r7
    2238:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
    223c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2240:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    2244:	4909      	ldr	r1, [pc, #36]	; (226c <main+0x3f0>)
    2246:	4618      	mov	r0, r3
    2248:	f7ff fc09 	bl	1a5e <sjsu::GraphicalTerminal::printf(char const*, ...)>
  for (int j = 3; j >= 0; j--) //print array of numbers (binaryArr) which represents the binary of the decimal given
    224c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
    2250:	3b01      	subs	r3, #1
    2252:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    2256:	e7ea      	b.n	222e <main+0x3b2>
  return (0);
    2258:	2300      	movs	r3, #0
    225a:	46ad      	mov	sp, r5
    225c:	4618      	mov	r0, r3
    225e:	f507 77c4 	add.w	r7, r7, #392	; 0x188
    2262:	46bd      	mov	sp, r7
    2264:	bdb0      	pop	{r4, r5, r7, pc}
    2266:	bf00      	nop
    2268:	00008414 	.word	0x00008414
    226c:	00008424 	.word	0x00008424

00002270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	60f8      	str	r0, [r7, #12]
    2278:	460b      	mov	r3, r1
    227a:	80ba      	strh	r2, [r7, #4]
    227c:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    227e:	793b      	ldrb	r3, [r7, #4]
    2280:	461a      	mov	r2, r3
    2282:	797b      	ldrb	r3, [r7, #5]
    2284:	7af9      	ldrb	r1, [r7, #11]
    2286:	68f8      	ldr	r0, [r7, #12]
    2288:	f000 f9c2 	bl	2610 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    228c:	4603      	mov	r3, r0
}
    228e:	4618      	mov	r0, r3
    2290:	3710      	adds	r7, #16
    2292:	46bd      	mov	sp, r7
    2294:	bd80      	pop	{r7, pc}

00002296 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    2296:	b580      	push	{r7, lr}
    2298:	b084      	sub	sp, #16
    229a:	af00      	add	r7, sp, #0
    229c:	6078      	str	r0, [r7, #4]
    229e:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	4618      	mov	r0, r3
    22a4:	f7fe fef2 	bl	108c <units::linear_scale<float>::operator()() const>
    22a8:	eef0 6a40 	vmov.f32	s13, s0
    22ac:	683b      	ldr	r3, [r7, #0]
    22ae:	ee07 3a90 	vmov	s15, r3
    22b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    22ba:	f107 030c 	add.w	r3, r7, #12
    22be:	eeb0 0a47 	vmov.f32	s0, s14
    22c2:	4618      	mov	r0, r3
    22c4:	f7fe fa43 	bl	74e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    22c8:	68fb      	ldr	r3, [r7, #12]
	}
    22ca:	4618      	mov	r0, r3
    22cc:	3710      	adds	r7, #16
    22ce:	46bd      	mov	sp, r7
    22d0:	bd80      	pop	{r7, pc}

000022d2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>:
    operator""us(long double __usecs)
    { return chrono::duration<long double, micro>{__usecs}; }

    template <char... _Digits>
      constexpr chrono::microseconds
      operator""us()
    22d2:	b580      	push	{r7, lr}
    22d4:	b082      	sub	sp, #8
    22d6:	af00      	add	r7, sp, #0
    22d8:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	4618      	mov	r0, r3
    22de:	f000 f9c4 	bl	266a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>
    22e2:	bf00      	nop
    22e4:	6878      	ldr	r0, [r7, #4]
    22e6:	3708      	adds	r7, #8
    22e8:	46bd      	mov	sp, r7
    22ea:	bd80      	pop	{r7, pc}

000022ec <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    22ec:	b580      	push	{r7, lr}
    22ee:	b084      	sub	sp, #16
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
    22f4:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    22f6:	f107 0308 	add.w	r3, r7, #8
    22fa:	6839      	ldr	r1, [r7, #0]
    22fc:	4618      	mov	r0, r3
    22fe:	f000 f9c8 	bl	2692 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    2302:	f107 0308 	add.w	r3, r7, #8
    2306:	4618      	mov	r0, r3
    2308:	f7fe f9ca 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    230c:	4602      	mov	r2, r0
    230e:	460b      	mov	r3, r1
    2310:	6879      	ldr	r1, [r7, #4]
    2312:	e9c1 2300 	strd	r2, r3, [r1]
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	4618      	mov	r0, r3
    231a:	3710      	adds	r7, #16
    231c:	46bd      	mov	sp, r7
    231e:	bd80      	pop	{r7, pc}

00002320 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
    2320:	b590      	push	{r4, r7, lr}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	4618      	mov	r0, r3
    232e:	f7fe f83f 	bl	3b0 <std::_Function_base::_Function_base()>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
    2332:	683b      	ldr	r3, [r7, #0]
    2334:	4618      	mov	r0, r3
    2336:	f000 f9bb 	bl	26b0 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    233a:	4603      	mov	r3, r0
    233c:	2b00      	cmp	r3, #0
    233e:	d00f      	beq.n	2360 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2340:	687c      	ldr	r4, [r7, #4]
    2342:	463b      	mov	r3, r7
    2344:	4618      	mov	r0, r3
    2346:	f000 f9c3 	bl	26d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    234a:	4603      	mov	r3, r0
    234c:	4619      	mov	r1, r3
    234e:	4620      	mov	r0, r4
    2350:	f000 f9c9 	bl	26e6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	4a05      	ldr	r2, [pc, #20]	; (236c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x4c>)
    2358:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	4a04      	ldr	r2, [pc, #16]	; (2370 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x50>)
    235e:	609a      	str	r2, [r3, #8]
	  }
      }
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	4618      	mov	r0, r3
    2364:	370c      	adds	r7, #12
    2366:	46bd      	mov	sp, r7
    2368:	bd90      	pop	{r4, r7, pc}
    236a:	bf00      	nop
    236c:	0000270b 	.word	0x0000270b
    2370:	0000272f 	.word	0x0000272f

00002374 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2374:	b580      	push	{r7, lr}
    2376:	b084      	sub	sp, #16
    2378:	af00      	add	r7, sp, #0
    237a:	60f8      	str	r0, [r7, #12]
    237c:	460b      	mov	r3, r1
    237e:	80ba      	strh	r2, [r7, #4]
    2380:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    2382:	793b      	ldrb	r3, [r7, #4]
    2384:	461a      	mov	r2, r3
    2386:	797b      	ldrb	r3, [r7, #5]
    2388:	7af9      	ldrb	r1, [r7, #11]
    238a:	68f8      	ldr	r0, [r7, #12]
    238c:	f000 f9fa 	bl	2784 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    2390:	4603      	mov	r3, r0
}
    2392:	4618      	mov	r0, r3
    2394:	3710      	adds	r7, #16
    2396:	46bd      	mov	sp, r7
    2398:	bd80      	pop	{r7, pc}

0000239a <std::function<void ()>::function()>:
      function() noexcept
    239a:	b580      	push	{r7, lr}
    239c:	b082      	sub	sp, #8
    239e:	af00      	add	r7, sp, #0
    23a0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	4618      	mov	r0, r3
    23a6:	f7fe f803 	bl	3b0 <std::_Function_base::_Function_base()>
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	4618      	mov	r0, r3
    23ae:	3708      	adds	r7, #8
    23b0:	46bd      	mov	sp, r7
    23b2:	bd80      	pop	{r7, pc}

000023b4 <std::function<void ()>::operator()() const>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    23b4:	b580      	push	{r7, lr}
    23b6:	b082      	sub	sp, #8
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	4618      	mov	r0, r3
    23c0:	f7fe f817 	bl	3f2 <std::_Function_base::_M_empty() const>
    23c4:	4603      	mov	r3, r0
    23c6:	2b00      	cmp	r3, #0
    23c8:	d001      	beq.n	23ce <std::function<void ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    23ca:	f004 fbdd 	bl	6b88 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	68db      	ldr	r3, [r3, #12]
    23d2:	687a      	ldr	r2, [r7, #4]
    23d4:	4610      	mov	r0, r2
    23d6:	4798      	blx	r3
    23d8:	bf00      	nop
    }
    23da:	3708      	adds	r7, #8
    23dc:	46bd      	mov	sp, r7
    23de:	bd80      	pop	{r7, pc}

000023e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    23e0:	b480      	push	{r7}
    23e2:	b083      	sub	sp, #12
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
    23e8:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    23ea:	2201      	movs	r2, #1
    23ec:	683b      	ldr	r3, [r7, #0]
    23ee:	fa02 f303 	lsl.w	r3, r2, r3
    23f2:	43db      	mvns	r3, r3
    23f4:	461a      	mov	r2, r3
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	4013      	ands	r3, r2
}
    23fa:	4618      	mov	r0, r3
    23fc:	370c      	adds	r7, #12
    23fe:	46bd      	mov	sp, r7
    2400:	f85d 7b04 	ldr.w	r7, [sp], #4
    2404:	4770      	bx	lr

00002406 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    2406:	b480      	push	{r7}
    2408:	b083      	sub	sp, #12
    240a:	af00      	add	r7, sp, #0
    240c:	6078      	str	r0, [r7, #4]
    240e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    2410:	2201      	movs	r2, #1
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	fa02 f303 	lsl.w	r3, r2, r3
    2418:	461a      	mov	r2, r3
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	4313      	orrs	r3, r2
}
    241e:	4618      	mov	r0, r3
    2420:	370c      	adds	r7, #12
    2422:	46bd      	mov	sp, r7
    2424:	f85d 7b04 	ldr.w	r7, [sp], #4
    2428:	4770      	bx	lr

0000242a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    242a:	b480      	push	{r7}
    242c:	b083      	sub	sp, #12
    242e:	af00      	add	r7, sp, #0
    2430:	6078      	str	r0, [r7, #4]
    2432:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    2434:	2201      	movs	r2, #1
    2436:	683b      	ldr	r3, [r7, #0]
    2438:	fa02 f303 	lsl.w	r3, r2, r3
    243c:	461a      	mov	r2, r3
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	4013      	ands	r3, r2
    2442:	2b00      	cmp	r3, #0
    2444:	bf14      	ite	ne
    2446:	2301      	movne	r3, #1
    2448:	2300      	moveq	r3, #0
    244a:	b2db      	uxtb	r3, r3
}
    244c:	4618      	mov	r0, r3
    244e:	370c      	adds	r7, #12
    2450:	46bd      	mov	sp, r7
    2452:	f85d 7b04 	ldr.w	r7, [sp], #4
    2456:	4770      	bx	lr

00002458 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    2458:	b590      	push	{r4, r7, lr}
    245a:	b083      	sub	sp, #12
    245c:	af00      	add	r7, sp, #0
    245e:	6078      	str	r0, [r7, #4]
    2460:	6039      	str	r1, [r7, #0]
      : _Function_base()
    2462:	687b      	ldr	r3, [r7, #4]
    2464:	4618      	mov	r0, r3
    2466:	f7fd ffa3 	bl	3b0 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    246a:	683b      	ldr	r3, [r7, #0]
    246c:	4618      	mov	r0, r3
    246e:	f000 f9b6 	bl	27de <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    2472:	4603      	mov	r3, r0
    2474:	2b00      	cmp	r3, #0
    2476:	d00f      	beq.n	2498 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2478:	687c      	ldr	r4, [r7, #4]
    247a:	463b      	mov	r3, r7
    247c:	4618      	mov	r0, r3
    247e:	f000 f9be 	bl	27fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2482:	4603      	mov	r3, r0
    2484:	4619      	mov	r1, r3
    2486:	4620      	mov	r0, r4
    2488:	f000 f9c4 	bl	2814 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    248c:	687b      	ldr	r3, [r7, #4]
    248e:	4a05      	ldr	r2, [pc, #20]	; (24a4 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x4c>)
    2490:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	4a04      	ldr	r2, [pc, #16]	; (24a8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x50>)
    2496:	609a      	str	r2, [r3, #8]
      }
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	4618      	mov	r0, r3
    249c:	370c      	adds	r7, #12
    249e:	46bd      	mov	sp, r7
    24a0:	bd90      	pop	{r4, r7, pc}
    24a2:	bf00      	nop
    24a4:	00002839 	.word	0x00002839
    24a8:	00002855 	.word	0x00002855

000024ac <std::function<void ()>::operator=(std::function<void ()> const&)>:
      operator=(const function& __x)
    24ac:	b580      	push	{r7, lr}
    24ae:	b086      	sub	sp, #24
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
    24b4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    24b6:	f107 0308 	add.w	r3, r7, #8
    24ba:	6839      	ldr	r1, [r7, #0]
    24bc:	4618      	mov	r0, r3
    24be:	f000 f9f4 	bl	28aa <std::function<void ()>::function(std::function<void ()> const&)>
    24c2:	f107 0308 	add.w	r3, r7, #8
    24c6:	6879      	ldr	r1, [r7, #4]
    24c8:	4618      	mov	r0, r3
    24ca:	f000 fa10 	bl	28ee <std::function<void ()>::swap(std::function<void ()>&)>
    24ce:	f107 0308 	add.w	r3, r7, #8
    24d2:	4618      	mov	r0, r3
    24d4:	f7fe fc8b 	bl	dee <std::function<void ()>::~function()>
	return *this;
    24d8:	687b      	ldr	r3, [r7, #4]
      }
    24da:	4618      	mov	r0, r3
    24dc:	3718      	adds	r7, #24
    24de:	46bd      	mov	sp, r7
    24e0:	bd80      	pop	{r7, pc}

000024e2 <std::function<void ()>::operator=(decltype(nullptr))>:
      operator=(nullptr_t) noexcept
    24e2:	b580      	push	{r7, lr}
    24e4:	b082      	sub	sp, #8
    24e6:	af00      	add	r7, sp, #0
    24e8:	6078      	str	r0, [r7, #4]
    24ea:	6039      	str	r1, [r7, #0]
	if (_M_manager)
    24ec:	687b      	ldr	r3, [r7, #4]
    24ee:	689b      	ldr	r3, [r3, #8]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d00b      	beq.n	250c <std::function<void ()>::operator=(decltype(nullptr))+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	689b      	ldr	r3, [r3, #8]
    24f8:	6878      	ldr	r0, [r7, #4]
    24fa:	6879      	ldr	r1, [r7, #4]
    24fc:	2203      	movs	r2, #3
    24fe:	4798      	blx	r3
	    _M_manager = nullptr;
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	2200      	movs	r2, #0
    2504:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	2200      	movs	r2, #0
    250a:	60da      	str	r2, [r3, #12]
	return *this;
    250c:	687b      	ldr	r3, [r7, #4]
      }
    250e:	4618      	mov	r0, r3
    2510:	3708      	adds	r7, #8
    2512:	46bd      	mov	sp, r7
    2514:	bd80      	pop	{r7, pc}

00002516 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
  return Set(target, bitmask.position);
}
/// Operates the same way as the Set(T target, Mask bitmask) function except it
/// clears the bit.
template <typename T>
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    2516:	b580      	push	{r7, lr}
    2518:	b082      	sub	sp, #8
    251a:	af00      	add	r7, sp, #0
    251c:	6078      	str	r0, [r7, #4]
    251e:	8039      	strh	r1, [r7, #0]
{
  return Clear(target, bitmask.position);
    2520:	783b      	ldrb	r3, [r7, #0]
    2522:	4619      	mov	r1, r3
    2524:	6878      	ldr	r0, [r7, #4]
    2526:	f7ff ff5b 	bl	23e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    252a:	4603      	mov	r3, r0
}
    252c:	4618      	mov	r0, r3
    252e:	3708      	adds	r7, #8
    2530:	46bd      	mov	sp, r7
    2532:	bd80      	pop	{r7, pc}

00002534 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    2534:	b580      	push	{r7, lr}
    2536:	b082      	sub	sp, #8
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
    253c:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    253e:	783b      	ldrb	r3, [r7, #0]
    2540:	4619      	mov	r1, r3
    2542:	6878      	ldr	r0, [r7, #4]
    2544:	f7ff ff5f 	bl	2406 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2548:	4603      	mov	r3, r0
}
    254a:	4618      	mov	r0, r3
    254c:	3708      	adds	r7, #8
    254e:	46bd      	mov	sp, r7
    2550:	bd80      	pop	{r7, pc}

00002552 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// example, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    2552:	b580      	push	{r7, lr}
    2554:	b082      	sub	sp, #8
    2556:	af00      	add	r7, sp, #0
    2558:	6078      	str	r0, [r7, #4]
    255a:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    255c:	783b      	ldrb	r3, [r7, #0]
    255e:	4619      	mov	r1, r3
    2560:	6878      	ldr	r0, [r7, #4]
    2562:	f7ff ff62 	bl	242a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    2566:	4603      	mov	r3, r0
}
    2568:	4618      	mov	r0, r3
    256a:	3708      	adds	r7, #8
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr operator Ty() const noexcept
    2570:	b580      	push	{r7, lr}
    2572:	b084      	sub	sp, #16
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	4618      	mov	r0, r3
    257c:	f7fe fd86 	bl	108c <units::linear_scale<float>::operator()() const>
    2580:	eef0 7a40 	vmov.f32	s15, s0
    2584:	edc7 7a03 	vstr	s15, [r7, #12]
    2588:	f107 030c 	add.w	r3, r7, #12
    258c:	4618      	mov	r0, r3
    258e:	f000 f9cf 	bl	2930 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2592:	eef0 7a40 	vmov.f32	s15, s0
    2596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    259a:	ee17 3a90 	vmov	r3, s15
    259e:	b29b      	uxth	r3, r3
		}
    25a0:	4618      	mov	r0, r3
    25a2:	3710      	adds	r7, #16
    25a4:	46bd      	mov	sp, r7
    25a6:	bd80      	pop	{r7, pc}

000025a8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    25a8:	b580      	push	{r7, lr}
    25aa:	b084      	sub	sp, #16
    25ac:	af00      	add	r7, sp, #0
    25ae:	60f8      	str	r0, [r7, #12]
    25b0:	60b9      	str	r1, [r7, #8]
    25b2:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    25b4:	793b      	ldrb	r3, [r7, #4]
    25b6:	461a      	mov	r2, r3
    25b8:	797b      	ldrb	r3, [r7, #5]
    25ba:	68b9      	ldr	r1, [r7, #8]
    25bc:	68f8      	ldr	r0, [r7, #12]
    25be:	f000 f9c5 	bl	294c <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    25c2:	4603      	mov	r3, r0
}
    25c4:	4618      	mov	r0, r3
    25c6:	3710      	adds	r7, #16
    25c8:	46bd      	mov	sp, r7
    25ca:	bd80      	pop	{r7, pc}

000025cc <sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)>:
  explicit GraphicalTerminal(Graphics * graphics,
    25cc:	b480      	push	{r7}
    25ce:	b085      	sub	sp, #20
    25d0:	af00      	add	r7, sp, #0
    25d2:	60f8      	str	r0, [r7, #12]
    25d4:	60b9      	str	r1, [r7, #8]
    25d6:	607a      	str	r2, [r7, #4]
        cache_(cache->buffer)
    25d8:	68fb      	ldr	r3, [r7, #12]
    25da:	2200      	movs	r2, #0
    25dc:	601a      	str	r2, [r3, #0]
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	2200      	movs	r2, #0
    25e2:	605a      	str	r2, [r3, #4]
    25e4:	68fb      	ldr	r3, [r7, #12]
    25e6:	2200      	movs	r2, #0
    25e8:	609a      	str	r2, [r3, #8]
    25ea:	68fb      	ldr	r3, [r7, #12]
    25ec:	2208      	movs	r2, #8
    25ee:	60da      	str	r2, [r3, #12]
    25f0:	68fb      	ldr	r3, [r7, #12]
    25f2:	2210      	movs	r2, #16
    25f4:	611a      	str	r2, [r3, #16]
    25f6:	68fb      	ldr	r3, [r7, #12]
    25f8:	68ba      	ldr	r2, [r7, #8]
    25fa:	615a      	str	r2, [r3, #20]
    25fc:	687a      	ldr	r2, [r7, #4]
    25fe:	68fb      	ldr	r3, [r7, #12]
    2600:	619a      	str	r2, [r3, #24]
  }
    2602:	68fb      	ldr	r3, [r7, #12]
    2604:	4618      	mov	r0, r3
    2606:	3714      	adds	r7, #20
    2608:	46bd      	mov	sp, r7
    260a:	f85d 7b04 	ldr.w	r7, [sp], #4
    260e:	4770      	bx	lr

00002610 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2610:	b480      	push	{r7}
    2612:	b089      	sub	sp, #36	; 0x24
    2614:	af00      	add	r7, sp, #0
    2616:	60f8      	str	r0, [r7, #12]
    2618:	607a      	str	r2, [r7, #4]
    261a:	603b      	str	r3, [r7, #0]
    261c:	460b      	mov	r3, r1
    261e:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2624:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2626:	2320      	movs	r3, #32
    2628:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    262a:	683b      	ldr	r3, [r7, #0]
    262c:	f1c3 0320 	rsb	r3, r3, #32
    2630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2634:	fa22 f303 	lsr.w	r3, r2, r3
    2638:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    263a:	697a      	ldr	r2, [r7, #20]
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	fa02 f303 	lsl.w	r3, r2, r3
    2642:	43db      	mvns	r3, r3
    2644:	68fa      	ldr	r2, [r7, #12]
    2646:	4013      	ands	r3, r2
    2648:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    264a:	7afa      	ldrb	r2, [r7, #11]
    264c:	697b      	ldr	r3, [r7, #20]
    264e:	401a      	ands	r2, r3
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	fa02 f303 	lsl.w	r3, r2, r3
    2656:	68fa      	ldr	r2, [r7, #12]
    2658:	4313      	orrs	r3, r2
    265a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    265c:	68fb      	ldr	r3, [r7, #12]
}
    265e:	4618      	mov	r0, r3
    2660:	3724      	adds	r7, #36	; 0x24
    2662:	46bd      	mov	sp, r7
    2664:	f85d 7b04 	ldr.w	r7, [sp], #4
    2668:	4770      	bx	lr

0000266a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    266a:	b580      	push	{r7, lr}
    266c:	b084      	sub	sp, #16
    266e:	af00      	add	r7, sp, #0
    2670:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    2672:	f04f 0201 	mov.w	r2, #1
    2676:	f04f 0300 	mov.w	r3, #0
    267a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    267e:	f107 0308 	add.w	r3, r7, #8
    2682:	4619      	mov	r1, r3
    2684:	6878      	ldr	r0, [r7, #4]
    2686:	f000 f98d 	bl	29a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    268a:	6878      	ldr	r0, [r7, #4]
    268c:	3710      	adds	r7, #16
    268e:	46bd      	mov	sp, r7
    2690:	bd80      	pop	{r7, pc}

00002692 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    2692:	b580      	push	{r7, lr}
    2694:	b082      	sub	sp, #8
    2696:	af00      	add	r7, sp, #0
    2698:	6078      	str	r0, [r7, #4]
    269a:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	6839      	ldr	r1, [r7, #0]
    26a0:	4618      	mov	r0, r3
    26a2:	f000 f99f 	bl	29e4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    26a6:	bf00      	nop
      }
    26a8:	6878      	ldr	r0, [r7, #4]
    26aa:	3708      	adds	r7, #8
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}

000026b0 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    26b0:	b480      	push	{r7}
    26b2:	b083      	sub	sp, #12
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	2b00      	cmp	r3, #0
    26bc:	bf14      	ite	ne
    26be:	2301      	movne	r3, #1
    26c0:	2300      	moveq	r3, #0
    26c2:	b2db      	uxtb	r3, r3
    26c4:	4618      	mov	r0, r3
    26c6:	370c      	adds	r7, #12
    26c8:	46bd      	mov	sp, r7
    26ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ce:	4770      	bx	lr

000026d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    26d0:	b480      	push	{r7}
    26d2:	b083      	sub	sp, #12
    26d4:	af00      	add	r7, sp, #0
    26d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	4618      	mov	r0, r3
    26dc:	370c      	adds	r7, #12
    26de:	46bd      	mov	sp, r7
    26e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e4:	4770      	bx	lr

000026e6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    26e6:	b590      	push	{r4, r7, lr}
    26e8:	b085      	sub	sp, #20
    26ea:	af00      	add	r7, sp, #0
    26ec:	6078      	str	r0, [r7, #4]
    26ee:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    26f0:	6838      	ldr	r0, [r7, #0]
    26f2:	f7ff ffed 	bl	26d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    26f6:	4603      	mov	r3, r0
    26f8:	4622      	mov	r2, r4
    26fa:	4619      	mov	r1, r3
    26fc:	6878      	ldr	r0, [r7, #4]
    26fe:	f000 f9ab 	bl	2a58 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>
    2702:	bf00      	nop
    2704:	3714      	adds	r7, #20
    2706:	46bd      	mov	sp, r7
    2708:	bd90      	pop	{r4, r7, pc}

0000270a <std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    270a:	b580      	push	{r7, lr}
    270c:	b082      	sub	sp, #8
    270e:	af00      	add	r7, sp, #0
    2710:	6078      	str	r0, [r7, #4]
    2712:	6039      	str	r1, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
    2714:	6838      	ldr	r0, [r7, #0]
    2716:	f000 f9b8 	bl	2a8a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    271a:	4603      	mov	r3, r0
    271c:	681b      	ldr	r3, [r3, #0]
    271e:	687a      	ldr	r2, [r7, #4]
    2720:	4610      	mov	r0, r2
    2722:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
    2724:	bf00      	nop
      }
    2726:	6878      	ldr	r0, [r7, #4]
    2728:	3708      	adds	r7, #8
    272a:	46bd      	mov	sp, r7
    272c:	bd80      	pop	{r7, pc}

0000272e <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    272e:	b5b0      	push	{r4, r5, r7, lr}
    2730:	b086      	sub	sp, #24
    2732:	af00      	add	r7, sp, #0
    2734:	60f8      	str	r0, [r7, #12]
    2736:	60b9      	str	r1, [r7, #8]
    2738:	4613      	mov	r3, r2
    273a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    273c:	79fb      	ldrb	r3, [r7, #7]
    273e:	2b03      	cmp	r3, #3
    2740:	d016      	beq.n	2770 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2742:	2b03      	cmp	r3, #3
    2744:	dc19      	bgt.n	277a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    2746:	2b01      	cmp	r3, #1
    2748:	d002      	beq.n	2750 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    274a:	2b02      	cmp	r3, #2
    274c:	d00a      	beq.n	2764 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    274e:	e014      	b.n	277a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    2750:	68b8      	ldr	r0, [r7, #8]
    2752:	f000 f99a 	bl	2a8a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    2756:	4604      	mov	r4, r0
    2758:	68f8      	ldr	r0, [r7, #12]
    275a:	f000 f9a6 	bl	2aaa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>
    275e:	4603      	mov	r3, r0
    2760:	601c      	str	r4, [r3, #0]
	      break;
    2762:	e00a      	b.n	277a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    2764:	462a      	mov	r2, r5
    2766:	68b9      	ldr	r1, [r7, #8]
    2768:	68f8      	ldr	r0, [r7, #12]
    276a:	f000 f9aa 	bl	2ac2 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    276e:	e004      	b.n	277a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    2770:	4621      	mov	r1, r4
    2772:	68f8      	ldr	r0, [r7, #12]
    2774:	f000 f9be 	bl	2af4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    2778:	bf00      	nop
	  return false;
    277a:	2300      	movs	r3, #0
	}
    277c:	4618      	mov	r0, r3
    277e:	3718      	adds	r7, #24
    2780:	46bd      	mov	sp, r7
    2782:	bdb0      	pop	{r4, r5, r7, pc}

00002784 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2784:	b480      	push	{r7}
    2786:	b089      	sub	sp, #36	; 0x24
    2788:	af00      	add	r7, sp, #0
    278a:	60f8      	str	r0, [r7, #12]
    278c:	607a      	str	r2, [r7, #4]
    278e:	603b      	str	r3, [r7, #0]
    2790:	460b      	mov	r3, r1
    2792:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2798:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    279a:	2320      	movs	r3, #32
    279c:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    279e:	683b      	ldr	r3, [r7, #0]
    27a0:	f1c3 0320 	rsb	r3, r3, #32
    27a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27a8:	fa22 f303 	lsr.w	r3, r2, r3
    27ac:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    27ae:	697a      	ldr	r2, [r7, #20]
    27b0:	687b      	ldr	r3, [r7, #4]
    27b2:	fa02 f303 	lsl.w	r3, r2, r3
    27b6:	43db      	mvns	r3, r3
    27b8:	68fa      	ldr	r2, [r7, #12]
    27ba:	4013      	ands	r3, r2
    27bc:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    27be:	7afa      	ldrb	r2, [r7, #11]
    27c0:	697b      	ldr	r3, [r7, #20]
    27c2:	401a      	ands	r2, r3
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	fa02 f303 	lsl.w	r3, r2, r3
    27ca:	68fa      	ldr	r2, [r7, #12]
    27cc:	4313      	orrs	r3, r2
    27ce:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    27d0:	68fb      	ldr	r3, [r7, #12]
}
    27d2:	4618      	mov	r0, r3
    27d4:	3724      	adds	r7, #36	; 0x24
    27d6:	46bd      	mov	sp, r7
    27d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27dc:	4770      	bx	lr

000027de <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    27de:	b480      	push	{r7}
    27e0:	b083      	sub	sp, #12
    27e2:	af00      	add	r7, sp, #0
    27e4:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	2b00      	cmp	r3, #0
    27ea:	bf14      	ite	ne
    27ec:	2301      	movne	r3, #1
    27ee:	2300      	moveq	r3, #0
    27f0:	b2db      	uxtb	r3, r3
    27f2:	4618      	mov	r0, r3
    27f4:	370c      	adds	r7, #12
    27f6:	46bd      	mov	sp, r7
    27f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27fc:	4770      	bx	lr

000027fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
    move(_Tp&& __t) noexcept
    27fe:	b480      	push	{r7}
    2800:	b083      	sub	sp, #12
    2802:	af00      	add	r7, sp, #0
    2804:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	4618      	mov	r0, r3
    280a:	370c      	adds	r7, #12
    280c:	46bd      	mov	sp, r7
    280e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2812:	4770      	bx	lr

00002814 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    2814:	b590      	push	{r4, r7, lr}
    2816:	b085      	sub	sp, #20
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
    281c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    281e:	6838      	ldr	r0, [r7, #0]
    2820:	f7ff ffed 	bl	27fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2824:	4603      	mov	r3, r0
    2826:	4622      	mov	r2, r4
    2828:	4619      	mov	r1, r3
    282a:	6878      	ldr	r0, [r7, #4]
    282c:	f000 f9ca 	bl	2bc4 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    2830:	bf00      	nop
    2832:	3714      	adds	r7, #20
    2834:	46bd      	mov	sp, r7
    2836:	bd90      	pop	{r4, r7, pc}

00002838 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    2838:	b580      	push	{r7, lr}
    283a:	b082      	sub	sp, #8
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
    2840:	6878      	ldr	r0, [r7, #4]
    2842:	f000 f9d8 	bl	2bf6 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    2846:	4603      	mov	r3, r0
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	4798      	blx	r3
      }
    284c:	bf00      	nop
    284e:	3708      	adds	r7, #8
    2850:	46bd      	mov	sp, r7
    2852:	bd80      	pop	{r7, pc}

00002854 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2854:	b5b0      	push	{r4, r5, r7, lr}
    2856:	b086      	sub	sp, #24
    2858:	af00      	add	r7, sp, #0
    285a:	60f8      	str	r0, [r7, #12]
    285c:	60b9      	str	r1, [r7, #8]
    285e:	4613      	mov	r3, r2
    2860:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    2862:	79fb      	ldrb	r3, [r7, #7]
    2864:	2b03      	cmp	r3, #3
    2866:	d016      	beq.n	2896 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2868:	2b03      	cmp	r3, #3
    286a:	dc19      	bgt.n	28a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    286c:	2b01      	cmp	r3, #1
    286e:	d002      	beq.n	2876 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    2870:	2b02      	cmp	r3, #2
    2872:	d00a      	beq.n	288a <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    2874:	e014      	b.n	28a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    2876:	68b8      	ldr	r0, [r7, #8]
    2878:	f000 f9bd 	bl	2bf6 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    287c:	4604      	mov	r4, r0
    287e:	68f8      	ldr	r0, [r7, #12]
    2880:	f000 f9c9 	bl	2c16 <void (**&std::_Any_data::_M_access<void (**)()>())()>
    2884:	4603      	mov	r3, r0
    2886:	601c      	str	r4, [r3, #0]
	      break;
    2888:	e00a      	b.n	28a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    288a:	462a      	mov	r2, r5
    288c:	68b9      	ldr	r1, [r7, #8]
    288e:	68f8      	ldr	r0, [r7, #12]
    2890:	f000 f9cd 	bl	2c2e <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    2894:	e004      	b.n	28a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    2896:	4621      	mov	r1, r4
    2898:	68f8      	ldr	r0, [r7, #12]
    289a:	f000 f9e1 	bl	2c60 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    289e:	bf00      	nop
	  return false;
    28a0:	2300      	movs	r3, #0
	}
    28a2:	4618      	mov	r0, r3
    28a4:	3718      	adds	r7, #24
    28a6:	46bd      	mov	sp, r7
    28a8:	bdb0      	pop	{r4, r5, r7, pc}

000028aa <std::function<void ()>::function(std::function<void ()> const&)>:
    function<_Res(_ArgTypes...)>::
    28aa:	b580      	push	{r7, lr}
    28ac:	b082      	sub	sp, #8
    28ae:	af00      	add	r7, sp, #0
    28b0:	6078      	str	r0, [r7, #4]
    28b2:	6039      	str	r1, [r7, #0]
    : _Function_base()
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	4618      	mov	r0, r3
    28b8:	f7fd fd7a 	bl	3b0 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    28bc:	6838      	ldr	r0, [r7, #0]
    28be:	f000 f9db 	bl	2c78 <std::function<void ()>::operator bool() const>
    28c2:	4603      	mov	r3, r0
    28c4:	2b00      	cmp	r3, #0
    28c6:	d00d      	beq.n	28e4 <std::function<void ()>::function(std::function<void ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    28c8:	683b      	ldr	r3, [r7, #0]
    28ca:	689b      	ldr	r3, [r3, #8]
    28cc:	6878      	ldr	r0, [r7, #4]
    28ce:	6839      	ldr	r1, [r7, #0]
    28d0:	2202      	movs	r2, #2
    28d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    28d4:	683b      	ldr	r3, [r7, #0]
    28d6:	68da      	ldr	r2, [r3, #12]
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    28dc:	683b      	ldr	r3, [r7, #0]
    28de:	689a      	ldr	r2, [r3, #8]
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	609a      	str	r2, [r3, #8]
    }
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	4618      	mov	r0, r3
    28e8:	3708      	adds	r7, #8
    28ea:	46bd      	mov	sp, r7
    28ec:	bd80      	pop	{r7, pc}

000028ee <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    28ee:	b580      	push	{r7, lr}
    28f0:	b082      	sub	sp, #8
    28f2:	af00      	add	r7, sp, #0
    28f4:	6078      	str	r0, [r7, #4]
    28f6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	683a      	ldr	r2, [r7, #0]
    28fc:	4611      	mov	r1, r2
    28fe:	4618      	mov	r0, r3
    2900:	f000 f90f 	bl	2b22 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	f103 0208 	add.w	r2, r3, #8
    290a:	683b      	ldr	r3, [r7, #0]
    290c:	3308      	adds	r3, #8
    290e:	4619      	mov	r1, r3
    2910:	4610      	mov	r0, r2
    2912:	f000 f938 	bl	2b86 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	f103 020c 	add.w	r2, r3, #12
    291c:	683b      	ldr	r3, [r7, #0]
    291e:	330c      	adds	r3, #12
    2920:	4619      	mov	r1, r3
    2922:	4610      	mov	r0, r2
    2924:	f000 f9c3 	bl	2cae <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    2928:	bf00      	nop
    292a:	3708      	adds	r7, #8
    292c:	46bd      	mov	sp, r7
    292e:	bd80      	pop	{r7, pc}

00002930 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2930:	b580      	push	{r7, lr}
    2932:	b086      	sub	sp, #24
    2934:	af00      	add	r7, sp, #0
    2936:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2938:	6878      	ldr	r0, [r7, #4]
    293a:	f000 f9d7 	bl	2cec <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    293e:	eef0 7a40 	vmov.f32	s15, s0
	}
    2942:	eeb0 0a67 	vmov.f32	s0, s15
    2946:	3718      	adds	r7, #24
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    294c:	b480      	push	{r7}
    294e:	b089      	sub	sp, #36	; 0x24
    2950:	af00      	add	r7, sp, #0
    2952:	60f8      	str	r0, [r7, #12]
    2954:	60b9      	str	r1, [r7, #8]
    2956:	607a      	str	r2, [r7, #4]
    2958:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    295a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    295e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2960:	2320      	movs	r3, #32
    2962:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2964:	683b      	ldr	r3, [r7, #0]
    2966:	f1c3 0320 	rsb	r3, r3, #32
    296a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    296e:	fa22 f303 	lsr.w	r3, r2, r3
    2972:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2974:	697a      	ldr	r2, [r7, #20]
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	fa02 f303 	lsl.w	r3, r2, r3
    297c:	43db      	mvns	r3, r3
    297e:	68fa      	ldr	r2, [r7, #12]
    2980:	4013      	ands	r3, r2
    2982:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2984:	68ba      	ldr	r2, [r7, #8]
    2986:	697b      	ldr	r3, [r7, #20]
    2988:	401a      	ands	r2, r3
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	fa02 f303 	lsl.w	r3, r2, r3
    2990:	68fa      	ldr	r2, [r7, #12]
    2992:	4313      	orrs	r3, r2
    2994:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2996:	68fb      	ldr	r3, [r7, #12]
}
    2998:	4618      	mov	r0, r3
    299a:	3724      	adds	r7, #36	; 0x24
    299c:	46bd      	mov	sp, r7
    299e:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a2:	4770      	bx	lr

000029a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    29a4:	b480      	push	{r7}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
    29ac:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    29ae:	683b      	ldr	r3, [r7, #0]
    29b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    29b4:	6879      	ldr	r1, [r7, #4]
    29b6:	e9c1 2300 	strd	r2, r3, [r1]
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    29c8:	b480      	push	{r7}
    29ca:	b083      	sub	sp, #12
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
	{ return __r; }
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    29d6:	4610      	mov	r0, r2
    29d8:	4619      	mov	r1, r3
    29da:	370c      	adds	r7, #12
    29dc:	46bd      	mov	sp, r7
    29de:	f85d 7b04 	ldr.w	r7, [sp], #4
    29e2:	4770      	bx	lr

000029e4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    29e4:	b5b0      	push	{r4, r5, r7, lr}
    29e6:	b084      	sub	sp, #16
    29e8:	af00      	add	r7, sp, #0
    29ea:	6078      	str	r0, [r7, #4]
    29ec:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    29ee:	6838      	ldr	r0, [r7, #0]
    29f0:	f7ff ffea 	bl	29c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    29f4:	4602      	mov	r2, r0
    29f6:	460b      	mov	r3, r1
    29f8:	f04f 0400 	mov.w	r4, #0
    29fc:	f04f 0500 	mov.w	r5, #0
    2a00:	015d      	lsls	r5, r3, #5
    2a02:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    2a06:	0154      	lsls	r4, r2, #5
    2a08:	4622      	mov	r2, r4
    2a0a:	462b      	mov	r3, r5
    2a0c:	1a12      	subs	r2, r2, r0
    2a0e:	eb63 0301 	sbc.w	r3, r3, r1
    2a12:	f04f 0400 	mov.w	r4, #0
    2a16:	f04f 0500 	mov.w	r5, #0
    2a1a:	009d      	lsls	r5, r3, #2
    2a1c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    2a20:	0094      	lsls	r4, r2, #2
    2a22:	4622      	mov	r2, r4
    2a24:	462b      	mov	r3, r5
    2a26:	1812      	adds	r2, r2, r0
    2a28:	eb41 0303 	adc.w	r3, r1, r3
    2a2c:	f04f 0000 	mov.w	r0, #0
    2a30:	f04f 0100 	mov.w	r1, #0
    2a34:	00d9      	lsls	r1, r3, #3
    2a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
    2a3a:	00d0      	lsls	r0, r2, #3
    2a3c:	4602      	mov	r2, r0
    2a3e:	460b      	mov	r3, r1
    2a40:	e9c7 2302 	strd	r2, r3, [r7, #8]
    2a44:	f107 0308 	add.w	r3, r7, #8
    2a48:	4619      	mov	r1, r3
    2a4a:	6878      	ldr	r0, [r7, #4]
    2a4c:	f7fd fe36 	bl	6bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    2a50:	6878      	ldr	r0, [r7, #4]
    2a52:	3710      	adds	r7, #16
    2a54:	46bd      	mov	sp, r7
    2a56:	bdb0      	pop	{r4, r5, r7, pc}

00002a58 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2a58:	b590      	push	{r4, r7, lr}
    2a5a:	b085      	sub	sp, #20
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	60f8      	str	r0, [r7, #12]
    2a60:	60b9      	str	r1, [r7, #8]
    2a62:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2a64:	68b8      	ldr	r0, [r7, #8]
    2a66:	f7ff fe33 	bl	26d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    2a6a:	4603      	mov	r3, r0
    2a6c:	681c      	ldr	r4, [r3, #0]
    2a6e:	68f8      	ldr	r0, [r7, #12]
    2a70:	f7fd fc88 	bl	384 <std::_Any_data::_M_access()>
    2a74:	4603      	mov	r3, r0
    2a76:	4619      	mov	r1, r3
    2a78:	2004      	movs	r0, #4
    2a7a:	f7fd fc77 	bl	36c <operator new(unsigned int, void*)>
    2a7e:	4603      	mov	r3, r0
    2a80:	601c      	str	r4, [r3, #0]
    2a82:	bf00      	nop
    2a84:	3714      	adds	r7, #20
    2a86:	46bd      	mov	sp, r7
    2a88:	bd90      	pop	{r4, r7, pc}

00002a8a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2a8a:	b580      	push	{r7, lr}
    2a8c:	b084      	sub	sp, #16
    2a8e:	af00      	add	r7, sp, #0
    2a90:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2a92:	6878      	ldr	r0, [r7, #4]
    2a94:	f000 f93c 	bl	2d10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2a98:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2a9a:	68f8      	ldr	r0, [r7, #12]
    2a9c:	f000 f944 	bl	2d28 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>
    2aa0:	4603      	mov	r3, r0
	}
    2aa2:	4618      	mov	r0, r3
    2aa4:	3710      	adds	r7, #16
    2aa6:	46bd      	mov	sp, r7
    2aa8:	bd80      	pop	{r7, pc}

00002aaa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>:
      _M_access()
    2aaa:	b580      	push	{r7, lr}
    2aac:	b082      	sub	sp, #8
    2aae:	af00      	add	r7, sp, #0
    2ab0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2ab2:	6878      	ldr	r0, [r7, #4]
    2ab4:	f7fd fc66 	bl	384 <std::_Any_data::_M_access()>
    2ab8:	4603      	mov	r3, r0
    2aba:	4618      	mov	r0, r3
    2abc:	3708      	adds	r7, #8
    2abe:	46bd      	mov	sp, r7
    2ac0:	bd80      	pop	{r7, pc}

00002ac2 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2ac2:	b590      	push	{r4, r7, lr}
    2ac4:	b085      	sub	sp, #20
    2ac6:	af00      	add	r7, sp, #0
    2ac8:	60f8      	str	r0, [r7, #12]
    2aca:	60b9      	str	r1, [r7, #8]
    2acc:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2ace:	68b8      	ldr	r0, [r7, #8]
    2ad0:	f000 f91e 	bl	2d10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2ad4:	4603      	mov	r3, r0
    2ad6:	681c      	ldr	r4, [r3, #0]
    2ad8:	68f8      	ldr	r0, [r7, #12]
    2ada:	f7fd fc53 	bl	384 <std::_Any_data::_M_access()>
    2ade:	4603      	mov	r3, r0
    2ae0:	4619      	mov	r1, r3
    2ae2:	2004      	movs	r0, #4
    2ae4:	f7fd fc42 	bl	36c <operator new(unsigned int, void*)>
    2ae8:	4603      	mov	r3, r0
    2aea:	601c      	str	r4, [r3, #0]
	}
    2aec:	bf00      	nop
    2aee:	3714      	adds	r7, #20
    2af0:	46bd      	mov	sp, r7
    2af2:	bd90      	pop	{r4, r7, pc}

00002af4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2af4:	b580      	push	{r7, lr}
    2af6:	b082      	sub	sp, #8
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
    2afc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2afe:	6878      	ldr	r0, [r7, #4]
    2b00:	f000 f91d 	bl	2d3e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>
	}
    2b04:	bf00      	nop
    2b06:	3708      	adds	r7, #8
    2b08:	46bd      	mov	sp, r7
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    2b0c:	b480      	push	{r7}
    2b0e:	b083      	sub	sp, #12
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	4618      	mov	r0, r3
    2b18:	370c      	adds	r7, #12
    2b1a:	46bd      	mov	sp, r7
    2b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b20:	4770      	bx	lr

00002b22 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    2b22:	b580      	push	{r7, lr}
    2b24:	b084      	sub	sp, #16
    2b26:	af00      	add	r7, sp, #0
    2b28:	6078      	str	r0, [r7, #4]
    2b2a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b2c:	6878      	ldr	r0, [r7, #4]
    2b2e:	f7ff ffed 	bl	2b0c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2b32:	4602      	mov	r2, r0
    2b34:	f107 0308 	add.w	r3, r7, #8
    2b38:	e892 0003 	ldmia.w	r2, {r0, r1}
    2b3c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2b40:	6838      	ldr	r0, [r7, #0]
    2b42:	f7ff ffe3 	bl	2b0c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2b46:	4602      	mov	r2, r0
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
    2b4e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2b52:	f107 0308 	add.w	r3, r7, #8
    2b56:	4618      	mov	r0, r3
    2b58:	f7ff ffd8 	bl	2b0c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2b5c:	4602      	mov	r2, r0
    2b5e:	683b      	ldr	r3, [r7, #0]
    2b60:	e892 0003 	ldmia.w	r2, {r0, r1}
    2b64:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    2b68:	bf00      	nop
    2b6a:	3710      	adds	r7, #16
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd80      	pop	{r7, pc}

00002b70 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	4618      	mov	r0, r3
    2b7c:	370c      	adds	r7, #12
    2b7e:	46bd      	mov	sp, r7
    2b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b84:	4770      	bx	lr

00002b86 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    2b86:	b580      	push	{r7, lr}
    2b88:	b084      	sub	sp, #16
    2b8a:	af00      	add	r7, sp, #0
    2b8c:	6078      	str	r0, [r7, #4]
    2b8e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2b90:	6878      	ldr	r0, [r7, #4]
    2b92:	f7ff ffed 	bl	2b70 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2b96:	4603      	mov	r3, r0
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    2b9c:	6838      	ldr	r0, [r7, #0]
    2b9e:	f7ff ffe7 	bl	2b70 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2ba2:	4603      	mov	r3, r0
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2baa:	f107 030c 	add.w	r3, r7, #12
    2bae:	4618      	mov	r0, r3
    2bb0:	f7ff ffde 	bl	2b70 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2bb4:	4603      	mov	r3, r0
    2bb6:	681a      	ldr	r2, [r3, #0]
    2bb8:	683b      	ldr	r3, [r7, #0]
    2bba:	601a      	str	r2, [r3, #0]
    }
    2bbc:	bf00      	nop
    2bbe:	3710      	adds	r7, #16
    2bc0:	46bd      	mov	sp, r7
    2bc2:	bd80      	pop	{r7, pc}

00002bc4 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2bc4:	b590      	push	{r4, r7, lr}
    2bc6:	b085      	sub	sp, #20
    2bc8:	af00      	add	r7, sp, #0
    2bca:	60f8      	str	r0, [r7, #12]
    2bcc:	60b9      	str	r1, [r7, #8]
    2bce:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2bd0:	68b8      	ldr	r0, [r7, #8]
    2bd2:	f7ff fe14 	bl	27fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2bd6:	4603      	mov	r3, r0
    2bd8:	681c      	ldr	r4, [r3, #0]
    2bda:	68f8      	ldr	r0, [r7, #12]
    2bdc:	f7fd fbd2 	bl	384 <std::_Any_data::_M_access()>
    2be0:	4603      	mov	r3, r0
    2be2:	4619      	mov	r1, r3
    2be4:	2004      	movs	r0, #4
    2be6:	f7fd fbc1 	bl	36c <operator new(unsigned int, void*)>
    2bea:	4603      	mov	r3, r0
    2bec:	601c      	str	r4, [r3, #0]
    2bee:	bf00      	nop
    2bf0:	3714      	adds	r7, #20
    2bf2:	46bd      	mov	sp, r7
    2bf4:	bd90      	pop	{r4, r7, pc}

00002bf6 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2bf6:	b580      	push	{r7, lr}
    2bf8:	b084      	sub	sp, #16
    2bfa:	af00      	add	r7, sp, #0
    2bfc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2bfe:	6878      	ldr	r0, [r7, #4]
    2c00:	f000 f8a9 	bl	2d56 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2c04:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2c06:	68f8      	ldr	r0, [r7, #12]
    2c08:	f000 f8b1 	bl	2d6e <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    2c0c:	4603      	mov	r3, r0
	}
    2c0e:	4618      	mov	r0, r3
    2c10:	3710      	adds	r7, #16
    2c12:	46bd      	mov	sp, r7
    2c14:	bd80      	pop	{r7, pc}

00002c16 <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    2c16:	b580      	push	{r7, lr}
    2c18:	b082      	sub	sp, #8
    2c1a:	af00      	add	r7, sp, #0
    2c1c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2c1e:	6878      	ldr	r0, [r7, #4]
    2c20:	f7fd fbb0 	bl	384 <std::_Any_data::_M_access()>
    2c24:	4603      	mov	r3, r0
    2c26:	4618      	mov	r0, r3
    2c28:	3708      	adds	r7, #8
    2c2a:	46bd      	mov	sp, r7
    2c2c:	bd80      	pop	{r7, pc}

00002c2e <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2c2e:	b590      	push	{r4, r7, lr}
    2c30:	b085      	sub	sp, #20
    2c32:	af00      	add	r7, sp, #0
    2c34:	60f8      	str	r0, [r7, #12]
    2c36:	60b9      	str	r1, [r7, #8]
    2c38:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2c3a:	68b8      	ldr	r0, [r7, #8]
    2c3c:	f000 f88b 	bl	2d56 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2c40:	4603      	mov	r3, r0
    2c42:	681c      	ldr	r4, [r3, #0]
    2c44:	68f8      	ldr	r0, [r7, #12]
    2c46:	f7fd fb9d 	bl	384 <std::_Any_data::_M_access()>
    2c4a:	4603      	mov	r3, r0
    2c4c:	4619      	mov	r1, r3
    2c4e:	2004      	movs	r0, #4
    2c50:	f7fd fb8c 	bl	36c <operator new(unsigned int, void*)>
    2c54:	4603      	mov	r3, r0
    2c56:	601c      	str	r4, [r3, #0]
	}
    2c58:	bf00      	nop
    2c5a:	3714      	adds	r7, #20
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd90      	pop	{r4, r7, pc}

00002c60 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2c60:	b580      	push	{r7, lr}
    2c62:	b082      	sub	sp, #8
    2c64:	af00      	add	r7, sp, #0
    2c66:	6078      	str	r0, [r7, #4]
    2c68:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2c6a:	6878      	ldr	r0, [r7, #4]
    2c6c:	f000 f88a 	bl	2d84 <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    2c70:	bf00      	nop
    2c72:	3708      	adds	r7, #8
    2c74:	46bd      	mov	sp, r7
    2c76:	bd80      	pop	{r7, pc}

00002c78 <std::function<void ()>::operator bool() const>:
      explicit operator bool() const noexcept
    2c78:	b580      	push	{r7, lr}
    2c7a:	b082      	sub	sp, #8
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	4618      	mov	r0, r3
    2c84:	f7fd fbb5 	bl	3f2 <std::_Function_base::_M_empty() const>
    2c88:	4603      	mov	r3, r0
    2c8a:	f083 0301 	eor.w	r3, r3, #1
    2c8e:	b2db      	uxtb	r3, r3
    2c90:	4618      	mov	r0, r3
    2c92:	3708      	adds	r7, #8
    2c94:	46bd      	mov	sp, r7
    2c96:	bd80      	pop	{r7, pc}

00002c98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    2c98:	b480      	push	{r7}
    2c9a:	b083      	sub	sp, #12
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	4618      	mov	r0, r3
    2ca4:	370c      	adds	r7, #12
    2ca6:	46bd      	mov	sp, r7
    2ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cac:	4770      	bx	lr

00002cae <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    2cae:	b580      	push	{r7, lr}
    2cb0:	b084      	sub	sp, #16
    2cb2:	af00      	add	r7, sp, #0
    2cb4:	6078      	str	r0, [r7, #4]
    2cb6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2cb8:	6878      	ldr	r0, [r7, #4]
    2cba:	f7ff ffed 	bl	2c98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2cbe:	4603      	mov	r3, r0
    2cc0:	681b      	ldr	r3, [r3, #0]
    2cc2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    2cc4:	6838      	ldr	r0, [r7, #0]
    2cc6:	f7ff ffe7 	bl	2c98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2cca:	4603      	mov	r3, r0
    2ccc:	681a      	ldr	r2, [r3, #0]
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2cd2:	f107 030c 	add.w	r3, r7, #12
    2cd6:	4618      	mov	r0, r3
    2cd8:	f7ff ffde 	bl	2c98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2cdc:	4603      	mov	r3, r0
    2cde:	681a      	ldr	r2, [r3, #0]
    2ce0:	683b      	ldr	r3, [r7, #0]
    2ce2:	601a      	str	r2, [r3, #0]
    }
    2ce4:	bf00      	nop
    2ce6:	3710      	adds	r7, #16
    2ce8:	46bd      	mov	sp, r7
    2cea:	bd80      	pop	{r7, pc}

00002cec <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2cec:	b480      	push	{r7}
    2cee:	b085      	sub	sp, #20
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	60f8      	str	r0, [r7, #12]
    2cf4:	7239      	strb	r1, [r7, #8]
    2cf6:	713a      	strb	r2, [r7, #4]
    2cf8:	703b      	strb	r3, [r7, #0]
			return value;
    2cfa:	68fb      	ldr	r3, [r7, #12]
    2cfc:	681b      	ldr	r3, [r3, #0]
    2cfe:	ee07 3a90 	vmov	s15, r3
		}
    2d02:	eeb0 0a67 	vmov.f32	s0, s15
    2d06:	3714      	adds	r7, #20
    2d08:	46bd      	mov	sp, r7
    2d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d0e:	4770      	bx	lr

00002d10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>:
      _M_access() const
    2d10:	b580      	push	{r7, lr}
    2d12:	b082      	sub	sp, #8
    2d14:	af00      	add	r7, sp, #0
    2d16:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2d18:	6878      	ldr	r0, [r7, #4]
    2d1a:	f7fd fb3e 	bl	39a <std::_Any_data::_M_access() const>
    2d1e:	4603      	mov	r3, r0
    2d20:	4618      	mov	r0, r3
    2d22:	3708      	adds	r7, #8
    2d24:	46bd      	mov	sp, r7
    2d26:	bd80      	pop	{r7, pc}

00002d28 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2d28:	b480      	push	{r7}
    2d2a:	b083      	sub	sp, #12
    2d2c:	af00      	add	r7, sp, #0
    2d2e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	4618      	mov	r0, r3
    2d34:	370c      	adds	r7, #12
    2d36:	46bd      	mov	sp, r7
    2d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d3c:	4770      	bx	lr

00002d3e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>:
      _M_access()
    2d3e:	b580      	push	{r7, lr}
    2d40:	b082      	sub	sp, #8
    2d42:	af00      	add	r7, sp, #0
    2d44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2d46:	6878      	ldr	r0, [r7, #4]
    2d48:	f7fd fb1c 	bl	384 <std::_Any_data::_M_access()>
    2d4c:	4603      	mov	r3, r0
    2d4e:	4618      	mov	r0, r3
    2d50:	3708      	adds	r7, #8
    2d52:	46bd      	mov	sp, r7
    2d54:	bd80      	pop	{r7, pc}

00002d56 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    2d56:	b580      	push	{r7, lr}
    2d58:	b082      	sub	sp, #8
    2d5a:	af00      	add	r7, sp, #0
    2d5c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2d5e:	6878      	ldr	r0, [r7, #4]
    2d60:	f7fd fb1b 	bl	39a <std::_Any_data::_M_access() const>
    2d64:	4603      	mov	r3, r0
    2d66:	4618      	mov	r0, r3
    2d68:	3708      	adds	r7, #8
    2d6a:	46bd      	mov	sp, r7
    2d6c:	bd80      	pop	{r7, pc}

00002d6e <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2d6e:	b480      	push	{r7}
    2d70:	b083      	sub	sp, #12
    2d72:	af00      	add	r7, sp, #0
    2d74:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	4618      	mov	r0, r3
    2d7a:	370c      	adds	r7, #12
    2d7c:	46bd      	mov	sp, r7
    2d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d82:	4770      	bx	lr

00002d84 <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    2d84:	b580      	push	{r7, lr}
    2d86:	b082      	sub	sp, #8
    2d88:	af00      	add	r7, sp, #0
    2d8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	f7fd faf9 	bl	384 <std::_Any_data::_M_access()>
    2d92:	4603      	mov	r3, r0
    2d94:	4618      	mov	r0, r3
    2d96:	3708      	adds	r7, #8
    2d98:	46bd      	mov	sp, r7
    2d9a:	bd80      	pop	{r7, pc}

00002d9c <__tcf_0>:
  inline static InterruptCallback handlers[kInterruptPorts][kPinCount];
    2d9c:	b590      	push	{r4, r7, lr}
    2d9e:	b083      	sub	sp, #12
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
    2da4:	4c05      	ldr	r4, [pc, #20]	; (2dbc <__tcf_0+0x20>)
    2da6:	4b06      	ldr	r3, [pc, #24]	; (2dc0 <__tcf_0+0x24>)
    2da8:	429c      	cmp	r4, r3
    2daa:	d004      	beq.n	2db6 <__tcf_0+0x1a>
    2dac:	3c10      	subs	r4, #16
    2dae:	4620      	mov	r0, r4
    2db0:	f7fe f81d 	bl	dee <std::function<void ()>::~function()>
    2db4:	e7f7      	b.n	2da6 <__tcf_0+0xa>
    2db6:	370c      	adds	r7, #12
    2db8:	46bd      	mov	sp, r7
    2dba:	bd90      	pop	{r4, r7, pc}
    2dbc:	1000114c 	.word	0x1000114c
    2dc0:	10000d4c 	.word	0x10000d4c

00002dc4 <__static_initialization_and_destruction_0(int, int)>:
    2dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dc8:	b082      	sub	sp, #8
    2dca:	af00      	add	r7, sp, #0
    2dcc:	6078      	str	r0, [r7, #4]
    2dce:	6039      	str	r1, [r7, #0]
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	2b01      	cmp	r3, #1
    2dd4:	f040 80fc 	bne.w	2fd0 <__static_initialization_and_destruction_0(int, int)+0x20c>
    2dd8:	683b      	ldr	r3, [r7, #0]
    2dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2dde:	4293      	cmp	r3, r2
    2de0:	f040 80f6 	bne.w	2fd0 <__static_initialization_and_destruction_0(int, int)+0x20c>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    2de4:	4b7d      	ldr	r3, [pc, #500]	; (2fdc <__static_initialization_and_destruction_0(int, int)+0x218>)
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	f003 0301 	and.w	r3, r3, #1
    2dec:	2b00      	cmp	r3, #0
    2dee:	d105      	bne.n	2dfc <__static_initialization_and_destruction_0(int, int)+0x38>
    2df0:	4b7a      	ldr	r3, [pc, #488]	; (2fdc <__static_initialization_and_destruction_0(int, int)+0x218>)
    2df2:	2201      	movs	r2, #1
    2df4:	601a      	str	r2, [r3, #0]
    2df6:	4a7a      	ldr	r2, [pc, #488]	; (2fe0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2df8:	4b7a      	ldr	r3, [pc, #488]	; (2fe4 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2dfa:	601a      	str	r2, [r3, #0]

/// Global Uptime function, preset to DefaultUptime() for testing purposes.
/// In general, this function is overwritten by
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    2dfc:	4b7a      	ldr	r3, [pc, #488]	; (2fe8 <__static_initialization_and_destruction_0(int, int)+0x224>)
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	f003 0301 	and.w	r3, r3, #1
    2e04:	2b00      	cmp	r3, #0
    2e06:	d10b      	bne.n	2e20 <__static_initialization_and_destruction_0(int, int)+0x5c>
    2e08:	4b77      	ldr	r3, [pc, #476]	; (2fe8 <__static_initialization_and_destruction_0(int, int)+0x224>)
    2e0a:	2201      	movs	r2, #1
    2e0c:	601a      	str	r2, [r3, #0]
    2e0e:	4977      	ldr	r1, [pc, #476]	; (2fec <__static_initialization_and_destruction_0(int, int)+0x228>)
    2e10:	4877      	ldr	r0, [pc, #476]	; (2ff0 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2e12:	f7ff fa85 	bl	2320 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2e16:	4a77      	ldr	r2, [pc, #476]	; (2ff4 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2e18:	4977      	ldr	r1, [pc, #476]	; (2ff8 <__static_initialization_and_destruction_0(int, int)+0x234>)
    2e1a:	4875      	ldr	r0, [pc, #468]	; (2ff0 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2e1c:	f003 feac 	bl	6b78 <__aeabi_atexit>
  inline static volatile PinTable_t * function_map =
    2e20:	4b76      	ldr	r3, [pc, #472]	; (2ffc <__static_initialization_and_destruction_0(int, int)+0x238>)
    2e22:	681b      	ldr	r3, [r3, #0]
    2e24:	f003 0301 	and.w	r3, r3, #1
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d106      	bne.n	2e3a <__static_initialization_and_destruction_0(int, int)+0x76>
    2e2c:	4b73      	ldr	r3, [pc, #460]	; (2ffc <__static_initialization_and_destruction_0(int, int)+0x238>)
    2e2e:	2201      	movs	r2, #1
    2e30:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    2e32:	4b6b      	ldr	r3, [pc, #428]	; (2fe0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e34:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    2e36:	4b72      	ldr	r3, [pc, #456]	; (3000 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    2e38:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    2e3a:	4b72      	ldr	r3, [pc, #456]	; (3004 <__static_initialization_and_destruction_0(int, int)+0x240>)
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	f003 0301 	and.w	r3, r3, #1
    2e42:	2b00      	cmp	r3, #0
    2e44:	d106      	bne.n	2e54 <__static_initialization_and_destruction_0(int, int)+0x90>
    2e46:	4b6f      	ldr	r3, [pc, #444]	; (3004 <__static_initialization_and_destruction_0(int, int)+0x240>)
    2e48:	2201      	movs	r2, #1
    2e4a:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    2e4c:	4b64      	ldr	r3, [pc, #400]	; (2fe0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e4e:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    2e50:	4a6d      	ldr	r2, [pc, #436]	; (3008 <__static_initialization_and_destruction_0(int, int)+0x244>)
    2e52:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    2e54:	4b6d      	ldr	r3, [pc, #436]	; (300c <__static_initialization_and_destruction_0(int, int)+0x248>)
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	f003 0301 	and.w	r3, r3, #1
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d106      	bne.n	2e6e <__static_initialization_and_destruction_0(int, int)+0xaa>
    2e60:	4b6a      	ldr	r3, [pc, #424]	; (300c <__static_initialization_and_destruction_0(int, int)+0x248>)
    2e62:	2201      	movs	r2, #1
    2e64:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    2e66:	4b5e      	ldr	r3, [pc, #376]	; (2fe0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2e68:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    2e6a:	4a69      	ldr	r2, [pc, #420]	; (3010 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2e6c:	6013      	str	r3, [r2, #0]
    2e6e:	4b69      	ldr	r3, [pc, #420]	; (3014 <__static_initialization_and_destruction_0(int, int)+0x250>)
    2e70:	681b      	ldr	r3, [r3, #0]
    2e72:	f003 0301 	and.w	r3, r3, #1
    2e76:	2b00      	cmp	r3, #0
    2e78:	d11a      	bne.n	2eb0 <__static_initialization_and_destruction_0(int, int)+0xec>
    2e7a:	4b66      	ldr	r3, [pc, #408]	; (3014 <__static_initialization_and_destruction_0(int, int)+0x250>)
    2e7c:	2201      	movs	r2, #1
    2e7e:	601a      	str	r2, [r3, #0]
    2e80:	4b65      	ldr	r3, [pc, #404]	; (3018 <__static_initialization_and_destruction_0(int, int)+0x254>)
    2e82:	2401      	movs	r4, #1
    2e84:	4698      	mov	r8, r3
    2e86:	2c00      	cmp	r4, #0
    2e88:	db0d      	blt.n	2ea6 <__static_initialization_and_destruction_0(int, int)+0xe2>
    2e8a:	4646      	mov	r6, r8
    2e8c:	251f      	movs	r5, #31
    2e8e:	2d00      	cmp	r5, #0
    2e90:	db05      	blt.n	2e9e <__static_initialization_and_destruction_0(int, int)+0xda>
    2e92:	4630      	mov	r0, r6
    2e94:	f7ff fa81 	bl	239a <std::function<void ()>::function()>
    2e98:	3610      	adds	r6, #16
    2e9a:	3d01      	subs	r5, #1
    2e9c:	e7f7      	b.n	2e8e <__static_initialization_and_destruction_0(int, int)+0xca>
    2e9e:	f508 7800 	add.w	r8, r8, #512	; 0x200
    2ea2:	3c01      	subs	r4, #1
    2ea4:	e7ef      	b.n	2e86 <__static_initialization_and_destruction_0(int, int)+0xc2>
    2ea6:	4a53      	ldr	r2, [pc, #332]	; (2ff4 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2ea8:	495c      	ldr	r1, [pc, #368]	; (301c <__static_initialization_and_destruction_0(int, int)+0x258>)
    2eaa:	2000      	movs	r0, #0
    2eac:	f003 fe64 	bl	6b78 <__aeabi_atexit>
  {
    static constexpr bit::Mask kDivider = bit::CreateMaskFromRange(0, 4);
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    2eb0:	4b5b      	ldr	r3, [pc, #364]	; (3020 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	f003 0301 	and.w	r3, r3, #1
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d105      	bne.n	2ec8 <__static_initialization_and_destruction_0(int, int)+0x104>
    2ebc:	4b58      	ldr	r3, [pc, #352]	; (3020 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    2ebe:	2201      	movs	r2, #1
    2ec0:	601a      	str	r2, [r3, #0]
    2ec2:	4a58      	ldr	r2, [pc, #352]	; (3024 <__static_initialization_and_destruction_0(int, int)+0x260>)
    2ec4:	4b58      	ldr	r3, [pc, #352]	; (3028 <__static_initialization_and_destruction_0(int, int)+0x264>)
    2ec6:	601a      	str	r2, [r3, #0]
    inline static Transaction_t transaction_i2c2;

   public:
    // UM10562: Chapter 7: LPC408x/407x I/O configuration page 133
    /// Definition for I2C bus 0 for LPC40xx.
    inline static const Bus_t kI2c0 = {
    2ec8:	4b58      	ldr	r3, [pc, #352]	; (302c <__static_initialization_and_destruction_0(int, int)+0x268>)
    2eca:	681b      	ldr	r3, [r3, #0]
    2ecc:	f003 0301 	and.w	r3, r3, #1
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d105      	bne.n	2ee0 <__static_initialization_and_destruction_0(int, int)+0x11c>
    2ed4:	4b55      	ldr	r3, [pc, #340]	; (302c <__static_initialization_and_destruction_0(int, int)+0x268>)
    2ed6:	2201      	movs	r2, #1
    2ed8:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C0_IRQn,
      .transaction     = transaction_i2c0,
      .sda_pin         = kI2c0SdaPin,
      .scl_pin         = kI2c0SclPin,
      .pin_function_id = 0b010,
    };
    2eda:	4a55      	ldr	r2, [pc, #340]	; (3030 <__static_initialization_and_destruction_0(int, int)+0x26c>)
    2edc:	4b55      	ldr	r3, [pc, #340]	; (3034 <__static_initialization_and_destruction_0(int, int)+0x270>)
    2ede:	601a      	str	r2, [r3, #0]

    /// Definition for I2C bus 1 for LPC40xx.
    inline static const Bus_t kI2c1 = {
    2ee0:	4b55      	ldr	r3, [pc, #340]	; (3038 <__static_initialization_and_destruction_0(int, int)+0x274>)
    2ee2:	681b      	ldr	r3, [r3, #0]
    2ee4:	f003 0301 	and.w	r3, r3, #1
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d105      	bne.n	2ef8 <__static_initialization_and_destruction_0(int, int)+0x134>
    2eec:	4b52      	ldr	r3, [pc, #328]	; (3038 <__static_initialization_and_destruction_0(int, int)+0x274>)
    2eee:	2201      	movs	r2, #1
    2ef0:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C1_IRQn,
      .transaction     = transaction_i2c1,
      .sda_pin         = kI2c1SdaPin,
      .scl_pin         = kI2c1SclPin,
      .pin_function_id = 0b011,
    };
    2ef2:	4a52      	ldr	r2, [pc, #328]	; (303c <__static_initialization_and_destruction_0(int, int)+0x278>)
    2ef4:	4b52      	ldr	r3, [pc, #328]	; (3040 <__static_initialization_and_destruction_0(int, int)+0x27c>)
    2ef6:	601a      	str	r2, [r3, #0]

    /// Definition for I2C bus 2 for LPC40xx.
    inline static const Bus_t kI2c2 = {
    2ef8:	4b52      	ldr	r3, [pc, #328]	; (3044 <__static_initialization_and_destruction_0(int, int)+0x280>)
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	f003 0301 	and.w	r3, r3, #1
    2f00:	2b00      	cmp	r3, #0
    2f02:	d105      	bne.n	2f10 <__static_initialization_and_destruction_0(int, int)+0x14c>
    2f04:	4b4f      	ldr	r3, [pc, #316]	; (3044 <__static_initialization_and_destruction_0(int, int)+0x280>)
    2f06:	2201      	movs	r2, #1
    2f08:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C2_IRQn,
      .transaction     = transaction_i2c2,
      .sda_pin         = kI2c2SdaPin,
      .scl_pin         = kI2c2SclPin,
      .pin_function_id = 0b010,
    };
    2f0a:	4a4f      	ldr	r2, [pc, #316]	; (3048 <__static_initialization_and_destruction_0(int, int)+0x284>)
    2f0c:	4b4f      	ldr	r3, [pc, #316]	; (304c <__static_initialization_and_destruction_0(int, int)+0x288>)
    2f0e:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi0 = {
    2f10:	4b4f      	ldr	r3, [pc, #316]	; (3050 <__static_initialization_and_destruction_0(int, int)+0x28c>)
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	f003 0301 	and.w	r3, r3, #1
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d105      	bne.n	2f28 <__static_initialization_and_destruction_0(int, int)+0x164>
    2f1c:	4b4c      	ldr	r3, [pc, #304]	; (3050 <__static_initialization_and_destruction_0(int, int)+0x28c>)
    2f1e:	2201      	movs	r2, #1
    2f20:	601a      	str	r2, [r3, #0]
    };
    2f22:	4a4c      	ldr	r2, [pc, #304]	; (3054 <__static_initialization_and_destruction_0(int, int)+0x290>)
    2f24:	4b4c      	ldr	r3, [pc, #304]	; (3058 <__static_initialization_and_destruction_0(int, int)+0x294>)
    2f26:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi1 = {
    2f28:	4b4c      	ldr	r3, [pc, #304]	; (305c <__static_initialization_and_destruction_0(int, int)+0x298>)
    2f2a:	681b      	ldr	r3, [r3, #0]
    2f2c:	f003 0301 	and.w	r3, r3, #1
    2f30:	2b00      	cmp	r3, #0
    2f32:	d105      	bne.n	2f40 <__static_initialization_and_destruction_0(int, int)+0x17c>
    2f34:	4b49      	ldr	r3, [pc, #292]	; (305c <__static_initialization_and_destruction_0(int, int)+0x298>)
    2f36:	2201      	movs	r2, #1
    2f38:	601a      	str	r2, [r3, #0]
    };
    2f3a:	4a49      	ldr	r2, [pc, #292]	; (3060 <__static_initialization_and_destruction_0(int, int)+0x29c>)
    2f3c:	4b49      	ldr	r3, [pc, #292]	; (3064 <__static_initialization_and_destruction_0(int, int)+0x2a0>)
    2f3e:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi2 = {
    2f40:	4b49      	ldr	r3, [pc, #292]	; (3068 <__static_initialization_and_destruction_0(int, int)+0x2a4>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	f003 0301 	and.w	r3, r3, #1
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d105      	bne.n	2f58 <__static_initialization_and_destruction_0(int, int)+0x194>
    2f4c:	4b46      	ldr	r3, [pc, #280]	; (3068 <__static_initialization_and_destruction_0(int, int)+0x2a4>)
    2f4e:	2201      	movs	r2, #1
    2f50:	601a      	str	r2, [r3, #0]
    };
    2f52:	4a46      	ldr	r2, [pc, #280]	; (306c <__static_initialization_and_destruction_0(int, int)+0x2a8>)
    2f54:	4b46      	ldr	r3, [pc, #280]	; (3070 <__static_initialization_and_destruction_0(int, int)+0x2ac>)
    2f56:	601a      	str	r2, [r3, #0]
  inline static sjsu::lpc40xx::Gpio led0 = sjsu::lpc40xx::Gpio(2, 3);
    2f58:	4b46      	ldr	r3, [pc, #280]	; (3074 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	f003 0301 	and.w	r3, r3, #1
    2f60:	2b00      	cmp	r3, #0
    2f62:	d108      	bne.n	2f76 <__static_initialization_and_destruction_0(int, int)+0x1b2>
    2f64:	4b43      	ldr	r3, [pc, #268]	; (3074 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
    2f66:	2201      	movs	r2, #1
    2f68:	601a      	str	r2, [r3, #0]
    2f6a:	2300      	movs	r3, #0
    2f6c:	2203      	movs	r2, #3
    2f6e:	2102      	movs	r1, #2
    2f70:	4841      	ldr	r0, [pc, #260]	; (3078 <__static_initialization_and_destruction_0(int, int)+0x2b4>)
    2f72:	f7fd fe5b 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led1 = sjsu::lpc40xx::Gpio(1, 26);
    2f76:	4b41      	ldr	r3, [pc, #260]	; (307c <__static_initialization_and_destruction_0(int, int)+0x2b8>)
    2f78:	681b      	ldr	r3, [r3, #0]
    2f7a:	f003 0301 	and.w	r3, r3, #1
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d108      	bne.n	2f94 <__static_initialization_and_destruction_0(int, int)+0x1d0>
    2f82:	4b3e      	ldr	r3, [pc, #248]	; (307c <__static_initialization_and_destruction_0(int, int)+0x2b8>)
    2f84:	2201      	movs	r2, #1
    2f86:	601a      	str	r2, [r3, #0]
    2f88:	2300      	movs	r3, #0
    2f8a:	221a      	movs	r2, #26
    2f8c:	2101      	movs	r1, #1
    2f8e:	483c      	ldr	r0, [pc, #240]	; (3080 <__static_initialization_and_destruction_0(int, int)+0x2bc>)
    2f90:	f7fd fe4c 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led2 = sjsu::lpc40xx::Gpio(1, 24);
    2f94:	4b3b      	ldr	r3, [pc, #236]	; (3084 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	f003 0301 	and.w	r3, r3, #1
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d108      	bne.n	2fb2 <__static_initialization_and_destruction_0(int, int)+0x1ee>
    2fa0:	4b38      	ldr	r3, [pc, #224]	; (3084 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    2fa2:	2201      	movs	r2, #1
    2fa4:	601a      	str	r2, [r3, #0]
    2fa6:	2300      	movs	r3, #0
    2fa8:	2218      	movs	r2, #24
    2faa:	2101      	movs	r1, #1
    2fac:	4836      	ldr	r0, [pc, #216]	; (3088 <__static_initialization_and_destruction_0(int, int)+0x2c4>)
    2fae:	f7fd fe3d 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led3 = sjsu::lpc40xx::Gpio(1, 18);
    2fb2:	4b36      	ldr	r3, [pc, #216]	; (308c <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	f003 0301 	and.w	r3, r3, #1
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d108      	bne.n	2fd0 <__static_initialization_and_destruction_0(int, int)+0x20c>
    2fbe:	4b33      	ldr	r3, [pc, #204]	; (308c <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    2fc0:	2201      	movs	r2, #1
    2fc2:	601a      	str	r2, [r3, #0]
    2fc4:	2300      	movs	r3, #0
    2fc6:	2212      	movs	r2, #18
    2fc8:	2101      	movs	r1, #1
    2fca:	4831      	ldr	r0, [pc, #196]	; (3090 <__static_initialization_and_destruction_0(int, int)+0x2cc>)
    2fcc:	f7fd fe2e 	bl	c2c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    2fd0:	bf00      	nop
    2fd2:	3708      	adds	r7, #8
    2fd4:	46bd      	mov	sp, r7
    2fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fda:	bf00      	nop
    2fdc:	10001274 	.word	0x10001274
    2fe0:	4002c000 	.word	0x4002c000
    2fe4:	10000d20 	.word	0x10000d20
    2fe8:	10001278 	.word	0x10001278
    2fec:	00000845 	.word	0x00000845
    2ff0:	10000d30 	.word	0x10000d30
    2ff4:	10000000 	.word	0x10000000
    2ff8:	0000088d 	.word	0x0000088d
    2ffc:	1000127c 	.word	0x1000127c
    3000:	10000d40 	.word	0x10000d40
    3004:	10001280 	.word	0x10001280
    3008:	10000d44 	.word	0x10000d44
    300c:	10001284 	.word	0x10001284
    3010:	10000d48 	.word	0x10000d48
    3014:	10001288 	.word	0x10001288
    3018:	10000d4c 	.word	0x10000d4c
    301c:	00002d9d 	.word	0x00002d9d
    3020:	1000128c 	.word	0x1000128c
    3024:	400fc000 	.word	0x400fc000
    3028:	10001194 	.word	0x10001194
    302c:	10001290 	.word	0x10001290
    3030:	4001c000 	.word	0x4001c000
    3034:	10000098 	.word	0x10000098
    3038:	10001294 	.word	0x10001294
    303c:	4005c000 	.word	0x4005c000
    3040:	100000b4 	.word	0x100000b4
    3044:	10001298 	.word	0x10001298
    3048:	400a0000 	.word	0x400a0000
    304c:	100000d0 	.word	0x100000d0
    3050:	1000129c 	.word	0x1000129c
    3054:	40088000 	.word	0x40088000
    3058:	100000ec 	.word	0x100000ec
    305c:	100012a0 	.word	0x100012a0
    3060:	40030000 	.word	0x40030000
    3064:	10000104 	.word	0x10000104
    3068:	100012a4 	.word	0x100012a4
    306c:	400ac000 	.word	0x400ac000
    3070:	1000011c 	.word	0x1000011c
    3074:	100012a8 	.word	0x100012a8
    3078:	10001198 	.word	0x10001198
    307c:	100012ac 	.word	0x100012ac
    3080:	100011b8 	.word	0x100011b8
    3084:	100012b0 	.word	0x100012b0
    3088:	100011d8 	.word	0x100011d8
    308c:	100012b4 	.word	0x100012b4
    3090:	100011f8 	.word	0x100011f8

00003094 <_GLOBAL__sub_I_main>:
    3094:	b580      	push	{r7, lr}
    3096:	af00      	add	r7, sp, #0
    3098:	f64f 71ff 	movw	r1, #65535	; 0xffff
    309c:	2001      	movs	r0, #1
    309e:	f7ff fe91 	bl	2dc4 <__static_initialization_and_destruction_0(int, int)>
    30a2:	bd80      	pop	{r7, pc}

000030a4 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    30a4:	b580      	push	{r7, lr}
    30a6:	b086      	sub	sp, #24
    30a8:	af02      	add	r7, sp, #8
    30aa:	6078      	str	r0, [r7, #4]
    30ac:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    30ae:	683a      	ldr	r2, [r7, #0]
    30b0:	f107 030c 	add.w	r3, r7, #12
    30b4:	9300      	str	r3, [sp, #0]
    30b6:	2300      	movs	r3, #0
    30b8:	2100      	movs	r1, #0
    30ba:	6878      	ldr	r0, [r7, #4]
    30bc:	f004 fa64 	bl	7588 <_Unwind_VRS_Get>
      return val;
    30c0:	68fb      	ldr	r3, [r7, #12]
    }
    30c2:	4618      	mov	r0, r3
    30c4:	3710      	adds	r7, #16
    30c6:	46bd      	mov	sp, r7
    30c8:	bd80      	pop	{r7, pc}
    30ca:	Address 0x00000000000030ca is out of bounds.


000030cc <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b084      	sub	sp, #16
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
    30d4:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    30d6:	683b      	ldr	r3, [r7, #0]
    30d8:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    30da:	210f      	movs	r1, #15
    30dc:	6878      	ldr	r0, [r7, #4]
    30de:	f7ff ffe1 	bl	30a4 <_Unwind_GetGR>
    30e2:	4603      	mov	r3, r0
    30e4:	f023 0301 	bic.w	r3, r3, #1
    30e8:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    30ea:	68fb      	ldr	r3, [r7, #12]
    30ec:	6819      	ldr	r1, [r3, #0]
         address - config::kBacktraceAddressOffset);
    30ee:	68bb      	ldr	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    30f0:	3b04      	subs	r3, #4
    30f2:	461a      	mov	r2, r3
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    30f6:	f001 fbfd 	bl	48f4 <printf>
  (*depth)++;
    30fa:	68fb      	ldr	r3, [r7, #12]
    30fc:	681b      	ldr	r3, [r3, #0]
    30fe:	1c5a      	adds	r2, r3, #1
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    3104:	2300      	movs	r3, #0
}
    3106:	4618      	mov	r0, r3
    3108:	3710      	adds	r7, #16
    310a:	46bd      	mov	sp, r7
    310c:	bd80      	pop	{r7, pc}
    310e:	bf00      	nop
    3110:	000085d4 	.word	0x000085d4

00003114 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    3114:	b580      	push	{r7, lr}
    3116:	b084      	sub	sp, #16
    3118:	af00      	add	r7, sp, #0
    311a:	6078      	str	r0, [r7, #4]
    311c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    311e:	683b      	ldr	r3, [r7, #0]
    3120:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    3122:	210f      	movs	r1, #15
    3124:	6878      	ldr	r0, [r7, #4]
    3126:	f7ff ffbd 	bl	30a4 <_Unwind_GetGR>
    312a:	4603      	mov	r3, r0
    312c:	f023 0301 	bic.w	r3, r3, #1
    3130:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    3132:	68bb      	ldr	r3, [r7, #8]
    3134:	3b04      	subs	r3, #4
    3136:	4619      	mov	r1, r3
    3138:	4806      	ldr	r0, [pc, #24]	; (3154 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    313a:	f001 fbdb 	bl	48f4 <printf>
  (*depth)++;
    313e:	68fb      	ldr	r3, [r7, #12]
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	1c5a      	adds	r2, r3, #1
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    3148:	2300      	movs	r3, #0
}
    314a:	4618      	mov	r0, r3
    314c:	3710      	adds	r7, #16
    314e:	46bd      	mov	sp, r7
    3150:	bd80      	pop	{r7, pc}
    3152:	bf00      	nop
    3154:	000085e4 	.word	0x000085e4

00003158 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    3158:	b580      	push	{r7, lr}
    315a:	b084      	sub	sp, #16
    315c:	af00      	add	r7, sp, #0
    315e:	4603      	mov	r3, r0
    3160:	6039      	str	r1, [r7, #0]
    3162:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    3164:	2300      	movs	r3, #0
    3166:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    3168:	f107 030c 	add.w	r3, r7, #12
    316c:	4619      	mov	r1, r3
    316e:	4817      	ldr	r0, [pc, #92]	; (31cc <sjsu::debug::PrintBacktrace(bool, void*)+0x74>)
    3170:	f004 fde8 	bl	7d44 <_Unwind_Backtrace>
    if (final_address)
    3174:	683b      	ldr	r3, [r7, #0]
    3176:	2b00      	cmp	r3, #0
    3178:	d005      	beq.n	3186 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	683a      	ldr	r2, [r7, #0]
    317e:	4619      	mov	r1, r3
    3180:	4813      	ldr	r0, [pc, #76]	; (31d0 <sjsu::debug::PrintBacktrace(bool, void*)+0x78>)
    3182:	f001 fbb7 	bl	48f4 <printf>
    }

    if (show_make_command)
    3186:	79fb      	ldrb	r3, [r7, #7]
    3188:	2b00      	cmp	r3, #0
    318a:	d01b      	beq.n	31c4 <sjsu::debug::PrintBacktrace(bool, void*)+0x6c>
    {
      printf("\nRun: the following command in your project directory");
    318c:	4811      	ldr	r0, [pc, #68]	; (31d4 <sjsu::debug::PrintBacktrace(bool, void*)+0x7c>)
    318e:	f001 fbb1 	bl	48f4 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    3192:	4811      	ldr	r0, [pc, #68]	; (31d8 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    3194:	f001 fbae 	bl	48f4 <printf>
      printf("make stacktrace TRACES=\"");
    3198:	4810      	ldr	r0, [pc, #64]	; (31dc <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    319a:	f001 fbab 	bl	48f4 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    319e:	f107 030c 	add.w	r3, r7, #12
    31a2:	4619      	mov	r1, r3
    31a4:	480e      	ldr	r0, [pc, #56]	; (31e0 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    31a6:	f004 fdcd 	bl	7d44 <_Unwind_Backtrace>
      if (final_address)
    31aa:	683b      	ldr	r3, [r7, #0]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d003      	beq.n	31b8 <sjsu::debug::PrintBacktrace(bool, void*)+0x60>
      {
        printf("0x%p ", final_address);
    31b0:	6839      	ldr	r1, [r7, #0]
    31b2:	480c      	ldr	r0, [pc, #48]	; (31e4 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    31b4:	f001 fb9e 	bl	48f4 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    31b8:	480b      	ldr	r0, [pc, #44]	; (31e8 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    31ba:	f001 fb9b 	bl	48f4 <printf>
      printf(
    31be:	480b      	ldr	r0, [pc, #44]	; (31ec <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    31c0:	f000 fa3a 	bl	3638 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    31c4:	bf00      	nop
    31c6:	3710      	adds	r7, #16
    31c8:	46bd      	mov	sp, r7
    31ca:	bd80      	pop	{r7, pc}
    31cc:	000030cd 	.word	0x000030cd
    31d0:	000085ec 	.word	0x000085ec
    31d4:	000085f8 	.word	0x000085f8
    31d8:	00008630 	.word	0x00008630
    31dc:	0000863c 	.word	0x0000863c
    31e0:	00003115 	.word	0x00003115
    31e4:	00008658 	.word	0x00008658
    31e8:	00008660 	.word	0x00008660
    31ec:	00008668 	.word	0x00008668

000031f0 <sjsu::Halt()>:
{
  Wait(delay_time);
}
/// Halt system by putting it into infinite loop
inline void Halt()
{
    31f0:	b480      	push	{r7}
    31f2:	af00      	add	r7, sp, #0
  while (true)
  {
    continue;
    31f4:	bf00      	nop
  while (true)
    31f6:	e7fd      	b.n	31f4 <sjsu::Halt()+0x4>

000031f8 <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return static_cast<uint8_t>(config::kTaskSchedulerSize + 1);
};
}  // namespace rtos
}  // namespace sjsu
    31f8:	b580      	push	{r7, lr}
    31fa:	b082      	sub	sp, #8
    31fc:	af00      	add	r7, sp, #0
    31fe:	6078      	str	r0, [r7, #4]
    3200:	6039      	str	r1, [r7, #0]
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	2b01      	cmp	r3, #1
    3206:	d116      	bne.n	3236 <__static_initialization_and_destruction_0(int, int)+0x3e>
    3208:	683b      	ldr	r3, [r7, #0]
    320a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    320e:	4293      	cmp	r3, r2
    3210:	d111      	bne.n	3236 <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    3212:	4b0b      	ldr	r3, [pc, #44]	; (3240 <__static_initialization_and_destruction_0(int, int)+0x48>)
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	f003 0301 	and.w	r3, r3, #1
    321a:	2b00      	cmp	r3, #0
    321c:	d10b      	bne.n	3236 <__static_initialization_and_destruction_0(int, int)+0x3e>
    321e:	4b08      	ldr	r3, [pc, #32]	; (3240 <__static_initialization_and_destruction_0(int, int)+0x48>)
    3220:	2201      	movs	r2, #1
    3222:	601a      	str	r2, [r3, #0]
    3224:	4907      	ldr	r1, [pc, #28]	; (3244 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    3226:	4808      	ldr	r0, [pc, #32]	; (3248 <__static_initialization_and_destruction_0(int, int)+0x50>)
    3228:	f7ff f87a 	bl	2320 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    322c:	4a07      	ldr	r2, [pc, #28]	; (324c <__static_initialization_and_destruction_0(int, int)+0x54>)
    322e:	4908      	ldr	r1, [pc, #32]	; (3250 <__static_initialization_and_destruction_0(int, int)+0x58>)
    3230:	4805      	ldr	r0, [pc, #20]	; (3248 <__static_initialization_and_destruction_0(int, int)+0x50>)
    3232:	f003 fca1 	bl	6b78 <__aeabi_atexit>
    3236:	bf00      	nop
    3238:	3708      	adds	r7, #8
    323a:	46bd      	mov	sp, r7
    323c:	bd80      	pop	{r7, pc}
    323e:	bf00      	nop
    3240:	10001278 	.word	0x10001278
    3244:	00000845 	.word	0x00000845
    3248:	10000d30 	.word	0x10000d30
    324c:	10000000 	.word	0x10000000
    3250:	0000088d 	.word	0x0000088d

00003254 <_GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv>:
    3254:	b580      	push	{r7, lr}
    3256:	af00      	add	r7, sp, #0
    3258:	f64f 71ff 	movw	r1, #65535	; 0xffff
    325c:	2001      	movs	r0, #1
    325e:	f7ff ffcb 	bl	31f8 <__static_initialization_and_destruction_0(int, int)>
    3262:	bd80      	pop	{r7, pc}

00003264 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    3264:	b480      	push	{r7}
    3266:	b087      	sub	sp, #28
    3268:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    326a:	2300      	movs	r3, #0
    326c:	617b      	str	r3, [r7, #20]
    326e:	697a      	ldr	r2, [r7, #20]
    3270:	4613      	mov	r3, r2
    3272:	005b      	lsls	r3, r3, #1
    3274:	4413      	add	r3, r2
    3276:	009b      	lsls	r3, r3, #2
    3278:	4a1f      	ldr	r2, [pc, #124]	; (32f8 <sjsu::InitializeDataSection()+0x94>)
    327a:	4413      	add	r3, r2
    327c:	4a1f      	ldr	r2, [pc, #124]	; (32fc <sjsu::InitializeDataSection()+0x98>)
    327e:	4293      	cmp	r3, r2
    3280:	d233      	bcs.n	32ea <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    3282:	491d      	ldr	r1, [pc, #116]	; (32f8 <sjsu::InitializeDataSection()+0x94>)
    3284:	697a      	ldr	r2, [r7, #20]
    3286:	4613      	mov	r3, r2
    3288:	005b      	lsls	r3, r3, #1
    328a:	4413      	add	r3, r2
    328c:	009b      	lsls	r3, r3, #2
    328e:	440b      	add	r3, r1
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    3294:	4918      	ldr	r1, [pc, #96]	; (32f8 <sjsu::InitializeDataSection()+0x94>)
    3296:	697a      	ldr	r2, [r7, #20]
    3298:	4613      	mov	r3, r2
    329a:	005b      	lsls	r3, r3, #1
    329c:	4413      	add	r3, r2
    329e:	009b      	lsls	r3, r3, #2
    32a0:	440b      	add	r3, r1
    32a2:	685b      	ldr	r3, [r3, #4]
    32a4:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    32a6:	4914      	ldr	r1, [pc, #80]	; (32f8 <sjsu::InitializeDataSection()+0x94>)
    32a8:	697a      	ldr	r2, [r7, #20]
    32aa:	4613      	mov	r3, r2
    32ac:	005b      	lsls	r3, r3, #1
    32ae:	4413      	add	r3, r2
    32b0:	009b      	lsls	r3, r3, #2
    32b2:	440b      	add	r3, r1
    32b4:	3308      	adds	r3, #8
    32b6:	681b      	ldr	r3, [r3, #0]
    32b8:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    32ba:	2300      	movs	r3, #0
    32bc:	613b      	str	r3, [r7, #16]
    32be:	693a      	ldr	r2, [r7, #16]
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	429a      	cmp	r2, r3
    32c4:	d20d      	bcs.n	32e2 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    32c6:	693b      	ldr	r3, [r7, #16]
    32c8:	009b      	lsls	r3, r3, #2
    32ca:	68fa      	ldr	r2, [r7, #12]
    32cc:	441a      	add	r2, r3
    32ce:	693b      	ldr	r3, [r7, #16]
    32d0:	009b      	lsls	r3, r3, #2
    32d2:	68b9      	ldr	r1, [r7, #8]
    32d4:	440b      	add	r3, r1
    32d6:	6812      	ldr	r2, [r2, #0]
    32d8:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    32da:	693b      	ldr	r3, [r7, #16]
    32dc:	3301      	adds	r3, #1
    32de:	613b      	str	r3, [r7, #16]
    32e0:	e7ed      	b.n	32be <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    32e2:	697b      	ldr	r3, [r7, #20]
    32e4:	3301      	adds	r3, #1
    32e6:	617b      	str	r3, [r7, #20]
    32e8:	e7c1      	b.n	326e <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    32ea:	bf00      	nop
    32ec:	371c      	adds	r7, #28
    32ee:	46bd      	mov	sp, r7
    32f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f4:	4770      	bx	lr
    32f6:	bf00      	nop
    32f8:	000000e4 	.word	0x000000e4
    32fc:	000000fc 	.word	0x000000fc

00003300 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    3300:	b480      	push	{r7}
    3302:	b085      	sub	sp, #20
    3304:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    3306:	2300      	movs	r3, #0
    3308:	60fb      	str	r3, [r7, #12]
    330a:	68fb      	ldr	r3, [r7, #12]
    330c:	00db      	lsls	r3, r3, #3
    330e:	4a15      	ldr	r2, [pc, #84]	; (3364 <sjsu::InitializeBssSection()+0x64>)
    3310:	4413      	add	r3, r2
    3312:	4a15      	ldr	r2, [pc, #84]	; (3368 <sjsu::InitializeBssSection()+0x68>)
    3314:	4293      	cmp	r3, r2
    3316:	d21e      	bcs.n	3356 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    3318:	4a12      	ldr	r2, [pc, #72]	; (3364 <sjsu::InitializeBssSection()+0x64>)
    331a:	68fb      	ldr	r3, [r7, #12]
    331c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3320:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    3322:	4a10      	ldr	r2, [pc, #64]	; (3364 <sjsu::InitializeBssSection()+0x64>)
    3324:	68fb      	ldr	r3, [r7, #12]
    3326:	00db      	lsls	r3, r3, #3
    3328:	4413      	add	r3, r2
    332a:	685b      	ldr	r3, [r3, #4]
    332c:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    332e:	2300      	movs	r3, #0
    3330:	60bb      	str	r3, [r7, #8]
    3332:	68ba      	ldr	r2, [r7, #8]
    3334:	683b      	ldr	r3, [r7, #0]
    3336:	429a      	cmp	r2, r3
    3338:	d209      	bcs.n	334e <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    333a:	68bb      	ldr	r3, [r7, #8]
    333c:	009b      	lsls	r3, r3, #2
    333e:	687a      	ldr	r2, [r7, #4]
    3340:	4413      	add	r3, r2
    3342:	2200      	movs	r2, #0
    3344:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    3346:	68bb      	ldr	r3, [r7, #8]
    3348:	3301      	adds	r3, #1
    334a:	60bb      	str	r3, [r7, #8]
    334c:	e7f1      	b.n	3332 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    334e:	68fb      	ldr	r3, [r7, #12]
    3350:	3301      	adds	r3, #1
    3352:	60fb      	str	r3, [r7, #12]
    3354:	e7d9      	b.n	330a <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    3356:	bf00      	nop
    3358:	3714      	adds	r7, #20
    335a:	46bd      	mov	sp, r7
    335c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3360:	4770      	bx	lr
    3362:	bf00      	nop
    3364:	000000fc 	.word	0x000000fc
    3368:	0000010c 	.word	0x0000010c

0000336c <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    3370:	f7ff ff78 	bl	3264 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    3374:	f7ff ffc4 	bl	3300 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    3378:	f004 feae 	bl	80d8 <__libc_init_array>
}
    337c:	bf00      	nop
    337e:	bd80      	pop	{r7, pc}

00003380 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    3380:	b580      	push	{r7, lr}
    3382:	b08c      	sub	sp, #48	; 0x30
    3384:	af02      	add	r7, sp, #8
    3386:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	681b      	ldr	r3, [r3, #0]
    338c:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	685b      	ldr	r3, [r3, #4]
    3392:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	689b      	ldr	r3, [r3, #8]
    3398:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	68db      	ldr	r3, [r3, #12]
    339e:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	691b      	ldr	r3, [r3, #16]
    33a4:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	695b      	ldr	r3, [r3, #20]
    33aa:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	699b      	ldr	r3, [r3, #24]
    33b0:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	69db      	ldr	r3, [r3, #28]
    33b6:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    33b8:	480f      	ldr	r0, [pc, #60]	; (33f8 <GetRegistersFromStack+0x78>)
    33ba:	f001 fa9b 	bl	48f4 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    33be:	6a79      	ldr	r1, [r7, #36]	; 0x24
    33c0:	6a3a      	ldr	r2, [r7, #32]
    33c2:	69f8      	ldr	r0, [r7, #28]
    33c4:	69bb      	ldr	r3, [r7, #24]
    33c6:	9300      	str	r3, [sp, #0]
    33c8:	4603      	mov	r3, r0
    33ca:	480c      	ldr	r0, [pc, #48]	; (33fc <GetRegistersFromStack+0x7c>)
    33cc:	f001 fa92 	bl	48f4 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    33d0:	6979      	ldr	r1, [r7, #20]
    33d2:	693a      	ldr	r2, [r7, #16]
    33d4:	68f8      	ldr	r0, [r7, #12]
    33d6:	68bb      	ldr	r3, [r7, #8]
    33d8:	9300      	str	r3, [sp, #0]
    33da:	4603      	mov	r3, r0
    33dc:	4808      	ldr	r0, [pc, #32]	; (3400 <GetRegistersFromStack+0x80>)
    33de:	f001 fa89 	bl	48f4 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    33e2:	68fb      	ldr	r3, [r7, #12]
    33e4:	4619      	mov	r1, r3
    33e6:	2001      	movs	r0, #1
    33e8:	f7ff feb6 	bl	3158 <sjsu::debug::PrintBacktrace(bool, void*)>
    // When the following line is hit, the variables contain the register values
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
    33ec:	f7ff ff00 	bl	31f0 <sjsu::Halt()>
  }
    33f0:	bf00      	nop
    33f2:	3728      	adds	r7, #40	; 0x28
    33f4:	46bd      	mov	sp, r7
    33f6:	bd80      	pop	{r7, pc}
    33f8:	00008d78 	.word	0x00008d78
    33fc:	00008da4 	.word	0x00008da4
    3400:	00008dd8 	.word	0x00008dd8

00003404 <ArmHardFaultHandler>:

  void ArmHardFaultHandler(void)
  {
    3404:	b480      	push	{r7}
    3406:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    3408:	f01e 0f04 	tst.w	lr, #4
    340c:	bf0c      	ite	eq
    340e:	f3ef 8008 	mrseq	r0, MSP
    3412:	f3ef 8009 	mrsne	r0, PSP
    3416:	6981      	ldr	r1, [r0, #24]
    3418:	4a00      	ldr	r2, [pc, #0]	; (341c <handler2_address_const>)
    341a:	4710      	bx	r2

0000341c <handler2_address_const>:
    341c:	00003381 	.word	0x00003381
    }
  }
    3420:	bf00      	nop
    3422:	46bd      	mov	sp, r7
    3424:	f85d 7b04 	ldr.w	r7, [sp], #4
    3428:	4770      	bx	lr
    342a:	Address 0x000000000000342a is out of bounds.


0000342c <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    342c:	b580      	push	{r7, lr}
    342e:	b084      	sub	sp, #16
    3430:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    3432:	4b1a      	ldr	r3, [pc, #104]	; (349c <ArmResetHandler+0x70>)
    3434:	60fb      	str	r3, [r7, #12]
    3436:	68fb      	ldr	r3, [r7, #12]
    3438:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    343a:	683b      	ldr	r3, [r7, #0]
    343c:	f383 8809 	msr	PSP, r3
}
    3440:	bf00      	nop
    3442:	68fb      	ldr	r3, [r7, #12]
    3444:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	f383 8808 	msr	MSP, r3
}
    344c:	bf00      	nop
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    344e:	f7ff ff8d 	bl	336c <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    3452:	4b13      	ldr	r3, [pc, #76]	; (34a0 <ArmResetHandler+0x74>)
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	f003 0301 	and.w	r3, r3, #1
    345a:	2b00      	cmp	r3, #0
    345c:	bf14      	ite	ne
    345e:	2301      	movne	r3, #1
    3460:	2300      	moveq	r3, #0
    3462:	b2db      	uxtb	r3, r3
    3464:	2b00      	cmp	r3, #0
    3466:	d001      	beq.n	346c <ArmResetHandler+0x40>
      {
          trace_initialize();  // Enable debug tracing
    3468:	f001 fa7c 	bl	4964 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    346c:	f002 fd44 	bl	5ef8 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    3470:	f7fe fd04 	bl	1e7c <main>
    3474:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	2b00      	cmp	r3, #0
    347a:	db04      	blt.n	3486 <ArmResetHandler+0x5a>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    347c:	68b9      	ldr	r1, [r7, #8]
    347e:	4809      	ldr	r0, [pc, #36]	; (34a4 <ArmResetHandler+0x78>)
    3480:	f001 fa38 	bl	48f4 <printf>
    3484:	e003      	b.n	348e <ArmResetHandler+0x62>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    3486:	68b9      	ldr	r1, [r7, #8]
    3488:	4807      	ldr	r0, [pc, #28]	; (34a8 <ArmResetHandler+0x7c>)
    348a:	f001 fa33 	bl	48f4 <printf>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    sjsu::Halt();
    348e:	f7ff feaf 	bl	31f0 <sjsu::Halt()>
  }
    3492:	bf00      	nop
    3494:	3710      	adds	r7, #16
    3496:	46bd      	mov	sp, r7
    3498:	bd80      	pop	{r7, pc}
    349a:	bf00      	nop
    349c:	10010000 	.word	0x10010000
    34a0:	e000edf0 	.word	0xe000edf0
    34a4:	00008e10 	.word	0x00008e10
    34a8:	00008e44 	.word	0x00008e44

000034ac <__static_initialization_and_destruction_0(int, int)>:

}  // extern "C"
    34ac:	b580      	push	{r7, lr}
    34ae:	b082      	sub	sp, #8
    34b0:	af00      	add	r7, sp, #0
    34b2:	6078      	str	r0, [r7, #4]
    34b4:	6039      	str	r1, [r7, #0]
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	2b01      	cmp	r3, #1
    34ba:	d116      	bne.n	34ea <__static_initialization_and_destruction_0(int, int)+0x3e>
    34bc:	683b      	ldr	r3, [r7, #0]
    34be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    34c2:	4293      	cmp	r3, r2
    34c4:	d111      	bne.n	34ea <__static_initialization_and_destruction_0(int, int)+0x3e>
    34c6:	4b0b      	ldr	r3, [pc, #44]	; (34f4 <__static_initialization_and_destruction_0(int, int)+0x48>)
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	f003 0301 	and.w	r3, r3, #1
    34ce:	2b00      	cmp	r3, #0
    34d0:	d10b      	bne.n	34ea <__static_initialization_and_destruction_0(int, int)+0x3e>
    34d2:	4b08      	ldr	r3, [pc, #32]	; (34f4 <__static_initialization_and_destruction_0(int, int)+0x48>)
    34d4:	2201      	movs	r2, #1
    34d6:	601a      	str	r2, [r3, #0]
    34d8:	4907      	ldr	r1, [pc, #28]	; (34f8 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    34da:	4808      	ldr	r0, [pc, #32]	; (34fc <__static_initialization_and_destruction_0(int, int)+0x50>)
    34dc:	f7fe ff20 	bl	2320 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    34e0:	4a07      	ldr	r2, [pc, #28]	; (3500 <__static_initialization_and_destruction_0(int, int)+0x54>)
    34e2:	4908      	ldr	r1, [pc, #32]	; (3504 <__static_initialization_and_destruction_0(int, int)+0x58>)
    34e4:	4805      	ldr	r0, [pc, #20]	; (34fc <__static_initialization_and_destruction_0(int, int)+0x50>)
    34e6:	f003 fb47 	bl	6b78 <__aeabi_atexit>
    34ea:	bf00      	nop
    34ec:	3708      	adds	r7, #8
    34ee:	46bd      	mov	sp, r7
    34f0:	bd80      	pop	{r7, pc}
    34f2:	bf00      	nop
    34f4:	10001278 	.word	0x10001278
    34f8:	00000845 	.word	0x00000845
    34fc:	10000d30 	.word	0x10000d30
    3500:	10000000 	.word	0x10000000
    3504:	0000088d 	.word	0x0000088d

00003508 <_GLOBAL__sub_I_GetRegistersFromStack>:
    3508:	b580      	push	{r7, lr}
    350a:	af00      	add	r7, sp, #0
    350c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3510:	2001      	movs	r0, #1
    3512:	f7ff ffcb 	bl	34ac <__static_initialization_and_destruction_0(int, int)>
    3516:	bd80      	pop	{r7, pc}

00003518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3518:	b580      	push	{r7, lr}
    351a:	b084      	sub	sp, #16
    351c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    351e:	4b28      	ldr	r3, [pc, #160]	; (35c0 <vTaskSwitchContext+0xa8>)
    3520:	681b      	ldr	r3, [r3, #0]
    3522:	2b00      	cmp	r3, #0
    3524:	d003      	beq.n	352e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3526:	4b27      	ldr	r3, [pc, #156]	; (35c4 <vTaskSwitchContext+0xac>)
    3528:	2201      	movs	r2, #1
    352a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    352c:	e043      	b.n	35b6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    352e:	4b25      	ldr	r3, [pc, #148]	; (35c4 <vTaskSwitchContext+0xac>)
    3530:	2200      	movs	r2, #0
    3532:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    3534:	f002 fcd6 	bl	5ee4 <ThreadRuntimeCounter>
    3538:	4603      	mov	r3, r0
    353a:	4a23      	ldr	r2, [pc, #140]	; (35c8 <vTaskSwitchContext+0xb0>)
    353c:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    353e:	4b22      	ldr	r3, [pc, #136]	; (35c8 <vTaskSwitchContext+0xb0>)
    3540:	681a      	ldr	r2, [r3, #0]
    3542:	4b22      	ldr	r3, [pc, #136]	; (35cc <vTaskSwitchContext+0xb4>)
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	429a      	cmp	r2, r3
    3548:	d909      	bls.n	355e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    354a:	4b21      	ldr	r3, [pc, #132]	; (35d0 <vTaskSwitchContext+0xb8>)
    354c:	681b      	ldr	r3, [r3, #0]
    354e:	6d59      	ldr	r1, [r3, #84]	; 0x54
    3550:	4a1d      	ldr	r2, [pc, #116]	; (35c8 <vTaskSwitchContext+0xb0>)
    3552:	6810      	ldr	r0, [r2, #0]
    3554:	4a1d      	ldr	r2, [pc, #116]	; (35cc <vTaskSwitchContext+0xb4>)
    3556:	6812      	ldr	r2, [r2, #0]
    3558:	1a82      	subs	r2, r0, r2
    355a:	440a      	add	r2, r1
    355c:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    355e:	4b1a      	ldr	r3, [pc, #104]	; (35c8 <vTaskSwitchContext+0xb0>)
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	4a1a      	ldr	r2, [pc, #104]	; (35cc <vTaskSwitchContext+0xb4>)
    3564:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3566:	4b1b      	ldr	r3, [pc, #108]	; (35d4 <vTaskSwitchContext+0xbc>)
    3568:	681b      	ldr	r3, [r3, #0]
    356a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	fab3 f383 	clz	r3, r3
    3572:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    3574:	78fb      	ldrb	r3, [r7, #3]
    3576:	f1c3 031f 	rsb	r3, r3, #31
    357a:	60fb      	str	r3, [r7, #12]
    357c:	68fa      	ldr	r2, [r7, #12]
    357e:	4613      	mov	r3, r2
    3580:	009b      	lsls	r3, r3, #2
    3582:	4413      	add	r3, r2
    3584:	009b      	lsls	r3, r3, #2
    3586:	4a14      	ldr	r2, [pc, #80]	; (35d8 <vTaskSwitchContext+0xc0>)
    3588:	4413      	add	r3, r2
    358a:	60bb      	str	r3, [r7, #8]
    358c:	68bb      	ldr	r3, [r7, #8]
    358e:	685b      	ldr	r3, [r3, #4]
    3590:	685a      	ldr	r2, [r3, #4]
    3592:	68bb      	ldr	r3, [r7, #8]
    3594:	605a      	str	r2, [r3, #4]
    3596:	68bb      	ldr	r3, [r7, #8]
    3598:	685a      	ldr	r2, [r3, #4]
    359a:	68bb      	ldr	r3, [r7, #8]
    359c:	3308      	adds	r3, #8
    359e:	429a      	cmp	r2, r3
    35a0:	d104      	bne.n	35ac <vTaskSwitchContext+0x94>
    35a2:	68bb      	ldr	r3, [r7, #8]
    35a4:	685b      	ldr	r3, [r3, #4]
    35a6:	685a      	ldr	r2, [r3, #4]
    35a8:	68bb      	ldr	r3, [r7, #8]
    35aa:	605a      	str	r2, [r3, #4]
    35ac:	68bb      	ldr	r3, [r7, #8]
    35ae:	685b      	ldr	r3, [r3, #4]
    35b0:	68db      	ldr	r3, [r3, #12]
    35b2:	4a07      	ldr	r2, [pc, #28]	; (35d0 <vTaskSwitchContext+0xb8>)
    35b4:	6013      	str	r3, [r2, #0]
}
    35b6:	bf00      	nop
    35b8:	3710      	adds	r7, #16
    35ba:	46bd      	mov	sp, r7
    35bc:	bd80      	pop	{r7, pc}
    35be:	bf00      	nop
    35c0:	10001328 	.word	0x10001328
    35c4:	10001324 	.word	0x10001324
    35c8:	10001330 	.word	0x10001330
    35cc:	1000132c 	.word	0x1000132c
    35d0:	100012b8 	.word	0x100012b8
    35d4:	10001320 	.word	0x10001320
    35d8:	100012bc 	.word	0x100012bc

000035dc <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    35dc:	b480      	push	{r7}
    35de:	af00      	add	r7, sp, #0
    return 1;
    35e0:	2301      	movs	r3, #1
  }
    35e2:	4618      	mov	r0, r3
    35e4:	46bd      	mov	sp, r7
    35e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35ea:	4770      	bx	lr

000035ec <_kill>:

  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    35ec:	b480      	push	{r7}
    35ee:	b083      	sub	sp, #12
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
    35f4:	6039      	str	r1, [r7, #0]
    return -1;
    35f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    35fa:	4618      	mov	r0, r3
    35fc:	370c      	adds	r7, #12
    35fe:	46bd      	mov	sp, r7
    3600:	f85d 7b04 	ldr.w	r7, [sp], #4
    3604:	4770      	bx	lr
    3606:	Address 0x0000000000003606 is out of bounds.


00003608 <_write>:
    return previous_heap_position;
  }

  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    3608:	b580      	push	{r7, lr}
    360a:	b084      	sub	sp, #16
    360c:	af00      	add	r7, sp, #0
    360e:	60f8      	str	r0, [r7, #12]
    3610:	60b9      	str	r1, [r7, #8]
    3612:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	4619      	mov	r1, r3
    3618:	68b8      	ldr	r0, [r7, #8]
    361a:	f001 f9aa 	bl	4972 <trace_write>
    return sjsu::newlib::out(ptr, length);
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <_write+0x2c>)
    3620:	681b      	ldr	r3, [r3, #0]
    3622:	687a      	ldr	r2, [r7, #4]
    3624:	4611      	mov	r1, r2
    3626:	68b8      	ldr	r0, [r7, #8]
    3628:	4798      	blx	r3
    362a:	4603      	mov	r3, r0
  }
    362c:	4618      	mov	r0, r3
    362e:	3710      	adds	r7, #16
    3630:	46bd      	mov	sp, r7
    3632:	bd80      	pop	{r7, pc}
    3634:	10000c10 	.word	0x10000c10

00003638 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    3638:	b580      	push	{r7, lr}
    363a:	b084      	sub	sp, #16
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    3640:	6878      	ldr	r0, [r7, #4]
    3642:	f004 fdc7 	bl	81d4 <strlen>
    3646:	4603      	mov	r3, r0
    3648:	60fb      	str	r3, [r7, #12]
    int result        = 0;
    364a:	2300      	movs	r3, #0
    364c:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    364e:	68fa      	ldr	r2, [r7, #12]
    3650:	6879      	ldr	r1, [r7, #4]
    3652:	2000      	movs	r0, #0
    3654:	f7ff ffd8 	bl	3608 <_write>
    3658:	4602      	mov	r2, r0
    365a:	68bb      	ldr	r3, [r7, #8]
    365c:	4413      	add	r3, r2
    365e:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    3660:	2201      	movs	r2, #1
    3662:	4906      	ldr	r1, [pc, #24]	; (367c <puts+0x44>)
    3664:	2000      	movs	r0, #0
    3666:	f7ff ffcf 	bl	3608 <_write>
    366a:	4602      	mov	r2, r0
    366c:	68bb      	ldr	r3, [r7, #8]
    366e:	4413      	add	r3, r2
    3670:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    3672:	68bb      	ldr	r3, [r7, #8]
  }
    3674:	4618      	mov	r0, r3
    3676:	3710      	adds	r7, #16
    3678:	46bd      	mov	sp, r7
    367a:	bd80      	pop	{r7, pc}
    367c:	00008e78 	.word	0x00008e78

00003680 <_exit>:

  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    3680:	b480      	push	{r7}
    3682:	b083      	sub	sp, #12
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    3688:	bf00      	nop
    while (1)
    368a:	e7fd      	b.n	3688 <_exit+0x8>

0000368c <_out_buffer(char, void*, unsigned int, unsigned int)>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    368c:	b480      	push	{r7}
    368e:	b085      	sub	sp, #20
    3690:	af00      	add	r7, sp, #0
    3692:	60b9      	str	r1, [r7, #8]
    3694:	607a      	str	r2, [r7, #4]
    3696:	603b      	str	r3, [r7, #0]
    3698:	4603      	mov	r3, r0
    369a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
    369c:	687a      	ldr	r2, [r7, #4]
    369e:	683b      	ldr	r3, [r7, #0]
    36a0:	429a      	cmp	r2, r3
    36a2:	d204      	bcs.n	36ae <_out_buffer(char, void*, unsigned int, unsigned int)+0x22>
    ((char*)buffer)[idx] = character;
    36a4:	68ba      	ldr	r2, [r7, #8]
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	4413      	add	r3, r2
    36aa:	7bfa      	ldrb	r2, [r7, #15]
    36ac:	701a      	strb	r2, [r3, #0]
  }
}
    36ae:	bf00      	nop
    36b0:	3714      	adds	r7, #20
    36b2:	46bd      	mov	sp, r7
    36b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    36b8:	4770      	bx	lr

000036ba <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    36ba:	b580      	push	{r7, lr}
    36bc:	b088      	sub	sp, #32
    36be:	af00      	add	r7, sp, #0
    36c0:	60b9      	str	r1, [r7, #8]
    36c2:	607a      	str	r2, [r7, #4]
    36c4:	603b      	str	r3, [r7, #0]
    36c6:	4603      	mov	r3, r0
    36c8:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    36ca:	23fe      	movs	r3, #254	; 0xfe
    36cc:	61fb      	str	r3, [r7, #28]
  size_t proper_index = idx % (string_limit);
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	69fa      	ldr	r2, [r7, #28]
    36d2:	fbb3 f2f2 	udiv	r2, r3, r2
    36d6:	69f9      	ldr	r1, [r7, #28]
    36d8:	fb01 f202 	mul.w	r2, r1, r2
    36dc:	1a9b      	subs	r3, r3, r2
    36de:	61bb      	str	r3, [r7, #24]
  ((char*)buffer)[proper_index] = character;
    36e0:	68ba      	ldr	r2, [r7, #8]
    36e2:	69bb      	ldr	r3, [r7, #24]
    36e4:	4413      	add	r3, r2
    36e6:	7bfa      	ldrb	r2, [r7, #15]
    36e8:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    36ea:	7bfb      	ldrb	r3, [r7, #15]
    36ec:	2b00      	cmp	r3, #0
    36ee:	d106      	bne.n	36fe <_out_chunk(char, void*, unsigned int, unsigned int)+0x44>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    36f0:	69bb      	ldr	r3, [r7, #24]
    36f2:	461a      	mov	r2, r3
    36f4:	68b9      	ldr	r1, [r7, #8]
    36f6:	2001      	movs	r0, #1
    36f8:	f7ff ff86 	bl	3608 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    36fc:	e012      	b.n	3724 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
  } else if (proper_index + 1 == string_limit) {
    36fe:	69bb      	ldr	r3, [r7, #24]
    3700:	3301      	adds	r3, #1
    3702:	69fa      	ldr	r2, [r7, #28]
    3704:	429a      	cmp	r2, r3
    3706:	d10d      	bne.n	3724 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
    size_t last_character = string_limit + 1;
    3708:	69fb      	ldr	r3, [r7, #28]
    370a:	3301      	adds	r3, #1
    370c:	617b      	str	r3, [r7, #20]
    ((char*)buffer)[last_character] = '\0';
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	697b      	ldr	r3, [r7, #20]
    3712:	4413      	add	r3, r2
    3714:	2200      	movs	r2, #0
    3716:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    3718:	697b      	ldr	r3, [r7, #20]
    371a:	461a      	mov	r2, r3
    371c:	68b9      	ldr	r1, [r7, #8]
    371e:	2001      	movs	r0, #1
    3720:	f7ff ff72 	bl	3608 <_write>
}
    3724:	bf00      	nop
    3726:	3720      	adds	r7, #32
    3728:	46bd      	mov	sp, r7
    372a:	bd80      	pop	{r7, pc}

0000372c <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    372c:	b480      	push	{r7}
    372e:	b085      	sub	sp, #20
    3730:	af00      	add	r7, sp, #0
    3732:	60b9      	str	r1, [r7, #8]
    3734:	607a      	str	r2, [r7, #4]
    3736:	603b      	str	r3, [r7, #0]
    3738:	4603      	mov	r3, r0
    373a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    373c:	bf00      	nop
    373e:	3714      	adds	r7, #20
    3740:	46bd      	mov	sp, r7
    3742:	f85d 7b04 	ldr.w	r7, [sp], #4
    3746:	4770      	bx	lr

00003748 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    3748:	b480      	push	{r7}
    374a:	b085      	sub	sp, #20
    374c:	af00      	add	r7, sp, #0
    374e:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	60fb      	str	r3, [r7, #12]
    3754:	68fb      	ldr	r3, [r7, #12]
    3756:	781b      	ldrb	r3, [r3, #0]
    3758:	2b00      	cmp	r3, #0
    375a:	d003      	beq.n	3764 <_strlen(char const*)+0x1c>
    375c:	68fb      	ldr	r3, [r7, #12]
    375e:	3301      	adds	r3, #1
    3760:	60fb      	str	r3, [r7, #12]
    3762:	e7f7      	b.n	3754 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    3764:	68fa      	ldr	r2, [r7, #12]
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	1ad3      	subs	r3, r2, r3
}
    376a:	4618      	mov	r0, r3
    376c:	3714      	adds	r7, #20
    376e:	46bd      	mov	sp, r7
    3770:	f85d 7b04 	ldr.w	r7, [sp], #4
    3774:	4770      	bx	lr

00003776 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    3776:	b480      	push	{r7}
    3778:	b083      	sub	sp, #12
    377a:	af00      	add	r7, sp, #0
    377c:	4603      	mov	r3, r0
    377e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    3780:	79fb      	ldrb	r3, [r7, #7]
    3782:	2b2f      	cmp	r3, #47	; 0x2f
    3784:	d904      	bls.n	3790 <_is_digit(char)+0x1a>
    3786:	79fb      	ldrb	r3, [r7, #7]
    3788:	2b39      	cmp	r3, #57	; 0x39
    378a:	d801      	bhi.n	3790 <_is_digit(char)+0x1a>
    378c:	2301      	movs	r3, #1
    378e:	e000      	b.n	3792 <_is_digit(char)+0x1c>
    3790:	2300      	movs	r3, #0
}
    3792:	4618      	mov	r0, r3
    3794:	370c      	adds	r7, #12
    3796:	46bd      	mov	sp, r7
    3798:	f85d 7b04 	ldr.w	r7, [sp], #4
    379c:	4770      	bx	lr

0000379e <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    379e:	b580      	push	{r7, lr}
    37a0:	b084      	sub	sp, #16
    37a2:	af00      	add	r7, sp, #0
    37a4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    37a6:	2300      	movs	r3, #0
    37a8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	781b      	ldrb	r3, [r3, #0]
    37b0:	4618      	mov	r0, r3
    37b2:	f7ff ffe0 	bl	3776 <_is_digit(char)>
    37b6:	4603      	mov	r3, r0
    37b8:	2b00      	cmp	r3, #0
    37ba:	d00f      	beq.n	37dc <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    37bc:	68fa      	ldr	r2, [r7, #12]
    37be:	4613      	mov	r3, r2
    37c0:	009b      	lsls	r3, r3, #2
    37c2:	4413      	add	r3, r2
    37c4:	005b      	lsls	r3, r3, #1
    37c6:	4618      	mov	r0, r3
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	681b      	ldr	r3, [r3, #0]
    37cc:	1c59      	adds	r1, r3, #1
    37ce:	687a      	ldr	r2, [r7, #4]
    37d0:	6011      	str	r1, [r2, #0]
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	4403      	add	r3, r0
    37d6:	3b30      	subs	r3, #48	; 0x30
    37d8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    37da:	e7e6      	b.n	37aa <_atoi(char const**)+0xc>
  }
  return i;
    37dc:	68fb      	ldr	r3, [r7, #12]
}
    37de:	4618      	mov	r0, r3
    37e0:	3710      	adds	r7, #16
    37e2:	46bd      	mov	sp, r7
    37e4:	bd80      	pop	{r7, pc}

000037e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    37e6:	b590      	push	{r4, r7, lr}
    37e8:	b089      	sub	sp, #36	; 0x24
    37ea:	af00      	add	r7, sp, #0
    37ec:	60f8      	str	r0, [r7, #12]
    37ee:	60b9      	str	r1, [r7, #8]
    37f0:	607a      	str	r2, [r7, #4]
    37f2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    37f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    37fa:	f003 0302 	and.w	r3, r3, #2
    37fe:	2b00      	cmp	r3, #0
    3800:	d10e      	bne.n	3820 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3806:	429a      	cmp	r2, r3
    3808:	d20a      	bcs.n	3820 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    380c:	2b1f      	cmp	r3, #31
    380e:	d807      	bhi.n	3820 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    3810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3812:	1c5a      	adds	r2, r3, #1
    3814:	637a      	str	r2, [r7, #52]	; 0x34
    3816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3818:	4413      	add	r3, r2
    381a:	2230      	movs	r2, #48	; 0x30
    381c:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    381e:	e7eb      	b.n	37f8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3822:	f003 0302 	and.w	r3, r3, #2
    3826:	2b00      	cmp	r3, #0
    3828:	d113      	bne.n	3852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    382a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    382c:	f003 0301 	and.w	r3, r3, #1
    3830:	2b00      	cmp	r3, #0
    3832:	d00e      	beq.n	3852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3838:	429a      	cmp	r2, r3
    383a:	d20a      	bcs.n	3852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    383e:	2b1f      	cmp	r3, #31
    3840:	d807      	bhi.n	3852 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3844:	1c5a      	adds	r2, r3, #1
    3846:	637a      	str	r2, [r7, #52]	; 0x34
    3848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    384a:	4413      	add	r3, r2
    384c:	2230      	movs	r2, #48	; 0x30
    384e:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3850:	e7e6      	b.n	3820 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3854:	f003 0310 	and.w	r3, r3, #16
    3858:	2b00      	cmp	r3, #0
    385a:	d058      	beq.n	390e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    385c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    385e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3862:	2b00      	cmp	r3, #0
    3864:	d116      	bne.n	3894 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3868:	2b00      	cmp	r3, #0
    386a:	d013      	beq.n	3894 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    386c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3870:	429a      	cmp	r2, r3
    3872:	d003      	beq.n	387c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    3874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3878:	429a      	cmp	r2, r3
    387a:	d10b      	bne.n	3894 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    387e:	3b01      	subs	r3, #1
    3880:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    3882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3884:	2b00      	cmp	r3, #0
    3886:	d005      	beq.n	3894 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    388a:	2b10      	cmp	r3, #16
    388c:	d102      	bne.n	3894 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3890:	3b01      	subs	r3, #1
    3892:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3896:	2b10      	cmp	r3, #16
    3898:	d10f      	bne.n	38ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    389c:	f003 0320 	and.w	r3, r3, #32
    38a0:	2b00      	cmp	r3, #0
    38a2:	d10a      	bne.n	38ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    38a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38a6:	2b1f      	cmp	r3, #31
    38a8:	d807      	bhi.n	38ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    38aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38ac:	1c5a      	adds	r2, r3, #1
    38ae:	637a      	str	r2, [r7, #52]	; 0x34
    38b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    38b2:	4413      	add	r3, r2
    38b4:	2278      	movs	r2, #120	; 0x78
    38b6:	701a      	strb	r2, [r3, #0]
    38b8:	e01f      	b.n	38fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38bc:	2b10      	cmp	r3, #16
    38be:	d10f      	bne.n	38e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    38c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    38c2:	f003 0320 	and.w	r3, r3, #32
    38c6:	2b00      	cmp	r3, #0
    38c8:	d00a      	beq.n	38e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    38ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38cc:	2b1f      	cmp	r3, #31
    38ce:	d807      	bhi.n	38e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    38d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38d2:	1c5a      	adds	r2, r3, #1
    38d4:	637a      	str	r2, [r7, #52]	; 0x34
    38d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    38d8:	4413      	add	r3, r2
    38da:	2258      	movs	r2, #88	; 0x58
    38dc:	701a      	strb	r2, [r3, #0]
    38de:	e00c      	b.n	38fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38e2:	2b02      	cmp	r3, #2
    38e4:	d109      	bne.n	38fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    38e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38e8:	2b1f      	cmp	r3, #31
    38ea:	d806      	bhi.n	38fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    38ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38ee:	1c5a      	adds	r2, r3, #1
    38f0:	637a      	str	r2, [r7, #52]	; 0x34
    38f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    38f4:	4413      	add	r3, r2
    38f6:	2262      	movs	r2, #98	; 0x62
    38f8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    38fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38fc:	2b1f      	cmp	r3, #31
    38fe:	d806      	bhi.n	390e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    3900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3902:	1c5a      	adds	r2, r3, #1
    3904:	637a      	str	r2, [r7, #52]	; 0x34
    3906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3908:	4413      	add	r3, r2
    390a:	2230      	movs	r2, #48	; 0x30
    390c:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    390e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3910:	2b00      	cmp	r3, #0
    3912:	d014      	beq.n	393e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3918:	429a      	cmp	r2, r3
    391a:	d110      	bne.n	393e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    391c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3920:	2b00      	cmp	r3, #0
    3922:	d109      	bne.n	3938 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3926:	f003 0304 	and.w	r3, r3, #4
    392a:	2b00      	cmp	r3, #0
    392c:	d104      	bne.n	3938 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3930:	f003 0308 	and.w	r3, r3, #8
    3934:	2b00      	cmp	r3, #0
    3936:	d002      	beq.n	393e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    3938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    393a:	3b01      	subs	r3, #1
    393c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3940:	2b1f      	cmp	r3, #31
    3942:	d824      	bhi.n	398e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    3944:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3948:	2b00      	cmp	r3, #0
    394a:	d007      	beq.n	395c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    394e:	1c5a      	adds	r2, r3, #1
    3950:	637a      	str	r2, [r7, #52]	; 0x34
    3952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3954:	4413      	add	r3, r2
    3956:	222d      	movs	r2, #45	; 0x2d
    3958:	701a      	strb	r2, [r3, #0]
    395a:	e018      	b.n	398e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    395c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    395e:	f003 0304 	and.w	r3, r3, #4
    3962:	2b00      	cmp	r3, #0
    3964:	d007      	beq.n	3976 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3968:	1c5a      	adds	r2, r3, #1
    396a:	637a      	str	r2, [r7, #52]	; 0x34
    396c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    396e:	4413      	add	r3, r2
    3970:	222b      	movs	r2, #43	; 0x2b
    3972:	701a      	strb	r2, [r3, #0]
    3974:	e00b      	b.n	398e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    3976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3978:	f003 0308 	and.w	r3, r3, #8
    397c:	2b00      	cmp	r3, #0
    397e:	d006      	beq.n	398e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    3980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3982:	1c5a      	adds	r2, r3, #1
    3984:	637a      	str	r2, [r7, #52]	; 0x34
    3986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3988:	4413      	add	r3, r2
    398a:	2220      	movs	r2, #32
    398c:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    398e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3990:	f003 0302 	and.w	r3, r3, #2
    3994:	2b00      	cmp	r3, #0
    3996:	d116      	bne.n	39c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    3998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    399a:	f003 0301 	and.w	r3, r3, #1
    399e:	2b00      	cmp	r3, #0
    39a0:	d111      	bne.n	39c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    39a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39a4:	61fb      	str	r3, [r7, #28]
    39a6:	69fa      	ldr	r2, [r7, #28]
    39a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    39aa:	429a      	cmp	r2, r3
    39ac:	d20b      	bcs.n	39c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    39ae:	68fc      	ldr	r4, [r7, #12]
    39b0:	687a      	ldr	r2, [r7, #4]
    39b2:	1c53      	adds	r3, r2, #1
    39b4:	607b      	str	r3, [r7, #4]
    39b6:	683b      	ldr	r3, [r7, #0]
    39b8:	68b9      	ldr	r1, [r7, #8]
    39ba:	2020      	movs	r0, #32
    39bc:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    39be:	69fb      	ldr	r3, [r7, #28]
    39c0:	3301      	adds	r3, #1
    39c2:	61fb      	str	r3, [r7, #28]
    39c4:	e7ef      	b.n	39a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    39c6:	2300      	movs	r3, #0
    39c8:	61bb      	str	r3, [r7, #24]
    39ca:	69ba      	ldr	r2, [r7, #24]
    39cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39ce:	429a      	cmp	r2, r3
    39d0:	d211      	bcs.n	39f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    39d2:	68fc      	ldr	r4, [r7, #12]
    39d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    39d6:	69bb      	ldr	r3, [r7, #24]
    39d8:	1ad3      	subs	r3, r2, r3
    39da:	3b01      	subs	r3, #1
    39dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39de:	4413      	add	r3, r2
    39e0:	7818      	ldrb	r0, [r3, #0]
    39e2:	687a      	ldr	r2, [r7, #4]
    39e4:	1c53      	adds	r3, r2, #1
    39e6:	607b      	str	r3, [r7, #4]
    39e8:	683b      	ldr	r3, [r7, #0]
    39ea:	68b9      	ldr	r1, [r7, #8]
    39ec:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    39ee:	69bb      	ldr	r3, [r7, #24]
    39f0:	3301      	adds	r3, #1
    39f2:	61bb      	str	r3, [r7, #24]
    39f4:	e7e9      	b.n	39ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    39f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    39f8:	f003 0302 	and.w	r3, r3, #2
    39fc:	2b00      	cmp	r3, #0
    39fe:	d00e      	beq.n	3a1e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    3a00:	687a      	ldr	r2, [r7, #4]
    3a02:	697b      	ldr	r3, [r7, #20]
    3a04:	1ad3      	subs	r3, r2, r3
    3a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3a08:	429a      	cmp	r2, r3
    3a0a:	d908      	bls.n	3a1e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    3a0c:	68fc      	ldr	r4, [r7, #12]
    3a0e:	687a      	ldr	r2, [r7, #4]
    3a10:	1c53      	adds	r3, r2, #1
    3a12:	607b      	str	r3, [r7, #4]
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	68b9      	ldr	r1, [r7, #8]
    3a18:	2020      	movs	r0, #32
    3a1a:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3a1c:	e7f0      	b.n	3a00 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    3a1e:	687b      	ldr	r3, [r7, #4]
}
    3a20:	4618      	mov	r0, r3
    3a22:	3724      	adds	r7, #36	; 0x24
    3a24:	46bd      	mov	sp, r7
    3a26:	bd90      	pop	{r4, r7, pc}

00003a28 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3a28:	b580      	push	{r7, lr}
    3a2a:	b096      	sub	sp, #88	; 0x58
    3a2c:	af08      	add	r7, sp, #32
    3a2e:	60f8      	str	r0, [r7, #12]
    3a30:	60b9      	str	r1, [r7, #8]
    3a32:	607a      	str	r2, [r7, #4]
    3a34:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3a36:	2300      	movs	r3, #0
    3a38:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d103      	bne.n	3a48 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    3a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a42:	f023 0310 	bic.w	r3, r3, #16
    3a46:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d002      	beq.n	3a58 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    3a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a54:	2b00      	cmp	r3, #0
    3a56:	d034      	beq.n	3ac2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    3a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3a5c:	fbb3 f2f2 	udiv	r2, r3, r2
    3a60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3a62:	fb01 f202 	mul.w	r2, r1, r2
    3a66:	1a9b      	subs	r3, r3, r2
    3a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3a70:	2b09      	cmp	r3, #9
    3a72:	d804      	bhi.n	3a7e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    3a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3a78:	3330      	adds	r3, #48	; 0x30
    3a7a:	b2da      	uxtb	r2, r3
    3a7c:	e00d      	b.n	3a9a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    3a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a80:	f003 0320 	and.w	r3, r3, #32
    3a84:	2b00      	cmp	r3, #0
    3a86:	d001      	beq.n	3a8c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    3a88:	2241      	movs	r2, #65	; 0x41
    3a8a:	e000      	b.n	3a8e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    3a8c:	2261      	movs	r2, #97	; 0x61
    3a8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3a92:	4413      	add	r3, r2
    3a94:	b2db      	uxtb	r3, r3
    3a96:	3b0a      	subs	r3, #10
    3a98:	b2da      	uxtb	r2, r3
    3a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a9c:	1c59      	adds	r1, r3, #1
    3a9e:	6379      	str	r1, [r7, #52]	; 0x34
    3aa0:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3aa4:	440b      	add	r3, r1
    3aa6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3aae:	fbb2 f3f3 	udiv	r3, r2, r3
    3ab2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d003      	beq.n	3ac2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    3aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3abc:	2b1f      	cmp	r3, #31
    3abe:	d800      	bhi.n	3ac2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    3ac0:	e7ca      	b.n	3a58 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ac4:	9306      	str	r3, [sp, #24]
    3ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3ac8:	9305      	str	r3, [sp, #20]
    3aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3acc:	9304      	str	r3, [sp, #16]
    3ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3ad0:	9303      	str	r3, [sp, #12]
    3ad2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    3ad6:	9302      	str	r3, [sp, #8]
    3ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ada:	9301      	str	r3, [sp, #4]
    3adc:	f107 0310 	add.w	r3, r7, #16
    3ae0:	9300      	str	r3, [sp, #0]
    3ae2:	683b      	ldr	r3, [r7, #0]
    3ae4:	687a      	ldr	r2, [r7, #4]
    3ae6:	68b9      	ldr	r1, [r7, #8]
    3ae8:	68f8      	ldr	r0, [r7, #12]
    3aea:	f7ff fe7c 	bl	37e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3aee:	4603      	mov	r3, r0
}
    3af0:	4618      	mov	r0, r3
    3af2:	3738      	adds	r7, #56	; 0x38
    3af4:	46bd      	mov	sp, r7
    3af6:	bd80      	pop	{r7, pc}

00003af8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b096      	sub	sp, #88	; 0x58
    3afc:	af08      	add	r7, sp, #32
    3afe:	60f8      	str	r0, [r7, #12]
    3b00:	60b9      	str	r1, [r7, #8]
    3b02:	607a      	str	r2, [r7, #4]
    3b04:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3b06:	2300      	movs	r3, #0
    3b08:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3b0e:	4313      	orrs	r3, r2
    3b10:	d103      	bne.n	3b1a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b14:	f023 0310 	bic.w	r3, r3, #16
    3b18:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3b20:	2b00      	cmp	r3, #0
    3b22:	d003      	beq.n	3b2c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    3b24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3b28:	4313      	orrs	r3, r2
    3b2a:	d039      	beq.n	3ba0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
      const char digit = (char)(value % base);
    3b2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    3b34:	f003 f9ec 	bl	6f10 <__aeabi_uldivmod>
    3b38:	4613      	mov	r3, r2
    3b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3b42:	2b09      	cmp	r3, #9
    3b44:	d804      	bhi.n	3b50 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x58>
    3b46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3b4a:	3330      	adds	r3, #48	; 0x30
    3b4c:	b2da      	uxtb	r2, r3
    3b4e:	e00d      	b.n	3b6c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
    3b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3b52:	f003 0320 	and.w	r3, r3, #32
    3b56:	2b00      	cmp	r3, #0
    3b58:	d001      	beq.n	3b5e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x66>
    3b5a:	2241      	movs	r2, #65	; 0x41
    3b5c:	e000      	b.n	3b60 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    3b5e:	2261      	movs	r2, #97	; 0x61
    3b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3b64:	4413      	add	r3, r2
    3b66:	b2db      	uxtb	r3, r3
    3b68:	3b0a      	subs	r3, #10
    3b6a:	b2da      	uxtb	r2, r3
    3b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b6e:	1c59      	adds	r1, r3, #1
    3b70:	6379      	str	r1, [r7, #52]	; 0x34
    3b72:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3b76:	440b      	add	r3, r1
    3b78:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    3b80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3b84:	f003 f9c4 	bl	6f10 <__aeabi_uldivmod>
    3b88:	4602      	mov	r2, r0
    3b8a:	460b      	mov	r3, r1
    3b8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3b90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3b94:	4313      	orrs	r3, r2
    3b96:	d003      	beq.n	3ba0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    3b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b9a:	2b1f      	cmp	r3, #31
    3b9c:	d800      	bhi.n	3ba0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
    3b9e:	e7c5      	b.n	3b2c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3ba2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3ba4:	9206      	str	r2, [sp, #24]
    3ba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    3ba8:	9205      	str	r2, [sp, #20]
    3baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3bac:	9204      	str	r2, [sp, #16]
    3bae:	9303      	str	r3, [sp, #12]
    3bb0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    3bb4:	9302      	str	r3, [sp, #8]
    3bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3bb8:	9301      	str	r3, [sp, #4]
    3bba:	f107 0310 	add.w	r3, r7, #16
    3bbe:	9300      	str	r3, [sp, #0]
    3bc0:	683b      	ldr	r3, [r7, #0]
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	68b9      	ldr	r1, [r7, #8]
    3bc6:	68f8      	ldr	r0, [r7, #12]
    3bc8:	f7ff fe0d 	bl	37e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3bcc:	4603      	mov	r3, r0
}
    3bce:	4618      	mov	r0, r3
    3bd0:	3738      	adds	r7, #56	; 0x38
    3bd2:	46bd      	mov	sp, r7
    3bd4:	bd80      	pop	{r7, pc}
    3bd6:	Address 0x0000000000003bd6 is out of bounds.


00003bd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    3bd8:	b590      	push	{r4, r7, lr}
    3bda:	b09b      	sub	sp, #108	; 0x6c
    3bdc:	af00      	add	r7, sp, #0
    3bde:	6178      	str	r0, [r7, #20]
    3be0:	6139      	str	r1, [r7, #16]
    3be2:	60fa      	str	r2, [r7, #12]
    3be4:	60bb      	str	r3, [r7, #8]
    3be6:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    3bea:	68fb      	ldr	r3, [r7, #12]
    3bec:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3bee:	e9d7 0100 	ldrd	r0, r1, [r7]
    3bf2:	f002 ffdf 	bl	6bb4 <__aeabi_d2f>
    3bf6:	4603      	mov	r3, r0
    3bf8:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    3bfa:	2300      	movs	r3, #0
    3bfc:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    3bfe:	f04f 0300 	mov.w	r3, #0
    3c02:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3c04:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    3c08:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    3c0a:	2300      	movs	r3, #0
    3c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3c10:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c1c:	d50a      	bpl.n	3c34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3c1e:	2301      	movs	r3, #1
    3c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3c24:	ed9f 7aab 	vldr	s14, [pc, #684]	; 3ed4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    3c28:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
    3c30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d101      	bne.n	3c44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3c40:	2306      	movs	r3, #6
    3c42:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c46:	2b1f      	cmp	r3, #31
    3c48:	d80f      	bhi.n	3c6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    3c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3c4c:	2b09      	cmp	r3, #9
    3c4e:	d90c      	bls.n	3c6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c52:	1c5a      	adds	r2, r3, #1
    3c54:	663a      	str	r2, [r7, #96]	; 0x60
    3c56:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3c5a:	4413      	add	r3, r2
    3c5c:	2230      	movs	r2, #48	; 0x30
    3c5e:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3c64:	3b01      	subs	r3, #1
    3c66:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3c68:	e7ec      	b.n	3c44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    3c6a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3c72:	ee17 3a90 	vmov	r3, s15
    3c76:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    3c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3c7a:	ee07 3a90 	vmov	s15, r3
    3c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3c82:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3c86:	ee37 7a67 	vsub.f32	s14, s14, s15
    3c8a:	4a93      	ldr	r2, [pc, #588]	; (3ed8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3c8e:	009b      	lsls	r3, r3, #2
    3c90:	4413      	add	r3, r2
    3c92:	edd3 7a00 	vldr	s15, [r3]
    3c96:	ee67 7a27 	vmul.f32	s15, s14, s15
    3c9a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    3c9e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3ca6:	ee17 3a90 	vmov	r3, s15
    3caa:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    3cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cae:	ee07 3a90 	vmov	s15, r3
    3cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3cb6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    3cba:	ee77 7a67 	vsub.f32	s15, s14, s15
    3cbe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    3cc2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3cc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3cca:	eef4 7ac7 	vcmpe.f32	s15, s14
    3cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cd2:	dd18      	ble.n	3d06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cd6:	3301      	adds	r3, #1
    3cd8:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    3cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cdc:	ee07 3a90 	vmov	s15, r3
    3ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3ce4:	4a7c      	ldr	r2, [pc, #496]	; (3ed8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3ce8:	009b      	lsls	r3, r3, #2
    3cea:	4413      	add	r3, r2
    3cec:	edd3 7a00 	vldr	s15, [r3]
    3cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cf8:	db19      	blt.n	3d2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    3cfa:	2300      	movs	r3, #0
    3cfc:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d00:	3301      	adds	r3, #1
    3d02:	65bb      	str	r3, [r7, #88]	; 0x58
    3d04:	e013      	b.n	3d2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3d06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3d0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3d0e:	eef4 7a47 	vcmp.f32	s15, s14
    3d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d16:	d10a      	bne.n	3d2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    3d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	d004      	beq.n	3d28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d20:	f003 0301 	and.w	r3, r3, #1
    3d24:	2b00      	cmp	r3, #0
    3d26:	d002      	beq.n	3d2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    3d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d2a:	3301      	adds	r3, #1
    3d2c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3d2e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3d32:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3edc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    3d36:	eef4 7ac7 	vcmpe.f32	s15, s14
    3d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d3e:	dd01      	ble.n	3d44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3d40:	2300      	movs	r3, #0
    3d42:	e166      	b.n	4012 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3d46:	2b00      	cmp	r3, #0
    3d48:	d129      	bne.n	3d9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    3d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d4c:	ee07 3a90 	vmov	s15, r3
    3d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d54:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3d58:	ee77 7a67 	vsub.f32	s15, s14, s15
    3d5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3d60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3d64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3d68:	eef4 7ac7 	vcmpe.f32	s15, s14
    3d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d70:	dd03      	ble.n	3d7a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    3d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d74:	3301      	adds	r3, #1
    3d76:	65bb      	str	r3, [r7, #88]	; 0x58
    3d78:	e062      	b.n	3e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    3d7a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3d7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3d82:	eef4 7a47 	vcmp.f32	s15, s14
    3d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d8a:	d159      	bne.n	3e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    3d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d8e:	f003 0301 	and.w	r3, r3, #1
    3d92:	2b00      	cmp	r3, #0
    3d94:	d054      	beq.n	3e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    3d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d98:	3301      	adds	r3, #1
    3d9a:	65bb      	str	r3, [r7, #88]	; 0x58
    3d9c:	e050      	b.n	3e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    3d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3da0:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3da4:	2b1f      	cmp	r3, #31
    3da6:	d828      	bhi.n	3dfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    3da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3daa:	3b01      	subs	r3, #1
    3dac:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    3dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
    3db0:	4b4b      	ldr	r3, [pc, #300]	; (3ee0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3db2:	fba3 2301 	umull	r2, r3, r3, r1
    3db6:	08da      	lsrs	r2, r3, #3
    3db8:	4613      	mov	r3, r2
    3dba:	009b      	lsls	r3, r3, #2
    3dbc:	4413      	add	r3, r2
    3dbe:	005b      	lsls	r3, r3, #1
    3dc0:	1aca      	subs	r2, r1, r3
    3dc2:	b2d3      	uxtb	r3, r2
    3dc4:	3330      	adds	r3, #48	; 0x30
    3dc6:	b2d9      	uxtb	r1, r3
    3dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3dca:	1c5a      	adds	r2, r3, #1
    3dcc:	663a      	str	r2, [r7, #96]	; 0x60
    3dce:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3dd2:	4413      	add	r3, r2
    3dd4:	460a      	mov	r2, r1
    3dd6:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    3dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ddc:	4a40      	ldr	r2, [pc, #256]	; (3ee0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3dde:	fba2 2303 	umull	r2, r3, r2, r3
    3de2:	08db      	lsrs	r3, r3, #3
    3de4:	657b      	str	r3, [r7, #84]	; 0x54
    3de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3de8:	2b00      	cmp	r3, #0
    3dea:	bf0c      	ite	eq
    3dec:	2301      	moveq	r3, #1
    3dee:	2300      	movne	r3, #0
    3df0:	b2db      	uxtb	r3, r3
    3df2:	2b00      	cmp	r3, #0
    3df4:	d100      	bne.n	3df8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3df6:	e7d4      	b.n	3da2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    3df8:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3dfc:	2b1f      	cmp	r3, #31
    3dfe:	d806      	bhi.n	3e0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3e02:	1e5a      	subs	r2, r3, #1
    3e04:	653a      	str	r2, [r7, #80]	; 0x50
    3e06:	2b00      	cmp	r3, #0
    3e08:	d001      	beq.n	3e0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3e0a:	2301      	movs	r3, #1
    3e0c:	e000      	b.n	3e10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3e0e:	2300      	movs	r3, #0
    3e10:	2b00      	cmp	r3, #0
    3e12:	d009      	beq.n	3e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    3e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e16:	1c5a      	adds	r2, r3, #1
    3e18:	663a      	str	r2, [r7, #96]	; 0x60
    3e1a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3e1e:	4413      	add	r3, r2
    3e20:	2230      	movs	r2, #48	; 0x30
    3e22:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3e26:	e7e8      	b.n	3dfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e2a:	2b1f      	cmp	r3, #31
    3e2c:	d808      	bhi.n	3e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    3e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e30:	1c5a      	adds	r2, r3, #1
    3e32:	663a      	str	r2, [r7, #96]	; 0x60
    3e34:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3e38:	4413      	add	r3, r2
    3e3a:	222e      	movs	r2, #46	; 0x2e
    3e3c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e42:	2b1f      	cmp	r3, #31
    3e44:	d829      	bhi.n	3e9a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    3e46:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3e48:	4b26      	ldr	r3, [pc, #152]	; (3ee4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3e4a:	fb83 1302 	smull	r1, r3, r3, r2
    3e4e:	1099      	asrs	r1, r3, #2
    3e50:	17d3      	asrs	r3, r2, #31
    3e52:	1ac9      	subs	r1, r1, r3
    3e54:	460b      	mov	r3, r1
    3e56:	009b      	lsls	r3, r3, #2
    3e58:	440b      	add	r3, r1
    3e5a:	005b      	lsls	r3, r3, #1
    3e5c:	1ad1      	subs	r1, r2, r3
    3e5e:	b2cb      	uxtb	r3, r1
    3e60:	3330      	adds	r3, #48	; 0x30
    3e62:	b2d9      	uxtb	r1, r3
    3e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e66:	1c5a      	adds	r2, r3, #1
    3e68:	663a      	str	r2, [r7, #96]	; 0x60
    3e6a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3e6e:	4413      	add	r3, r2
    3e70:	460a      	mov	r2, r1
    3e72:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    3e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e78:	4a1a      	ldr	r2, [pc, #104]	; (3ee4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3e7a:	fb82 1203 	smull	r1, r2, r2, r3
    3e7e:	1092      	asrs	r2, r2, #2
    3e80:	17db      	asrs	r3, r3, #31
    3e82:	1ad3      	subs	r3, r2, r3
    3e84:	65bb      	str	r3, [r7, #88]	; 0x58
    3e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e88:	2b00      	cmp	r3, #0
    3e8a:	bf0c      	ite	eq
    3e8c:	2301      	moveq	r3, #1
    3e8e:	2300      	movne	r3, #0
    3e90:	b2db      	uxtb	r3, r3
    3e92:	2b00      	cmp	r3, #0
    3e94:	d100      	bne.n	3e98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3e96:	e7d3      	b.n	3e40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    3e98:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3e9e:	f003 0302 	and.w	r3, r3, #2
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d120      	bne.n	3ee8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3eaa:	f003 0301 	and.w	r3, r3, #1
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d01a      	beq.n	3ee8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3eb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3eb6:	429a      	cmp	r2, r3
    3eb8:	d216      	bcs.n	3ee8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ebc:	2b1f      	cmp	r3, #31
    3ebe:	d813      	bhi.n	3ee8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    3ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ec2:	1c5a      	adds	r2, r3, #1
    3ec4:	663a      	str	r2, [r7, #96]	; 0x60
    3ec6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3eca:	4413      	add	r3, r2
    3ecc:	2230      	movs	r2, #48	; 0x30
    3ece:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3ed2:	e7e2      	b.n	3e9a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    3ed4:	00000000 	.word	0x00000000
    3ed8:	00008e7c 	.word	0x00008e7c
    3edc:	4f000000 	.word	0x4f000000
    3ee0:	cccccccd 	.word	0xcccccccd
    3ee4:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3ee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3eec:	429a      	cmp	r2, r3
    3eee:	d112      	bne.n	3f16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d10b      	bne.n	3f10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3efc:	f003 0304 	and.w	r3, r3, #4
    3f00:	2b00      	cmp	r3, #0
    3f02:	d105      	bne.n	3f10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3f08:	f003 0308 	and.w	r3, r3, #8
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d002      	beq.n	3f16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    3f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f12:	3b01      	subs	r3, #1
    3f14:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f18:	2b1f      	cmp	r3, #31
    3f1a:	d82c      	bhi.n	3f76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    3f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3f20:	2b00      	cmp	r3, #0
    3f22:	d009      	beq.n	3f38 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    3f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f26:	1c5a      	adds	r2, r3, #1
    3f28:	663a      	str	r2, [r7, #96]	; 0x60
    3f2a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3f2e:	4413      	add	r3, r2
    3f30:	222d      	movs	r2, #45	; 0x2d
    3f32:	f803 2c50 	strb.w	r2, [r3, #-80]
    3f36:	e01e      	b.n	3f76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    3f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3f3c:	f003 0304 	and.w	r3, r3, #4
    3f40:	2b00      	cmp	r3, #0
    3f42:	d009      	beq.n	3f58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f46:	1c5a      	adds	r2, r3, #1
    3f48:	663a      	str	r2, [r7, #96]	; 0x60
    3f4a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3f4e:	4413      	add	r3, r2
    3f50:	222b      	movs	r2, #43	; 0x2b
    3f52:	f803 2c50 	strb.w	r2, [r3, #-80]
    3f56:	e00e      	b.n	3f76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    3f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3f5c:	f003 0308 	and.w	r3, r3, #8
    3f60:	2b00      	cmp	r3, #0
    3f62:	d008      	beq.n	3f76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    3f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f66:	1c5a      	adds	r2, r3, #1
    3f68:	663a      	str	r2, [r7, #96]	; 0x60
    3f6a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3f6e:	4413      	add	r3, r2
    3f70:	2220      	movs	r2, #32
    3f72:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3f7a:	f003 0302 	and.w	r3, r3, #2
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d117      	bne.n	3fb2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    3f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3f86:	f003 0301 	and.w	r3, r3, #1
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d111      	bne.n	3fb2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    3f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f90:	64fb      	str	r3, [r7, #76]	; 0x4c
    3f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3f96:	429a      	cmp	r2, r3
    3f98:	d20b      	bcs.n	3fb2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    3f9a:	697c      	ldr	r4, [r7, #20]
    3f9c:	68fa      	ldr	r2, [r7, #12]
    3f9e:	1c53      	adds	r3, r2, #1
    3fa0:	60fb      	str	r3, [r7, #12]
    3fa2:	68bb      	ldr	r3, [r7, #8]
    3fa4:	6939      	ldr	r1, [r7, #16]
    3fa6:	2020      	movs	r0, #32
    3fa8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    3faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3fac:	3301      	adds	r3, #1
    3fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    3fb0:	e7ef      	b.n	3f92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3fb2:	2300      	movs	r3, #0
    3fb4:	64bb      	str	r3, [r7, #72]	; 0x48
    3fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fba:	429a      	cmp	r2, r3
    3fbc:	d213      	bcs.n	3fe6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3fbe:	697c      	ldr	r4, [r7, #20]
    3fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3fc4:	1ad3      	subs	r3, r2, r3
    3fc6:	3b01      	subs	r3, #1
    3fc8:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3fcc:	4413      	add	r3, r2
    3fce:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    3fd2:	68fa      	ldr	r2, [r7, #12]
    3fd4:	1c53      	adds	r3, r2, #1
    3fd6:	60fb      	str	r3, [r7, #12]
    3fd8:	68bb      	ldr	r3, [r7, #8]
    3fda:	6939      	ldr	r1, [r7, #16]
    3fdc:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3fe0:	3301      	adds	r3, #1
    3fe2:	64bb      	str	r3, [r7, #72]	; 0x48
    3fe4:	e7e7      	b.n	3fb6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3fea:	f003 0302 	and.w	r3, r3, #2
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d00e      	beq.n	4010 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    3ff2:	68fa      	ldr	r2, [r7, #12]
    3ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3ff6:	1ad3      	subs	r3, r2, r3
    3ff8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    3ffa:	429a      	cmp	r2, r3
    3ffc:	d908      	bls.n	4010 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    3ffe:	697c      	ldr	r4, [r7, #20]
    4000:	68fa      	ldr	r2, [r7, #12]
    4002:	1c53      	adds	r3, r2, #1
    4004:	60fb      	str	r3, [r7, #12]
    4006:	68bb      	ldr	r3, [r7, #8]
    4008:	6939      	ldr	r1, [r7, #16]
    400a:	2020      	movs	r0, #32
    400c:	47a0      	blx	r4
    while (idx - start_idx < width) {
    400e:	e7f0      	b.n	3ff2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    4010:	68fb      	ldr	r3, [r7, #12]
}
    4012:	4618      	mov	r0, r3
    4014:	376c      	adds	r7, #108	; 0x6c
    4016:	46bd      	mov	sp, r7
    4018:	bd90      	pop	{r4, r7, pc}
    401a:	bf00      	nop

0000401c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    401c:	b5b0      	push	{r4, r5, r7, lr}
    401e:	b0a0      	sub	sp, #128	; 0x80
    4020:	af0a      	add	r7, sp, #40	; 0x28
    4022:	60f8      	str	r0, [r7, #12]
    4024:	60b9      	str	r1, [r7, #8]
    4026:	607a      	str	r2, [r7, #4]
    4028:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    402a:	2300      	movs	r3, #0
    402c:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    402e:	68bb      	ldr	r3, [r7, #8]
    4030:	2b00      	cmp	r3, #0
    4032:	d101      	bne.n	4038 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    4034:	4ba2      	ldr	r3, [pc, #648]	; (42c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    4036:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    4038:	683b      	ldr	r3, [r7, #0]
    403a:	781b      	ldrb	r3, [r3, #0]
    403c:	2b00      	cmp	r3, #0
    403e:	f000 8446 	beq.w	48ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    4042:	683b      	ldr	r3, [r7, #0]
    4044:	781b      	ldrb	r3, [r3, #0]
    4046:	2b25      	cmp	r3, #37	; 0x25
    4048:	d00d      	beq.n	4066 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    404a:	68fc      	ldr	r4, [r7, #12]
    404c:	683b      	ldr	r3, [r7, #0]
    404e:	7818      	ldrb	r0, [r3, #0]
    4050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4052:	1c53      	adds	r3, r2, #1
    4054:	647b      	str	r3, [r7, #68]	; 0x44
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	68b9      	ldr	r1, [r7, #8]
    405a:	47a0      	blx	r4
      format++;
    405c:	683b      	ldr	r3, [r7, #0]
    405e:	3301      	adds	r3, #1
    4060:	603b      	str	r3, [r7, #0]
      continue;
    4062:	f000 bc32 	b.w	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
    }
    else {
      // yes, evaluate it
      format++;
    4066:	683b      	ldr	r3, [r7, #0]
    4068:	3301      	adds	r3, #1
    406a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    406c:	2300      	movs	r3, #0
    406e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    4070:	683b      	ldr	r3, [r7, #0]
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	3b20      	subs	r3, #32
    4076:	2b10      	cmp	r3, #16
    4078:	d856      	bhi.n	4128 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    407a:	a201      	add	r2, pc, #4	; (adr r2, 4080 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4080:	00004101 	.word	0x00004101
    4084:	00004129 	.word	0x00004129
    4088:	00004129 	.word	0x00004129
    408c:	00004115 	.word	0x00004115
    4090:	00004129 	.word	0x00004129
    4094:	00004129 	.word	0x00004129
    4098:	00004129 	.word	0x00004129
    409c:	00004129 	.word	0x00004129
    40a0:	00004129 	.word	0x00004129
    40a4:	00004129 	.word	0x00004129
    40a8:	00004129 	.word	0x00004129
    40ac:	000040ed 	.word	0x000040ed
    40b0:	00004129 	.word	0x00004129
    40b4:	000040d9 	.word	0x000040d9
    40b8:	00004129 	.word	0x00004129
    40bc:	00004129 	.word	0x00004129
    40c0:	000040c5 	.word	0x000040c5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    40c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40c6:	f043 0301 	orr.w	r3, r3, #1
    40ca:	657b      	str	r3, [r7, #84]	; 0x54
    40cc:	683b      	ldr	r3, [r7, #0]
    40ce:	3301      	adds	r3, #1
    40d0:	603b      	str	r3, [r7, #0]
    40d2:	2301      	movs	r3, #1
    40d4:	64bb      	str	r3, [r7, #72]	; 0x48
    40d6:	e02a      	b.n	412e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    40d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40da:	f043 0302 	orr.w	r3, r3, #2
    40de:	657b      	str	r3, [r7, #84]	; 0x54
    40e0:	683b      	ldr	r3, [r7, #0]
    40e2:	3301      	adds	r3, #1
    40e4:	603b      	str	r3, [r7, #0]
    40e6:	2301      	movs	r3, #1
    40e8:	64bb      	str	r3, [r7, #72]	; 0x48
    40ea:	e020      	b.n	412e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    40ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40ee:	f043 0304 	orr.w	r3, r3, #4
    40f2:	657b      	str	r3, [r7, #84]	; 0x54
    40f4:	683b      	ldr	r3, [r7, #0]
    40f6:	3301      	adds	r3, #1
    40f8:	603b      	str	r3, [r7, #0]
    40fa:	2301      	movs	r3, #1
    40fc:	64bb      	str	r3, [r7, #72]	; 0x48
    40fe:	e016      	b.n	412e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    4100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4102:	f043 0308 	orr.w	r3, r3, #8
    4106:	657b      	str	r3, [r7, #84]	; 0x54
    4108:	683b      	ldr	r3, [r7, #0]
    410a:	3301      	adds	r3, #1
    410c:	603b      	str	r3, [r7, #0]
    410e:	2301      	movs	r3, #1
    4110:	64bb      	str	r3, [r7, #72]	; 0x48
    4112:	e00c      	b.n	412e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    4114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4116:	f043 0310 	orr.w	r3, r3, #16
    411a:	657b      	str	r3, [r7, #84]	; 0x54
    411c:	683b      	ldr	r3, [r7, #0]
    411e:	3301      	adds	r3, #1
    4120:	603b      	str	r3, [r7, #0]
    4122:	2301      	movs	r3, #1
    4124:	64bb      	str	r3, [r7, #72]	; 0x48
    4126:	e002      	b.n	412e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    4128:	2300      	movs	r3, #0
    412a:	64bb      	str	r3, [r7, #72]	; 0x48
    412c:	bf00      	nop
      }
    } while (n);
    412e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4130:	2b00      	cmp	r3, #0
    4132:	d000      	beq.n	4136 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    4134:	e79c      	b.n	4070 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    4136:	2300      	movs	r3, #0
    4138:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    413a:	683b      	ldr	r3, [r7, #0]
    413c:	781b      	ldrb	r3, [r3, #0]
    413e:	4618      	mov	r0, r3
    4140:	f7ff fb19 	bl	3776 <_is_digit(char)>
    4144:	4603      	mov	r3, r0
    4146:	2b00      	cmp	r3, #0
    4148:	d005      	beq.n	4156 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    414a:	463b      	mov	r3, r7
    414c:	4618      	mov	r0, r3
    414e:	f7ff fb26 	bl	379e <_atoi(char const**)>
    4152:	6538      	str	r0, [r7, #80]	; 0x50
    4154:	e018      	b.n	4188 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    4156:	683b      	ldr	r3, [r7, #0]
    4158:	781b      	ldrb	r3, [r3, #0]
    415a:	2b2a      	cmp	r3, #42	; 0x2a
    415c:	d114      	bne.n	4188 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    415e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4160:	1d1a      	adds	r2, r3, #4
    4162:	66ba      	str	r2, [r7, #104]	; 0x68
    4164:	681b      	ldr	r3, [r3, #0]
    4166:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    4168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    416a:	2b00      	cmp	r3, #0
    416c:	da07      	bge.n	417e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4170:	f043 0302 	orr.w	r3, r3, #2
    4174:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    4176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4178:	425b      	negs	r3, r3
    417a:	653b      	str	r3, [r7, #80]	; 0x50
    417c:	e001      	b.n	4182 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4180:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    4182:	683b      	ldr	r3, [r7, #0]
    4184:	3301      	adds	r3, #1
    4186:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    4188:	2300      	movs	r3, #0
    418a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    418c:	683b      	ldr	r3, [r7, #0]
    418e:	781b      	ldrb	r3, [r3, #0]
    4190:	2b2e      	cmp	r3, #46	; 0x2e
    4192:	d124      	bne.n	41de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    4194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    419a:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    419c:	683b      	ldr	r3, [r7, #0]
    419e:	3301      	adds	r3, #1
    41a0:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    41a2:	683b      	ldr	r3, [r7, #0]
    41a4:	781b      	ldrb	r3, [r3, #0]
    41a6:	4618      	mov	r0, r3
    41a8:	f7ff fae5 	bl	3776 <_is_digit(char)>
    41ac:	4603      	mov	r3, r0
    41ae:	2b00      	cmp	r3, #0
    41b0:	d005      	beq.n	41be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    41b2:	463b      	mov	r3, r7
    41b4:	4618      	mov	r0, r3
    41b6:	f7ff faf2 	bl	379e <_atoi(char const**)>
    41ba:	64f8      	str	r0, [r7, #76]	; 0x4c
    41bc:	e00f      	b.n	41de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    41be:	683b      	ldr	r3, [r7, #0]
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	2b2a      	cmp	r3, #42	; 0x2a
    41c4:	d10b      	bne.n	41de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    41c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    41c8:	1d1a      	adds	r2, r3, #4
    41ca:	66ba      	str	r2, [r7, #104]	; 0x68
    41cc:	681b      	ldr	r3, [r3, #0]
    41ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    41d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    41d6:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    41d8:	683b      	ldr	r3, [r7, #0]
    41da:	3301      	adds	r3, #1
    41dc:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    41de:	683b      	ldr	r3, [r7, #0]
    41e0:	781b      	ldrb	r3, [r3, #0]
    41e2:	3b68      	subs	r3, #104	; 0x68
    41e4:	2b12      	cmp	r3, #18
    41e6:	d867      	bhi.n	42b8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    41e8:	a201      	add	r2, pc, #4	; (adr r2, 41f0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    41ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41ee:	bf00      	nop
    41f0:	00004263 	.word	0x00004263
    41f4:	000042b9 	.word	0x000042b9
    41f8:	00004299 	.word	0x00004299
    41fc:	000042b9 	.word	0x000042b9
    4200:	0000423d 	.word	0x0000423d
    4204:	000042b9 	.word	0x000042b9
    4208:	000042b9 	.word	0x000042b9
    420c:	000042b9 	.word	0x000042b9
    4210:	000042b9 	.word	0x000042b9
    4214:	000042b9 	.word	0x000042b9
    4218:	000042b9 	.word	0x000042b9
    421c:	000042b9 	.word	0x000042b9
    4220:	00004289 	.word	0x00004289
    4224:	000042b9 	.word	0x000042b9
    4228:	000042b9 	.word	0x000042b9
    422c:	000042b9 	.word	0x000042b9
    4230:	000042b9 	.word	0x000042b9
    4234:	000042b9 	.word	0x000042b9
    4238:	000042a9 	.word	0x000042a9
      case 'l' :
        flags |= FLAGS_LONG;
    423c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4242:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4244:	683b      	ldr	r3, [r7, #0]
    4246:	3301      	adds	r3, #1
    4248:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    424a:	683b      	ldr	r3, [r7, #0]
    424c:	781b      	ldrb	r3, [r3, #0]
    424e:	2b6c      	cmp	r3, #108	; 0x6c
    4250:	d134      	bne.n	42bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    4252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4258:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    425a:	683b      	ldr	r3, [r7, #0]
    425c:	3301      	adds	r3, #1
    425e:	603b      	str	r3, [r7, #0]
        }
        break;
    4260:	e02c      	b.n	42bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    4262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4268:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    426a:	683b      	ldr	r3, [r7, #0]
    426c:	3301      	adds	r3, #1
    426e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    4270:	683b      	ldr	r3, [r7, #0]
    4272:	781b      	ldrb	r3, [r3, #0]
    4274:	2b68      	cmp	r3, #104	; 0x68
    4276:	d125      	bne.n	42c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    4278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    427a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    427e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4280:	683b      	ldr	r3, [r7, #0]
    4282:	3301      	adds	r3, #1
    4284:	603b      	str	r3, [r7, #0]
        }
        break;
    4286:	e01d      	b.n	42c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    428e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4290:	683b      	ldr	r3, [r7, #0]
    4292:	3301      	adds	r3, #1
    4294:	603b      	str	r3, [r7, #0]
        break;
    4296:	e016      	b.n	42c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    429a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    429e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    42a0:	683b      	ldr	r3, [r7, #0]
    42a2:	3301      	adds	r3, #1
    42a4:	603b      	str	r3, [r7, #0]
        break;
    42a6:	e00e      	b.n	42c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    42a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    42ae:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    42b0:	683b      	ldr	r3, [r7, #0]
    42b2:	3301      	adds	r3, #1
    42b4:	603b      	str	r3, [r7, #0]
        break;
    42b6:	e006      	b.n	42c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    42b8:	bf00      	nop
    42ba:	e004      	b.n	42c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    42bc:	bf00      	nop
    42be:	e002      	b.n	42c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    42c0:	0000372d 	.word	0x0000372d
        break;
    42c4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    42c6:	683b      	ldr	r3, [r7, #0]
    42c8:	781b      	ldrb	r3, [r3, #0]
    42ca:	3b25      	subs	r3, #37	; 0x25
    42cc:	2b53      	cmp	r3, #83	; 0x53
    42ce:	f200 82ef 	bhi.w	48b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x894>
    42d2:	a201      	add	r2, pc, #4	; (adr r2, 42d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    42d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    42d8:	00004899 	.word	0x00004899
    42dc:	000048b1 	.word	0x000048b1
    42e0:	000048b1 	.word	0x000048b1
    42e4:	000048b1 	.word	0x000048b1
    42e8:	000048b1 	.word	0x000048b1
    42ec:	000048b1 	.word	0x000048b1
    42f0:	000048b1 	.word	0x000048b1
    42f4:	000048b1 	.word	0x000048b1
    42f8:	000048b1 	.word	0x000048b1
    42fc:	000048b1 	.word	0x000048b1
    4300:	000048b1 	.word	0x000048b1
    4304:	000048b1 	.word	0x000048b1
    4308:	000048b1 	.word	0x000048b1
    430c:	000048b1 	.word	0x000048b1
    4310:	000048b1 	.word	0x000048b1
    4314:	000048b1 	.word	0x000048b1
    4318:	000048b1 	.word	0x000048b1
    431c:	000048b1 	.word	0x000048b1
    4320:	000048b1 	.word	0x000048b1
    4324:	000048b1 	.word	0x000048b1
    4328:	000048b1 	.word	0x000048b1
    432c:	000048b1 	.word	0x000048b1
    4330:	000048b1 	.word	0x000048b1
    4334:	000048b1 	.word	0x000048b1
    4338:	000048b1 	.word	0x000048b1
    433c:	000048b1 	.word	0x000048b1
    4340:	000048b1 	.word	0x000048b1
    4344:	000048b1 	.word	0x000048b1
    4348:	000048b1 	.word	0x000048b1
    434c:	000048b1 	.word	0x000048b1
    4350:	000048b1 	.word	0x000048b1
    4354:	000048b1 	.word	0x000048b1
    4358:	000048b1 	.word	0x000048b1
    435c:	000046b7 	.word	0x000046b7
    4360:	000048b1 	.word	0x000048b1
    4364:	000048b1 	.word	0x000048b1
    4368:	000048b1 	.word	0x000048b1
    436c:	000048b1 	.word	0x000048b1
    4370:	000048b1 	.word	0x000048b1
    4374:	000048b1 	.word	0x000048b1
    4378:	000048b1 	.word	0x000048b1
    437c:	000048b1 	.word	0x000048b1
    4380:	000048b1 	.word	0x000048b1
    4384:	000048b1 	.word	0x000048b1
    4388:	000048b1 	.word	0x000048b1
    438c:	000048b1 	.word	0x000048b1
    4390:	000048b1 	.word	0x000048b1
    4394:	000048b1 	.word	0x000048b1
    4398:	000048b1 	.word	0x000048b1
    439c:	000048b1 	.word	0x000048b1
    43a0:	000048b1 	.word	0x000048b1
    43a4:	00004429 	.word	0x00004429
    43a8:	000048b1 	.word	0x000048b1
    43ac:	000048b1 	.word	0x000048b1
    43b0:	000048b1 	.word	0x000048b1
    43b4:	000048b1 	.word	0x000048b1
    43b8:	000048b1 	.word	0x000048b1
    43bc:	000048b1 	.word	0x000048b1
    43c0:	000048b1 	.word	0x000048b1
    43c4:	000048b1 	.word	0x000048b1
    43c8:	000048b1 	.word	0x000048b1
    43cc:	00004429 	.word	0x00004429
    43d0:	000046f3 	.word	0x000046f3
    43d4:	00004429 	.word	0x00004429
    43d8:	000048b1 	.word	0x000048b1
    43dc:	000046b7 	.word	0x000046b7
    43e0:	000048b1 	.word	0x000048b1
    43e4:	000048b1 	.word	0x000048b1
    43e8:	00004429 	.word	0x00004429
    43ec:	000048b1 	.word	0x000048b1
    43f0:	000048b1 	.word	0x000048b1
    43f4:	000048b1 	.word	0x000048b1
    43f8:	000048b1 	.word	0x000048b1
    43fc:	000048b1 	.word	0x000048b1
    4400:	00004429 	.word	0x00004429
    4404:	00004851 	.word	0x00004851
    4408:	000048b1 	.word	0x000048b1
    440c:	000048b1 	.word	0x000048b1
    4410:	0000477b 	.word	0x0000477b
    4414:	000048b1 	.word	0x000048b1
    4418:	00004429 	.word	0x00004429
    441c:	000048b1 	.word	0x000048b1
    4420:	000048b1 	.word	0x000048b1
    4424:	00004429 	.word	0x00004429
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    4428:	683b      	ldr	r3, [r7, #0]
    442a:	781b      	ldrb	r3, [r3, #0]
    442c:	2b78      	cmp	r3, #120	; 0x78
    442e:	d003      	beq.n	4438 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    4430:	683b      	ldr	r3, [r7, #0]
    4432:	781b      	ldrb	r3, [r3, #0]
    4434:	2b58      	cmp	r3, #88	; 0x58
    4436:	d102      	bne.n	443e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    4438:	2310      	movs	r3, #16
    443a:	643b      	str	r3, [r7, #64]	; 0x40
    443c:	e013      	b.n	4466 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    443e:	683b      	ldr	r3, [r7, #0]
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	2b6f      	cmp	r3, #111	; 0x6f
    4444:	d102      	bne.n	444c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    4446:	2308      	movs	r3, #8
    4448:	643b      	str	r3, [r7, #64]	; 0x40
    444a:	e00c      	b.n	4466 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    444c:	683b      	ldr	r3, [r7, #0]
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	2b62      	cmp	r3, #98	; 0x62
    4452:	d102      	bne.n	445a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    4454:	2302      	movs	r3, #2
    4456:	643b      	str	r3, [r7, #64]	; 0x40
    4458:	e005      	b.n	4466 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    445a:	230a      	movs	r3, #10
    445c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    445e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4460:	f023 0310 	bic.w	r3, r3, #16
    4464:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	781b      	ldrb	r3, [r3, #0]
    446a:	2b58      	cmp	r3, #88	; 0x58
    446c:	d103      	bne.n	4476 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4470:	f043 0320 	orr.w	r3, r3, #32
    4474:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    4476:	683b      	ldr	r3, [r7, #0]
    4478:	781b      	ldrb	r3, [r3, #0]
    447a:	2b69      	cmp	r3, #105	; 0x69
    447c:	d007      	beq.n	448e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	781b      	ldrb	r3, [r3, #0]
    4482:	2b64      	cmp	r3, #100	; 0x64
    4484:	d003      	beq.n	448e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    4486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4488:	f023 030c 	bic.w	r3, r3, #12
    448c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    448e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4494:	2b00      	cmp	r3, #0
    4496:	d003      	beq.n	44a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    4498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    449a:	f023 0301 	bic.w	r3, r3, #1
    449e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    44a0:	683b      	ldr	r3, [r7, #0]
    44a2:	781b      	ldrb	r3, [r3, #0]
    44a4:	2b69      	cmp	r3, #105	; 0x69
    44a6:	d004      	beq.n	44b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	781b      	ldrb	r3, [r3, #0]
    44ac:	2b64      	cmp	r3, #100	; 0x64
    44ae:	f040 808e 	bne.w	45ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    44b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    44b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    44b8:	2b00      	cmp	r3, #0
    44ba:	d02f      	beq.n	451c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x500>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    44bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    44be:	3307      	adds	r3, #7
    44c0:	f023 0307 	bic.w	r3, r3, #7
    44c4:	f103 0208 	add.w	r2, r3, #8
    44c8:	66ba      	str	r2, [r7, #104]	; 0x68
    44ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    44ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    44d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    44d6:	2a00      	cmp	r2, #0
    44d8:	f173 0100 	sbcs.w	r1, r3, #0
    44dc:	da02      	bge.n	44e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    44de:	4252      	negs	r2, r2
    44e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    44e4:	4610      	mov	r0, r2
    44e6:	4619      	mov	r1, r3
    44e8:	697b      	ldr	r3, [r7, #20]
    44ea:	0fdb      	lsrs	r3, r3, #31
    44ec:	b2dc      	uxtb	r4, r3
    44ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    44f0:	461a      	mov	r2, r3
    44f2:	f04f 0300 	mov.w	r3, #0
    44f6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    44f8:	9508      	str	r5, [sp, #32]
    44fa:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    44fc:	9507      	str	r5, [sp, #28]
    44fe:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    4500:	9506      	str	r5, [sp, #24]
    4502:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4506:	9402      	str	r4, [sp, #8]
    4508:	e9cd 0100 	strd	r0, r1, [sp]
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4510:	68b9      	ldr	r1, [r7, #8]
    4512:	68f8      	ldr	r0, [r7, #12]
    4514:	f7ff faf0 	bl	3af8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4518:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    451a:	e0c8      	b.n	46ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          else if (flags & FLAGS_LONG) {
    451c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4522:	2b00      	cmp	r3, #0
    4524:	d01e      	beq.n	4564 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x548>
            const long value = va_arg(va, long);
    4526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4528:	1d1a      	adds	r2, r3, #4
    452a:	66ba      	str	r2, [r7, #104]	; 0x68
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4530:	69fb      	ldr	r3, [r7, #28]
    4532:	2b00      	cmp	r3, #0
    4534:	bfb8      	it	lt
    4536:	425b      	neglt	r3, r3
    4538:	4619      	mov	r1, r3
    453a:	69fb      	ldr	r3, [r7, #28]
    453c:	0fdb      	lsrs	r3, r3, #31
    453e:	b2db      	uxtb	r3, r3
    4540:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4542:	9205      	str	r2, [sp, #20]
    4544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4546:	9204      	str	r2, [sp, #16]
    4548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    454a:	9203      	str	r2, [sp, #12]
    454c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    454e:	9202      	str	r2, [sp, #8]
    4550:	9301      	str	r3, [sp, #4]
    4552:	9100      	str	r1, [sp, #0]
    4554:	687b      	ldr	r3, [r7, #4]
    4556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4558:	68b9      	ldr	r1, [r7, #8]
    455a:	68f8      	ldr	r0, [r7, #12]
    455c:	f7ff fa64 	bl	3a28 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4560:	6478      	str	r0, [r7, #68]	; 0x44
          }
    4562:	e0a4      	b.n	46ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    4564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4566:	f003 0340 	and.w	r3, r3, #64	; 0x40
    456a:	2b00      	cmp	r3, #0
    456c:	d005      	beq.n	457a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55e>
    456e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4570:	1d1a      	adds	r2, r3, #4
    4572:	66ba      	str	r2, [r7, #104]	; 0x68
    4574:	681b      	ldr	r3, [r3, #0]
    4576:	b2db      	uxtb	r3, r3
    4578:	e00e      	b.n	4598 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4580:	2b00      	cmp	r3, #0
    4582:	d005      	beq.n	4590 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x574>
    4584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4586:	1d1a      	adds	r2, r3, #4
    4588:	66ba      	str	r2, [r7, #104]	; 0x68
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	b21b      	sxth	r3, r3
    458e:	e003      	b.n	4598 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    4590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4592:	1d1a      	adds	r2, r3, #4
    4594:	66ba      	str	r2, [r7, #104]	; 0x68
    4596:	681b      	ldr	r3, [r3, #0]
    4598:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    459a:	6a3b      	ldr	r3, [r7, #32]
    459c:	2b00      	cmp	r3, #0
    459e:	bfb8      	it	lt
    45a0:	425b      	neglt	r3, r3
    45a2:	4619      	mov	r1, r3
    45a4:	6a3b      	ldr	r3, [r7, #32]
    45a6:	0fdb      	lsrs	r3, r3, #31
    45a8:	b2db      	uxtb	r3, r3
    45aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    45ac:	9205      	str	r2, [sp, #20]
    45ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    45b0:	9204      	str	r2, [sp, #16]
    45b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    45b4:	9203      	str	r2, [sp, #12]
    45b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    45b8:	9202      	str	r2, [sp, #8]
    45ba:	9301      	str	r3, [sp, #4]
    45bc:	9100      	str	r1, [sp, #0]
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    45c2:	68b9      	ldr	r1, [r7, #8]
    45c4:	68f8      	ldr	r0, [r7, #12]
    45c6:	f7ff fa2f 	bl	3a28 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    45ca:	6478      	str	r0, [r7, #68]	; 0x44
          }
    45cc:	e06f      	b.n	46ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    45ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    45d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    45d4:	2b00      	cmp	r3, #0
    45d6:	d020      	beq.n	461a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    45d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    45da:	3307      	adds	r3, #7
    45dc:	f023 0307 	bic.w	r3, r3, #7
    45e0:	f103 0208 	add.w	r2, r3, #8
    45e4:	66ba      	str	r2, [r7, #104]	; 0x68
    45e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    45ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
    45ec:	4608      	mov	r0, r1
    45ee:	f04f 0100 	mov.w	r1, #0
    45f2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    45f4:	9408      	str	r4, [sp, #32]
    45f6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    45f8:	9407      	str	r4, [sp, #28]
    45fa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    45fc:	9406      	str	r4, [sp, #24]
    45fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4602:	2100      	movs	r1, #0
    4604:	9102      	str	r1, [sp, #8]
    4606:	e9cd 2300 	strd	r2, r3, [sp]
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    460e:	68b9      	ldr	r1, [r7, #8]
    4610:	68f8      	ldr	r0, [r7, #12]
    4612:	f7ff fa71 	bl	3af8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4616:	6478      	str	r0, [r7, #68]	; 0x44
    4618:	e049      	b.n	46ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
#endif
          }
          else if (flags & FLAGS_LONG) {
    461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4620:	2b00      	cmp	r3, #0
    4622:	d016      	beq.n	4652 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x636>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    4624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4626:	1d1a      	adds	r2, r3, #4
    4628:	66ba      	str	r2, [r7, #104]	; 0x68
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    462e:	9205      	str	r2, [sp, #20]
    4630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4632:	9204      	str	r2, [sp, #16]
    4634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4636:	9203      	str	r2, [sp, #12]
    4638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    463a:	9202      	str	r2, [sp, #8]
    463c:	2200      	movs	r2, #0
    463e:	9201      	str	r2, [sp, #4]
    4640:	9300      	str	r3, [sp, #0]
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4646:	68b9      	ldr	r1, [r7, #8]
    4648:	68f8      	ldr	r0, [r7, #12]
    464a:	f7ff f9ed 	bl	3a28 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    464e:	6478      	str	r0, [r7, #68]	; 0x44
    4650:	e02d      	b.n	46ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    4652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4654:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4658:	2b00      	cmp	r3, #0
    465a:	d005      	beq.n	4668 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64c>
    465c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    465e:	1d1a      	adds	r2, r3, #4
    4660:	66ba      	str	r2, [r7, #104]	; 0x68
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	b2db      	uxtb	r3, r3
    4666:	e00e      	b.n	4686 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    4668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    466e:	2b00      	cmp	r3, #0
    4670:	d005      	beq.n	467e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x662>
    4672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4674:	1d1a      	adds	r2, r3, #4
    4676:	66ba      	str	r2, [r7, #104]	; 0x68
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	b29b      	uxth	r3, r3
    467c:	e003      	b.n	4686 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    467e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4680:	1d1a      	adds	r2, r3, #4
    4682:	66ba      	str	r2, [r7, #104]	; 0x68
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    468a:	9305      	str	r3, [sp, #20]
    468c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    468e:	9304      	str	r3, [sp, #16]
    4690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4692:	9303      	str	r3, [sp, #12]
    4694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4696:	9302      	str	r3, [sp, #8]
    4698:	2300      	movs	r3, #0
    469a:	9301      	str	r3, [sp, #4]
    469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    469e:	9300      	str	r3, [sp, #0]
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46a4:	68b9      	ldr	r1, [r7, #8]
    46a6:	68f8      	ldr	r0, [r7, #12]
    46a8:	f7ff f9be 	bl	3a28 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    46ac:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    46ae:	683b      	ldr	r3, [r7, #0]
    46b0:	3301      	adds	r3, #1
    46b2:	603b      	str	r3, [r7, #0]
        break;
    46b4:	e109      	b.n	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    46b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    46b8:	3307      	adds	r3, #7
    46ba:	f023 0307 	bic.w	r3, r3, #7
    46be:	f103 0208 	add.w	r2, r3, #8
    46c2:	66ba      	str	r2, [r7, #104]	; 0x68
    46c4:	ed93 7b00 	vldr	d7, [r3]
    46c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46ca:	9302      	str	r3, [sp, #8]
    46cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    46ce:	9301      	str	r3, [sp, #4]
    46d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    46d2:	9300      	str	r3, [sp, #0]
    46d4:	eeb0 0a47 	vmov.f32	s0, s14
    46d8:	eef0 0a67 	vmov.f32	s1, s15
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46e0:	68b9      	ldr	r1, [r7, #8]
    46e2:	68f8      	ldr	r0, [r7, #12]
    46e4:	f7ff fa78 	bl	3bd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    46e8:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	3301      	adds	r3, #1
    46ee:	603b      	str	r3, [r7, #0]
        break;
    46f0:	e0eb      	b.n	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    46f2:	2301      	movs	r3, #1
    46f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    46f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46f8:	f003 0302 	and.w	r3, r3, #2
    46fc:	2b00      	cmp	r3, #0
    46fe:	d113      	bne.n	4728 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
          while (l++ < width) {
    4700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4702:	1c5a      	adds	r2, r3, #1
    4704:	63fa      	str	r2, [r7, #60]	; 0x3c
    4706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4708:	429a      	cmp	r2, r3
    470a:	bf8c      	ite	hi
    470c:	2301      	movhi	r3, #1
    470e:	2300      	movls	r3, #0
    4710:	b2db      	uxtb	r3, r3
    4712:	2b00      	cmp	r3, #0
    4714:	d008      	beq.n	4728 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
            out(' ', buffer, idx++, maxlen);
    4716:	68fc      	ldr	r4, [r7, #12]
    4718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    471a:	1c53      	adds	r3, r2, #1
    471c:	647b      	str	r3, [r7, #68]	; 0x44
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	68b9      	ldr	r1, [r7, #8]
    4722:	2020      	movs	r0, #32
    4724:	47a0      	blx	r4
          while (l++ < width) {
    4726:	e7eb      	b.n	4700 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4728:	68fc      	ldr	r4, [r7, #12]
    472a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    472c:	1d1a      	adds	r2, r3, #4
    472e:	66ba      	str	r2, [r7, #104]	; 0x68
    4730:	681b      	ldr	r3, [r3, #0]
    4732:	b2d8      	uxtb	r0, r3
    4734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4736:	1c53      	adds	r3, r2, #1
    4738:	647b      	str	r3, [r7, #68]	; 0x44
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	68b9      	ldr	r1, [r7, #8]
    473e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    4740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4742:	f003 0302 	and.w	r3, r3, #2
    4746:	2b00      	cmp	r3, #0
    4748:	d013      	beq.n	4772 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
          while (l++ < width) {
    474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    474c:	1c5a      	adds	r2, r3, #1
    474e:	63fa      	str	r2, [r7, #60]	; 0x3c
    4750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4752:	429a      	cmp	r2, r3
    4754:	bf8c      	ite	hi
    4756:	2301      	movhi	r3, #1
    4758:	2300      	movls	r3, #0
    475a:	b2db      	uxtb	r3, r3
    475c:	2b00      	cmp	r3, #0
    475e:	d008      	beq.n	4772 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
            out(' ', buffer, idx++, maxlen);
    4760:	68fc      	ldr	r4, [r7, #12]
    4762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4764:	1c53      	adds	r3, r2, #1
    4766:	647b      	str	r3, [r7, #68]	; 0x44
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	68b9      	ldr	r1, [r7, #8]
    476c:	2020      	movs	r0, #32
    476e:	47a0      	blx	r4
          while (l++ < width) {
    4770:	e7eb      	b.n	474a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72e>
          }
        }
        format++;
    4772:	683b      	ldr	r3, [r7, #0]
    4774:	3301      	adds	r3, #1
    4776:	603b      	str	r3, [r7, #0]
        break;
    4778:	e0a7      	b.n	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    477a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    477c:	1d1a      	adds	r2, r3, #4
    477e:	66ba      	str	r2, [r7, #104]	; 0x68
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    4784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4786:	f7fe ffdf 	bl	3748 <_strlen(char const*)>
    478a:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    478c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4792:	2b00      	cmp	r3, #0
    4794:	d007      	beq.n	47a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x78a>
          l = (l < precision ? l : precision);
    4796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    479a:	429a      	cmp	r2, r3
    479c:	d201      	bcs.n	47a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47a0:	e000      	b.n	47a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
    47a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    47a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    47a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47a8:	f003 0302 	and.w	r3, r3, #2
    47ac:	2b00      	cmp	r3, #0
    47ae:	d113      	bne.n	47d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
          while (l++ < width) {
    47b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47b2:	1c5a      	adds	r2, r3, #1
    47b4:	637a      	str	r2, [r7, #52]	; 0x34
    47b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    47b8:	429a      	cmp	r2, r3
    47ba:	bf8c      	ite	hi
    47bc:	2301      	movhi	r3, #1
    47be:	2300      	movls	r3, #0
    47c0:	b2db      	uxtb	r3, r3
    47c2:	2b00      	cmp	r3, #0
    47c4:	d008      	beq.n	47d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
            out(' ', buffer, idx++, maxlen);
    47c6:	68fc      	ldr	r4, [r7, #12]
    47c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    47ca:	1c53      	adds	r3, r2, #1
    47cc:	647b      	str	r3, [r7, #68]	; 0x44
    47ce:	687b      	ldr	r3, [r7, #4]
    47d0:	68b9      	ldr	r1, [r7, #8]
    47d2:	2020      	movs	r0, #32
    47d4:	47a0      	blx	r4
          while (l++ < width) {
    47d6:	e7eb      	b.n	47b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    47d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47da:	781b      	ldrb	r3, [r3, #0]
    47dc:	2b00      	cmp	r3, #0
    47de:	d00b      	beq.n	47f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    47e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    47e6:	2b00      	cmp	r3, #0
    47e8:	d004      	beq.n	47f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d8>
    47ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    47ec:	1e5a      	subs	r2, r3, #1
    47ee:	64fa      	str	r2, [r7, #76]	; 0x4c
    47f0:	2b00      	cmp	r3, #0
    47f2:	d001      	beq.n	47f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    47f4:	2301      	movs	r3, #1
    47f6:	e000      	b.n	47fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7de>
    47f8:	2300      	movs	r3, #0
    47fa:	2b00      	cmp	r3, #0
    47fc:	d00b      	beq.n	4816 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7fa>
          out(*(p++), buffer, idx++, maxlen);
    47fe:	68fc      	ldr	r4, [r7, #12]
    4800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4802:	1c5a      	adds	r2, r3, #1
    4804:	63ba      	str	r2, [r7, #56]	; 0x38
    4806:	7818      	ldrb	r0, [r3, #0]
    4808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    480a:	1c53      	adds	r3, r2, #1
    480c:	647b      	str	r3, [r7, #68]	; 0x44
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	68b9      	ldr	r1, [r7, #8]
    4812:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4814:	e7e0      	b.n	47d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    4816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4818:	f003 0302 	and.w	r3, r3, #2
    481c:	2b00      	cmp	r3, #0
    481e:	d013      	beq.n	4848 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
          while (l++ < width) {
    4820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4822:	1c5a      	adds	r2, r3, #1
    4824:	637a      	str	r2, [r7, #52]	; 0x34
    4826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4828:	429a      	cmp	r2, r3
    482a:	bf8c      	ite	hi
    482c:	2301      	movhi	r3, #1
    482e:	2300      	movls	r3, #0
    4830:	b2db      	uxtb	r3, r3
    4832:	2b00      	cmp	r3, #0
    4834:	d008      	beq.n	4848 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
            out(' ', buffer, idx++, maxlen);
    4836:	68fc      	ldr	r4, [r7, #12]
    4838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    483a:	1c53      	adds	r3, r2, #1
    483c:	647b      	str	r3, [r7, #68]	; 0x44
    483e:	687b      	ldr	r3, [r7, #4]
    4840:	68b9      	ldr	r1, [r7, #8]
    4842:	2020      	movs	r0, #32
    4844:	47a0      	blx	r4
          while (l++ < width) {
    4846:	e7eb      	b.n	4820 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x804>
          }
        }
        format++;
    4848:	683b      	ldr	r3, [r7, #0]
    484a:	3301      	adds	r3, #1
    484c:	603b      	str	r3, [r7, #0]
        break;
    484e:	e03c      	b.n	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4850:	2308      	movs	r3, #8
    4852:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4856:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    485a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    485c:	2300      	movs	r3, #0
    485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4864:	1d1a      	adds	r2, r3, #4
    4866:	66ba      	str	r2, [r7, #104]	; 0x68
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	461a      	mov	r2, r3
    486c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    486e:	9305      	str	r3, [sp, #20]
    4870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4872:	9304      	str	r3, [sp, #16]
    4874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4876:	9303      	str	r3, [sp, #12]
    4878:	2310      	movs	r3, #16
    487a:	9302      	str	r3, [sp, #8]
    487c:	2300      	movs	r3, #0
    487e:	9301      	str	r3, [sp, #4]
    4880:	9200      	str	r2, [sp, #0]
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4886:	68b9      	ldr	r1, [r7, #8]
    4888:	68f8      	ldr	r0, [r7, #12]
    488a:	f7ff f8cd 	bl	3a28 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    488e:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    4890:	683b      	ldr	r3, [r7, #0]
    4892:	3301      	adds	r3, #1
    4894:	603b      	str	r3, [r7, #0]
        break;
    4896:	e018      	b.n	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    4898:	68fc      	ldr	r4, [r7, #12]
    489a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    489c:	1c53      	adds	r3, r2, #1
    489e:	647b      	str	r3, [r7, #68]	; 0x44
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	68b9      	ldr	r1, [r7, #8]
    48a4:	2025      	movs	r0, #37	; 0x25
    48a6:	47a0      	blx	r4
        format++;
    48a8:	683b      	ldr	r3, [r7, #0]
    48aa:	3301      	adds	r3, #1
    48ac:	603b      	str	r3, [r7, #0]
        break;
    48ae:	e00c      	b.n	48ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>

      default :
        out(*format, buffer, idx++, maxlen);
    48b0:	68fc      	ldr	r4, [r7, #12]
    48b2:	683b      	ldr	r3, [r7, #0]
    48b4:	7818      	ldrb	r0, [r3, #0]
    48b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    48b8:	1c53      	adds	r3, r2, #1
    48ba:	647b      	str	r3, [r7, #68]	; 0x44
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	68b9      	ldr	r1, [r7, #8]
    48c0:	47a0      	blx	r4
        format++;
    48c2:	683b      	ldr	r3, [r7, #0]
    48c4:	3301      	adds	r3, #1
    48c6:	603b      	str	r3, [r7, #0]
        break;
    48c8:	bf00      	nop
  while (*format)
    48ca:	f7ff bbb5 	b.w	4038 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    48ce:	68fc      	ldr	r4, [r7, #12]
    48d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	429a      	cmp	r2, r3
    48d6:	d302      	bcc.n	48de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c2>
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	1e5a      	subs	r2, r3, #1
    48dc:	e000      	b.n	48e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c4>
    48de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	68b9      	ldr	r1, [r7, #8]
    48e4:	2000      	movs	r0, #0
    48e6:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    48e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    48ea:	4618      	mov	r0, r3
    48ec:	3758      	adds	r7, #88	; 0x58
    48ee:	46bd      	mov	sp, r7
    48f0:	bdb0      	pop	{r4, r5, r7, pc}
    48f2:	bf00      	nop

000048f4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    48f4:	b40f      	push	{r0, r1, r2, r3}
    48f6:	b580      	push	{r7, lr}
    48f8:	b0c4      	sub	sp, #272	; 0x110
    48fa:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    48fc:	f507 738a 	add.w	r3, r7, #276	; 0x114
    4900:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    4904:	4639      	mov	r1, r7
    4906:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    490a:	9300      	str	r3, [sp, #0]
    490c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    4910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4914:	4807      	ldr	r0, [pc, #28]	; (4934 <printf+0x40>)
    4916:	f7ff fb81 	bl	401c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    491a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    491e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    4922:	4618      	mov	r0, r3
    4924:	f507 7784 	add.w	r7, r7, #264	; 0x108
    4928:	46bd      	mov	sp, r7
    492a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    492e:	b004      	add	sp, #16
    4930:	4770      	bx	lr
    4932:	bf00      	nop
    4934:	000036bb 	.word	0x000036bb

00004938 <vsnprintf>:
  return ret;
}


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
    4938:	b580      	push	{r7, lr}
    493a:	b086      	sub	sp, #24
    493c:	af02      	add	r7, sp, #8
    493e:	60f8      	str	r0, [r7, #12]
    4940:	60b9      	str	r1, [r7, #8]
    4942:	607a      	str	r2, [r7, #4]
    4944:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    4946:	683b      	ldr	r3, [r7, #0]
    4948:	9300      	str	r3, [sp, #0]
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	68ba      	ldr	r2, [r7, #8]
    494e:	68f9      	ldr	r1, [r7, #12]
    4950:	4803      	ldr	r0, [pc, #12]	; (4960 <vsnprintf+0x28>)
    4952:	f7ff fb63 	bl	401c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4956:	4603      	mov	r3, r0
}
    4958:	4618      	mov	r0, r3
    495a:	3710      	adds	r7, #16
    495c:	46bd      	mov	sp, r7
    495e:	bd80      	pop	{r7, pc}
    4960:	0000368d 	.word	0x0000368d

00004964 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    4964:	b480      	push	{r7}
    4966:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    4968:	bf00      	nop
    496a:	46bd      	mov	sp, r7
    496c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4970:	4770      	bx	lr

00004972 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    4972:	b580      	push	{r7, lr}
    4974:	b082      	sub	sp, #8
    4976:	af00      	add	r7, sp, #0
    4978:	6078      	str	r0, [r7, #4]
    497a:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    497c:	6839      	ldr	r1, [r7, #0]
    497e:	6878      	ldr	r0, [r7, #4]
    4980:	f000 f806 	bl	4990 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    4984:	4603      	mov	r3, r0
    4986:	bf00      	nop
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    4988:	4618      	mov	r0, r3
    498a:	3708      	adds	r7, #8
    498c:	46bd      	mov	sp, r7
    498e:	bd80      	pop	{r7, pc}

00004990 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    4990:	b5b0      	push	{r4, r5, r7, lr}
    4992:	b08c      	sub	sp, #48	; 0x30
    4994:	af00      	add	r7, sp, #0
    4996:	6078      	str	r0, [r7, #4]
    4998:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    499a:	4b2c      	ldr	r3, [pc, #176]	; (4a4c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xbc>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	f003 0301 	and.w	r3, r3, #1
    49a2:	2b00      	cmp	r3, #0
    49a4:	bf0c      	ite	eq
    49a6:	2301      	moveq	r3, #1
    49a8:	2300      	movne	r3, #0
    49aa:	b2db      	uxtb	r3, r3
    49ac:	2b00      	cmp	r3, #0
    49ae:	d001      	beq.n	49b4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    49b0:	683b      	ldr	r3, [r7, #0]
    49b2:	e047      	b.n	4a44 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    49b4:	4b26      	ldr	r3, [pc, #152]	; (4a50 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	2b00      	cmp	r3, #0
    49ba:	d11d      	bne.n	49f8 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    49bc:	4b25      	ldr	r3, [pc, #148]	; (4a54 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    49be:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    49c0:	2304      	movs	r3, #4
    49c2:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    49c4:	2303      	movs	r3, #3
    49c6:	613b      	str	r3, [r7, #16]
    49c8:	2301      	movs	r3, #1
    49ca:	62bb      	str	r3, [r7, #40]	; 0x28
    49cc:	f107 0308 	add.w	r3, r7, #8
    49d0:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    49d2:	6abc      	ldr	r4, [r7, #40]	; 0x28
    49d4:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    49d6:	4620      	mov	r0, r4
    49d8:	4629      	mov	r1, r5
    49da:	beab      	bkpt	0x00ab
    49dc:	4604      	mov	r4, r0
    49de:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    49e0:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    49e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    49e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    49e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    49ea:	d102      	bne.n	49f2 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    49ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49f0:	e028      	b.n	4a44 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

      handle = ret;
    49f2:	4a17      	ldr	r2, [pc, #92]	; (4a50 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    49f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    49f6:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    49f8:	4b15      	ldr	r3, [pc, #84]	; (4a50 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    49fa:	681b      	ldr	r3, [r3, #0]
    49fc:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    49fe:	687b      	ldr	r3, [r7, #4]
    4a00:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    4a02:	683b      	ldr	r3, [r7, #0]
    4a04:	613b      	str	r3, [r7, #16]
    4a06:	2305      	movs	r3, #5
    4a08:	61fb      	str	r3, [r7, #28]
    4a0a:	f107 0308 	add.w	r3, r7, #8
    4a0e:	61bb      	str	r3, [r7, #24]
  );
    4a10:	69fc      	ldr	r4, [r7, #28]
    4a12:	69bd      	ldr	r5, [r7, #24]
    4a14:	4620      	mov	r0, r4
    4a16:	4629      	mov	r1, r5
    4a18:	beab      	bkpt	0x00ab
    4a1a:	4604      	mov	r4, r0
    4a1c:	617c      	str	r4, [r7, #20]
  return value;
    4a1e:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    4a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    4a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4a28:	d102      	bne.n	4a30 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    4a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a2e:	e009      	b.n	4a44 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    4a30:	683b      	ldr	r3, [r7, #0]
    4a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4a34:	429a      	cmp	r2, r3
    4a36:	d102      	bne.n	4a3e <_trace_write_semihosting_stdout(char const*, unsigned int)+0xae>
    return -1;
    4a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a3c:	e002      	b.n	4a44 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    4a3e:	683a      	ldr	r2, [r7, #0]
    4a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a42:	1ad3      	subs	r3, r2, r3
}
    4a44:	4618      	mov	r0, r3
    4a46:	3730      	adds	r7, #48	; 0x30
    4a48:	46bd      	mov	sp, r7
    4a4a:	bdb0      	pop	{r4, r5, r7, pc}
    4a4c:	e000edf0 	.word	0xe000edf0
    4a50:	10001334 	.word	0x10001334
    4a54:	00008ea4 	.word	0x00008ea4

00004a58 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    4a58:	b480      	push	{r7}
    4a5a:	b083      	sub	sp, #12
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    4a60:	4b0c      	ldr	r3, [pc, #48]	; (4a94 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	68da      	ldr	r2, [r3, #12]
    4a66:	4b0b      	ldr	r3, [pc, #44]	; (4a94 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4a6e:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    4a70:	4b09      	ldr	r3, [pc, #36]	; (4a98 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	2200      	movs	r2, #0
    4a76:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    4a78:	4b07      	ldr	r3, [pc, #28]	; (4a98 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	681a      	ldr	r2, [r3, #0]
    4a7e:	4b06      	ldr	r3, [pc, #24]	; (4a98 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	f042 0201 	orr.w	r2, r2, #1
    4a86:	601a      	str	r2, [r3, #0]
  }
    4a88:	bf00      	nop
    4a8a:	370c      	adds	r7, #12
    4a8c:	46bd      	mov	sp, r7
    4a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a92:	4770      	bx	lr
    4a94:	10000c1c 	.word	0x10000c1c
    4a98:	10000c18 	.word	0x10000c18

00004a9c <sjsu::cortex::DwtCounter::GetCount()>:

  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    4a9c:	b480      	push	{r7}
    4a9e:	b083      	sub	sp, #12
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    4aa4:	4b04      	ldr	r3, [pc, #16]	; (4ab8 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	685b      	ldr	r3, [r3, #4]
  }
    4aaa:	4618      	mov	r0, r3
    4aac:	370c      	adds	r7, #12
    4aae:	46bd      	mov	sp, r7
    4ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop
    4ab8:	10000c18 	.word	0x10000c18

00004abc <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    4abc:	b480      	push	{r7}
    4abe:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    4ac0:	f8df 001c 	ldr.w	r0, [pc, #28]	; 4ae0 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    4ac4:	6801      	ldr	r1, [r0, #0]
    4ac6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4aca:	6001      	str	r1, [r0, #0]
    4acc:	f3bf 8f4f 	dsb	sy
    4ad0:	f3bf 8f6f 	isb	sy
  }
}
    4ad4:	bf00      	nop
    4ad6:	46bd      	mov	sp, r7
    4ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4adc:	4770      	bx	lr
    4ade:	0000      	.short	0x0000
    4ae0:	e000ed88 	.word	0xe000ed88

00004ae4 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>:
  static void SetPlatformController(InterruptController * interrupt_controller)
    4ae4:	b480      	push	{r7}
    4ae6:	b083      	sub	sp, #12
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
    platform_interrupt_controller = interrupt_controller;
    4aec:	4a04      	ldr	r2, [pc, #16]	; (4b00 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)+0x1c>)
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	6013      	str	r3, [r2, #0]
  }
    4af2:	bf00      	nop
    4af4:	370c      	adds	r7, #12
    4af6:	46bd      	mov	sp, r7
    4af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4afc:	4770      	bx	lr
    4afe:	bf00      	nop
    4b00:	10000d1c 	.word	0x10000d1c

00004b04 <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    4b04:	b580      	push	{r7, lr}
    4b06:	b084      	sub	sp, #16
    4b08:	af00      	add	r7, sp, #0
    4b0a:	e9c7 0100 	strd	r0, r1, [r7]
    4b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
    4b12:	f002 f967 	bl	6de4 <__aeabi_ul2f>
    4b16:	4602      	mov	r2, r0
    4b18:	f107 030c 	add.w	r3, r7, #12
    4b1c:	ee00 2a10 	vmov	s0, r2
    4b20:	4618      	mov	r0, r3
    4b22:	f7fb fe14 	bl	74e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4b26:	68fb      	ldr	r3, [r7, #12]
    4b28:	4618      	mov	r0, r3
    4b2a:	3710      	adds	r7, #16
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bd80      	pop	{r7, pc}

00004b30 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4b30:	b580      	push	{r7, lr}
    4b32:	b086      	sub	sp, #24
    4b34:	af00      	add	r7, sp, #0
    4b36:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4b38:	6878      	ldr	r0, [r7, #4]
    4b3a:	f000 f807 	bl	4b4c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4b3e:	eef0 7a40 	vmov.f32	s15, s0
	}
    4b42:	eeb0 0a67 	vmov.f32	s0, s15
    4b46:	3718      	adds	r7, #24
    4b48:	46bd      	mov	sp, r7
    4b4a:	bd80      	pop	{r7, pc}

00004b4c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4b4c:	b480      	push	{r7}
    4b4e:	b085      	sub	sp, #20
    4b50:	af00      	add	r7, sp, #0
    4b52:	60f8      	str	r0, [r7, #12]
    4b54:	7239      	strb	r1, [r7, #8]
    4b56:	713a      	strb	r2, [r7, #4]
    4b58:	703b      	strb	r3, [r7, #0]
			return value;
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	ee07 3a90 	vmov	s15, r3
		}
    4b62:	eeb0 0a67 	vmov.f32	s0, s15
    4b66:	3714      	adds	r7, #20
    4b68:	46bd      	mov	sp, r7
    4b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6e:	4770      	bx	lr

00004b70 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4b70:	b580      	push	{r7, lr}
    4b72:	b086      	sub	sp, #24
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4b78:	6878      	ldr	r0, [r7, #4]
    4b7a:	f000 f807 	bl	4b8c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4b7e:	eef0 7a40 	vmov.f32	s15, s0
	}
    4b82:	eeb0 0a67 	vmov.f32	s0, s15
    4b86:	3718      	adds	r7, #24
    4b88:	46bd      	mov	sp, r7
    4b8a:	bd80      	pop	{r7, pc}

00004b8c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4b8c:	b480      	push	{r7}
    4b8e:	b085      	sub	sp, #20
    4b90:	af00      	add	r7, sp, #0
    4b92:	60f8      	str	r0, [r7, #12]
    4b94:	7239      	strb	r1, [r7, #8]
    4b96:	713a      	strb	r2, [r7, #4]
    4b98:	703b      	strb	r3, [r7, #0]
			return value;
    4b9a:	68fb      	ldr	r3, [r7, #12]
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	ee07 3a90 	vmov	s15, r3
		}
    4ba2:	eeb0 0a67 	vmov.f32	s0, s15
    4ba6:	3714      	adds	r7, #20
    4ba8:	46bd      	mov	sp, r7
    4baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bae:	4770      	bx	lr

00004bb0 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4bb0:	b580      	push	{r7, lr}
    4bb2:	ed2d 8b02 	vpush	{d8}
    4bb6:	b082      	sub	sp, #8
    4bb8:	af00      	add	r7, sp, #0
    4bba:	6078      	str	r0, [r7, #4]
    4bbc:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	ed93 8a00 	vldr	s16, [r3]
    4bc4:	683b      	ldr	r3, [r7, #0]
    4bc6:	4618      	mov	r0, r3
    4bc8:	f7ff ffd2 	bl	4b70 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4bcc:	eef0 7a40 	vmov.f32	s15, s0
    4bd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4bd8:	bf94      	ite	ls
    4bda:	2301      	movls	r3, #1
    4bdc:	2300      	movhi	r3, #0
    4bde:	b2db      	uxtb	r3, r3
		}
    4be0:	4618      	mov	r0, r3
    4be2:	3708      	adds	r7, #8
    4be4:	46bd      	mov	sp, r7
    4be6:	ecbd 8b02 	vpop	{d8}
    4bea:	bd80      	pop	{r7, pc}

00004bec <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>:
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b082      	sub	sp, #8
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    4bf4:	6879      	ldr	r1, [r7, #4]
    4bf6:	4803      	ldr	r0, [pc, #12]	; (4c04 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)+0x18>)
    4bf8:	f001 f9f0 	bl	5fdc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
}
    4bfc:	bf00      	nop
    4bfe:	3708      	adds	r7, #8
    4c00:	46bd      	mov	sp, r7
    4c02:	bd80      	pop	{r7, pc}
    4c04:	10000d30 	.word	0x10000d30

00004c08 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>:
  static void SetPlatformController(SystemController * system_controller)
    4c08:	b480      	push	{r7}
    4c0a:	b083      	sub	sp, #12
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	6078      	str	r0, [r7, #4]
    platform_system_controller = system_controller;
    4c10:	4a04      	ldr	r2, [pc, #16]	; (4c24 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)+0x1c>)
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	6013      	str	r3, [r2, #0]
  }
    4c16:	bf00      	nop
    4c18:	370c      	adds	r7, #12
    4c1a:	46bd      	mov	sp, r7
    4c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c20:	4770      	bx	lr
    4c22:	bf00      	nop
    4c24:	10000d24 	.word	0x10000d24

00004c28 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }

  /// System timer interrupt handler.
  static void SystemTimerHandler()
    4c28:	b580      	push	{r7, lr}
    4c2a:	b084      	sub	sp, #16
    4c2c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    millisecond_count += 1ms;
    4c2e:	f107 0308 	add.w	r3, r7, #8
    4c32:	4618      	mov	r0, r3
    4c34:	f001 fa2b 	bl	608e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    4c38:	f107 0208 	add.w	r2, r7, #8
    4c3c:	463b      	mov	r3, r7
    4c3e:	4611      	mov	r1, r2
    4c40:	4618      	mov	r0, r3
    4c42:	f001 fa31 	bl	60a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    4c46:	463b      	mov	r3, r7
    4c48:	4619      	mov	r1, r3
    4c4a:	4808      	ldr	r0, [pc, #32]	; (4c6c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4c4c:	f7fb fde4 	bl	818 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    if (callback)
    4c50:	4807      	ldr	r0, [pc, #28]	; (4c70 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4c52:	f7fe f811 	bl	2c78 <std::function<void ()>::operator bool() const>
    4c56:	4603      	mov	r3, r0
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d002      	beq.n	4c62 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x3a>
    {
      callback();
    4c5c:	4804      	ldr	r0, [pc, #16]	; (4c70 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4c5e:	f7fd fba9 	bl	23b4 <std::function<void ()>::operator()() const>
    }
  }
    4c62:	bf00      	nop
    4c64:	3710      	adds	r7, #16
    4c66:	46bd      	mov	sp, r7
    4c68:	bd80      	pop	{r7, pc}
    4c6a:	bf00      	nop
    4c6c:	10001348 	.word	0x10001348
    4c70:	10001338 	.word	0x10001338

00004c74 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
    4c74:	b580      	push	{r7, lr}
    4c76:	b084      	sub	sp, #16
    4c78:	af00      	add	r7, sp, #0
    4c7a:	60f8      	str	r0, [r7, #12]
    4c7c:	60b9      	str	r1, [r7, #8]
    4c7e:	607a      	str	r2, [r7, #4]
      { return __d * __s; }
    4c80:	68fb      	ldr	r3, [r7, #12]
    4c82:	68ba      	ldr	r2, [r7, #8]
    4c84:	6879      	ldr	r1, [r7, #4]
    4c86:	4618      	mov	r0, r3
    4c88:	f000 f805 	bl	4c96 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4c8c:	bf00      	nop
    4c8e:	68f8      	ldr	r0, [r7, #12]
    4c90:	3710      	adds	r7, #16
    4c92:	46bd      	mov	sp, r7
    4c94:	bd80      	pop	{r7, pc}

00004c96 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4c96:	b5b0      	push	{r4, r5, r7, lr}
    4c98:	b088      	sub	sp, #32
    4c9a:	af00      	add	r7, sp, #0
    4c9c:	60f8      	str	r0, [r7, #12]
    4c9e:	60b9      	str	r1, [r7, #8]
    4ca0:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() * __s);
    4ca2:	68bb      	ldr	r3, [r7, #8]
    4ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ca8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4cac:	f107 0318 	add.w	r3, r7, #24
    4cb0:	4618      	mov	r0, r3
    4cb2:	f7fb fcf5 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    4cb6:	687b      	ldr	r3, [r7, #4]
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	461a      	mov	r2, r3
    4cbc:	f04f 0300 	mov.w	r3, #0
    4cc0:	fb02 f501 	mul.w	r5, r2, r1
    4cc4:	fb00 f403 	mul.w	r4, r0, r3
    4cc8:	442c      	add	r4, r5
    4cca:	fba0 2302 	umull	r2, r3, r0, r2
    4cce:	18e1      	adds	r1, r4, r3
    4cd0:	460b      	mov	r3, r1
    4cd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4cd6:	f107 0310 	add.w	r3, r7, #16
    4cda:	4619      	mov	r1, r3
    4cdc:	68f8      	ldr	r0, [r7, #12]
    4cde:	f7fb fced 	bl	6bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4ce2:	68f8      	ldr	r0, [r7, #12]
    4ce4:	3720      	adds	r7, #32
    4ce6:	46bd      	mov	sp, r7
    4ce8:	bdb0      	pop	{r4, r5, r7, pc}

00004cea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4cea:	b580      	push	{r7, lr}
    4cec:	b088      	sub	sp, #32
    4cee:	af00      	add	r7, sp, #0
    4cf0:	60f8      	str	r0, [r7, #12]
    4cf2:	60b9      	str	r1, [r7, #8]
    4cf4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() / __s);
    4cf6:	68bb      	ldr	r3, [r7, #8]
    4cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4cfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4d00:	f107 0318 	add.w	r3, r7, #24
    4d04:	4618      	mov	r0, r3
    4d06:	f7fb fccb 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	681b      	ldr	r3, [r3, #0]
    4d0e:	461a      	mov	r2, r3
    4d10:	f04f 0300 	mov.w	r3, #0
    4d14:	f002 f8ac 	bl	6e70 <__aeabi_ldivmod>
    4d18:	4602      	mov	r2, r0
    4d1a:	460b      	mov	r3, r1
    4d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4d20:	f107 0310 	add.w	r3, r7, #16
    4d24:	4619      	mov	r1, r3
    4d26:	68f8      	ldr	r0, [r7, #12]
    4d28:	f7fb fcc8 	bl	6bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4d2c:	68f8      	ldr	r0, [r7, #12]
    4d2e:	3720      	adds	r7, #32
    4d30:	46bd      	mov	sp, r7
    4d32:	bd80      	pop	{r7, pc}

00004d34 <sjsu::cortex::SystemTimer::GetCount()>:

  /// @return returns the current system_timer counter value.
  static std::chrono::nanoseconds GetCount()
    4d34:	b580      	push	{r7, lr}
    4d36:	b08c      	sub	sp, #48	; 0x30
    4d38:	af00      	add	r7, sp, #0
    4d3a:	6078      	str	r0, [r7, #4]
  {
    // Capture all count variables at this instant.
    uint32_t high_speed_ticks = dwt_counter.GetCount();
    4d3c:	4816      	ldr	r0, [pc, #88]	; (4d98 <sjsu::cortex::SystemTimer::GetCount()+0x64>)
    4d3e:	f7ff fead 	bl	4a9c <sjsu::cortex::DwtCounter::GetCount()>
    4d42:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto current_millis_count = millisecond_count;
    4d44:	4b15      	ldr	r3, [pc, #84]	; (4d9c <sjsu::cortex::SystemTimer::GetCount()+0x68>)
    4d46:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d4a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Get rid of the portion of the dwt tick count that is above 1ms.
    // We only want the information about the ticks that is below 1ms, since we
    // get the 1ms count from the SysTick timer interrupt.
    uint32_t sub_millis_ticks = (high_speed_ticks % ticks_per_millisecond);
    4d4e:	4b14      	ldr	r3, [pc, #80]	; (4da0 <sjsu::cortex::SystemTimer::GetCount()+0x6c>)
    4d50:	681a      	ldr	r2, [r3, #0]
    4d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d54:	fbb3 f1f2 	udiv	r1, r3, r2
    4d58:	fb02 f201 	mul.w	r2, r2, r1
    4d5c:	1a9b      	subs	r3, r3, r2
    4d5e:	61fb      	str	r3, [r7, #28]
    // Perform the conversion from ticks to nanoseconds
    auto nanoseconds_unscaled = (sub_millis_ticks * nanoseconds_per_tick);
    4d60:	f107 0310 	add.w	r3, r7, #16
    4d64:	f107 011c 	add.w	r1, r7, #28
    4d68:	4a0e      	ldr	r2, [pc, #56]	; (4da4 <sjsu::cortex::SystemTimer::GetCount()+0x70>)
    4d6a:	4618      	mov	r0, r3
    4d6c:	f7ff ff82 	bl	4c74 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    // Nanoseconds per tick is actually scaled up by the kFixedPointScaling
    // factor, meaning it needs to be divided by that value to get the correct
    // nanosecond_uptime.
    auto nanoseconds_uptime_scaled = nanoseconds_unscaled / kFixedPointScaling;
    4d70:	f107 0308 	add.w	r3, r7, #8
    4d74:	f107 0110 	add.w	r1, r7, #16
    4d78:	4a0b      	ldr	r2, [pc, #44]	; (4da8 <sjsu::cortex::SystemTimer::GetCount()+0x74>)
    4d7a:	4618      	mov	r0, r3
    4d7c:	f7ff ffb5 	bl	4cea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>

    // Result is simply the uptime milliseconds (represented in nanoseconds) +
    // the added nanoseconds
    return current_millis_count + nanoseconds_uptime_scaled;
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	f107 0208 	add.w	r2, r7, #8
    4d86:	f107 0120 	add.w	r1, r7, #32
    4d8a:	4618      	mov	r0, r3
    4d8c:	f001 f941 	bl	6012 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  }
    4d90:	6878      	ldr	r0, [r7, #4]
    4d92:	3730      	adds	r7, #48	; 0x30
    4d94:	46bd      	mov	sp, r7
    4d96:	bd80      	pop	{r7, pc}
    4d98:	10001350 	.word	0x10001350
    4d9c:	10001348 	.word	0x10001348
    4da0:	10000c30 	.word	0x10000c30
    4da4:	10000c28 	.word	0x10000c28
    4da8:	000095f0 	.word	0x000095f0

00004dac <sjsu::cortex::SystemTimer::Initialize() const>:
  /// Constructor for ARM Cortex M system timer.
  ///
  /// @param priority - the interrupt priority of
  explicit constexpr SystemTimer(uint8_t priority = -1) : priority_(priority) {}

  void Initialize() const override
    4dac:	b590      	push	{r4, r7, lr}
    4dae:	b08b      	sub	sp, #44	; 0x2c
    4db0:	af00      	add	r7, sp, #0
    4db2:	60f8      	str	r0, [r7, #12]
  {
    dwt_counter.Initialize();
    4db4:	481c      	ldr	r0, [pc, #112]	; (4e28 <sjsu::cortex::SystemTimer::Initialize() const+0x7c>)
    4db6:	f7ff fe4f 	bl	4a58 <sjsu::cortex::DwtCounter::Initialize()>

    auto system_frequency = SystemController::GetPlatformController()
    4dba:	f7fb fcf9 	bl	7b0 <sjsu::SystemController::GetPlatformController()>
    4dbe:	4603      	mov	r3, r0
                                .GetSystemFrequency()
    4dc0:	681a      	ldr	r2, [r3, #0]
    4dc2:	320c      	adds	r2, #12
    4dc4:	6812      	ldr	r2, [r2, #0]
    4dc6:	4618      	mov	r0, r3
    4dc8:	4790      	blx	r2
    4dca:	4603      	mov	r3, r0
    4dcc:	617b      	str	r3, [r7, #20]
                                .to<uint32_t>();
    4dce:	f107 0314 	add.w	r3, r7, #20
    4dd2:	4618      	mov	r0, r3
    4dd4:	f001 f982 	bl	60dc <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4dd8:	4603      	mov	r3, r0
    4dda:	613b      	str	r3, [r7, #16]

    ticks_per_millisecond = system_frequency / 1000 /* ms/s */;
    4ddc:	693b      	ldr	r3, [r7, #16]
    4dde:	4a13      	ldr	r2, [pc, #76]	; (4e2c <sjsu::cortex::SystemTimer::Initialize() const+0x80>)
    4de0:	fba2 2303 	umull	r2, r3, r2, r3
    4de4:	099b      	lsrs	r3, r3, #6
    4de6:	4a12      	ldr	r2, [pc, #72]	; (4e30 <sjsu::cortex::SystemTimer::Initialize() const+0x84>)
    4de8:	6013      	str	r3, [r2, #0]
    nanoseconds_per_tick =
        (kFixedPointScaling * 1'000'000'000ns) / system_frequency;
    4dea:	f107 0320 	add.w	r3, r7, #32
    4dee:	4618      	mov	r0, r3
    4df0:	f001 f980 	bl	60f4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    4df4:	f107 0318 	add.w	r3, r7, #24
    4df8:	f107 0220 	add.w	r2, r7, #32
    4dfc:	490d      	ldr	r1, [pc, #52]	; (4e34 <sjsu::cortex::SystemTimer::Initialize() const+0x88>)
    4dfe:	4618      	mov	r0, r3
    4e00:	f7ff ff38 	bl	4c74 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    4e04:	4c0c      	ldr	r4, [pc, #48]	; (4e38 <sjsu::cortex::SystemTimer::Initialize() const+0x8c>)
    4e06:	463b      	mov	r3, r7
    4e08:	f107 0210 	add.w	r2, r7, #16
    4e0c:	f107 0118 	add.w	r1, r7, #24
    4e10:	4618      	mov	r0, r3
    4e12:	f7ff ff6a 	bl	4cea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4e16:	e9d7 2300 	ldrd	r2, r3, [r7]
    4e1a:	e9c4 2300 	strd	r2, r3, [r4]
  }
    4e1e:	bf00      	nop
    4e20:	372c      	adds	r7, #44	; 0x2c
    4e22:	46bd      	mov	sp, r7
    4e24:	bd90      	pop	{r4, r7, pc}
    4e26:	bf00      	nop
    4e28:	10001350 	.word	0x10001350
    4e2c:	10624dd3 	.word	0x10624dd3
    4e30:	10000c30 	.word	0x10000c30
    4e34:	000095f0 	.word	0x000095f0
    4e38:	10000c28 	.word	0x10000c28

00004e3c <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const>:

  void SetCallback(InterruptCallback isr) const override
    4e3c:	b580      	push	{r7, lr}
    4e3e:	b082      	sub	sp, #8
    4e40:	af00      	add	r7, sp, #0
    4e42:	6078      	str	r0, [r7, #4]
    4e44:	6039      	str	r1, [r7, #0]
  {
    callback = isr;
    4e46:	6839      	ldr	r1, [r7, #0]
    4e48:	4803      	ldr	r0, [pc, #12]	; (4e58 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const+0x1c>)
    4e4a:	f7fd fb2f 	bl	24ac <std::function<void ()>::operator=(std::function<void ()> const&)>
  }
    4e4e:	bf00      	nop
    4e50:	3708      	adds	r7, #8
    4e52:	46bd      	mov	sp, r7
    4e54:	bd80      	pop	{r7, pc}
    4e56:	bf00      	nop
    4e58:	10001338 	.word	0x10001338

00004e5c <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    4e5c:	b5b0      	push	{r4, r5, r7, lr}
    4e5e:	b08a      	sub	sp, #40	; 0x28
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    4e64:	2304      	movs	r3, #4
    4e66:	627b      	str	r3, [r7, #36]	; 0x24

    if (sys_tick->LOAD != 0)
    4e68:	4b1d      	ldr	r3, [pc, #116]	; (4ee0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4e6a:	681b      	ldr	r3, [r3, #0]
    4e6c:	685b      	ldr	r3, [r3, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	bf14      	ite	ne
    4e72:	2301      	movne	r3, #1
    4e74:	2300      	moveq	r3, #0
    4e76:	b2db      	uxtb	r3, r3
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d02c      	beq.n	4ed6 <sjsu::cortex::SystemTimer::StartTimer() const+0x7a>
    {
      // The interrupt handler must be registered before you starting the timer
      // by setting the Enable counter flag in the CTRL register.
      // Otherwise, the handler may not be set by the time the first tick
      // interrupt occurs.
      sjsu::InterruptController::GetPlatformController().Enable({
    4e7c:	f7fb faca 	bl	414 <sjsu::InterruptController::GetPlatformController()>
    4e80:	4604      	mov	r4, r0
          .interrupt_request_number = cortex::SysTick_IRQn,
          .interrupt_handler        = SystemTimerHandler,
          .priority                 = priority_,
      });
    4e82:	6823      	ldr	r3, [r4, #0]
    4e84:	3304      	adds	r3, #4
    4e86:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
    4e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e8c:	60bb      	str	r3, [r7, #8]
    4e8e:	f107 0308 	add.w	r3, r7, #8
    4e92:	3304      	adds	r3, #4
    4e94:	4913      	ldr	r1, [pc, #76]	; (4ee4 <sjsu::cortex::SystemTimer::StartTimer() const+0x88>)
    4e96:	4618      	mov	r0, r3
    4e98:	f7fd fade 	bl	2458 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
          .priority                 = priority_,
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	791b      	ldrb	r3, [r3, #4]
      sjsu::InterruptController::GetPlatformController().Enable({
    4ea0:	61fb      	str	r3, [r7, #28]
    4ea2:	f107 0308 	add.w	r3, r7, #8
    4ea6:	4619      	mov	r1, r3
    4ea8:	4620      	mov	r0, r4
    4eaa:	47a8      	blx	r5
      });
    4eac:	f107 0308 	add.w	r3, r7, #8
    4eb0:	4618      	mov	r0, r3
    4eb2:	f7fb ffa9 	bl	e08 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
      // Set all flags required to enable the counter
      uint32_t ctrl_mask = (1 << ControlBitMap::kTickInterupt) |
    4eb6:	2307      	movs	r3, #7
    4eb8:	623b      	str	r3, [r7, #32]
                           (1 << ControlBitMap::kEnableCounter) |
                           (1 << ControlBitMap::kClkSource);
      // Set the system tick counter to start immediately
      sys_tick->VAL = 0;
    4eba:	4b09      	ldr	r3, [pc, #36]	; (4ee0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	2200      	movs	r2, #0
    4ec0:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= ctrl_mask;
    4ec2:	4b07      	ldr	r3, [pc, #28]	; (4ee0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4ec4:	681b      	ldr	r3, [r3, #0]
    4ec6:	6819      	ldr	r1, [r3, #0]
    4ec8:	4b05      	ldr	r3, [pc, #20]	; (4ee0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	6a3a      	ldr	r2, [r7, #32]
    4ece:	430a      	orrs	r2, r1
    4ed0:	601a      	str	r2, [r3, #0]

      status = Status::kSuccess;
    4ed2:	2300      	movs	r3, #0
    4ed4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return status;
    4ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
    4ed8:	4618      	mov	r0, r3
    4eda:	3728      	adds	r7, #40	; 0x28
    4edc:	46bd      	mov	sp, r7
    4ede:	bdb0      	pop	{r4, r5, r7, pc}
    4ee0:	10000c20 	.word	0x10000c20
    4ee4:	00004c29 	.word	0x00004c29

00004ee8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    4ee8:	b580      	push	{r7, lr}
    4eea:	b082      	sub	sp, #8
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    4ef0:	6878      	ldr	r0, [r7, #4]
    4ef2:	f001 f90c 	bl	610e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4ef6:	4603      	mov	r3, r0
	}
    4ef8:	4618      	mov	r0, r3
    4efa:	3708      	adds	r7, #8
    4efc:	46bd      	mov	sp, r7
    4efe:	bd80      	pop	{r7, pc}

00004f00 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    4f00:	b580      	push	{r7, lr}
    4f02:	b084      	sub	sp, #16
    4f04:	af00      	add	r7, sp, #0
    4f06:	6078      	str	r0, [r7, #4]
    4f08:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    4f0a:	687b      	ldr	r3, [r7, #4]
    4f0c:	4618      	mov	r0, r3
    4f0e:	f7fc f8bd 	bl	108c <units::linear_scale<float>::operator()() const>
    4f12:	eeb0 7a40 	vmov.f32	s14, s0
    4f16:	683b      	ldr	r3, [r7, #0]
    4f18:	ee07 3a90 	vmov	s15, r3
    4f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4f20:	ee77 7a67 	vsub.f32	s15, s14, s15
    4f24:	f107 030c 	add.w	r3, r7, #12
    4f28:	eeb0 0a67 	vmov.f32	s0, s15
    4f2c:	4618      	mov	r0, r3
    4f2e:	f7fc f9e5 	bl	12fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4f32:	68fb      	ldr	r3, [r7, #12]
	}
    4f34:	4618      	mov	r0, r3
    4f36:	3710      	adds	r7, #16
    4f38:	46bd      	mov	sp, r7
    4f3a:	bd80      	pop	{r7, pc}

00004f3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b082      	sub	sp, #8
    4f40:	af00      	add	r7, sp, #0
    4f42:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    4f44:	6878      	ldr	r0, [r7, #4]
    4f46:	f000 f805 	bl	4f54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4f4a:	4603      	mov	r3, r0
	}
    4f4c:	4618      	mov	r0, r3
    4f4e:	3708      	adds	r7, #8
    4f50:	46bd      	mov	sp, r7
    4f52:	bd80      	pop	{r7, pc}

00004f54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    4f54:	b580      	push	{r7, lr}
    4f56:	b082      	sub	sp, #8
    4f58:	af00      	add	r7, sp, #0
    4f5a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	4618      	mov	r0, r3
    4f60:	f7fc f894 	bl	108c <units::linear_scale<float>::operator()() const>
    4f64:	eef0 7a40 	vmov.f32	s15, s0
    4f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4f6c:	ee17 3a90 	vmov	r3, s15
		}
    4f70:	4618      	mov	r0, r3
    4f72:	3708      	adds	r7, #8
    4f74:	46bd      	mov	sp, r7
    4f76:	bd80      	pop	{r7, pc}

00004f78 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    4f78:	b590      	push	{r4, r7, lr}
    4f7a:	b089      	sub	sp, #36	; 0x24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
    4f80:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    4f82:	f04f 0001 	mov.w	r0, #1
    4f86:	f04f 0100 	mov.w	r1, #0
    4f8a:	f7ff fdbb 	bl	4b04 <units::literals::operator"" _Hz(unsigned long long)>
    4f8e:	4603      	mov	r3, r0
    4f90:	60fb      	str	r3, [r7, #12]
    4f92:	f107 020c 	add.w	r2, r7, #12
    4f96:	463b      	mov	r3, r7
    4f98:	4611      	mov	r1, r2
    4f9a:	4618      	mov	r0, r3
    4f9c:	f7ff fe08 	bl	4bb0 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4fa0:	4603      	mov	r3, r0
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d002      	beq.n	4fac <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    4fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4faa:	e040      	b.n	502e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb6>
    }

    units::frequency::hertz_t system_frequency =
        sjsu::SystemController::GetPlatformController().GetSystemFrequency();
    4fac:	f7fb fc00 	bl	7b0 <sjsu::SystemController::GetPlatformController()>
    4fb0:	4603      	mov	r3, r0
    4fb2:	681a      	ldr	r2, [r3, #0]
    4fb4:	320c      	adds	r2, #12
    4fb6:	6812      	ldr	r2, [r2, #0]
    4fb8:	4618      	mov	r0, r3
    4fba:	4790      	blx	r2
    4fbc:	4603      	mov	r3, r0
    4fbe:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    4fc0:	463a      	mov	r2, r7
    4fc2:	f107 0308 	add.w	r3, r7, #8
    4fc6:	4611      	mov	r1, r2
    4fc8:	4618      	mov	r0, r3
    4fca:	f7fc f96b 	bl	12a4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4fce:	4603      	mov	r3, r0
    4fd0:	617b      	str	r3, [r7, #20]
    4fd2:	f107 0314 	add.w	r3, r7, #20
    4fd6:	2101      	movs	r1, #1
    4fd8:	4618      	mov	r0, r3
    4fda:	f7ff ff91 	bl	4f00 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4fde:	4603      	mov	r3, r0
    4fe0:	613b      	str	r3, [r7, #16]
    4fe2:	f107 0310 	add.w	r3, r7, #16
    4fe6:	4618      	mov	r0, r3
    4fe8:	f7ff ff7e 	bl	4ee8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4fec:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4fee:	f107 0308 	add.w	r3, r7, #8
    4ff2:	4618      	mov	r0, r3
    4ff4:	f7ff ffa2 	bl	4f3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4ff8:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    4ffa:	463b      	mov	r3, r7
    4ffc:	4618      	mov	r0, r3
    4ffe:	f7ff ff9d 	bl	4f3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5002:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    5004:	fbb4 f2f3 	udiv	r2, r4, r3
    5008:	fb03 f302 	mul.w	r3, r3, r2
    500c:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    500e:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    5010:	69fb      	ldr	r3, [r7, #28]
    5012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    5016:	d305      	bcc.n	5024 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xac>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    5018:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    501c:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    501e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5022:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    5024:	4b04      	ldr	r3, [pc, #16]	; (5038 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	69fa      	ldr	r2, [r7, #28]
    502a:	605a      	str	r2, [r3, #4]
    return remainder;
    502c:	69bb      	ldr	r3, [r7, #24]
  }
    502e:	4618      	mov	r0, r3
    5030:	3724      	adds	r7, #36	; 0x24
    5032:	46bd      	mov	sp, r7
    5034:	bd90      	pop	{r4, r7, pc}
    5036:	bf00      	nop
    5038:	10000c20 	.word	0x10000c20

0000503c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    503c:	b480      	push	{r7}
    503e:	b083      	sub	sp, #12
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
	{ return __r; }
    5044:	687b      	ldr	r3, [r7, #4]
    5046:	e9d3 2300 	ldrd	r2, r3, [r3]
    504a:	4610      	mov	r0, r2
    504c:	4619      	mov	r1, r3
    504e:	370c      	adds	r7, #12
    5050:	46bd      	mov	sp, r7
    5052:	f85d 7b04 	ldr.w	r7, [sp], #4
    5056:	4770      	bx	lr

00005058 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    5058:	b480      	push	{r7}
    505a:	b083      	sub	sp, #12
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
    5060:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    5062:	683b      	ldr	r3, [r7, #0]
    5064:	e9d3 2300 	ldrd	r2, r3, [r3]
    5068:	6879      	ldr	r1, [r7, #4]
    506a:	e9c1 2300 	strd	r2, r3, [r1]
    506e:	687b      	ldr	r3, [r7, #4]
    5070:	4618      	mov	r0, r3
    5072:	370c      	adds	r7, #12
    5074:	46bd      	mov	sp, r7
    5076:	f85d 7b04 	ldr.w	r7, [sp], #4
    507a:	4770      	bx	lr

0000507c <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    507c:	b580      	push	{r7, lr}
    507e:	b086      	sub	sp, #24
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5084:	6878      	ldr	r0, [r7, #4]
    5086:	f000 f807 	bl	5098 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    508a:	eef0 7a40 	vmov.f32	s15, s0
	}
    508e:	eeb0 0a67 	vmov.f32	s0, s15
    5092:	3718      	adds	r7, #24
    5094:	46bd      	mov	sp, r7
    5096:	bd80      	pop	{r7, pc}

00005098 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    5098:	b480      	push	{r7}
    509a:	b085      	sub	sp, #20
    509c:	af00      	add	r7, sp, #0
    509e:	60f8      	str	r0, [r7, #12]
    50a0:	7239      	strb	r1, [r7, #8]
    50a2:	713a      	strb	r2, [r7, #4]
    50a4:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    50a6:	68fb      	ldr	r3, [r7, #12]
    50a8:	edd3 7a00 	vldr	s15, [r3]
    50ac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 50c4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    50b0:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    50b4:	eeb0 0a67 	vmov.f32	s0, s15
    50b8:	3714      	adds	r7, #20
    50ba:	46bd      	mov	sp, r7
    50bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c0:	4770      	bx	lr
    50c2:	bf00      	nop
    50c4:	49742400 	.word	0x49742400

000050c8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetSystemClockFrequency(
    50c8:	b580      	push	{r7, lr}
    50ca:	b084      	sub	sp, #16
    50cc:	af00      	add	r7, sp, #0
    50ce:	6078      	str	r0, [r7, #4]
    50d0:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    50d2:	2100      	movs	r1, #0
    50d4:	6878      	ldr	r0, [r7, #4]
    50d6:	f000 f8e3 	bl	52a0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    50da:	f04f 000c 	mov.w	r0, #12
    50de:	f04f 0100 	mov.w	r1, #0
    50e2:	f7fb fafd 	bl	6e0 <units::literals::operator"" _MHz(unsigned long long)>
    50e6:	4603      	mov	r3, r0
    50e8:	60bb      	str	r3, [r7, #8]
    50ea:	f107 0208 	add.w	r2, r7, #8
    50ee:	463b      	mov	r3, r7
    50f0:	4611      	mov	r1, r2
    50f2:	4618      	mov	r0, r3
    50f4:	f000 f982 	bl	53fc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    50f8:	4603      	mov	r3, r0
    50fa:	2b00      	cmp	r3, #0
    50fc:	d00f      	beq.n	511e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    50fe:	4b16      	ldr	r3, [pc, #88]	; (5158 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    5100:	683a      	ldr	r2, [r7, #0]
    5102:	6819      	ldr	r1, [r3, #0]
    5104:	6878      	ldr	r0, [r7, #4]
    5106:	f000 fa95 	bl	5634 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    510a:	2101      	movs	r1, #1
    510c:	6878      	ldr	r0, [r7, #4]
    510e:	f000 f8eb 	bl	52e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    5112:	463b      	mov	r3, r7
    5114:	4619      	mov	r1, r3
    5116:	4811      	ldr	r0, [pc, #68]	; (515c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    5118:	f001 f814 	bl	6144 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    511c:	e007      	b.n	512e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    511e:	2100      	movs	r1, #0
    5120:	6878      	ldr	r0, [r7, #4]
    5122:	f000 f8e1 	bl	52e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    5126:	490e      	ldr	r1, [pc, #56]	; (5160 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    5128:	480c      	ldr	r0, [pc, #48]	; (515c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    512a:	f001 f80b 	bl	6144 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    512e:	2101      	movs	r1, #1
    5130:	6878      	ldr	r0, [r7, #4]
    5132:	f000 fae3 	bl	56fc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    5136:	23ff      	movs	r3, #255	; 0xff
    5138:	733b      	strb	r3, [r7, #12]
    513a:	f107 030c 	add.w	r3, r7, #12
    513e:	2201      	movs	r2, #1
    5140:	4619      	mov	r1, r3
    5142:	6878      	ldr	r0, [r7, #4]
    5144:	f000 f80e 	bl	5164 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    5148:	2100      	movs	r1, #0
    514a:	6878      	ldr	r0, [r7, #4]
    514c:	f000 fb14 	bl	5778 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    5150:	bf00      	nop
    5152:	3710      	adds	r7, #16
    5154:	46bd      	mov	sp, r7
    5156:	bd80      	pop	{r7, pc}
    5158:	000095f4 	.word	0x000095f4
    515c:	10000c34 	.word	0x10000c34
    5160:	000095f8 	.word	0x000095f8

00005164 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    5164:	b580      	push	{r7, lr}
    5166:	b084      	sub	sp, #16
    5168:	af00      	add	r7, sp, #0
    516a:	60f8      	str	r0, [r7, #12]
    516c:	60b9      	str	r1, [r7, #8]
    516e:	4613      	mov	r3, r2
    5170:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    5172:	79fb      	ldrb	r3, [r7, #7]
    5174:	2b04      	cmp	r3, #4
    5176:	d90e      	bls.n	5196 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x32>
    5178:	23b2      	movs	r3, #178	; 0xb2
    517a:	4a0b      	ldr	r2, [pc, #44]	; (51a8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    517c:	490b      	ldr	r1, [pc, #44]	; (51ac <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    517e:	480c      	ldr	r0, [pc, #48]	; (51b0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    5180:	f7ff fbb8 	bl	48f4 <printf>
    5184:	480b      	ldr	r0, [pc, #44]	; (51b4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    5186:	f7fe fa57 	bl	3638 <puts>
    518a:	2100      	movs	r1, #0
    518c:	2001      	movs	r0, #1
    518e:	f7fd ffe3 	bl	3158 <sjsu::debug::PrintBacktrace(bool, void*)>
    5192:	f7fe f82d 	bl	31f0 <sjsu::Halt()>
    system_controller->PCLKSEL = peripheral_divider;
    5196:	4b08      	ldr	r3, [pc, #32]	; (51b8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	79fa      	ldrb	r2, [r7, #7]
    519c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    51a0:	bf00      	nop
    51a2:	3710      	adds	r7, #16
    51a4:	46bd      	mov	sp, r7
    51a6:	bd80      	pop	{r7, pc}
    51a8:	00008f98 	.word	0x00008f98
    51ac:	00009614 	.word	0x00009614
    51b0:	0000901c 	.word	0x0000901c
    51b4:	000090bc 	.word	0x000090bc
    51b8:	10001194 	.word	0x10001194

000051bc <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    51bc:	b480      	push	{r7}
    51be:	b083      	sub	sp, #12
    51c0:	af00      	add	r7, sp, #0
    51c2:	6078      	str	r0, [r7, #4]
    51c4:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    51c6:	4b05      	ldr	r3, [pc, #20]	; (51dc <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    51c8:	681b      	ldr	r3, [r3, #0]
    51ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    51ce:	4618      	mov	r0, r3
    51d0:	370c      	adds	r7, #12
    51d2:	46bd      	mov	sp, r7
    51d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d8:	4770      	bx	lr
    51da:	bf00      	nop
    51dc:	10001194 	.word	0x10001194

000051e0 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    51e0:	b480      	push	{r7}
    51e2:	b083      	sub	sp, #12
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    51e8:	4b03      	ldr	r3, [pc, #12]	; (51f8 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    51ea:	681b      	ldr	r3, [r3, #0]
  }
    51ec:	4618      	mov	r0, r3
    51ee:	370c      	adds	r7, #12
    51f0:	46bd      	mov	sp, r7
    51f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f6:	4770      	bx	lr
    51f8:	10000c34 	.word	0x10000c34

000051fc <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    51fc:	b480      	push	{r7}
    51fe:	b085      	sub	sp, #20
    5200:	af00      	add	r7, sp, #0
    5202:	6078      	str	r0, [r7, #4]
    5204:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    5206:	4b0b      	ldr	r3, [pc, #44]	; (5234 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    5208:	681b      	ldr	r3, [r3, #0]
    520a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    520e:	683a      	ldr	r2, [r7, #0]
    5210:	7812      	ldrb	r2, [r2, #0]
    5212:	4611      	mov	r1, r2
    5214:	2201      	movs	r2, #1
    5216:	408a      	lsls	r2, r1
    5218:	4013      	ands	r3, r2
    521a:	2b00      	cmp	r3, #0
    521c:	bf14      	ite	ne
    521e:	2301      	movne	r3, #1
    5220:	2300      	moveq	r3, #0
    5222:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    5224:	7bfb      	ldrb	r3, [r7, #15]
  }
    5226:	4618      	mov	r0, r3
    5228:	3714      	adds	r7, #20
    522a:	46bd      	mov	sp, r7
    522c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5230:	4770      	bx	lr
    5232:	bf00      	nop
    5234:	10001194 	.word	0x10001194

00005238 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    5238:	b590      	push	{r4, r7, lr}
    523a:	b083      	sub	sp, #12
    523c:	af00      	add	r7, sp, #0
    523e:	6078      	str	r0, [r7, #4]
    5240:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    5242:	4b09      	ldr	r3, [pc, #36]	; (5268 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5244:	681b      	ldr	r3, [r3, #0]
    5246:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    524a:	683b      	ldr	r3, [r7, #0]
    524c:	781b      	ldrb	r3, [r3, #0]
    524e:	4619      	mov	r1, r3
    system_controller->PCONP =
    5250:	4b05      	ldr	r3, [pc, #20]	; (5268 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5252:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    5254:	4610      	mov	r0, r2
    5256:	f7fd f8d6 	bl	2406 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    525a:	4603      	mov	r3, r0
    system_controller->PCONP =
    525c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    5260:	bf00      	nop
    5262:	370c      	adds	r7, #12
    5264:	46bd      	mov	sp, r7
    5266:	bd90      	pop	{r4, r7, pc}
    5268:	10001194 	.word	0x10001194

0000526c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    526c:	b590      	push	{r4, r7, lr}
    526e:	b083      	sub	sp, #12
    5270:	af00      	add	r7, sp, #0
    5272:	6078      	str	r0, [r7, #4]
    5274:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    5276:	4b09      	ldr	r3, [pc, #36]	; (529c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5278:	681b      	ldr	r3, [r3, #0]
    527a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    527e:	683b      	ldr	r3, [r7, #0]
    5280:	781b      	ldrb	r3, [r3, #0]
    5282:	4619      	mov	r1, r3
    system_controller->PCONP =
    5284:	4b05      	ldr	r3, [pc, #20]	; (529c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5286:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    5288:	4610      	mov	r0, r2
    528a:	f7fd f8a9 	bl	23e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    528e:	4603      	mov	r3, r0
    system_controller->PCONP =
    5290:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    5294:	bf00      	nop
    5296:	370c      	adds	r7, #12
    5298:	46bd      	mov	sp, r7
    529a:	bd90      	pop	{r4, r7, pc}
    529c:	10001194 	.word	0x10001194

000052a0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    52a0:	b590      	push	{r4, r7, lr}
    52a2:	b083      	sub	sp, #12
    52a4:	af00      	add	r7, sp, #0
    52a6:	6078      	str	r0, [r7, #4]
    52a8:	460b      	mov	r3, r1
    52aa:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    52ac:	4b0c      	ldr	r3, [pc, #48]	; (52e0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    52b4:	8879      	ldrh	r1, [r7, #2]
    52b6:	4b0a      	ldr	r3, [pc, #40]	; (52e0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    52b8:	681c      	ldr	r4, [r3, #0]
    52ba:	4b0a      	ldr	r3, [pc, #40]	; (52e4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    52bc:	781a      	ldrb	r2, [r3, #0]
    52be:	785b      	ldrb	r3, [r3, #1]
    52c0:	021b      	lsls	r3, r3, #8
    52c2:	431a      	orrs	r2, r3
    52c4:	2300      	movs	r3, #0
    52c6:	f362 030f 	bfi	r3, r2, #0, #16
    52ca:	461a      	mov	r2, r3
    52cc:	f000 ff4d 	bl	616a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    52d0:	4603      	mov	r3, r0
    52d2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    52d6:	bf00      	nop
    52d8:	370c      	adds	r7, #12
    52da:	46bd      	mov	sp, r7
    52dc:	bd90      	pop	{r4, r7, pc}
    52de:	bf00      	nop
    52e0:	10001194 	.word	0x10001194
    52e4:	000095fc 	.word	0x000095fc

000052e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    52e8:	b590      	push	{r4, r7, lr}
    52ea:	b083      	sub	sp, #12
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
    52f0:	460b      	mov	r3, r1
    52f2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    52f4:	4b0c      	ldr	r3, [pc, #48]	; (5328 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    52f6:	681b      	ldr	r3, [r3, #0]
    52f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    52fc:	8879      	ldrh	r1, [r7, #2]
    52fe:	4b0a      	ldr	r3, [pc, #40]	; (5328 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    5300:	681c      	ldr	r4, [r3, #0]
    5302:	4b0a      	ldr	r3, [pc, #40]	; (532c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    5304:	781a      	ldrb	r2, [r3, #0]
    5306:	785b      	ldrb	r3, [r3, #1]
    5308:	021b      	lsls	r3, r3, #8
    530a:	431a      	orrs	r2, r3
    530c:	2300      	movs	r3, #0
    530e:	f362 030f 	bfi	r3, r2, #0, #16
    5312:	461a      	mov	r2, r3
    5314:	f000 ff29 	bl	616a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5318:	4603      	mov	r3, r0
    531a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    531e:	bf00      	nop
    5320:	370c      	adds	r7, #12
    5322:	46bd      	mov	sp, r7
    5324:	bd90      	pop	{r4, r7, pc}
    5326:	bf00      	nop
    5328:	10001194 	.word	0x10001194
    532c:	00009608 	.word	0x00009608

00005330 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    5330:	b590      	push	{r4, r7, lr}
    5332:	b083      	sub	sp, #12
    5334:	af00      	add	r7, sp, #0
    5336:	6078      	str	r0, [r7, #4]
    5338:	460b      	mov	r3, r1
    533a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    533c:	4b0c      	ldr	r3, [pc, #48]	; (5370 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    5344:	8879      	ldrh	r1, [r7, #2]
    5346:	4b0a      	ldr	r3, [pc, #40]	; (5370 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    5348:	681c      	ldr	r4, [r3, #0]
    534a:	4b0a      	ldr	r3, [pc, #40]	; (5374 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    534c:	781a      	ldrb	r2, [r3, #0]
    534e:	785b      	ldrb	r3, [r3, #1]
    5350:	021b      	lsls	r3, r3, #8
    5352:	431a      	orrs	r2, r3
    5354:	2300      	movs	r3, #0
    5356:	f362 030f 	bfi	r3, r2, #0, #16
    535a:	461a      	mov	r2, r3
    535c:	f000 ff05 	bl	616a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5360:	4603      	mov	r3, r0
    5362:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    5366:	bf00      	nop
    5368:	370c      	adds	r7, #12
    536a:	46bd      	mov	sp, r7
    536c:	bd90      	pop	{r4, r7, pc}
    536e:	bf00      	nop
    5370:	10001194 	.word	0x10001194
    5374:	0000960c 	.word	0x0000960c

00005378 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    5378:	b590      	push	{r4, r7, lr}
    537a:	b083      	sub	sp, #12
    537c:	af00      	add	r7, sp, #0
    537e:	6078      	str	r0, [r7, #4]
    5380:	460b      	mov	r3, r1
    5382:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    5384:	4b0c      	ldr	r3, [pc, #48]	; (53b8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    538c:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    538e:	4b0a      	ldr	r3, [pc, #40]	; (53b8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    5390:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    5392:	4b0a      	ldr	r3, [pc, #40]	; (53bc <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    5394:	781a      	ldrb	r2, [r3, #0]
    5396:	785b      	ldrb	r3, [r3, #1]
    5398:	021b      	lsls	r3, r3, #8
    539a:	431a      	orrs	r2, r3
    539c:	2300      	movs	r3, #0
    539e:	f362 030f 	bfi	r3, r2, #0, #16
    53a2:	461a      	mov	r2, r3
    53a4:	f000 fee1 	bl	616a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    53a8:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    53aa:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    53ae:	bf00      	nop
    53b0:	370c      	adds	r7, #12
    53b2:	46bd      	mov	sp, r7
    53b4:	bd90      	pop	{r4, r7, pc}
    53b6:	bf00      	nop
    53b8:	10001194 	.word	0x10001194
    53bc:	00009610 	.word	0x00009610

000053c0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    53c0:	b580      	push	{r7, lr}
    53c2:	ed2d 8b02 	vpush	{d8}
    53c6:	b082      	sub	sp, #8
    53c8:	af00      	add	r7, sp, #0
    53ca:	6078      	str	r0, [r7, #4]
    53cc:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	ed93 8a00 	vldr	s16, [r3]
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	4618      	mov	r0, r3
    53d8:	f7ff fbaa 	bl	4b30 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    53dc:	eef0 7a40 	vmov.f32	s15, s0
    53e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
    53e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53e8:	bf4c      	ite	mi
    53ea:	2301      	movmi	r3, #1
    53ec:	2300      	movpl	r3, #0
    53ee:	b2db      	uxtb	r3, r3
		}
    53f0:	4618      	mov	r0, r3
    53f2:	3708      	adds	r7, #8
    53f4:	46bd      	mov	sp, r7
    53f6:	ecbd 8b02 	vpop	{d8}
    53fa:	bd80      	pop	{r7, pc}

000053fc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    53fc:	b580      	push	{r7, lr}
    53fe:	ed2d 8b02 	vpush	{d8}
    5402:	b082      	sub	sp, #8
    5404:	af00      	add	r7, sp, #0
    5406:	6078      	str	r0, [r7, #4]
    5408:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    540a:	687b      	ldr	r3, [r7, #4]
    540c:	ed93 8a00 	vldr	s16, [r3]
    5410:	683b      	ldr	r3, [r7, #0]
    5412:	4618      	mov	r0, r3
    5414:	f7ff fb8c 	bl	4b30 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5418:	eef0 7a40 	vmov.f32	s15, s0
    541c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5424:	bfcc      	ite	gt
    5426:	2301      	movgt	r3, #1
    5428:	2300      	movle	r3, #0
    542a:	b2db      	uxtb	r3, r3
		}
    542c:	4618      	mov	r0, r3
    542e:	3708      	adds	r7, #8
    5430:	46bd      	mov	sp, r7
    5432:	ecbd 8b02 	vpop	{d8}
    5436:	bd80      	pop	{r7, pc}

00005438 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    5438:	b580      	push	{r7, lr}
    543a:	b082      	sub	sp, #8
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    5440:	6878      	ldr	r0, [r7, #4]
    5442:	f000 f805 	bl	5450 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5446:	4603      	mov	r3, r0
		}
    5448:	4618      	mov	r0, r3
    544a:	3708      	adds	r7, #8
    544c:	46bd      	mov	sp, r7
    544e:	bd80      	pop	{r7, pc}

00005450 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    5450:	b580      	push	{r7, lr}
    5452:	b082      	sub	sp, #8
    5454:	af00      	add	r7, sp, #0
    5456:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	4618      	mov	r0, r3
    545c:	f7fb fe16 	bl	108c <units::linear_scale<float>::operator()() const>
    5460:	eef0 7a40 	vmov.f32	s15, s0
    5464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5468:	ee17 3a90 	vmov	r3, s15
		}
    546c:	4618      	mov	r0, r3
    546e:	3708      	adds	r7, #8
    5470:	46bd      	mov	sp, r7
    5472:	bd80      	pop	{r7, pc}

00005474 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    5474:	b580      	push	{r7, lr}
    5476:	b082      	sub	sp, #8
    5478:	af00      	add	r7, sp, #0
    547a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	4618      	mov	r0, r3
    5480:	f7fb fe04 	bl	108c <units::linear_scale<float>::operator()() const>
    5484:	eef0 7a40 	vmov.f32	s15, s0
    5488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    548c:	ee17 3a90 	vmov	r3, s15
    5490:	b29b      	uxth	r3, r3
		}
    5492:	4618      	mov	r0, r3
    5494:	3708      	adds	r7, #8
    5496:	46bd      	mov	sp, r7
    5498:	bd80      	pop	{r7, pc}
    549a:	Address 0x000000000000549a is out of bounds.


0000549c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    549c:	b590      	push	{r4, r7, lr}
    549e:	b08d      	sub	sp, #52	; 0x34
    54a0:	af00      	add	r7, sp, #0
    54a2:	60f8      	str	r0, [r7, #12]
    54a4:	60b9      	str	r1, [r7, #8]
    54a6:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    54a8:	f44f 70c0 	mov.w	r0, #384	; 0x180
    54ac:	f04f 0100 	mov.w	r1, #0
    54b0:	f7fb f916 	bl	6e0 <units::literals::operator"" _MHz(unsigned long long)>
    54b4:	4603      	mov	r3, r0
    54b6:	613b      	str	r3, [r7, #16]
    54b8:	f107 0210 	add.w	r2, r7, #16
    54bc:	1d3b      	adds	r3, r7, #4
    54be:	4611      	mov	r1, r2
    54c0:	4618      	mov	r0, r3
    54c2:	f7ff ff7d 	bl	53c0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    54c6:	4603      	mov	r3, r0
    54c8:	f083 0301 	eor.w	r3, r3, #1
    54cc:	b2db      	uxtb	r3, r3
    54ce:	2b00      	cmp	r3, #0
    54d0:	d114      	bne.n	54fc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    54d2:	f04f 000c 	mov.w	r0, #12
    54d6:	f04f 0100 	mov.w	r1, #0
    54da:	f7fb f901 	bl	6e0 <units::literals::operator"" _MHz(unsigned long long)>
    54de:	4603      	mov	r3, r0
    54e0:	617b      	str	r3, [r7, #20]
    54e2:	f107 0214 	add.w	r2, r7, #20
    54e6:	1d3b      	adds	r3, r7, #4
    54e8:	4611      	mov	r1, r2
    54ea:	4618      	mov	r0, r3
    54ec:	f7ff ff86 	bl	53fc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    54f0:	4603      	mov	r3, r0
    54f2:	f083 0301 	eor.w	r3, r3, #1
    54f6:	b2db      	uxtb	r3, r3
    54f8:	2b00      	cmp	r3, #0
    54fa:	d001      	beq.n	5500 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    54fc:	2301      	movs	r3, #1
    54fe:	e000      	b.n	5502 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    5500:	2300      	movs	r3, #0
    5502:	2b00      	cmp	r3, #0
    5504:	d00e      	beq.n	5524 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x88>
    5506:	23f4      	movs	r3, #244	; 0xf4
    5508:	4a44      	ldr	r2, [pc, #272]	; (561c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    550a:	4945      	ldr	r1, [pc, #276]	; (5620 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    550c:	4845      	ldr	r0, [pc, #276]	; (5624 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    550e:	f7ff f9f1 	bl	48f4 <printf>
    5512:	4845      	ldr	r0, [pc, #276]	; (5628 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    5514:	f7fe f890 	bl	3638 <puts>
    5518:	2100      	movs	r1, #0
    551a:	2001      	movs	r0, #1
    551c:	f7fd fe1c 	bl	3158 <sjsu::debug::PrintBacktrace(bool, void*)>
    5520:	f7fd fe66 	bl	31f0 <sjsu::Halt()>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    5524:	2301      	movs	r3, #1
    5526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    552a:	1d3b      	adds	r3, r7, #4
    552c:	4618      	mov	r0, r3
    552e:	f7ff ff83 	bl	5438 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    5532:	4604      	mov	r4, r0
    5534:	f107 0308 	add.w	r3, r7, #8
    5538:	4618      	mov	r0, r3
    553a:	f7ff ff7d 	bl	5438 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    553e:	4603      	mov	r3, r0
    5540:	fbb4 f2f3 	udiv	r2, r4, r3
    5544:	fb03 f302 	mul.w	r3, r3, r2
    5548:	1ae3      	subs	r3, r4, r3
    554a:	2b00      	cmp	r3, #0
    554c:	bf14      	ite	ne
    554e:	2301      	movne	r3, #1
    5550:	2300      	moveq	r3, #0
    5552:	b2db      	uxtb	r3, r3
    5554:	2b00      	cmp	r3, #0
    5556:	d017      	beq.n	5588 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xec>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    5558:	f107 0208 	add.w	r2, r7, #8
    555c:	1d3b      	adds	r3, r7, #4
    555e:	4611      	mov	r1, r2
    5560:	4618      	mov	r0, r3
    5562:	f000 fe14 	bl	618e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5566:	4603      	mov	r3, r0
    5568:	61fb      	str	r3, [r7, #28]
    556a:	f107 031c 	add.w	r3, r7, #28
    556e:	2101      	movs	r1, #1
    5570:	4618      	mov	r0, r3
    5572:	f000 fe38 	bl	61e6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    5576:	4603      	mov	r3, r0
    5578:	61bb      	str	r3, [r7, #24]
    557a:	f107 0318 	add.w	r3, r7, #24
    557e:	4618      	mov	r0, r3
    5580:	f000 fdc5 	bl	610e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5584:	62b8      	str	r0, [r7, #40]	; 0x28
    5586:	e00e      	b.n	55a6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10a>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    5588:	f107 0208 	add.w	r2, r7, #8
    558c:	1d3b      	adds	r3, r7, #4
    558e:	4611      	mov	r1, r2
    5590:	4618      	mov	r0, r3
    5592:	f000 fdfc 	bl	618e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5596:	4603      	mov	r3, r0
    5598:	623b      	str	r3, [r7, #32]
    559a:	f107 0320 	add.w	r3, r7, #32
    559e:	4618      	mov	r0, r3
    55a0:	f000 fdb5 	bl	610e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    55a4:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    55a6:	2301      	movs	r3, #1
    55a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    55aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    55ae:	2b00      	cmp	r3, #0
    55b0:	d02f      	beq.n	5612 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x176>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    55b2:	f107 0308 	add.w	r3, r7, #8
    55b6:	4618      	mov	r0, r3
    55b8:	f7ff ff5c 	bl	5474 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    55bc:	4603      	mov	r3, r0
    55be:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    55c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55c2:	b29b      	uxth	r3, r3
    55c4:	fb12 f303 	smulbb	r3, r2, r3
    55c8:	b29b      	uxth	r3, r3
    55ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    55cc:	fb12 f303 	smulbb	r3, r2, r3
    55d0:	b29b      	uxth	r3, r3
    55d2:	005b      	lsls	r3, r3, #1
    55d4:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    55d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    55d8:	2b9b      	cmp	r3, #155	; 0x9b
    55da:	d903      	bls.n	55e4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x148>
      {
        calculating = false;
    55dc:	2300      	movs	r3, #0
    55de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    55e2:	e7e2      	b.n	55aa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    55e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    55e6:	005b      	lsls	r3, r3, #1
    55e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    55ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    55ec:	2b07      	cmp	r3, #7
    55ee:	d9dc      	bls.n	55aa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
    55f0:	f240 1311 	movw	r3, #273	; 0x111
    55f4:	4a09      	ldr	r2, [pc, #36]	; (561c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    55f6:	490d      	ldr	r1, [pc, #52]	; (562c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    55f8:	480d      	ldr	r0, [pc, #52]	; (5630 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x194>)
    55fa:	f7ff f97b 	bl	48f4 <printf>
    55fe:	480a      	ldr	r0, [pc, #40]	; (5628 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    5600:	f7fe f81a 	bl	3638 <puts>
    5604:	2100      	movs	r1, #0
    5606:	2001      	movs	r0, #1
    5608:	f7fd fda6 	bl	3158 <sjsu::debug::PrintBacktrace(bool, void*)>
    560c:	f7fd fdf0 	bl	31f0 <sjsu::Halt()>
    while (calculating)
    5610:	e7cb      	b.n	55aa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    5612:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    5614:	4618      	mov	r0, r3
    5616:	3734      	adds	r7, #52	; 0x34
    5618:	46bd      	mov	sp, r7
    561a:	bd90      	pop	{r4, r7, pc}
    561c:	000090d4 	.word	0x000090d4
    5620:	0000962c 	.word	0x0000962c
    5624:	00009150 	.word	0x00009150
    5628:	000090bc 	.word	0x000090bc
    562c:	00009644 	.word	0x00009644
    5630:	00009240 	.word	0x00009240

00005634 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    5634:	b580      	push	{r7, lr}
    5636:	b086      	sub	sp, #24
    5638:	af00      	add	r7, sp, #0
    563a:	60f8      	str	r0, [r7, #12]
    563c:	60b9      	str	r1, [r7, #8]
    563e:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    5640:	2301      	movs	r3, #1
    5642:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    5644:	687a      	ldr	r2, [r7, #4]
    5646:	68b9      	ldr	r1, [r7, #8]
    5648:	68f8      	ldr	r0, [r7, #12]
    564a:	f7ff ff27 	bl	549c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    564e:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    5650:	2100      	movs	r1, #0
    5652:	68f8      	ldr	r0, [r7, #12]
    5654:	f7ff fe24 	bl	52a0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    5658:	2100      	movs	r1, #0
    565a:	68f8      	ldr	r0, [r7, #12]
    565c:	f7ff fe44 	bl	52e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    5660:	2100      	movs	r1, #0
    5662:	68f8      	ldr	r0, [r7, #12]
    5664:	f7ff fe64 	bl	5330 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    5668:	2100      	movs	r1, #0
    566a:	68f8      	ldr	r0, [r7, #12]
    566c:	f7ff fe84 	bl	5378 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5670:	4b21      	ldr	r3, [pc, #132]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5678:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    567c:	693b      	ldr	r3, [r7, #16]
    567e:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    5680:	4b1d      	ldr	r3, [pc, #116]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5682:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5684:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    5686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    568a:	4b1b      	ldr	r3, [pc, #108]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5692:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    5696:	8afb      	ldrh	r3, [r7, #22]
    5698:	015b      	lsls	r3, r3, #5
    569a:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    569c:	4b16      	ldr	r3, [pc, #88]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    569e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    56a0:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    56a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    56a6:	4b14      	ldr	r3, [pc, #80]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    56ae:	4b12      	ldr	r3, [pc, #72]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    56b0:	681b      	ldr	r3, [r3, #0]
    56b2:	f042 0201 	orr.w	r2, r2, #1
    56b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    56ba:	4b0f      	ldr	r3, [pc, #60]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	22aa      	movs	r2, #170	; 0xaa
    56c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    56c4:	4b0c      	ldr	r3, [pc, #48]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	2255      	movs	r2, #85	; 0x55
    56ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    56ce:	4b0a      	ldr	r3, [pc, #40]	; (56f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    56d6:	210a      	movs	r1, #10
    56d8:	4618      	mov	r0, r3
    56da:	f7fc fea6 	bl	242a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    56de:	4603      	mov	r3, r0
    56e0:	f083 0301 	eor.w	r3, r3, #1
    56e4:	b2db      	uxtb	r3, r3
    56e6:	2b00      	cmp	r3, #0
    56e8:	d001      	beq.n	56ee <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    56ea:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    56ec:	e7ef      	b.n	56ce <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    56ee:	bf00      	nop
    56f0:	3718      	adds	r7, #24
    56f2:	46bd      	mov	sp, r7
    56f4:	bd80      	pop	{r7, pc}
    56f6:	bf00      	nop
    56f8:	10001194 	.word	0x10001194

000056fc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    56fc:	b590      	push	{r4, r7, lr}
    56fe:	b083      	sub	sp, #12
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
    5704:	460b      	mov	r3, r1
    5706:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    5708:	78fb      	ldrb	r3, [r7, #3]
    570a:	2b1f      	cmp	r3, #31
    570c:	d90f      	bls.n	572e <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x32>
    570e:	f44f 73a9 	mov.w	r3, #338	; 0x152
    5712:	4a13      	ldr	r2, [pc, #76]	; (5760 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    5714:	4913      	ldr	r1, [pc, #76]	; (5764 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    5716:	4814      	ldr	r0, [pc, #80]	; (5768 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    5718:	f7ff f8ec 	bl	48f4 <printf>
    571c:	4813      	ldr	r0, [pc, #76]	; (576c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    571e:	f7fd ff8b 	bl	3638 <puts>
    5722:	2100      	movs	r1, #0
    5724:	2001      	movs	r0, #1
    5726:	f7fd fd17 	bl	3158 <sjsu::debug::PrintBacktrace(bool, void*)>
    572a:	f7fd fd61 	bl	31f0 <sjsu::Halt()>

    system_controller->CCLKSEL = bit::Insert(
    572e:	4b10      	ldr	r3, [pc, #64]	; (5770 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    5730:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    5732:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    5736:	4b0e      	ldr	r3, [pc, #56]	; (5770 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    5738:	681c      	ldr	r4, [r3, #0]
    573a:	4b0e      	ldr	r3, [pc, #56]	; (5774 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    573c:	78f9      	ldrb	r1, [r7, #3]
    573e:	781a      	ldrb	r2, [r3, #0]
    5740:	785b      	ldrb	r3, [r3, #1]
    5742:	021b      	lsls	r3, r3, #8
    5744:	431a      	orrs	r2, r3
    5746:	2300      	movs	r3, #0
    5748:	f362 030f 	bfi	r3, r2, #0, #16
    574c:	461a      	mov	r2, r3
    574e:	f7fc fd8f 	bl	2270 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    5752:	4603      	mov	r3, r0
    5754:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    5758:	bf00      	nop
    575a:	370c      	adds	r7, #12
    575c:	46bd      	mov	sp, r7
    575e:	bd90      	pop	{r4, r7, pc}
    5760:	000092e8 	.word	0x000092e8
    5764:	0000965c 	.word	0x0000965c
    5768:	00009330 	.word	0x00009330
    576c:	000090bc 	.word	0x000090bc
    5770:	10001194 	.word	0x10001194
    5774:	00009604 	.word	0x00009604

00005778 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    5778:	b590      	push	{r4, r7, lr}
    577a:	b083      	sub	sp, #12
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
    5780:	460b      	mov	r3, r1
    5782:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    5784:	4b0c      	ldr	r3, [pc, #48]	; (57b8 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    5786:	681b      	ldr	r3, [r3, #0]
    5788:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    578c:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    578e:	4b0a      	ldr	r3, [pc, #40]	; (57b8 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    5790:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    5792:	4b0a      	ldr	r3, [pc, #40]	; (57bc <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    5794:	781a      	ldrb	r2, [r3, #0]
    5796:	785b      	ldrb	r3, [r3, #1]
    5798:	021b      	lsls	r3, r3, #8
    579a:	431a      	orrs	r2, r3
    579c:	2300      	movs	r3, #0
    579e:	f362 030f 	bfi	r3, r2, #0, #16
    57a2:	461a      	mov	r2, r3
    57a4:	f000 fce1 	bl	616a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    57a8:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    57aa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    57ae:	bf00      	nop
    57b0:	370c      	adds	r7, #12
    57b2:	46bd      	mov	sp, r7
    57b4:	bd90      	pop	{r4, r7, pc}
    57b6:	bf00      	nop
    57b8:	10001194 	.word	0x10001194
    57bc:	00009600 	.word	0x00009600

000057c0 <sjsu::Pin::PullUp() const>:
  void PullUp() const
    57c0:	b580      	push	{r7, lr}
    57c2:	b082      	sub	sp, #8
    57c4:	af00      	add	r7, sp, #0
    57c6:	6078      	str	r0, [r7, #4]
    SetPull(Resistor::kPullUp);
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	3308      	adds	r3, #8
    57ce:	681b      	ldr	r3, [r3, #0]
    57d0:	2102      	movs	r1, #2
    57d2:	6878      	ldr	r0, [r7, #4]
    57d4:	4798      	blx	r3
  }
    57d6:	bf00      	nop
    57d8:	3708      	adds	r7, #8
    57da:	46bd      	mov	sp, r7
    57dc:	bd80      	pop	{r7, pc}

000057de <sjsu::Uart::Flush() const>:
  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// The default implementation reads out all of the bytes by checking
  /// HasData() repeatedly and use Read() to read each. Some implementations may
  /// have more efficient methods of clearing their buffers.
  virtual void Flush() const
    57de:	b580      	push	{r7, lr}
    57e0:	b082      	sub	sp, #8
    57e2:	af00      	add	r7, sp, #0
    57e4:	6078      	str	r0, [r7, #4]
  {
    PollingFlush();
    57e6:	6878      	ldr	r0, [r7, #4]
    57e8:	f000 f820 	bl	582c <sjsu::Uart::PollingFlush() const>
  }
    57ec:	bf00      	nop
    57ee:	3708      	adds	r7, #8
    57f0:	46bd      	mov	sp, r7
    57f2:	bd80      	pop	{r7, pc}

000057f4 <sjsu::Uart::Read() const>:
  }

  /// @return Retrieves a single byte from UART RX line. Users must ensure that
  /// HasData() is true before reading using this method. Otherwise contents of
  /// read data will not be correct and the returned byte will be 0xFF.
  uint8_t Read() const
    57f4:	b580      	push	{r7, lr}
    57f6:	b084      	sub	sp, #16
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
  {
    uint8_t byte;
    if (Read(&byte, sizeof(byte)) == 0)
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	330c      	adds	r3, #12
    5802:	681b      	ldr	r3, [r3, #0]
    5804:	f107 010f 	add.w	r1, r7, #15
    5808:	2201      	movs	r2, #1
    580a:	6878      	ldr	r0, [r7, #4]
    580c:	4798      	blx	r3
    580e:	4603      	mov	r3, r0
    5810:	2b00      	cmp	r3, #0
    5812:	bf0c      	ite	eq
    5814:	2301      	moveq	r3, #1
    5816:	2300      	movne	r3, #0
    5818:	b2db      	uxtb	r3, r3
    581a:	2b00      	cmp	r3, #0
    581c:	d001      	beq.n	5822 <sjsu::Uart::Read() const+0x2e>
    {
      byte = 0xFF;
    581e:	23ff      	movs	r3, #255	; 0xff
    5820:	73fb      	strb	r3, [r7, #15]
    }
    return byte;
    5822:	7bfb      	ldrb	r3, [r7, #15]
  }
    5824:	4618      	mov	r0, r3
    5826:	3710      	adds	r7, #16
    5828:	46bd      	mov	sp, r7
    582a:	bd80      	pop	{r7, pc}

0000582c <sjsu::Uart::PollingFlush() const>:

  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// by checking HasData() repeatedly and use Read() to read each. Some
  /// implementations may have more efficient methods of clearing their buffers.
  void PollingFlush() const
    582c:	b580      	push	{r7, lr}
    582e:	b082      	sub	sp, #8
    5830:	af00      	add	r7, sp, #0
    5832:	6078      	str	r0, [r7, #4]
  {
    while (HasData())
    5834:	687b      	ldr	r3, [r7, #4]
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	3310      	adds	r3, #16
    583a:	681b      	ldr	r3, [r3, #0]
    583c:	6878      	ldr	r0, [r7, #4]
    583e:	4798      	blx	r3
    5840:	4603      	mov	r3, r0
    5842:	2b00      	cmp	r3, #0
    5844:	d003      	beq.n	584e <sjsu::Uart::PollingFlush() const+0x22>
    {
      Read();
    5846:	6878      	ldr	r0, [r7, #4]
    5848:	f7ff ffd4 	bl	57f4 <sjsu::Uart::Read() const>
    while (HasData())
    584c:	e7f2      	b.n	5834 <sjsu::Uart::PollingFlush() const+0x8>
    }
  }
    584e:	bf00      	nop
    5850:	3708      	adds	r7, #8
    5852:	46bd      	mov	sp, r7
    5854:	bd80      	pop	{r7, pc}
    5856:	Address 0x0000000000005856 is out of bounds.


00005858 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    5858:	b480      	push	{r7}
    585a:	b089      	sub	sp, #36	; 0x24
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
    5860:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	2200      	movs	r2, #0
    5868:	601a      	str	r2, [r3, #0]
    586a:	687b      	ldr	r3, [r7, #4]
    586c:	2200      	movs	r2, #0
    586e:	605a      	str	r2, [r3, #4]
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	2201      	movs	r2, #1
    5874:	609a      	str	r2, [r3, #8]
  bool finished = false;
    5876:	2300      	movs	r3, #0
    5878:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    587a:	2300      	movs	r3, #0
    587c:	61bb      	str	r3, [r7, #24]
    587e:	69bb      	ldr	r3, [r7, #24]
    5880:	2b0e      	cmp	r3, #14
    5882:	dc4f      	bgt.n	5924 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    5884:	7ffb      	ldrb	r3, [r7, #31]
    5886:	2b00      	cmp	r3, #0
    5888:	d14c      	bne.n	5924 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    588a:	69bb      	ldr	r3, [r7, #24]
    588c:	3301      	adds	r3, #1
    588e:	617b      	str	r3, [r7, #20]
    5890:	697b      	ldr	r3, [r7, #20]
    5892:	2b0e      	cmp	r3, #14
    5894:	dc42      	bgt.n	591c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    5896:	7ffb      	ldrb	r3, [r7, #31]
    5898:	2b00      	cmp	r3, #0
    589a:	d13f      	bne.n	591c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    589c:	69bb      	ldr	r3, [r7, #24]
    589e:	ee07 3a90 	vmov	s15, r3
    58a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    58a6:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    58aa:	697b      	ldr	r3, [r7, #20]
    58ac:	ee07 3a90 	vmov	s15, r3
    58b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    58b4:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    58b8:	edd7 6a04 	vldr	s13, [r7, #16]
    58bc:	ed97 7a03 	vldr	s14, [r7, #12]
    58c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    58c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    58c8:	ee77 7a87 	vadd.f32	s15, s15, s14
    58cc:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    58d0:	edd7 7a02 	vldr	s15, [r7, #8]
    58d4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 5934 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    58d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    58dc:	ed97 7a00 	vldr	s14, [r7]
    58e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    58e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58e8:	d814      	bhi.n	5914 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    58ea:	edd7 7a02 	vldr	s15, [r7, #8]
    58ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 5934 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    58f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    58f6:	ed97 7a00 	vldr	s14, [r7]
    58fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
    58fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5902:	db07      	blt.n	5914 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    5904:	69ba      	ldr	r2, [r7, #24]
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    590a:	697a      	ldr	r2, [r7, #20]
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	609a      	str	r2, [r3, #8]
        finished          = true;
    5910:	2301      	movs	r3, #1
    5912:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    5914:	697b      	ldr	r3, [r7, #20]
    5916:	3301      	adds	r3, #1
    5918:	617b      	str	r3, [r7, #20]
    591a:	e7b9      	b.n	5890 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    591c:	69bb      	ldr	r3, [r7, #24]
    591e:	3301      	adds	r3, #1
    5920:	61bb      	str	r3, [r7, #24]
    5922:	e7ac      	b.n	587e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    5924:	bf00      	nop
}
    5926:	6878      	ldr	r0, [r7, #4]
    5928:	3724      	adds	r7, #36	; 0x24
    592a:	46bd      	mov	sp, r7
    592c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5930:	4770      	bx	lr
    5932:	bf00      	nop
    5934:	3c23d70a 	.word	0x3c23d70a

00005938 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    5938:	b480      	push	{r7}
    593a:	b087      	sub	sp, #28
    593c:	af00      	add	r7, sp, #0
    593e:	ed87 0a03 	vstr	s0, [r7, #12]
    5942:	edc7 0a02 	vstr	s1, [r7, #8]
    5946:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	ee07 3a90 	vmov	s15, r3
    594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5952:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    5956:	edd7 7a03 	vldr	s15, [r7, #12]
    595a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    595e:	ee27 7a87 	vmul.f32	s14, s15, s14
    5962:	edd7 7a02 	vldr	s15, [r7, #8]
    5966:	ee67 7a27 	vmul.f32	s15, s14, s15
    596a:	ed97 7a05 	vldr	s14, [r7, #20]
    596e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5972:	eef0 7a66 	vmov.f32	s15, s13
}
    5976:	eeb0 0a67 	vmov.f32	s0, s15
    597a:	371c      	adds	r7, #28
    597c:	46bd      	mov	sp, r7
    597e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5982:	4770      	bx	lr

00005984 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    5984:	b480      	push	{r7}
    5986:	b087      	sub	sp, #28
    5988:	af00      	add	r7, sp, #0
    598a:	ed87 0a03 	vstr	s0, [r7, #12]
    598e:	edc7 0a02 	vstr	s1, [r7, #8]
    5992:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	ee07 3a90 	vmov	s15, r3
    599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    599e:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    59a2:	edd7 7a03 	vldr	s15, [r7, #12]
    59a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    59aa:	ee27 7a87 	vmul.f32	s14, s15, s14
    59ae:	edd7 7a02 	vldr	s15, [r7, #8]
    59b2:	ee67 7a27 	vmul.f32	s15, s14, s15
    59b6:	ed97 7a05 	vldr	s14, [r7, #20]
    59ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
    59be:	eef0 7a66 	vmov.f32	s15, s13
}
    59c2:	eeb0 0a67 	vmov.f32	s0, s15
    59c6:	371c      	adds	r7, #28
    59c8:	46bd      	mov	sp, r7
    59ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ce:	4770      	bx	lr

000059d0 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    59d0:	b480      	push	{r7}
    59d2:	b083      	sub	sp, #12
    59d4:	af00      	add	r7, sp, #0
    59d6:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    59da:	edd7 7a01 	vldr	s15, [r7, #4]
    59de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    59e2:	ee77 7a87 	vadd.f32	s15, s15, s14
    59e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    59ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    59ee:	eeb0 0a67 	vmov.f32	s0, s15
    59f2:	370c      	adds	r7, #12
    59f4:	46bd      	mov	sp, r7
    59f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fa:	4770      	bx	lr

000059fc <sjsu::lpc40xx::uart::IsDecimal(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecimal(float value)
{
    59fc:	b580      	push	{r7, lr}
    59fe:	b086      	sub	sp, #24
    5a00:	af00      	add	r7, sp, #0
    5a02:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    5a06:	2300      	movs	r3, #0
    5a08:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    5a0a:	ed97 0a01 	vldr	s0, [r7, #4]
    5a0e:	f7ff ffdf 	bl	59d0 <sjsu::lpc40xx::uart::RoundFloat(float)>
    5a12:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    5a16:	ed97 7a01 	vldr	s14, [r7, #4]
    5a1a:	edd7 7a04 	vldr	s15, [r7, #16]
    5a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
    5a22:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    5a26:	edd7 7a03 	vldr	s15, [r7, #12]
    5a2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 5a58 <sjsu::lpc40xx::uart::IsDecimal(float)+0x5c>
    5a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a36:	db0a      	blt.n	5a4e <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
    5a38:	edd7 7a03 	vldr	s15, [r7, #12]
    5a3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 5a5c <sjsu::lpc40xx::uart::IsDecimal(float)+0x60>
    5a40:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a48:	d801      	bhi.n	5a4e <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
  {
    result = true;
    5a4a:	2301      	movs	r3, #1
    5a4c:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    5a4e:	7dfb      	ldrb	r3, [r7, #23]
}
    5a50:	4618      	mov	r0, r3
    5a52:	3718      	adds	r7, #24
    5a54:	46bd      	mov	sp, r7
    5a56:	bd80      	pop	{r7, pc}
    5a58:	bc23d70a 	.word	0xbc23d70a
    5a5c:	3c23d70a 	.word	0x3c23d70a

00005a60 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    5a60:	b590      	push	{r4, r7, lr}
    5a62:	b091      	sub	sp, #68	; 0x44
    5a64:	af00      	add	r7, sp, #0
    5a66:	61f8      	str	r0, [r7, #28]
    5a68:	61b9      	str	r1, [r7, #24]
    5a6a:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    5a6c:	f107 0314 	add.w	r3, r7, #20
    5a70:	4618      	mov	r0, r3
    5a72:	f7ff fa63 	bl	4f3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5a76:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    5a78:	2300      	movs	r3, #0
    5a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    5a7c:	69fb      	ldr	r3, [r7, #28]
    5a7e:	2200      	movs	r2, #0
    5a80:	601a      	str	r2, [r3, #0]
    5a82:	69fb      	ldr	r3, [r7, #28]
    5a84:	2200      	movs	r2, #0
    5a86:	605a      	str	r2, [r3, #4]
    5a88:	69fb      	ldr	r3, [r7, #28]
    5a8a:	2201      	movs	r2, #1
    5a8c:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    5a8e:	69bb      	ldr	r3, [r7, #24]
    5a90:	ee07 3a90 	vmov	s15, r3
    5a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5a98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    5a9c:	f04f 0300 	mov.w	r3, #0
    5aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    5aa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    5aa6:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    5aa8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5aac:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    5aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    5ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5ab6:	2b04      	cmp	r3, #4
    5ab8:	f000 80be 	beq.w	5c38 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
    5abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5abe:	2b03      	cmp	r3, #3
    5ac0:	f200 80b8 	bhi.w	5c34 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    5ac4:	a201      	add	r2, pc, #4	; (adr r2, 5acc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    5ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5aca:	bf00      	nop
    5acc:	00005add 	.word	0x00005add
    5ad0:	00005b37 	.word	0x00005b37
    5ad4:	00005b97 	.word	0x00005b97
    5ad8:	00005c07 	.word	0x00005c07
    switch (state)
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);
    5adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5ade:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    5ae2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5ae6:	f7ff ff27 	bl	5938 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5aea:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

        if (divide_estimate < 1.0f)
    5aee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5af6:	eef4 7ac7 	vcmpe.f32	s15, s14
    5afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5afe:	d505      	bpl.n	5b0c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    5b00:	69fb      	ldr	r3, [r7, #28]
    5b02:	2200      	movs	r2, #0
    5b04:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    5b06:	2304      	movs	r3, #4
    5b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    5b0a:	e094      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecimal(divide_estimate))
    5b0c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    5b10:	f7ff ff74 	bl	59fc <sjsu::lpc40xx::uart::IsDecimal(float)>
    5b14:	4603      	mov	r3, r0
    5b16:	2b00      	cmp	r3, #0
    5b18:	d00a      	beq.n	5b30 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    5b1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5b22:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    5b26:	69fb      	ldr	r3, [r7, #28]
    5b28:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    5b2a:	2304      	movs	r3, #4
    5b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5b2e:	e082      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    5b30:	2301      	movs	r3, #1
    5b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5b34:	e07f      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    5b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5b38:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    5b3c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5b40:	f7ff fefa 	bl	5938 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5b44:	eef0 7a40 	vmov.f32	s15, s0
    5b48:	eeb0 0a67 	vmov.f32	s0, s15
    5b4c:	f7ff ff40 	bl	59d0 <sjsu::lpc40xx::uart::RoundFloat(float)>
    5b50:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    5b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5b56:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    5b5a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5b5e:	f7ff ff11 	bl	5984 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    5b62:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    5b66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5b6a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 5c44 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    5b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b76:	db0b      	blt.n	5b90 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    5b78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5b7c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 5c48 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    5b80:	eef4 7ac7 	vcmpe.f32	s15, s14
    5b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b88:	d802      	bhi.n	5b90 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    5b8a:	2303      	movs	r3, #3
    5b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    5b8e:	e052      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    5b90:	2302      	movs	r3, #2
    5b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5b94:	e04f      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    5b96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    5b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
    5ba2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    5ba6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5baa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    5bae:	eef4 7ac7 	vcmpe.f32	s15, s14
    5bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bb6:	dd02      	ble.n	5bbe <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    5bb8:	2304      	movs	r3, #4
    5bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    5bbc:	e03b      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    5bbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    5bc2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    5bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
    5bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bce:	dd0f      	ble.n	5bf0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    5bd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
    5bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    5be0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5be8:	ee77 7a87 	vadd.f32	s15, s15, s14
    5bec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    5bf0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    5bf4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    5bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5bfc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    5c00:	2301      	movs	r3, #1
    5c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5c04:	e017      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    5c06:	69fc      	ldr	r4, [r7, #28]
    5c08:	463b      	mov	r3, r7
    5c0a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    5c0e:	4618      	mov	r0, r3
    5c10:	f7ff fe22 	bl	5858 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    5c14:	463b      	mov	r3, r7
    5c16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    5c1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5c26:	ee17 2a90 	vmov	r2, s15
    5c2a:	69fb      	ldr	r3, [r7, #28]
    5c2c:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    5c2e:	2304      	movs	r3, #4
    5c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5c32:	e000      	b.n	5c36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    5c34:	bf00      	nop
  while (state != States::kDone)
    5c36:	e73d      	b.n	5ab4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    5c38:	bf00      	nop
}
    5c3a:	69f8      	ldr	r0, [r7, #28]
    5c3c:	3744      	adds	r7, #68	; 0x44
    5c3e:	46bd      	mov	sp, r7
    5c40:	bd90      	pop	{r4, r7, pc}
    5c42:	bf00      	nop
    5c44:	3f8ccccd 	.word	0x3f8ccccd
    5c48:	3ff33333 	.word	0x3ff33333

00005c4c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
  };

  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  explicit constexpr Uart(const Port_t & port) : port_(port) {}

  Status Initialize(uint32_t baud_rate) const override
    5c4c:	b580      	push	{r7, lr}
    5c4e:	b084      	sub	sp, #16
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
    5c54:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    5c56:	2307      	movs	r3, #7
    5c58:	73fb      	strb	r3, [r7, #15]
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5c5a:	f7fa fda9 	bl	7b0 <sjsu::SystemController::GetPlatformController()>
    5c5e:	4603      	mov	r3, r0
        port_.power_on_id);
    5c60:	681a      	ldr	r2, [r3, #0]
    5c62:	3214      	adds	r2, #20
    5c64:	6812      	ldr	r2, [r2, #0]
    5c66:	6879      	ldr	r1, [r7, #4]
    5c68:	6849      	ldr	r1, [r1, #4]
    5c6a:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5c6c:	4618      	mov	r0, r3
    5c6e:	4790      	blx	r2

    SetBaudRate(baud_rate);
    5c70:	6839      	ldr	r1, [r7, #0]
    5c72:	6878      	ldr	r0, [r7, #4]
    5c74:	f000 f83f 	bl	5cf6 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	685b      	ldr	r3, [r3, #4]
    5c7c:	68db      	ldr	r3, [r3, #12]
    5c7e:	681b      	ldr	r3, [r3, #0]
    5c80:	3304      	adds	r3, #4
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	687a      	ldr	r2, [r7, #4]
    5c86:	6852      	ldr	r2, [r2, #4]
    5c88:	68d0      	ldr	r0, [r2, #12]
    5c8a:	687a      	ldr	r2, [r7, #4]
    5c8c:	6852      	ldr	r2, [r2, #4]
    5c8e:	7c12      	ldrb	r2, [r2, #16]
    5c90:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    5c94:	b2d2      	uxtb	r2, r2
    5c96:	4611      	mov	r1, r2
    5c98:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	685b      	ldr	r3, [r3, #4]
    5c9e:	689b      	ldr	r3, [r3, #8]
    5ca0:	681b      	ldr	r3, [r3, #0]
    5ca2:	3304      	adds	r3, #4
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	687a      	ldr	r2, [r7, #4]
    5ca8:	6852      	ldr	r2, [r2, #4]
    5caa:	6890      	ldr	r0, [r2, #8]
    5cac:	687a      	ldr	r2, [r7, #4]
    5cae:	6852      	ldr	r2, [r2, #4]
    5cb0:	7c12      	ldrb	r2, [r2, #16]
    5cb2:	f3c2 0202 	ubfx	r2, r2, #0, #3
    5cb6:	b2d2      	uxtb	r2, r2
    5cb8:	4611      	mov	r1, r2
    5cba:	4798      	blx	r3
    port_.rx.PullUp();
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	685b      	ldr	r3, [r3, #4]
    5cc0:	68db      	ldr	r3, [r3, #12]
    5cc2:	4618      	mov	r0, r3
    5cc4:	f7ff fd7c 	bl	57c0 <sjsu::Pin::PullUp() const>
    port_.tx.PullUp();
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	685b      	ldr	r3, [r3, #4]
    5ccc:	689b      	ldr	r3, [r3, #8]
    5cce:	4618      	mov	r0, r3
    5cd0:	f7ff fd76 	bl	57c0 <sjsu::Pin::PullUp() const>
    port_.registers->FCR |= kFIFOEnableAndReset;
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	685b      	ldr	r3, [r3, #4]
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	7a1b      	ldrb	r3, [r3, #8]
    5cdc:	b2da      	uxtb	r2, r3
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	685b      	ldr	r3, [r3, #4]
    5ce2:	681b      	ldr	r3, [r3, #0]
    5ce4:	f042 0207 	orr.w	r2, r2, #7
    5ce8:	b2d2      	uxtb	r2, r2
    5cea:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    5cec:	2300      	movs	r3, #0
  }
    5cee:	4618      	mov	r0, r3
    5cf0:	3710      	adds	r7, #16
    5cf2:	46bd      	mov	sp, r7
    5cf4:	bd80      	pop	{r7, pc}

00005cf6 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    5cf6:	b580      	push	{r7, lr}
    5cf8:	b088      	sub	sp, #32
    5cfa:	af00      	add	r7, sp, #0
    5cfc:	6078      	str	r0, [r7, #4]
    5cfe:	6039      	str	r1, [r7, #0]
  {
    auto peripheral_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    5d00:	f7fa fd56 	bl	7b0 <sjsu::SystemController::GetPlatformController()>
    5d04:	4602      	mov	r2, r0
            port_.power_on_id);
    5d06:	687b      	ldr	r3, [r7, #4]
    5d08:	685b      	ldr	r3, [r3, #4]
    5d0a:	3304      	adds	r3, #4
    5d0c:	4619      	mov	r1, r3
    5d0e:	4610      	mov	r0, r2
    5d10:	f7fa fd5a 	bl	7c8 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    5d14:	4603      	mov	r3, r0
    5d16:	61bb      	str	r3, [r7, #24]

    uart::UartCalibration_t calibration =
        uart::GenerateUartCalibration(baud_rate, peripheral_frequency);
    5d18:	f107 030c 	add.w	r3, r7, #12
    5d1c:	69ba      	ldr	r2, [r7, #24]
    5d1e:	6839      	ldr	r1, [r7, #0]
    5d20:	4618      	mov	r0, r3
    5d22:	f7ff fe9d 	bl	5a60 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    5d26:	2380      	movs	r3, #128	; 0x80
    5d28:	77fb      	strb	r3, [r7, #31]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    5d2a:	68fb      	ldr	r3, [r7, #12]
    5d2c:	0a1b      	lsrs	r3, r3, #8
    5d2e:	77bb      	strb	r3, [r7, #30]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    5d30:	68fb      	ldr	r3, [r7, #12]
    5d32:	777b      	strb	r3, [r7, #29]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5d34:	697b      	ldr	r3, [r7, #20]
    5d36:	b2db      	uxtb	r3, r3
    5d38:	011b      	lsls	r3, r3, #4
    5d3a:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    5d3c:	693b      	ldr	r3, [r7, #16]
    5d3e:	b2db      	uxtb	r3, r3
    5d40:	f003 030f 	and.w	r3, r3, #15
    5d44:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5d46:	4313      	orrs	r3, r2
    5d48:	773b      	strb	r3, [r7, #28]

    port_.registers->LCR = kDlabBit;
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	685b      	ldr	r3, [r3, #4]
    5d4e:	681b      	ldr	r3, [r3, #0]
    5d50:	2280      	movs	r2, #128	; 0x80
    5d52:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	685b      	ldr	r3, [r3, #4]
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	7fba      	ldrb	r2, [r7, #30]
    5d5c:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	685b      	ldr	r3, [r3, #4]
    5d62:	681b      	ldr	r3, [r3, #0]
    5d64:	7f7a      	ldrb	r2, [r7, #29]
    5d66:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    5d68:	687b      	ldr	r3, [r7, #4]
    5d6a:	685b      	ldr	r3, [r3, #4]
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	7f3a      	ldrb	r2, [r7, #28]
    5d70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	685b      	ldr	r3, [r3, #4]
    5d78:	681b      	ldr	r3, [r3, #0]
    5d7a:	2203      	movs	r2, #3
    5d7c:	731a      	strb	r2, [r3, #12]
    return true;
    5d7e:	2301      	movs	r3, #1
  }
    5d80:	4618      	mov	r0, r3
    5d82:	3720      	adds	r7, #32
    5d84:	46bd      	mov	sp, r7
    5d86:	bd80      	pop	{r7, pc}

00005d88 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>:

  void Write(const void * data, size_t size) const override
    5d88:	b580      	push	{r7, lr}
    5d8a:	b086      	sub	sp, #24
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	60f8      	str	r0, [r7, #12]
    5d90:	60b9      	str	r1, [r7, #8]
    5d92:	607a      	str	r2, [r7, #4]
  {
    const uint8_t * data_buffer = reinterpret_cast<const uint8_t *>(data);
    5d94:	68bb      	ldr	r3, [r7, #8]
    5d96:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++)
    5d98:	2300      	movs	r3, #0
    5d9a:	617b      	str	r3, [r7, #20]
    5d9c:	697a      	ldr	r2, [r7, #20]
    5d9e:	687b      	ldr	r3, [r7, #4]
    5da0:	429a      	cmp	r2, r3
    5da2:	d216      	bcs.n	5dd2 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x4a>
    {
      port_.registers->THR = data_buffer[i];
    5da4:	693a      	ldr	r2, [r7, #16]
    5da6:	697b      	ldr	r3, [r7, #20]
    5da8:	441a      	add	r2, r3
    5daa:	68fb      	ldr	r3, [r7, #12]
    5dac:	685b      	ldr	r3, [r3, #4]
    5dae:	681b      	ldr	r3, [r3, #0]
    5db0:	7812      	ldrb	r2, [r2, #0]
    5db2:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    5db4:	68f8      	ldr	r0, [r7, #12]
    5db6:	f000 f843 	bl	5e40 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    5dba:	4603      	mov	r3, r0
    5dbc:	f083 0301 	eor.w	r3, r3, #1
    5dc0:	b2db      	uxtb	r3, r3
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d001      	beq.n	5dca <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x42>
      {
        continue;
    5dc6:	bf00      	nop
      while (!TransmissionComplete())
    5dc8:	e7f4      	b.n	5db4 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x2c>
    for (size_t i = 0; i < size; i++)
    5dca:	697b      	ldr	r3, [r7, #20]
    5dcc:	3301      	adds	r3, #1
    5dce:	617b      	str	r3, [r7, #20]
    5dd0:	e7e4      	b.n	5d9c <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x14>
      }
    }
  }
    5dd2:	bf00      	nop
    5dd4:	3718      	adds	r7, #24
    5dd6:	46bd      	mov	sp, r7
    5dd8:	bd80      	pop	{r7, pc}

00005dda <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>:

  size_t Read(void * data, size_t size) const override
    5dda:	b580      	push	{r7, lr}
    5ddc:	b086      	sub	sp, #24
    5dde:	af00      	add	r7, sp, #0
    5de0:	60f8      	str	r0, [r7, #12]
    5de2:	60b9      	str	r1, [r7, #8]
    5de4:	607a      	str	r2, [r7, #4]
  {
    uint8_t * data_buffer = reinterpret_cast<uint8_t *>(data);
    5de6:	68bb      	ldr	r3, [r7, #8]
    5de8:	613b      	str	r3, [r7, #16]
    size_t index          = 0;
    5dea:	2300      	movs	r3, #0
    5dec:	617b      	str	r3, [r7, #20]
    while (FifoHasData())
    5dee:	68f8      	ldr	r0, [r7, #12]
    5df0:	f000 f838 	bl	5e64 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5df4:	4603      	mov	r3, r0
    5df6:	2b00      	cmp	r3, #0
    5df8:	d011      	beq.n	5e1e <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x44>
    {
      if (index >= size)
    5dfa:	697a      	ldr	r2, [r7, #20]
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	429a      	cmp	r2, r3
    5e00:	d20c      	bcs.n	5e1c <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x42>
      {
        break;
      }
      data_buffer[index++] = port_.registers->RBR;
    5e02:	68fb      	ldr	r3, [r7, #12]
    5e04:	685b      	ldr	r3, [r3, #4]
    5e06:	681b      	ldr	r3, [r3, #0]
    5e08:	781b      	ldrb	r3, [r3, #0]
    5e0a:	b2d9      	uxtb	r1, r3
    5e0c:	697b      	ldr	r3, [r7, #20]
    5e0e:	1c5a      	adds	r2, r3, #1
    5e10:	617a      	str	r2, [r7, #20]
    5e12:	693a      	ldr	r2, [r7, #16]
    5e14:	4413      	add	r3, r2
    5e16:	460a      	mov	r2, r1
    5e18:	701a      	strb	r2, [r3, #0]
    while (FifoHasData())
    5e1a:	e7e8      	b.n	5dee <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x14>
        break;
    5e1c:	bf00      	nop
    }
    return index;
    5e1e:	697b      	ldr	r3, [r7, #20]
  }
    5e20:	4618      	mov	r0, r3
    5e22:	3718      	adds	r7, #24
    5e24:	46bd      	mov	sp, r7
    5e26:	bd80      	pop	{r7, pc}

00005e28 <sjsu::lpc40xx::Uart::HasData() const>:

  bool HasData() const override
    5e28:	b580      	push	{r7, lr}
    5e2a:	b082      	sub	sp, #8
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	6078      	str	r0, [r7, #4]
  {
    return FifoHasData();
    5e30:	6878      	ldr	r0, [r7, #4]
    5e32:	f000 f817 	bl	5e64 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5e36:	4603      	mov	r3, r0
  }
    5e38:	4618      	mov	r0, r3
    5e3a:	3708      	adds	r7, #8
    5e3c:	46bd      	mov	sp, r7
    5e3e:	bd80      	pop	{r7, pc}

00005e40 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    5e40:	b580      	push	{r7, lr}
    5e42:	b082      	sub	sp, #8
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	685b      	ldr	r3, [r3, #4]
    5e4c:	681b      	ldr	r3, [r3, #0]
    5e4e:	7d1b      	ldrb	r3, [r3, #20]
    5e50:	b2db      	uxtb	r3, r3
    5e52:	2105      	movs	r1, #5
    5e54:	4618      	mov	r0, r3
    5e56:	f000 f9e4 	bl	6222 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5e5a:	4603      	mov	r3, r0
  }
    5e5c:	4618      	mov	r0, r3
    5e5e:	3708      	adds	r7, #8
    5e60:	46bd      	mov	sp, r7
    5e62:	bd80      	pop	{r7, pc}

00005e64 <sjsu::lpc40xx::Uart::FifoHasData() const>:
  /// @return true if fifo contains receive data.
  bool FifoHasData() const
    5e64:	b580      	push	{r7, lr}
    5e66:	b082      	sub	sp, #8
    5e68:	af00      	add	r7, sp, #0
    5e6a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	685b      	ldr	r3, [r3, #4]
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	7d1b      	ldrb	r3, [r3, #20]
    5e74:	b2db      	uxtb	r3, r3
    5e76:	2100      	movs	r1, #0
    5e78:	4618      	mov	r0, r3
    5e7a:	f000 f9d2 	bl	6222 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5e7e:	4603      	mov	r3, r0
  }
    5e80:	4618      	mov	r0, r3
    5e82:	3708      	adds	r7, #8
    5e84:	46bd      	mov	sp, r7
    5e86:	bd80      	pop	{r7, pc}

00005e88 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::InterruptController<sjsu::lpc40xx::kNumberOfIrqs,
                                  __NVIC_PRIO_BITS>
    interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5e88:	b580      	push	{r7, lr}
    5e8a:	b082      	sub	sp, #8
    5e8c:	af00      	add	r7, sp, #0
    5e8e:	6078      	str	r0, [r7, #4]
    5e90:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    5e92:	683a      	ldr	r2, [r7, #0]
    5e94:	6879      	ldr	r1, [r7, #4]
    5e96:	4804      	ldr	r0, [pc, #16]	; (5ea8 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    5e98:	f7ff ff76 	bl	5d88 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>
  return length;
    5e9c:	683b      	ldr	r3, [r7, #0]
}
    5e9e:	4618      	mov	r0, r3
    5ea0:	3708      	adds	r7, #8
    5ea2:	46bd      	mov	sp, r7
    5ea4:	bd80      	pop	{r7, pc}
    5ea6:	bf00      	nop
    5ea8:	10000c78 	.word	0x10000c78

00005eac <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b082      	sub	sp, #8
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
    5eb4:	6039      	str	r1, [r7, #0]
  // Wait until data comes in
  while (!uart0.HasData())
    5eb6:	480a      	ldr	r0, [pc, #40]	; (5ee0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    5eb8:	f7ff ffb6 	bl	5e28 <sjsu::lpc40xx::Uart::HasData() const>
    5ebc:	4603      	mov	r3, r0
    5ebe:	f083 0301 	eor.w	r3, r3, #1
    5ec2:	b2db      	uxtb	r3, r3
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d001      	beq.n	5ecc <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x20>
  {
    continue;
    5ec8:	bf00      	nop
  while (!uart0.HasData())
    5eca:	e7f4      	b.n	5eb6 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0xa>
  }
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5ecc:	683a      	ldr	r2, [r7, #0]
    5ece:	6879      	ldr	r1, [r7, #4]
    5ed0:	4803      	ldr	r0, [pc, #12]	; (5ee0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    5ed2:	f7ff ff82 	bl	5dda <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>
  return length;
    5ed6:	683b      	ldr	r3, [r7, #0]
}
    5ed8:	4618      	mov	r0, r3
    5eda:	3708      	adds	r7, #8
    5edc:	46bd      	mov	sp, r7
    5ede:	bd80      	pop	{r7, pc}
    5ee0:	10000c78 	.word	0x10000c78

00005ee4 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5ee8:	4802      	ldr	r0, [pc, #8]	; (5ef4 <ThreadRuntimeCounter+0x10>)
    5eea:	f7fe fdd7 	bl	4a9c <sjsu::cortex::DwtCounter::GetCount()>
    5eee:	4603      	mov	r3, r0
}
    5ef0:	4618      	mov	r0, r3
    5ef2:	bd80      	pop	{r7, pc}
    5ef4:	10001354 	.word	0x10001354

00005ef8 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5ef8:	b580      	push	{r7, lr}
    5efa:	b086      	sub	sp, #24
    5efc:	af00      	add	r7, sp, #0
  // Enable FPU (Floating Point Unit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5efe:	f7fe fddd 	bl	4abc <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set the platform's interrupt controller.
  // This will be used by other libraries to enable and disable interrupts.
  sjsu::InterruptController::SetPlatformController(&interrupt_controller);
    5f02:	4828      	ldr	r0, [pc, #160]	; (5fa4 <sjsu::InitializePlatform()+0xac>)
    5f04:	f7fe fdee 	bl	4ae4 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>
  sjsu::SystemController::SetPlatformController(&system_controller);
    5f08:	4827      	ldr	r0, [pc, #156]	; (5fa8 <sjsu::InitializePlatform()+0xb0>)
    5f0a:	f7fe fe7d 	bl	4c08 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    5f0e:	4b27      	ldr	r3, [pc, #156]	; (5fac <sjsu::InitializePlatform()+0xb4>)
    5f10:	6819      	ldr	r1, [r3, #0]
    5f12:	4825      	ldr	r0, [pc, #148]	; (5fa8 <sjsu::InitializePlatform()+0xb0>)
    5f14:	f7ff f8d8 	bl	50c8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5f18:	23ff      	movs	r3, #255	; 0xff
    5f1a:	703b      	strb	r3, [r7, #0]
    5f1c:	463b      	mov	r3, r7
    5f1e:	2201      	movs	r2, #1
    5f20:	4619      	mov	r1, r3
    5f22:	4821      	ldr	r0, [pc, #132]	; (5fa8 <sjsu::InitializePlatform()+0xb0>)
    5f24:	f7ff f91e 	bl	5164 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5f28:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5f2c:	4820      	ldr	r0, [pc, #128]	; (5fb0 <sjsu::InitializePlatform()+0xb8>)
    5f2e:	f7ff fe8d 	bl	5c4c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    5f32:	4820      	ldr	r0, [pc, #128]	; (5fb4 <sjsu::InitializePlatform()+0xbc>)
    5f34:	f000 fe00 	bl	6b38 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5f38:	481f      	ldr	r0, [pc, #124]	; (5fb8 <sjsu::InitializePlatform()+0xc0>)
    5f3a:	f000 fe0d 	bl	6b58 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.Initialize();
    5f3e:	481f      	ldr	r0, [pc, #124]	; (5fbc <sjsu::InitializePlatform()+0xc4>)
    5f40:	f7fe ff34 	bl	4dac <sjsu::cortex::SystemTimer::Initialize() const>
  system_timer.SetTickFrequency(config::kRtosFrequency);
    5f44:	4b1e      	ldr	r3, [pc, #120]	; (5fc0 <sjsu::InitializePlatform()+0xc8>)
    5f46:	6819      	ldr	r1, [r3, #0]
    5f48:	481c      	ldr	r0, [pc, #112]	; (5fbc <sjsu::InitializePlatform()+0xc4>)
    5f4a:	f7ff f815 	bl	4f78 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    5f4e:	481b      	ldr	r0, [pc, #108]	; (5fbc <sjsu::InitializePlatform()+0xc4>)
    5f50:	f7fe ff84 	bl	4e5c <sjsu::cortex::SystemTimer::StartTimer() const>
    5f54:	6178      	str	r0, [r7, #20]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    5f56:	697b      	ldr	r3, [r7, #20]
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d00e      	beq.n	5f7a <sjsu::InitializePlatform()+0x82>
    5f5c:	23ba      	movs	r3, #186	; 0xba
    5f5e:	4a19      	ldr	r2, [pc, #100]	; (5fc4 <sjsu::InitializePlatform()+0xcc>)
    5f60:	4919      	ldr	r1, [pc, #100]	; (5fc8 <sjsu::InitializePlatform()+0xd0>)
    5f62:	481a      	ldr	r0, [pc, #104]	; (5fcc <sjsu::InitializePlatform()+0xd4>)
    5f64:	f7fe fcc6 	bl	48f4 <printf>
    5f68:	4819      	ldr	r0, [pc, #100]	; (5fd0 <sjsu::InitializePlatform()+0xd8>)
    5f6a:	f7fd fb65 	bl	3638 <puts>
    5f6e:	2100      	movs	r1, #0
    5f70:	2001      	movs	r0, #1
    5f72:	f7fd f8f1 	bl	3158 <sjsu::debug::PrintBacktrace(bool, void*)>
    5f76:	f7fd f93b 	bl	31f0 <sjsu::Halt()>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    5f7a:	4816      	ldr	r0, [pc, #88]	; (5fd4 <sjsu::InitializePlatform()+0xdc>)
    5f7c:	f7fe fd6c 	bl	4a58 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    5f80:	1d3b      	adds	r3, r7, #4
    5f82:	4915      	ldr	r1, [pc, #84]	; (5fd8 <sjsu::InitializePlatform()+0xe0>)
    5f84:	4618      	mov	r0, r3
    5f86:	f7fc f9cb 	bl	2320 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    5f8a:	1d3b      	adds	r3, r7, #4
    5f8c:	4618      	mov	r0, r3
    5f8e:	f7fe fe2d 	bl	4bec <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>
    5f92:	1d3b      	adds	r3, r7, #4
    5f94:	4618      	mov	r0, r3
    5f96:	f7fa fc79 	bl	88c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
}
    5f9a:	bf00      	nop
    5f9c:	3718      	adds	r7, #24
    5f9e:	46bd      	mov	sp, r7
    5fa0:	bd80      	pop	{r7, pc}
    5fa2:	bf00      	nop
    5fa4:	10000c94 	.word	0x10000c94
    5fa8:	10000c74 	.word	0x10000c74
    5fac:	00008ea8 	.word	0x00008ea8
    5fb0:	10000c78 	.word	0x10000c78
    5fb4:	00005e89 	.word	0x00005e89
    5fb8:	00005ead 	.word	0x00005ead
    5fbc:	10000c80 	.word	0x10000c80
    5fc0:	00008eac 	.word	0x00008eac
    5fc4:	000093cc 	.word	0x000093cc
    5fc8:	000096c8 	.word	0x000096c8
    5fcc:	000093ec 	.word	0x000093ec
    5fd0:	000090bc 	.word	0x000090bc
    5fd4:	10001354 	.word	0x10001354
    5fd8:	00004d35 	.word	0x00004d35

00005fdc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
      operator=(const function& __x)
    5fdc:	b580      	push	{r7, lr}
    5fde:	b086      	sub	sp, #24
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	6078      	str	r0, [r7, #4]
    5fe4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    5fe6:	f107 0308 	add.w	r3, r7, #8
    5fea:	6839      	ldr	r1, [r7, #0]
    5fec:	4618      	mov	r0, r3
    5fee:	f000 f96f 	bl	62d0 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
    5ff2:	f107 0308 	add.w	r3, r7, #8
    5ff6:	6879      	ldr	r1, [r7, #4]
    5ff8:	4618      	mov	r0, r3
    5ffa:	f000 f98b 	bl	6314 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>
    5ffe:	f107 0308 	add.w	r3, r7, #8
    6002:	4618      	mov	r0, r3
    6004:	f7fa fc42 	bl	88c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
	return *this;
    6008:	687b      	ldr	r3, [r7, #4]
      }
    600a:	4618      	mov	r0, r3
    600c:	3718      	adds	r7, #24
    600e:	46bd      	mov	sp, r7
    6010:	bd80      	pop	{r7, pc}

00006012 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    6012:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    6016:	b08a      	sub	sp, #40	; 0x28
    6018:	af00      	add	r7, sp, #0
    601a:	60f8      	str	r0, [r7, #12]
    601c:	60b9      	str	r1, [r7, #8]
    601e:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    6020:	68bb      	ldr	r3, [r7, #8]
    6022:	e9d3 2300 	ldrd	r2, r3, [r3]
    6026:	e9c7 2306 	strd	r2, r3, [r7, #24]
    602a:	f107 0318 	add.w	r3, r7, #24
    602e:	4618      	mov	r0, r3
    6030:	f7fa fb36 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    6034:	4604      	mov	r4, r0
    6036:	460d      	mov	r5, r1
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	e9d3 2300 	ldrd	r2, r3, [r3]
    603e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    6042:	f107 0320 	add.w	r3, r7, #32
    6046:	4618      	mov	r0, r3
    6048:	f7fa fb2a 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    604c:	4602      	mov	r2, r0
    604e:	460b      	mov	r3, r1
    6050:	eb14 0802 	adds.w	r8, r4, r2
    6054:	eb45 0903 	adc.w	r9, r5, r3
    6058:	e9c7 8904 	strd	r8, r9, [r7, #16]
    605c:	f107 0310 	add.w	r3, r7, #16
    6060:	4619      	mov	r1, r3
    6062:	68f8      	ldr	r0, [r7, #12]
    6064:	f7fa fb2a 	bl	6bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    6068:	68f8      	ldr	r0, [r7, #12]
    606a:	3728      	adds	r7, #40	; 0x28
    606c:	46bd      	mov	sp, r7
    606e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00006072 <std::function<void ()>::function(decltype(nullptr))>:
      function(nullptr_t) noexcept
    6072:	b580      	push	{r7, lr}
    6074:	b082      	sub	sp, #8
    6076:	af00      	add	r7, sp, #0
    6078:	6078      	str	r0, [r7, #4]
    607a:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	4618      	mov	r0, r3
    6080:	f7fa f996 	bl	3b0 <std::_Function_base::_Function_base()>
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	4618      	mov	r0, r3
    6088:	3708      	adds	r7, #8
    608a:	46bd      	mov	sp, r7
    608c:	bd80      	pop	{r7, pc}

0000608e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    608e:	b580      	push	{r7, lr}
    6090:	b082      	sub	sp, #8
    6092:	af00      	add	r7, sp, #0
    6094:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	4618      	mov	r0, r3
    609a:	f000 f95c 	bl	6356 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    609e:	bf00      	nop
    60a0:	6878      	ldr	r0, [r7, #4]
    60a2:	3708      	adds	r7, #8
    60a4:	46bd      	mov	sp, r7
    60a6:	bd80      	pop	{r7, pc}

000060a8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    60a8:	b580      	push	{r7, lr}
    60aa:	b084      	sub	sp, #16
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    60b2:	f107 0308 	add.w	r3, r7, #8
    60b6:	6839      	ldr	r1, [r7, #0]
    60b8:	4618      	mov	r0, r3
    60ba:	f000 f960 	bl	637e <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    60be:	f107 0308 	add.w	r3, r7, #8
    60c2:	4618      	mov	r0, r3
    60c4:	f7fa faec 	bl	6a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    60c8:	4602      	mov	r2, r0
    60ca:	460b      	mov	r3, r1
    60cc:	6879      	ldr	r1, [r7, #4]
    60ce:	e9c1 2300 	strd	r2, r3, [r1]
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	4618      	mov	r0, r3
    60d6:	3710      	adds	r7, #16
    60d8:	46bd      	mov	sp, r7
    60da:	bd80      	pop	{r7, pc}

000060dc <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    60dc:	b580      	push	{r7, lr}
    60de:	b082      	sub	sp, #8
    60e0:	af00      	add	r7, sp, #0
    60e2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    60e4:	6878      	ldr	r0, [r7, #4]
    60e6:	f7fe ff35 	bl	4f54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    60ea:	4603      	mov	r3, r0
		}
    60ec:	4618      	mov	r0, r3
    60ee:	3708      	adds	r7, #8
    60f0:	46bd      	mov	sp, r7
    60f2:	bd80      	pop	{r7, pc}

000060f4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
    60f4:	b580      	push	{r7, lr}
    60f6:	b082      	sub	sp, #8
    60f8:	af00      	add	r7, sp, #0
    60fa:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	4618      	mov	r0, r3
    6100:	f000 f94e 	bl	63a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    6104:	bf00      	nop
    6106:	6878      	ldr	r0, [r7, #4]
    6108:	3708      	adds	r7, #8
    610a:	46bd      	mov	sp, r7
    610c:	bd80      	pop	{r7, pc}

0000610e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    610e:	b580      	push	{r7, lr}
    6110:	b084      	sub	sp, #16
    6112:	af00      	add	r7, sp, #0
    6114:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	4618      	mov	r0, r3
    611a:	f7fa ffb7 	bl	108c <units::linear_scale<float>::operator()() const>
    611e:	eef0 7a40 	vmov.f32	s15, s0
    6122:	edc7 7a03 	vstr	s15, [r7, #12]
    6126:	f107 030c 	add.w	r3, r7, #12
    612a:	4618      	mov	r0, r3
    612c:	f000 f950 	bl	63d0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    6130:	eef0 7a40 	vmov.f32	s15, s0
    6134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6138:	ee17 3a90 	vmov	r3, s15
		}
    613c:	4618      	mov	r0, r3
    613e:	3710      	adds	r7, #16
    6140:	46bd      	mov	sp, r7
    6142:	bd80      	pop	{r7, pc}

00006144 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    6144:	b580      	push	{r7, lr}
    6146:	b082      	sub	sp, #8
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
    614c:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    614e:	683b      	ldr	r3, [r7, #0]
    6150:	4618      	mov	r0, r3
    6152:	f7fe ff93 	bl	507c <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    6156:	eef0 7a40 	vmov.f32	s15, s0
    615a:	687b      	ldr	r3, [r7, #4]
    615c:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    6160:	687b      	ldr	r3, [r7, #4]
		}
    6162:	4618      	mov	r0, r3
    6164:	3708      	adds	r7, #8
    6166:	46bd      	mov	sp, r7
    6168:	bd80      	pop	{r7, pc}

0000616a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    616a:	b580      	push	{r7, lr}
    616c:	b084      	sub	sp, #16
    616e:	af00      	add	r7, sp, #0
    6170:	60f8      	str	r0, [r7, #12]
    6172:	60b9      	str	r1, [r7, #8]
    6174:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    6176:	793b      	ldrb	r3, [r7, #4]
    6178:	461a      	mov	r2, r3
    617a:	797b      	ldrb	r3, [r7, #5]
    617c:	68b9      	ldr	r1, [r7, #8]
    617e:	68f8      	ldr	r0, [r7, #12]
    6180:	f000 f934 	bl	63ec <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    6184:	4603      	mov	r3, r0
}
    6186:	4618      	mov	r0, r3
    6188:	3710      	adds	r7, #16
    618a:	46bd      	mov	sp, r7
    618c:	bd80      	pop	{r7, pc}

0000618e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    618e:	b580      	push	{r7, lr}
    6190:	ed2d 8b02 	vpush	{d8}
    6194:	b084      	sub	sp, #16
    6196:	af00      	add	r7, sp, #0
    6198:	6078      	str	r0, [r7, #4]
    619a:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	4618      	mov	r0, r3
    61a0:	f7fa ff74 	bl	108c <units::linear_scale<float>::operator()() const>
    61a4:	eeb0 8a40 	vmov.f32	s16, s0
    61a8:	683b      	ldr	r3, [r7, #0]
    61aa:	4618      	mov	r0, r3
    61ac:	f7fa ff6e 	bl	108c <units::linear_scale<float>::operator()() const>
    61b0:	eef0 7a40 	vmov.f32	s15, s0
    61b4:	edc7 7a03 	vstr	s15, [r7, #12]
    61b8:	f107 030c 	add.w	r3, r7, #12
    61bc:	4618      	mov	r0, r3
    61be:	f7fe fcb7 	bl	4b30 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    61c2:	eeb0 7a40 	vmov.f32	s14, s0
    61c6:	eec8 7a07 	vdiv.f32	s15, s16, s14
    61ca:	f107 0308 	add.w	r3, r7, #8
    61ce:	eeb0 0a67 	vmov.f32	s0, s15
    61d2:	4618      	mov	r0, r3
    61d4:	f7fb f892 	bl	12fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    61d8:	68bb      	ldr	r3, [r7, #8]
	}
    61da:	4618      	mov	r0, r3
    61dc:	3710      	adds	r7, #16
    61de:	46bd      	mov	sp, r7
    61e0:	ecbd 8b02 	vpop	{d8}
    61e4:	bd80      	pop	{r7, pc}

000061e6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    61e6:	b580      	push	{r7, lr}
    61e8:	b084      	sub	sp, #16
    61ea:	af00      	add	r7, sp, #0
    61ec:	6078      	str	r0, [r7, #4]
    61ee:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	4618      	mov	r0, r3
    61f4:	f7fa ff4a 	bl	108c <units::linear_scale<float>::operator()() const>
    61f8:	eeb0 7a40 	vmov.f32	s14, s0
    61fc:	683b      	ldr	r3, [r7, #0]
    61fe:	ee07 3a90 	vmov	s15, r3
    6202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6206:	ee77 7a27 	vadd.f32	s15, s14, s15
    620a:	f107 030c 	add.w	r3, r7, #12
    620e:	eeb0 0a67 	vmov.f32	s0, s15
    6212:	4618      	mov	r0, r3
    6214:	f7fb f872 	bl	12fc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    6218:	68fb      	ldr	r3, [r7, #12]
	}
    621a:	4618      	mov	r0, r3
    621c:	3710      	adds	r7, #16
    621e:	46bd      	mov	sp, r7
    6220:	bd80      	pop	{r7, pc}

00006222 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    6222:	b480      	push	{r7}
    6224:	b083      	sub	sp, #12
    6226:	af00      	add	r7, sp, #0
    6228:	4603      	mov	r3, r0
    622a:	6039      	str	r1, [r7, #0]
    622c:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    622e:	79fa      	ldrb	r2, [r7, #7]
    6230:	683b      	ldr	r3, [r7, #0]
    6232:	fa42 f303 	asr.w	r3, r2, r3
    6236:	f003 0301 	and.w	r3, r3, #1
    623a:	2b00      	cmp	r3, #0
    623c:	bf14      	ite	ne
    623e:	2301      	movne	r3, #1
    6240:	2300      	moveq	r3, #0
    6242:	b2db      	uxtb	r3, r3
}
    6244:	4618      	mov	r0, r3
    6246:	370c      	adds	r7, #12
    6248:	46bd      	mov	sp, r7
    624a:	f85d 7b04 	ldr.w	r7, [sp], #4
    624e:	4770      	bx	lr

00006250 <std::array<std::function<void ()>, 59u>::array()>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
    6250:	b5b0      	push	{r4, r5, r7, lr}
    6252:	b082      	sub	sp, #8
    6254:	af00      	add	r7, sp, #0
    6256:	6078      	str	r0, [r7, #4]
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	243a      	movs	r4, #58	; 0x3a
    625c:	461d      	mov	r5, r3
    625e:	2c00      	cmp	r4, #0
    6260:	db05      	blt.n	626e <std::array<std::function<void ()>, 59u>::array()+0x1e>
    6262:	4628      	mov	r0, r5
    6264:	f7fc f899 	bl	239a <std::function<void ()>::function()>
    6268:	3510      	adds	r5, #16
    626a:	3c01      	subs	r4, #1
    626c:	e7f7      	b.n	625e <std::array<std::function<void ()>, 59u>::array()+0xe>
    626e:	687b      	ldr	r3, [r7, #4]
    6270:	4618      	mov	r0, r3
    6272:	3708      	adds	r7, #8
    6274:	46bd      	mov	sp, r7
    6276:	bdb0      	pop	{r4, r5, r7, pc}

00006278 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()>:

  /// This must be put into the interrupt vector table for all of the interrupts
  /// this lookup handler will work for in ROM at compile time.
  /// @note This must not be executed directly, only by the processor when an
  ///       interrupt occurs.
  static void LookupHandler()
    6278:	b580      	push	{r7, lr}
    627a:	b086      	sub	sp, #24
    627c:	af00      	add	r7, sp, #0
  {
    int active_interrupt     = (scb->ICSR & 0xFF);
    627e:	4b11      	ldr	r3, [pc, #68]	; (62c4 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x4c>)
    6280:	681b      	ldr	r3, [r3, #0]
    6282:	685b      	ldr	r3, [r3, #4]
    6284:	b2db      	uxtb	r3, r3
    6286:	617b      	str	r3, [r7, #20]
    current_vector           = IndexToIRQ(active_interrupt);
    6288:	6978      	ldr	r0, [r7, #20]
    628a:	f000 f8db 	bl	6444 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>
    628e:	4603      	mov	r3, r0
    6290:	4a0d      	ldr	r2, [pc, #52]	; (62c8 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x50>)
    6292:	6013      	str	r3, [r2, #0]
    InterruptHandler handler = table[active_interrupt];
    6294:	697b      	ldr	r3, [r7, #20]
    6296:	4619      	mov	r1, r3
    6298:	480c      	ldr	r0, [pc, #48]	; (62cc <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x54>)
    629a:	f000 f8df 	bl	645c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    629e:	4602      	mov	r2, r0
    62a0:	1d3b      	adds	r3, r7, #4
    62a2:	4611      	mov	r1, r2
    62a4:	4618      	mov	r0, r3
    62a6:	f7fc fb00 	bl	28aa <std::function<void ()>::function(std::function<void ()> const&)>
    handler();
    62aa:	1d3b      	adds	r3, r7, #4
    62ac:	4618      	mov	r0, r3
    62ae:	f7fc f881 	bl	23b4 <std::function<void ()>::operator()() const>
    InterruptHandler handler = table[active_interrupt];
    62b2:	1d3b      	adds	r3, r7, #4
    62b4:	4618      	mov	r0, r3
    62b6:	f7fa fd9a 	bl	dee <std::function<void ()>::~function()>
  }
    62ba:	bf00      	nop
    62bc:	3718      	adds	r7, #24
    62be:	46bd      	mov	sp, r7
    62c0:	bd80      	pop	{r7, pc}
    62c2:	bf00      	nop
    62c4:	10000c88 	.word	0x10000c88
    62c8:	10000c90 	.word	0x10000c90
    62cc:	10001358 	.word	0x10001358

000062d0 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
    function<_Res(_ArgTypes...)>::
    62d0:	b580      	push	{r7, lr}
    62d2:	b082      	sub	sp, #8
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	6039      	str	r1, [r7, #0]
    : _Function_base()
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	4618      	mov	r0, r3
    62de:	f7fa f867 	bl	3b0 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    62e2:	6838      	ldr	r0, [r7, #0]
    62e4:	f000 f8c9 	bl	647a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>
    62e8:	4603      	mov	r3, r0
    62ea:	2b00      	cmp	r3, #0
    62ec:	d00d      	beq.n	630a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    62ee:	683b      	ldr	r3, [r7, #0]
    62f0:	689b      	ldr	r3, [r3, #8]
    62f2:	6878      	ldr	r0, [r7, #4]
    62f4:	6839      	ldr	r1, [r7, #0]
    62f6:	2202      	movs	r2, #2
    62f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    62fa:	683b      	ldr	r3, [r7, #0]
    62fc:	68da      	ldr	r2, [r3, #12]
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    6302:	683b      	ldr	r3, [r7, #0]
    6304:	689a      	ldr	r2, [r3, #8]
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	609a      	str	r2, [r3, #8]
    }
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	4618      	mov	r0, r3
    630e:	3708      	adds	r7, #8
    6310:	46bd      	mov	sp, r7
    6312:	bd80      	pop	{r7, pc}

00006314 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>:
      void swap(function& __x) noexcept
    6314:	b580      	push	{r7, lr}
    6316:	b082      	sub	sp, #8
    6318:	af00      	add	r7, sp, #0
    631a:	6078      	str	r0, [r7, #4]
    631c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	683a      	ldr	r2, [r7, #0]
    6322:	4611      	mov	r1, r2
    6324:	4618      	mov	r0, r3
    6326:	f7fc fbfc 	bl	2b22 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	f103 0208 	add.w	r2, r3, #8
    6330:	683b      	ldr	r3, [r7, #0]
    6332:	3308      	adds	r3, #8
    6334:	4619      	mov	r1, r3
    6336:	4610      	mov	r0, r2
    6338:	f7fc fc25 	bl	2b86 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	f103 020c 	add.w	r2, r3, #12
    6342:	683b      	ldr	r3, [r7, #0]
    6344:	330c      	adds	r3, #12
    6346:	4619      	mov	r1, r3
    6348:	4610      	mov	r0, r2
    634a:	f000 f8b1 	bl	64b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
      }
    634e:	bf00      	nop
    6350:	3708      	adds	r7, #8
    6352:	46bd      	mov	sp, r7
    6354:	bd80      	pop	{r7, pc}

00006356 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    6356:	b580      	push	{r7, lr}
    6358:	b084      	sub	sp, #16
    635a:	af00      	add	r7, sp, #0
    635c:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    635e:	f04f 0201 	mov.w	r2, #1
    6362:	f04f 0300 	mov.w	r3, #0
    6366:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    636a:	f107 0308 	add.w	r3, r7, #8
    636e:	4619      	mov	r1, r3
    6370:	6878      	ldr	r0, [r7, #4]
    6372:	f7fe fe71 	bl	5058 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    6376:	6878      	ldr	r0, [r7, #4]
    6378:	3710      	adds	r7, #16
    637a:	46bd      	mov	sp, r7
    637c:	bd80      	pop	{r7, pc}

0000637e <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    637e:	b580      	push	{r7, lr}
    6380:	b082      	sub	sp, #8
    6382:	af00      	add	r7, sp, #0
    6384:	6078      	str	r0, [r7, #4]
    6386:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	6839      	ldr	r1, [r7, #0]
    638c:	4618      	mov	r0, r3
    638e:	f000 f8ae 	bl	64ee <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    6392:	bf00      	nop
      }
    6394:	6878      	ldr	r0, [r7, #4]
    6396:	3708      	adds	r7, #8
    6398:	46bd      	mov	sp, r7
    639a:	bd80      	pop	{r7, pc}
    639c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000063a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    63a0:	b580      	push	{r7, lr}
    63a2:	b084      	sub	sp, #16
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    63a8:	a307      	add	r3, pc, #28	; (adr r3, 63c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()+0x28>)
    63aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    63ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    63b2:	f107 0308 	add.w	r3, r7, #8
    63b6:	4619      	mov	r1, r3
    63b8:	6878      	ldr	r0, [r7, #4]
    63ba:	f7fa f97f 	bl	6bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    63be:	6878      	ldr	r0, [r7, #4]
    63c0:	3710      	adds	r7, #16
    63c2:	46bd      	mov	sp, r7
    63c4:	bd80      	pop	{r7, pc}
    63c6:	bf00      	nop
    63c8:	3b9aca00 	.word	0x3b9aca00
    63cc:	00000000 	.word	0x00000000

000063d0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    63d0:	b580      	push	{r7, lr}
    63d2:	b086      	sub	sp, #24
    63d4:	af00      	add	r7, sp, #0
    63d6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    63d8:	6878      	ldr	r0, [r7, #4]
    63da:	f000 f8cb 	bl	6574 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    63de:	eef0 7a40 	vmov.f32	s15, s0
	}
    63e2:	eeb0 0a67 	vmov.f32	s0, s15
    63e6:	3718      	adds	r7, #24
    63e8:	46bd      	mov	sp, r7
    63ea:	bd80      	pop	{r7, pc}

000063ec <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    63ec:	b480      	push	{r7}
    63ee:	b089      	sub	sp, #36	; 0x24
    63f0:	af00      	add	r7, sp, #0
    63f2:	60f8      	str	r0, [r7, #12]
    63f4:	60b9      	str	r1, [r7, #8]
    63f6:	607a      	str	r2, [r7, #4]
    63f8:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    63fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63fe:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    6400:	2320      	movs	r3, #32
    6402:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    6404:	683b      	ldr	r3, [r7, #0]
    6406:	f1c3 0320 	rsb	r3, r3, #32
    640a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    640e:	fa22 f303 	lsr.w	r3, r2, r3
    6412:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    6414:	697a      	ldr	r2, [r7, #20]
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	fa02 f303 	lsl.w	r3, r2, r3
    641c:	43db      	mvns	r3, r3
    641e:	68fa      	ldr	r2, [r7, #12]
    6420:	4013      	ands	r3, r2
    6422:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    6424:	68ba      	ldr	r2, [r7, #8]
    6426:	697b      	ldr	r3, [r7, #20]
    6428:	401a      	ands	r2, r3
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	fa02 f303 	lsl.w	r3, r2, r3
    6430:	68fa      	ldr	r2, [r7, #12]
    6432:	4313      	orrs	r3, r2
    6434:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    6436:	68fb      	ldr	r3, [r7, #12]
}
    6438:	4618      	mov	r0, r3
    643a:	3724      	adds	r7, #36	; 0x24
    643c:	46bd      	mov	sp, r7
    643e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6442:	4770      	bx	lr

00006444 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>:
  static int IndexToIRQ(int index)
    6444:	b480      	push	{r7}
    6446:	b083      	sub	sp, #12
    6448:	af00      	add	r7, sp, #0
    644a:	6078      	str	r0, [r7, #4]
    return index - kArmExceptionOffset;
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	3b10      	subs	r3, #16
  }
    6450:	4618      	mov	r0, r3
    6452:	370c      	adds	r7, #12
    6454:	46bd      	mov	sp, r7
    6456:	f85d 7b04 	ldr.w	r7, [sp], #4
    645a:	4770      	bx	lr

0000645c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
    645c:	b580      	push	{r7, lr}
    645e:	b082      	sub	sp, #8
    6460:	af00      	add	r7, sp, #0
    6462:	6078      	str	r0, [r7, #4]
    6464:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    6466:	687b      	ldr	r3, [r7, #4]
    6468:	6839      	ldr	r1, [r7, #0]
    646a:	4618      	mov	r0, r3
    646c:	f000 f894 	bl	6598 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>
    6470:	4603      	mov	r3, r0
    6472:	4618      	mov	r0, r3
    6474:	3708      	adds	r7, #8
    6476:	46bd      	mov	sp, r7
    6478:	bd80      	pop	{r7, pc}

0000647a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>:
      explicit operator bool() const noexcept
    647a:	b580      	push	{r7, lr}
    647c:	b082      	sub	sp, #8
    647e:	af00      	add	r7, sp, #0
    6480:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	4618      	mov	r0, r3
    6486:	f7f9 ffb4 	bl	3f2 <std::_Function_base::_M_empty() const>
    648a:	4603      	mov	r3, r0
    648c:	f083 0301 	eor.w	r3, r3, #1
    6490:	b2db      	uxtb	r3, r3
    6492:	4618      	mov	r0, r3
    6494:	3708      	adds	r7, #8
    6496:	46bd      	mov	sp, r7
    6498:	bd80      	pop	{r7, pc}

0000649a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    649a:	b480      	push	{r7}
    649c:	b083      	sub	sp, #12
    649e:	af00      	add	r7, sp, #0
    64a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	4618      	mov	r0, r3
    64a6:	370c      	adds	r7, #12
    64a8:	46bd      	mov	sp, r7
    64aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ae:	4770      	bx	lr

000064b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    64b0:	b580      	push	{r7, lr}
    64b2:	b084      	sub	sp, #16
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
    64b8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    64ba:	6878      	ldr	r0, [r7, #4]
    64bc:	f7ff ffed 	bl	649a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    64c0:	4603      	mov	r3, r0
    64c2:	681b      	ldr	r3, [r3, #0]
    64c4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    64c6:	6838      	ldr	r0, [r7, #0]
    64c8:	f7ff ffe7 	bl	649a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    64cc:	4603      	mov	r3, r0
    64ce:	681a      	ldr	r2, [r3, #0]
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    64d4:	f107 030c 	add.w	r3, r7, #12
    64d8:	4618      	mov	r0, r3
    64da:	f7ff ffde 	bl	649a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    64de:	4603      	mov	r3, r0
    64e0:	681a      	ldr	r2, [r3, #0]
    64e2:	683b      	ldr	r3, [r7, #0]
    64e4:	601a      	str	r2, [r3, #0]
    }
    64e6:	bf00      	nop
    64e8:	3710      	adds	r7, #16
    64ea:	46bd      	mov	sp, r7
    64ec:	bd80      	pop	{r7, pc}

000064ee <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    64ee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    64f2:	b084      	sub	sp, #16
    64f4:	af00      	add	r7, sp, #0
    64f6:	6078      	str	r0, [r7, #4]
    64f8:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    64fa:	6838      	ldr	r0, [r7, #0]
    64fc:	f7fe fd9e 	bl	503c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    6500:	4604      	mov	r4, r0
    6502:	460d      	mov	r5, r1
    6504:	4622      	mov	r2, r4
    6506:	462b      	mov	r3, r5
    6508:	f04f 0000 	mov.w	r0, #0
    650c:	f04f 0100 	mov.w	r1, #0
    6510:	0159      	lsls	r1, r3, #5
    6512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
    6516:	0150      	lsls	r0, r2, #5
    6518:	4602      	mov	r2, r0
    651a:	460b      	mov	r3, r1
    651c:	1b12      	subs	r2, r2, r4
    651e:	eb63 0305 	sbc.w	r3, r3, r5
    6522:	f04f 0000 	mov.w	r0, #0
    6526:	f04f 0100 	mov.w	r1, #0
    652a:	0259      	lsls	r1, r3, #9
    652c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
    6530:	0250      	lsls	r0, r2, #9
    6532:	4602      	mov	r2, r0
    6534:	460b      	mov	r3, r1
    6536:	1912      	adds	r2, r2, r4
    6538:	eb45 0303 	adc.w	r3, r5, r3
    653c:	f04f 0000 	mov.w	r0, #0
    6540:	f04f 0100 	mov.w	r1, #0
    6544:	0199      	lsls	r1, r3, #6
    6546:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    654a:	0190      	lsls	r0, r2, #6
    654c:	1a80      	subs	r0, r0, r2
    654e:	eb61 0103 	sbc.w	r1, r1, r3
    6552:	eb10 0804 	adds.w	r8, r0, r4
    6556:	eb41 0905 	adc.w	r9, r1, r5
    655a:	e9c7 8902 	strd	r8, r9, [r7, #8]
    655e:	f107 0308 	add.w	r3, r7, #8
    6562:	4619      	mov	r1, r3
    6564:	6878      	ldr	r0, [r7, #4]
    6566:	f7fa f8a9 	bl	6bc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    656a:	6878      	ldr	r0, [r7, #4]
    656c:	3710      	adds	r7, #16
    656e:	46bd      	mov	sp, r7
    6570:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00006574 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    6574:	b480      	push	{r7}
    6576:	b085      	sub	sp, #20
    6578:	af00      	add	r7, sp, #0
    657a:	60f8      	str	r0, [r7, #12]
    657c:	7239      	strb	r1, [r7, #8]
    657e:	713a      	strb	r2, [r7, #4]
    6580:	703b      	strb	r3, [r7, #0]
			return value;
    6582:	68fb      	ldr	r3, [r7, #12]
    6584:	681b      	ldr	r3, [r3, #0]
    6586:	ee07 3a90 	vmov	s15, r3
		}
    658a:	eeb0 0a67 	vmov.f32	s0, s15
    658e:	3714      	adds	r7, #20
    6590:	46bd      	mov	sp, r7
    6592:	f85d 7b04 	ldr.w	r7, [sp], #4
    6596:	4770      	bx	lr

00006598 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    6598:	b480      	push	{r7}
    659a:	b083      	sub	sp, #12
    659c:	af00      	add	r7, sp, #0
    659e:	6078      	str	r0, [r7, #4]
    65a0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    65a2:	683b      	ldr	r3, [r7, #0]
    65a4:	011b      	lsls	r3, r3, #4
    65a6:	687a      	ldr	r2, [r7, #4]
    65a8:	4413      	add	r3, r2
    65aa:	4618      	mov	r0, r3
    65ac:	370c      	adds	r7, #12
    65ae:	46bd      	mov	sp, r7
    65b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    65b4:	4770      	bx	lr

000065b6 <std::array<std::function<void ()>, 59u>::~array()>:
    struct array
    65b6:	b590      	push	{r4, r7, lr}
    65b8:	b083      	sub	sp, #12
    65ba:	af00      	add	r7, sp, #0
    65bc:	6078      	str	r0, [r7, #4]
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	2b00      	cmp	r3, #0
    65c2:	d00a      	beq.n	65da <std::array<std::function<void ()>, 59u>::~array()+0x24>
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	429c      	cmp	r4, r3
    65ce:	d004      	beq.n	65da <std::array<std::function<void ()>, 59u>::~array()+0x24>
    65d0:	3c10      	subs	r4, #16
    65d2:	4620      	mov	r0, r4
    65d4:	f7fa fc0b 	bl	dee <std::function<void ()>::~function()>
    65d8:	e7f7      	b.n	65ca <std::array<std::function<void ()>, 59u>::~array()+0x14>
    65da:	687b      	ldr	r3, [r7, #4]
    65dc:	4618      	mov	r0, r3
    65de:	370c      	adds	r7, #12
    65e0:	46bd      	mov	sp, r7
    65e2:	bd90      	pop	{r4, r7, pc}

000065e4 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    65e4:	b580      	push	{r7, lr}
    65e6:	b082      	sub	sp, #8
    65e8:	af00      	add	r7, sp, #0
    65ea:	6078      	str	r0, [r7, #4]
    65ec:	6039      	str	r1, [r7, #0]
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	2b01      	cmp	r3, #1
    65f2:	d175      	bne.n	66e0 <__static_initialization_and_destruction_0(int, int)+0xfc>
    65f4:	683b      	ldr	r3, [r7, #0]
    65f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    65fa:	4293      	cmp	r3, r2
    65fc:	d170      	bne.n	66e0 <__static_initialization_and_destruction_0(int, int)+0xfc>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    65fe:	4b3a      	ldr	r3, [pc, #232]	; (66e8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	f003 0301 	and.w	r3, r3, #1
    6606:	2b00      	cmp	r3, #0
    6608:	d10b      	bne.n	6622 <__static_initialization_and_destruction_0(int, int)+0x3e>
    660a:	4b37      	ldr	r3, [pc, #220]	; (66e8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    660c:	2201      	movs	r2, #1
    660e:	601a      	str	r2, [r3, #0]
    6610:	4936      	ldr	r1, [pc, #216]	; (66ec <__static_initialization_and_destruction_0(int, int)+0x108>)
    6612:	4837      	ldr	r0, [pc, #220]	; (66f0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6614:	f7fb fe84 	bl	2320 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    6618:	4a36      	ldr	r2, [pc, #216]	; (66f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    661a:	4937      	ldr	r1, [pc, #220]	; (66f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    661c:	4834      	ldr	r0, [pc, #208]	; (66f0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    661e:	f000 faab 	bl	6b78 <__aeabi_atexit>
  inline static InterruptCallback callback = nullptr;
    6622:	4b36      	ldr	r3, [pc, #216]	; (66fc <__static_initialization_and_destruction_0(int, int)+0x118>)
    6624:	681b      	ldr	r3, [r3, #0]
    6626:	f003 0301 	and.w	r3, r3, #1
    662a:	2b00      	cmp	r3, #0
    662c:	d10b      	bne.n	6646 <__static_initialization_and_destruction_0(int, int)+0x62>
    662e:	4b33      	ldr	r3, [pc, #204]	; (66fc <__static_initialization_and_destruction_0(int, int)+0x118>)
    6630:	2201      	movs	r2, #1
    6632:	601a      	str	r2, [r3, #0]
    6634:	2100      	movs	r1, #0
    6636:	4832      	ldr	r0, [pc, #200]	; (6700 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    6638:	f7ff fd1b 	bl	6072 <std::function<void ()>::function(decltype(nullptr))>
    663c:	4a2d      	ldr	r2, [pc, #180]	; (66f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    663e:	4931      	ldr	r1, [pc, #196]	; (6704 <__static_initialization_and_destruction_0(int, int)+0x120>)
    6640:	482f      	ldr	r0, [pc, #188]	; (6700 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    6642:	f000 fa99 	bl	6b78 <__aeabi_atexit>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    6646:	4b30      	ldr	r3, [pc, #192]	; (6708 <__static_initialization_and_destruction_0(int, int)+0x124>)
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	f003 0301 	and.w	r3, r3, #1
    664e:	2b00      	cmp	r3, #0
    6650:	d105      	bne.n	665e <__static_initialization_and_destruction_0(int, int)+0x7a>
    6652:	4b2d      	ldr	r3, [pc, #180]	; (6708 <__static_initialization_and_destruction_0(int, int)+0x124>)
    6654:	2201      	movs	r2, #1
    6656:	601a      	str	r2, [r3, #0]
    6658:	4a2c      	ldr	r2, [pc, #176]	; (670c <__static_initialization_and_destruction_0(int, int)+0x128>)
    665a:	4b2d      	ldr	r3, [pc, #180]	; (6710 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    665c:	601a      	str	r2, [r3, #0]
    665e:	4b2d      	ldr	r3, [pc, #180]	; (6714 <__static_initialization_and_destruction_0(int, int)+0x130>)
    6660:	681b      	ldr	r3, [r3, #0]
    6662:	f003 0301 	and.w	r3, r3, #1
    6666:	2b00      	cmp	r3, #0
    6668:	d105      	bne.n	6676 <__static_initialization_and_destruction_0(int, int)+0x92>
    666a:	4b2a      	ldr	r3, [pc, #168]	; (6714 <__static_initialization_and_destruction_0(int, int)+0x130>)
    666c:	2201      	movs	r2, #1
    666e:	601a      	str	r2, [r3, #0]
    6670:	4a29      	ldr	r2, [pc, #164]	; (6718 <__static_initialization_and_destruction_0(int, int)+0x134>)
    6672:	4b2a      	ldr	r3, [pc, #168]	; (671c <__static_initialization_and_destruction_0(int, int)+0x138>)
    6674:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    6676:	4b2a      	ldr	r3, [pc, #168]	; (6720 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    6678:	681b      	ldr	r3, [r3, #0]
    667a:	f003 0301 	and.w	r3, r3, #1
    667e:	2b00      	cmp	r3, #0
    6680:	d105      	bne.n	668e <__static_initialization_and_destruction_0(int, int)+0xaa>
    6682:	4b27      	ldr	r3, [pc, #156]	; (6720 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    6684:	2201      	movs	r2, #1
    6686:	601a      	str	r2, [r3, #0]
    };
    6688:	4a26      	ldr	r2, [pc, #152]	; (6724 <__static_initialization_and_destruction_0(int, int)+0x140>)
    668a:	4b27      	ldr	r3, [pc, #156]	; (6728 <__static_initialization_and_destruction_0(int, int)+0x144>)
    668c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    668e:	4b27      	ldr	r3, [pc, #156]	; (672c <__static_initialization_and_destruction_0(int, int)+0x148>)
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	f003 0301 	and.w	r3, r3, #1
    6696:	2b00      	cmp	r3, #0
    6698:	d105      	bne.n	66a6 <__static_initialization_and_destruction_0(int, int)+0xc2>
    669a:	4b24      	ldr	r3, [pc, #144]	; (672c <__static_initialization_and_destruction_0(int, int)+0x148>)
    669c:	2201      	movs	r2, #1
    669e:	601a      	str	r2, [r3, #0]
    };
    66a0:	4a23      	ldr	r2, [pc, #140]	; (6730 <__static_initialization_and_destruction_0(int, int)+0x14c>)
    66a2:	4b24      	ldr	r3, [pc, #144]	; (6734 <__static_initialization_and_destruction_0(int, int)+0x150>)
    66a4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    66a6:	4b24      	ldr	r3, [pc, #144]	; (6738 <__static_initialization_and_destruction_0(int, int)+0x154>)
    66a8:	681b      	ldr	r3, [r3, #0]
    66aa:	f003 0301 	and.w	r3, r3, #1
    66ae:	2b00      	cmp	r3, #0
    66b0:	d105      	bne.n	66be <__static_initialization_and_destruction_0(int, int)+0xda>
    66b2:	4b21      	ldr	r3, [pc, #132]	; (6738 <__static_initialization_and_destruction_0(int, int)+0x154>)
    66b4:	2201      	movs	r2, #1
    66b6:	601a      	str	r2, [r3, #0]
    };
    66b8:	4a20      	ldr	r2, [pc, #128]	; (673c <__static_initialization_and_destruction_0(int, int)+0x158>)
    66ba:	4b21      	ldr	r3, [pc, #132]	; (6740 <__static_initialization_and_destruction_0(int, int)+0x15c>)
    66bc:	601a      	str	r2, [r3, #0]
  }

 private:
  static inline std::array<InterruptHandler,
                           kNumberOfInterrupts + kArmExceptionOffset>
      table;
    66be:	4b21      	ldr	r3, [pc, #132]	; (6744 <__static_initialization_and_destruction_0(int, int)+0x160>)
    66c0:	681b      	ldr	r3, [r3, #0]
    66c2:	f003 0301 	and.w	r3, r3, #1
    66c6:	2b00      	cmp	r3, #0
    66c8:	d10a      	bne.n	66e0 <__static_initialization_and_destruction_0(int, int)+0xfc>
    66ca:	4b1e      	ldr	r3, [pc, #120]	; (6744 <__static_initialization_and_destruction_0(int, int)+0x160>)
    66cc:	2201      	movs	r2, #1
    66ce:	601a      	str	r2, [r3, #0]
    66d0:	481d      	ldr	r0, [pc, #116]	; (6748 <__static_initialization_and_destruction_0(int, int)+0x164>)
    66d2:	f7ff fdbd 	bl	6250 <std::array<std::function<void ()>, 59u>::array()>
    66d6:	4a07      	ldr	r2, [pc, #28]	; (66f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    66d8:	491c      	ldr	r1, [pc, #112]	; (674c <__static_initialization_and_destruction_0(int, int)+0x168>)
    66da:	481b      	ldr	r0, [pc, #108]	; (6748 <__static_initialization_and_destruction_0(int, int)+0x164>)
    66dc:	f000 fa4c 	bl	6b78 <__aeabi_atexit>
    66e0:	bf00      	nop
    66e2:	3708      	adds	r7, #8
    66e4:	46bd      	mov	sp, r7
    66e6:	bd80      	pop	{r7, pc}
    66e8:	10001278 	.word	0x10001278
    66ec:	00000845 	.word	0x00000845
    66f0:	10000d30 	.word	0x10000d30
    66f4:	10000000 	.word	0x10000000
    66f8:	0000088d 	.word	0x0000088d
    66fc:	10001708 	.word	0x10001708
    6700:	10001338 	.word	0x10001338
    6704:	00000def 	.word	0x00000def
    6708:	1000128c 	.word	0x1000128c
    670c:	400fc000 	.word	0x400fc000
    6710:	10001194 	.word	0x10001194
    6714:	10001274 	.word	0x10001274
    6718:	4002c000 	.word	0x4002c000
    671c:	10000d20 	.word	0x10000d20
    6720:	1000170c 	.word	0x1000170c
    6724:	40098000 	.word	0x40098000
    6728:	10000c38 	.word	0x10000c38
    672c:	10001710 	.word	0x10001710
    6730:	4009c000 	.word	0x4009c000
    6734:	10000c4c 	.word	0x10000c4c
    6738:	10001714 	.word	0x10001714
    673c:	400a4000 	.word	0x400a4000
    6740:	10000c60 	.word	0x10000c60
    6744:	10001718 	.word	0x10001718
    6748:	10001358 	.word	0x10001358
    674c:	000065b7 	.word	0x000065b7

00006750 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)>:
  void Initialize(
    6750:	b590      	push	{r4, r7, lr}
    6752:	b083      	sub	sp, #12
    6754:	af00      	add	r7, sp, #0
    6756:	6078      	str	r0, [r7, #4]
    6758:	6039      	str	r1, [r7, #0]
    std::fill(table.begin(), table.end(), unregistered_handler);
    675a:	4808      	ldr	r0, [pc, #32]	; (677c <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    675c:	f000 f85e 	bl	681c <std::array<std::function<void ()>, 59u>::begin()>
    6760:	4604      	mov	r4, r0
    6762:	4806      	ldr	r0, [pc, #24]	; (677c <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    6764:	f000 f866 	bl	6834 <std::array<std::function<void ()>, 59u>::end()>
    6768:	4603      	mov	r3, r0
    676a:	683a      	ldr	r2, [r7, #0]
    676c:	4619      	mov	r1, r3
    676e:	4620      	mov	r0, r4
    6770:	f000 f86e 	bl	6850 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
  }
    6774:	bf00      	nop
    6776:	370c      	adds	r7, #12
    6778:	46bd      	mov	sp, r7
    677a:	bd90      	pop	{r4, r7, pc}
    677c:	10001358 	.word	0x10001358

00006780 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)>:
  void Enable(RegistrationInfo_t register_info) override
    6780:	b590      	push	{r4, r7, lr}
    6782:	b085      	sub	sp, #20
    6784:	af00      	add	r7, sp, #0
    6786:	6078      	str	r0, [r7, #4]
    6788:	6039      	str	r1, [r7, #0]
    int irq                = register_info.interrupt_request_number;
    678a:	683b      	ldr	r3, [r7, #0]
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	60fb      	str	r3, [r7, #12]
    table[IRQToIndex(irq)] = register_info.interrupt_handler;
    6790:	683b      	ldr	r3, [r7, #0]
    6792:	1d1c      	adds	r4, r3, #4
    6794:	68f8      	ldr	r0, [r7, #12]
    6796:	f000 f872 	bl	687e <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    679a:	4603      	mov	r3, r0
    679c:	4619      	mov	r1, r3
    679e:	480e      	ldr	r0, [pc, #56]	; (67d8 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x58>)
    67a0:	f7ff fe5c 	bl	645c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    67a4:	4603      	mov	r3, r0
    67a6:	4621      	mov	r1, r4
    67a8:	4618      	mov	r0, r3
    67aa:	f7fb fe7f 	bl	24ac <std::function<void ()>::operator=(std::function<void ()> const&)>
    if (irq >= 0)
    67ae:	68fb      	ldr	r3, [r7, #12]
    67b0:	2b00      	cmp	r3, #0
    67b2:	db02      	blt.n	67ba <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x3a>
      NvicEnableIRQ(irq);
    67b4:	68f8      	ldr	r0, [r7, #12]
    67b6:	f000 f86f 	bl	6898 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>
    if (register_info.priority > -1)
    67ba:	683b      	ldr	r3, [r7, #0]
    67bc:	695b      	ldr	r3, [r3, #20]
    67be:	2b00      	cmp	r3, #0
    67c0:	db05      	blt.n	67ce <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x4e>
      NvicSetPriority(irq, register_info.priority);
    67c2:	683b      	ldr	r3, [r7, #0]
    67c4:	695b      	ldr	r3, [r3, #20]
    67c6:	4619      	mov	r1, r3
    67c8:	68f8      	ldr	r0, [r7, #12]
    67ca:	f000 f87d 	bl	68c8 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>
  }
    67ce:	bf00      	nop
    67d0:	3714      	adds	r7, #20
    67d2:	46bd      	mov	sp, r7
    67d4:	bd90      	pop	{r4, r7, pc}
    67d6:	bf00      	nop
    67d8:	10001358 	.word	0x10001358

000067dc <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)>:
  void Disable(int interrupt_request_number) override
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	6078      	str	r0, [r7, #4]
    67e4:	6039      	str	r1, [r7, #0]
    if (interrupt_request_number >= 0)
    67e6:	683b      	ldr	r3, [r7, #0]
    67e8:	2b00      	cmp	r3, #0
    67ea:	db02      	blt.n	67f2 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x16>
      NvicDisableIRQ(interrupt_request_number);
    67ec:	6838      	ldr	r0, [r7, #0]
    67ee:	f000 f897 	bl	6920 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    table[IRQToIndex(interrupt_request_number)] = UnregisteredHandler;
    67f2:	6838      	ldr	r0, [r7, #0]
    67f4:	f000 f843 	bl	687e <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    67f8:	4603      	mov	r3, r0
    67fa:	4619      	mov	r1, r3
    67fc:	4805      	ldr	r0, [pc, #20]	; (6814 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x38>)
    67fe:	f7ff fe2d 	bl	645c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6802:	4603      	mov	r3, r0
    6804:	4904      	ldr	r1, [pc, #16]	; (6818 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x3c>)
    6806:	4618      	mov	r0, r3
    6808:	f000 f8c4 	bl	6994 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
  }
    680c:	bf00      	nop
    680e:	3708      	adds	r7, #8
    6810:	46bd      	mov	sp, r7
    6812:	bd80      	pop	{r7, pc}
    6814:	10001358 	.word	0x10001358
    6818:	00006955 	.word	0x00006955

0000681c <std::array<std::function<void ()>, 59u>::begin()>:
      begin() noexcept
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
    6824:	6878      	ldr	r0, [r7, #4]
    6826:	f000 f8d4 	bl	69d2 <std::array<std::function<void ()>, 59u>::data()>
    682a:	4603      	mov	r3, r0
    682c:	4618      	mov	r0, r3
    682e:	3708      	adds	r7, #8
    6830:	46bd      	mov	sp, r7
    6832:	bd80      	pop	{r7, pc}

00006834 <std::array<std::function<void ()>, 59u>::end()>:
      end() noexcept
    6834:	b580      	push	{r7, lr}
    6836:	b082      	sub	sp, #8
    6838:	af00      	add	r7, sp, #0
    683a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
    683c:	6878      	ldr	r0, [r7, #4]
    683e:	f000 f8c8 	bl	69d2 <std::array<std::function<void ()>, 59u>::data()>
    6842:	4603      	mov	r3, r0
    6844:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    6848:	4618      	mov	r0, r3
    684a:	3708      	adds	r7, #8
    684c:	46bd      	mov	sp, r7
    684e:	bd80      	pop	{r7, pc}

00006850 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    6850:	b590      	push	{r4, r7, lr}
    6852:	b085      	sub	sp, #20
    6854:	af00      	add	r7, sp, #0
    6856:	60f8      	str	r0, [r7, #12]
    6858:	60b9      	str	r1, [r7, #8]
    685a:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
    685c:	68f8      	ldr	r0, [r7, #12]
    685e:	f000 f8c5 	bl	69ec <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    6862:	4604      	mov	r4, r0
    6864:	68b8      	ldr	r0, [r7, #8]
    6866:	f000 f8c1 	bl	69ec <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    686a:	4603      	mov	r3, r0
    686c:	687a      	ldr	r2, [r7, #4]
    686e:	4619      	mov	r1, r3
    6870:	4620      	mov	r0, r4
    6872:	f000 f8c6 	bl	6a02 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
		    __value);
    }
    6876:	bf00      	nop
    6878:	3714      	adds	r7, #20
    687a:	46bd      	mov	sp, r7
    687c:	bd90      	pop	{r4, r7, pc}

0000687e <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>:
  static int IRQToIndex(int irq)
    687e:	b480      	push	{r7}
    6880:	b083      	sub	sp, #12
    6882:	af00      	add	r7, sp, #0
    6884:	6078      	str	r0, [r7, #4]
    return irq + kArmExceptionOffset;
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	3310      	adds	r3, #16
  }
    688a:	4618      	mov	r0, r3
    688c:	370c      	adds	r7, #12
    688e:	46bd      	mov	sp, r7
    6890:	f85d 7b04 	ldr.w	r7, [sp], #4
    6894:	4770      	bx	lr
    6896:	Address 0x0000000000006896 is out of bounds.


00006898 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>:
  /// Enable External Interrupt
  /// Enables a device-specific interrupt in the NVIC interrupt controller.
  ///
  /// @param irq - External interrupt number. Value cannot be negative.
  static void NvicEnableIRQ(int irq)
    6898:	b480      	push	{r7}
    689a:	b083      	sub	sp, #12
    689c:	af00      	add	r7, sp, #0
    689e:	6078      	str	r0, [r7, #4]
  {
    nvic->ISER[(irq >> 5)] = (1 << (irq & 0x1F));
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	f003 031f 	and.w	r3, r3, #31
    68a6:	2201      	movs	r2, #1
    68a8:	fa02 f103 	lsl.w	r1, r2, r3
    68ac:	4b05      	ldr	r3, [pc, #20]	; (68c4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)+0x2c>)
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	687a      	ldr	r2, [r7, #4]
    68b2:	1152      	asrs	r2, r2, #5
    68b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    68b8:	bf00      	nop
    68ba:	370c      	adds	r7, #12
    68bc:	46bd      	mov	sp, r7
    68be:	f85d 7b04 	ldr.w	r7, [sp], #4
    68c2:	4770      	bx	lr
    68c4:	10000c8c 	.word	0x10000c8c

000068c8 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>:
  /// Set Interrupt Priority
  /// Sets the priority of an interrupt.
  /// @note    The priority cannot be set for every core interrupt.
  /// @param irq -  Interrupt number.
  /// @param priority -  Priority to set.
  static void NvicSetPriority(int irq, uint32_t priority)
    68c8:	b480      	push	{r7}
    68ca:	b085      	sub	sp, #20
    68cc:	af00      	add	r7, sp, #0
    68ce:	6078      	str	r0, [r7, #4]
    68d0:	6039      	str	r1, [r7, #0]
  {
    uint32_t priority_mask = priority << (8U - kNvicPriorityBits);
    68d2:	683b      	ldr	r3, [r7, #0]
    68d4:	00db      	lsls	r3, r3, #3
    68d6:	60fb      	str	r3, [r7, #12]
    if (irq < 0)
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	2b00      	cmp	r3, #0
    68dc:	da0b      	bge.n	68f6 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x2e>
    {
      scb->SHP[(irq & 0xFUL) - 4UL] = static_cast<uint8_t>(priority_mask);
    68de:	4b0e      	ldr	r3, [pc, #56]	; (6918 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x50>)
    68e0:	681a      	ldr	r2, [r3, #0]
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	f003 030f 	and.w	r3, r3, #15
    68e8:	3b04      	subs	r3, #4
    68ea:	68f9      	ldr	r1, [r7, #12]
    68ec:	b2c9      	uxtb	r1, r1
    68ee:	4413      	add	r3, r2
    68f0:	460a      	mov	r2, r1
    68f2:	761a      	strb	r2, [r3, #24]
    }
    else
    {
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    }
  }
    68f4:	e009      	b.n	690a <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x42>
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    68f6:	4b09      	ldr	r3, [pc, #36]	; (691c <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x54>)
    68f8:	681a      	ldr	r2, [r3, #0]
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	b2d9      	uxtb	r1, r3
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	4413      	add	r3, r2
    6902:	f503 7340 	add.w	r3, r3, #768	; 0x300
    6906:	460a      	mov	r2, r1
    6908:	701a      	strb	r2, [r3, #0]
  }
    690a:	bf00      	nop
    690c:	3714      	adds	r7, #20
    690e:	46bd      	mov	sp, r7
    6910:	f85d 7b04 	ldr.w	r7, [sp], #4
    6914:	4770      	bx	lr
    6916:	bf00      	nop
    6918:	10000c88 	.word	0x10000c88
    691c:	10000c8c 	.word	0x10000c8c

00006920 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>:
  static void NvicDisableIRQ(int irq)
    6920:	b480      	push	{r7}
    6922:	b083      	sub	sp, #12
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
    nvic->ICER[(irq >> 5)] = (1 << (irq & 0x1F));
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	f003 031f 	and.w	r3, r3, #31
    692e:	2201      	movs	r2, #1
    6930:	fa02 f103 	lsl.w	r1, r2, r3
    6934:	4b06      	ldr	r3, [pc, #24]	; (6950 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)+0x30>)
    6936:	681b      	ldr	r3, [r3, #0]
    6938:	687a      	ldr	r2, [r7, #4]
    693a:	1152      	asrs	r2, r2, #5
    693c:	3220      	adds	r2, #32
    693e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    6942:	bf00      	nop
    6944:	370c      	adds	r7, #12
    6946:	46bd      	mov	sp, r7
    6948:	f85d 7b04 	ldr.w	r7, [sp], #4
    694c:	4770      	bx	lr
    694e:	bf00      	nop
    6950:	10000c8c 	.word	0x10000c8c

00006954 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()>:

  /// Program will call this if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void UnregisteredHandler()
    6954:	b580      	push	{r7, lr}
    6956:	b082      	sub	sp, #8
    6958:	af02      	add	r7, sp, #8
  {
    LOG_DEBUG("No interrupt handler found. Disabling interrupt request %d!",
    695a:	4b0a      	ldr	r3, [pc, #40]	; (6984 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    695c:	681b      	ldr	r3, [r3, #0]
    695e:	9300      	str	r3, [sp, #0]
    6960:	2385      	movs	r3, #133	; 0x85
    6962:	4a09      	ldr	r2, [pc, #36]	; (6988 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x34>)
    6964:	4909      	ldr	r1, [pc, #36]	; (698c <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x38>)
    6966:	480a      	ldr	r0, [pc, #40]	; (6990 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x3c>)
    6968:	f7fd ffc4 	bl	48f4 <printf>
              current_vector);
    if (current_vector >= 0)
    696c:	4b05      	ldr	r3, [pc, #20]	; (6984 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	2b00      	cmp	r3, #0
    6972:	db04      	blt.n	697e <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x2a>
    {
      NvicDisableIRQ(current_vector);
    6974:	4b03      	ldr	r3, [pc, #12]	; (6984 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	4618      	mov	r0, r3
    697a:	f7ff ffd1 	bl	6920 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    }
  }
    697e:	bf00      	nop
    6980:	46bd      	mov	sp, r7
    6982:	bd80      	pop	{r7, pc}
    6984:	10000c90 	.word	0x10000c90
    6988:	000094bc 	.word	0x000094bc
    698c:	00009744 	.word	0x00009744
    6990:	00009580 	.word	0x00009580

00006994 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
	operator=(_Functor&& __f)
    6994:	b580      	push	{r7, lr}
    6996:	b086      	sub	sp, #24
    6998:	af00      	add	r7, sp, #0
    699a:	6078      	str	r0, [r7, #4]
    699c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
    699e:	6838      	ldr	r0, [r7, #0]
    69a0:	f000 f845 	bl	6a2e <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    69a4:	4602      	mov	r2, r0
    69a6:	f107 0308 	add.w	r3, r7, #8
    69aa:	4611      	mov	r1, r2
    69ac:	4618      	mov	r0, r3
    69ae:	f7fb fd53 	bl	2458 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    69b2:	f107 0308 	add.w	r3, r7, #8
    69b6:	6879      	ldr	r1, [r7, #4]
    69b8:	4618      	mov	r0, r3
    69ba:	f7fb ff98 	bl	28ee <std::function<void ()>::swap(std::function<void ()>&)>
    69be:	f107 0308 	add.w	r3, r7, #8
    69c2:	4618      	mov	r0, r3
    69c4:	f7fa fa13 	bl	dee <std::function<void ()>::~function()>
	  return *this;
    69c8:	687b      	ldr	r3, [r7, #4]
	}
    69ca:	4618      	mov	r0, r3
    69cc:	3718      	adds	r7, #24
    69ce:	46bd      	mov	sp, r7
    69d0:	bd80      	pop	{r7, pc}

000069d2 <std::array<std::function<void ()>, 59u>::data()>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
    69d2:	b580      	push	{r7, lr}
    69d4:	b082      	sub	sp, #8
    69d6:	af00      	add	r7, sp, #0
    69d8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	4618      	mov	r0, r3
    69de:	f000 f831 	bl	6a44 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>
    69e2:	4603      	mov	r3, r0
    69e4:	4618      	mov	r0, r3
    69e6:	3708      	adds	r7, #8
    69e8:	46bd      	mov	sp, r7
    69ea:	bd80      	pop	{r7, pc}

000069ec <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>:
    __niter_base(_Iterator __it)
    69ec:	b480      	push	{r7}
    69ee:	b083      	sub	sp, #12
    69f0:	af00      	add	r7, sp, #0
    69f2:	6078      	str	r0, [r7, #4]
    { return __it; }
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	4618      	mov	r0, r3
    69f8:	370c      	adds	r7, #12
    69fa:	46bd      	mov	sp, r7
    69fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a00:	4770      	bx	lr

00006a02 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
    6a02:	b580      	push	{r7, lr}
    6a04:	b084      	sub	sp, #16
    6a06:	af00      	add	r7, sp, #0
    6a08:	60f8      	str	r0, [r7, #12]
    6a0a:	60b9      	str	r1, [r7, #8]
    6a0c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
    6a0e:	68fa      	ldr	r2, [r7, #12]
    6a10:	68bb      	ldr	r3, [r7, #8]
    6a12:	429a      	cmp	r2, r3
    6a14:	d007      	beq.n	6a26 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0x24>
	*__first = __value;
    6a16:	6879      	ldr	r1, [r7, #4]
    6a18:	68f8      	ldr	r0, [r7, #12]
    6a1a:	f7fb fd47 	bl	24ac <std::function<void ()>::operator=(std::function<void ()> const&)>
      for (; __first != __last; ++__first)
    6a1e:	68fb      	ldr	r3, [r7, #12]
    6a20:	3310      	adds	r3, #16
    6a22:	60fb      	str	r3, [r7, #12]
    6a24:	e7f3      	b.n	6a0e <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0xc>
    }
    6a26:	bf00      	nop
    6a28:	3710      	adds	r7, #16
    6a2a:	46bd      	mov	sp, r7
    6a2c:	bd80      	pop	{r7, pc}

00006a2e <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    6a2e:	b480      	push	{r7}
    6a30:	b083      	sub	sp, #12
    6a32:	af00      	add	r7, sp, #0
    6a34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	4618      	mov	r0, r3
    6a3a:	370c      	adds	r7, #12
    6a3c:	46bd      	mov	sp, r7
    6a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a42:	4770      	bx	lr

00006a44 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>:
      _S_ptr(const _Type& __t) noexcept
    6a44:	b480      	push	{r7}
    6a46:	b083      	sub	sp, #12
    6a48:	af00      	add	r7, sp, #0
    6a4a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	4618      	mov	r0, r3
    6a50:	370c      	adds	r7, #12
    6a52:	46bd      	mov	sp, r7
    6a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a58:	4770      	bx	lr

00006a5a <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    6a5a:	b580      	push	{r7, lr}
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6a62:	2001      	movs	r0, #1
    6a64:	f7ff fdbe 	bl	65e4 <__static_initialization_and_destruction_0(int, int)>
    6a68:	bd80      	pop	{r7, pc}
    6a6a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6a6e:	Address 0x0000000000006a6e is out of bounds.


00006a70 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    6a70:	4b07      	ldr	r3, [pc, #28]	; (6a90 <pxCurrentTCBConst2>)
    6a72:	6819      	ldr	r1, [r3, #0]
    6a74:	6808      	ldr	r0, [r1, #0]
    6a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a7a:	f380 8809 	msr	PSP, r0
    6a7e:	f3bf 8f6f 	isb	sy
    6a82:	f04f 0000 	mov.w	r0, #0
    6a86:	f380 8811 	msr	BASEPRI, r0
    6a8a:	4770      	bx	lr
    6a8c:	f3af 8000 	nop.w

00006a90 <pxCurrentTCBConst2>:
    6a90:	100012b8 	.word	0x100012b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6a94:	bf00      	nop
    6a96:	bf00      	nop
    6a98:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6a9c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006aa0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6aa0:	f3ef 8009 	mrs	r0, PSP
    6aa4:	f3bf 8f6f 	isb	sy
    6aa8:	4b15      	ldr	r3, [pc, #84]	; (6b00 <pxCurrentTCBConst>)
    6aaa:	681a      	ldr	r2, [r3, #0]
    6aac:	f01e 0f10 	tst.w	lr, #16
    6ab0:	bf08      	it	eq
    6ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6aba:	6010      	str	r0, [r2, #0]
    6abc:	e92d 0009 	stmdb	sp!, {r0, r3}
    6ac0:	f04f 0028 	mov.w	r0, #40	; 0x28
    6ac4:	f380 8811 	msr	BASEPRI, r0
    6ac8:	f3bf 8f4f 	dsb	sy
    6acc:	f3bf 8f6f 	isb	sy
    6ad0:	f7fc fd22 	bl	3518 <vTaskSwitchContext>
    6ad4:	f04f 0000 	mov.w	r0, #0
    6ad8:	f380 8811 	msr	BASEPRI, r0
    6adc:	bc09      	pop	{r0, r3}
    6ade:	6819      	ldr	r1, [r3, #0]
    6ae0:	6808      	ldr	r0, [r1, #0]
    6ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ae6:	f01e 0f10 	tst.w	lr, #16
    6aea:	bf08      	it	eq
    6aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    6af0:	f380 8809 	msr	PSP, r0
    6af4:	f3bf 8f6f 	isb	sy
    6af8:	4770      	bx	lr
    6afa:	bf00      	nop
    6afc:	f3af 8000 	nop.w

00006b00 <pxCurrentTCBConst>:
    6b00:	100012b8 	.word	0x100012b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6b04:	bf00      	nop
    6b06:	bf00      	nop

00006b08 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6b08:	b480      	push	{r7}
    6b0a:	b083      	sub	sp, #12
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	6078      	str	r0, [r7, #4]
    6b10:	6039      	str	r1, [r7, #0]
  return 1;
    6b12:	2301      	movs	r3, #1
}
    6b14:	4618      	mov	r0, r3
    6b16:	370c      	adds	r7, #12
    6b18:	46bd      	mov	sp, r7
    6b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b1e:	4770      	bx	lr

00006b20 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6b20:	b480      	push	{r7}
    6b22:	b083      	sub	sp, #12
    6b24:	af00      	add	r7, sp, #0
    6b26:	6078      	str	r0, [r7, #4]
    6b28:	6039      	str	r1, [r7, #0]
  return 0;
    6b2a:	2300      	movs	r3, #0
}
    6b2c:	4618      	mov	r0, r3
    6b2e:	370c      	adds	r7, #12
    6b30:	46bd      	mov	sp, r7
    6b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b36:	4770      	bx	lr

00006b38 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6b38:	b480      	push	{r7}
    6b3a:	b083      	sub	sp, #12
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    6b40:	4a04      	ldr	r2, [pc, #16]	; (6b54 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	6013      	str	r3, [r2, #0]
}
    6b46:	bf00      	nop
    6b48:	370c      	adds	r7, #12
    6b4a:	46bd      	mov	sp, r7
    6b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b50:	4770      	bx	lr
    6b52:	bf00      	nop
    6b54:	10000c10 	.word	0x10000c10

00006b58 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    6b58:	b480      	push	{r7}
    6b5a:	b083      	sub	sp, #12
    6b5c:	af00      	add	r7, sp, #0
    6b5e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    6b60:	4a04      	ldr	r2, [pc, #16]	; (6b74 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    6b62:	687b      	ldr	r3, [r7, #4]
    6b64:	6013      	str	r3, [r2, #0]
}
    6b66:	bf00      	nop
    6b68:	370c      	adds	r7, #12
    6b6a:	46bd      	mov	sp, r7
    6b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b70:	4770      	bx	lr
    6b72:	bf00      	nop
    6b74:	10000c14 	.word	0x10000c14

00006b78 <__aeabi_atexit>:
    6b78:	460b      	mov	r3, r1
    6b7a:	4601      	mov	r1, r0
    6b7c:	4618      	mov	r0, r3
    6b7e:	f001 ba9d 	b.w	80bc <__cxa_atexit>

00006b82 <__cxa_pure_virtual>:
    6b82:	b508      	push	{r3, lr}
    6b84:	f000 f810 	bl	6ba8 <std::terminate()>

00006b88 <std::__throw_bad_function_call()>:
    6b88:	b508      	push	{r3, lr}
    6b8a:	f001 fa8f 	bl	80ac <abort>

00006b8e <__cxxabiv1::__terminate(void (*)())>:
    6b8e:	b508      	push	{r3, lr}
    6b90:	4780      	blx	r0
    6b92:	f001 fa8b 	bl	80ac <abort>
    6b96:	Address 0x0000000000006b96 is out of bounds.


00006b98 <std::get_terminate()>:
    6b98:	4b02      	ldr	r3, [pc, #8]	; (6ba4 <std::get_terminate()+0xc>)
    6b9a:	6818      	ldr	r0, [r3, #0]
    6b9c:	f3bf 8f5b 	dmb	ish
    6ba0:	4770      	bx	lr
    6ba2:	bf00      	nop
    6ba4:	10000c98 	.word	0x10000c98

00006ba8 <std::terminate()>:
    6ba8:	b508      	push	{r3, lr}
    6baa:	f7ff fff5 	bl	6b98 <std::get_terminate()>
    6bae:	f7ff ffee 	bl	6b8e <__cxxabiv1::__terminate(void (*)())>
    6bb2:	Address 0x0000000000006bb2 is out of bounds.


00006bb4 <__aeabi_d2f>:
    6bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6bbc:	bf24      	itt	cs
    6bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6bc6:	d90d      	bls.n	6be4 <__aeabi_d2f+0x30>
    6bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6bdc:	bf08      	it	eq
    6bde:	f020 0001 	biceq.w	r0, r0, #1
    6be2:	4770      	bx	lr
    6be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6be8:	d121      	bne.n	6c2e <__aeabi_d2f+0x7a>
    6bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6bee:	bfbc      	itt	lt
    6bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6bf4:	4770      	bxlt	lr
    6bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6bfe:	f1c2 0218 	rsb	r2, r2, #24
    6c02:	f1c2 0c20 	rsb	ip, r2, #32
    6c06:	fa10 f30c 	lsls.w	r3, r0, ip
    6c0a:	fa20 f002 	lsr.w	r0, r0, r2
    6c0e:	bf18      	it	ne
    6c10:	f040 0001 	orrne.w	r0, r0, #1
    6c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
    6c20:	ea40 000c 	orr.w	r0, r0, ip
    6c24:	fa23 f302 	lsr.w	r3, r3, r2
    6c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6c2c:	e7cc      	b.n	6bc8 <__aeabi_d2f+0x14>
    6c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6c32:	d107      	bne.n	6c44 <__aeabi_d2f+0x90>
    6c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6c38:	bf1e      	ittt	ne
    6c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6c42:	4770      	bxne	lr
    6c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    6c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6c50:	4770      	bx	lr
    6c52:	bf00      	nop

00006c54 <__aeabi_frsub>:
    6c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6c58:	e002      	b.n	6c60 <__addsf3>
    6c5a:	bf00      	nop

00006c5c <__aeabi_fsub>:
    6c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006c60 <__addsf3>:
    6c60:	0042      	lsls	r2, r0, #1
    6c62:	bf1f      	itttt	ne
    6c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    6c68:	ea92 0f03 	teqne	r2, r3
    6c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6c74:	d06a      	beq.n	6d4c <__addsf3+0xec>
    6c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
    6c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6c7e:	bfc1      	itttt	gt
    6c80:	18d2      	addgt	r2, r2, r3
    6c82:	4041      	eorgt	r1, r0
    6c84:	4048      	eorgt	r0, r1
    6c86:	4041      	eorgt	r1, r0
    6c88:	bfb8      	it	lt
    6c8a:	425b      	neglt	r3, r3
    6c8c:	2b19      	cmp	r3, #25
    6c8e:	bf88      	it	hi
    6c90:	4770      	bxhi	lr
    6c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6c9e:	bf18      	it	ne
    6ca0:	4240      	negne	r0, r0
    6ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6cae:	bf18      	it	ne
    6cb0:	4249      	negne	r1, r1
    6cb2:	ea92 0f03 	teq	r2, r3
    6cb6:	d03f      	beq.n	6d38 <__addsf3+0xd8>
    6cb8:	f1a2 0201 	sub.w	r2, r2, #1
    6cbc:	fa41 fc03 	asr.w	ip, r1, r3
    6cc0:	eb10 000c 	adds.w	r0, r0, ip
    6cc4:	f1c3 0320 	rsb	r3, r3, #32
    6cc8:	fa01 f103 	lsl.w	r1, r1, r3
    6ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6cd0:	d502      	bpl.n	6cd8 <__addsf3+0x78>
    6cd2:	4249      	negs	r1, r1
    6cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6cdc:	d313      	bcc.n	6d06 <__addsf3+0xa6>
    6cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6ce2:	d306      	bcc.n	6cf2 <__addsf3+0x92>
    6ce4:	0840      	lsrs	r0, r0, #1
    6ce6:	ea4f 0131 	mov.w	r1, r1, rrx
    6cea:	f102 0201 	add.w	r2, r2, #1
    6cee:	2afe      	cmp	r2, #254	; 0xfe
    6cf0:	d251      	bcs.n	6d96 <__addsf3+0x136>
    6cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6cfa:	bf08      	it	eq
    6cfc:	f020 0001 	biceq.w	r0, r0, #1
    6d00:	ea40 0003 	orr.w	r0, r0, r3
    6d04:	4770      	bx	lr
    6d06:	0049      	lsls	r1, r1, #1
    6d08:	eb40 0000 	adc.w	r0, r0, r0
    6d0c:	3a01      	subs	r2, #1
    6d0e:	bf28      	it	cs
    6d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    6d14:	d2ed      	bcs.n	6cf2 <__addsf3+0x92>
    6d16:	fab0 fc80 	clz	ip, r0
    6d1a:	f1ac 0c08 	sub.w	ip, ip, #8
    6d1e:	ebb2 020c 	subs.w	r2, r2, ip
    6d22:	fa00 f00c 	lsl.w	r0, r0, ip
    6d26:	bfaa      	itet	ge
    6d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6d2c:	4252      	neglt	r2, r2
    6d2e:	4318      	orrge	r0, r3
    6d30:	bfbc      	itt	lt
    6d32:	40d0      	lsrlt	r0, r2
    6d34:	4318      	orrlt	r0, r3
    6d36:	4770      	bx	lr
    6d38:	f092 0f00 	teq	r2, #0
    6d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6d40:	bf06      	itte	eq
    6d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6d46:	3201      	addeq	r2, #1
    6d48:	3b01      	subne	r3, #1
    6d4a:	e7b5      	b.n	6cb8 <__addsf3+0x58>
    6d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6d54:	bf18      	it	ne
    6d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6d5a:	d021      	beq.n	6da0 <__addsf3+0x140>
    6d5c:	ea92 0f03 	teq	r2, r3
    6d60:	d004      	beq.n	6d6c <__addsf3+0x10c>
    6d62:	f092 0f00 	teq	r2, #0
    6d66:	bf08      	it	eq
    6d68:	4608      	moveq	r0, r1
    6d6a:	4770      	bx	lr
    6d6c:	ea90 0f01 	teq	r0, r1
    6d70:	bf1c      	itt	ne
    6d72:	2000      	movne	r0, #0
    6d74:	4770      	bxne	lr
    6d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6d7a:	d104      	bne.n	6d86 <__addsf3+0x126>
    6d7c:	0040      	lsls	r0, r0, #1
    6d7e:	bf28      	it	cs
    6d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6d84:	4770      	bx	lr
    6d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6d8a:	bf3c      	itt	cc
    6d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6d90:	4770      	bxcc	lr
    6d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6d9e:	4770      	bx	lr
    6da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6da4:	bf16      	itet	ne
    6da6:	4608      	movne	r0, r1
    6da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6dac:	4601      	movne	r1, r0
    6dae:	0242      	lsls	r2, r0, #9
    6db0:	bf06      	itte	eq
    6db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6db6:	ea90 0f01 	teqeq	r0, r1
    6dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6dbe:	4770      	bx	lr

00006dc0 <__aeabi_ui2f>:
    6dc0:	f04f 0300 	mov.w	r3, #0
    6dc4:	e004      	b.n	6dd0 <__aeabi_i2f+0x8>
    6dc6:	bf00      	nop

00006dc8 <__aeabi_i2f>:
    6dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6dcc:	bf48      	it	mi
    6dce:	4240      	negmi	r0, r0
    6dd0:	ea5f 0c00 	movs.w	ip, r0
    6dd4:	bf08      	it	eq
    6dd6:	4770      	bxeq	lr
    6dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6ddc:	4601      	mov	r1, r0
    6dde:	f04f 0000 	mov.w	r0, #0
    6de2:	e01c      	b.n	6e1e <__aeabi_l2f+0x2a>

00006de4 <__aeabi_ul2f>:
    6de4:	ea50 0201 	orrs.w	r2, r0, r1
    6de8:	bf08      	it	eq
    6dea:	4770      	bxeq	lr
    6dec:	f04f 0300 	mov.w	r3, #0
    6df0:	e00a      	b.n	6e08 <__aeabi_l2f+0x14>
    6df2:	bf00      	nop

00006df4 <__aeabi_l2f>:
    6df4:	ea50 0201 	orrs.w	r2, r0, r1
    6df8:	bf08      	it	eq
    6dfa:	4770      	bxeq	lr
    6dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6e00:	d502      	bpl.n	6e08 <__aeabi_l2f+0x14>
    6e02:	4240      	negs	r0, r0
    6e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6e08:	ea5f 0c01 	movs.w	ip, r1
    6e0c:	bf02      	ittt	eq
    6e0e:	4684      	moveq	ip, r0
    6e10:	4601      	moveq	r1, r0
    6e12:	2000      	moveq	r0, #0
    6e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6e18:	bf08      	it	eq
    6e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6e22:	fabc f28c 	clz	r2, ip
    6e26:	3a08      	subs	r2, #8
    6e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6e2c:	db10      	blt.n	6e50 <__aeabi_l2f+0x5c>
    6e2e:	fa01 fc02 	lsl.w	ip, r1, r2
    6e32:	4463      	add	r3, ip
    6e34:	fa00 fc02 	lsl.w	ip, r0, r2
    6e38:	f1c2 0220 	rsb	r2, r2, #32
    6e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6e40:	fa20 f202 	lsr.w	r2, r0, r2
    6e44:	eb43 0002 	adc.w	r0, r3, r2
    6e48:	bf08      	it	eq
    6e4a:	f020 0001 	biceq.w	r0, r0, #1
    6e4e:	4770      	bx	lr
    6e50:	f102 0220 	add.w	r2, r2, #32
    6e54:	fa01 fc02 	lsl.w	ip, r1, r2
    6e58:	f1c2 0220 	rsb	r2, r2, #32
    6e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6e60:	fa21 f202 	lsr.w	r2, r1, r2
    6e64:	eb43 0002 	adc.w	r0, r3, r2
    6e68:	bf08      	it	eq
    6e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6e6e:	4770      	bx	lr

00006e70 <__aeabi_ldivmod>:
    6e70:	b97b      	cbnz	r3, 6e92 <__aeabi_ldivmod+0x22>
    6e72:	b972      	cbnz	r2, 6e92 <__aeabi_ldivmod+0x22>
    6e74:	2900      	cmp	r1, #0
    6e76:	bfbe      	ittt	lt
    6e78:	2000      	movlt	r0, #0
    6e7a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    6e7e:	e006      	blt.n	6e8e <__aeabi_ldivmod+0x1e>
    6e80:	bf08      	it	eq
    6e82:	2800      	cmpeq	r0, #0
    6e84:	bf1c      	itt	ne
    6e86:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    6e8a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6e8e:	f001 b90b 	b.w	80a8 <__aeabi_idiv0>
    6e92:	f1ad 0c08 	sub.w	ip, sp, #8
    6e96:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6e9a:	2900      	cmp	r1, #0
    6e9c:	db09      	blt.n	6eb2 <__aeabi_ldivmod+0x42>
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	db1a      	blt.n	6ed8 <__aeabi_ldivmod+0x68>
    6ea2:	f000 f84d 	bl	6f40 <__udivmoddi4>
    6ea6:	f8dd e004 	ldr.w	lr, [sp, #4]
    6eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6eae:	b004      	add	sp, #16
    6eb0:	4770      	bx	lr
    6eb2:	4240      	negs	r0, r0
    6eb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6eb8:	2b00      	cmp	r3, #0
    6eba:	db1b      	blt.n	6ef4 <__aeabi_ldivmod+0x84>
    6ebc:	f000 f840 	bl	6f40 <__udivmoddi4>
    6ec0:	f8dd e004 	ldr.w	lr, [sp, #4]
    6ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6ec8:	b004      	add	sp, #16
    6eca:	4240      	negs	r0, r0
    6ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6ed0:	4252      	negs	r2, r2
    6ed2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6ed6:	4770      	bx	lr
    6ed8:	4252      	negs	r2, r2
    6eda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6ede:	f000 f82f 	bl	6f40 <__udivmoddi4>
    6ee2:	f8dd e004 	ldr.w	lr, [sp, #4]
    6ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6eea:	b004      	add	sp, #16
    6eec:	4240      	negs	r0, r0
    6eee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6ef2:	4770      	bx	lr
    6ef4:	4252      	negs	r2, r2
    6ef6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6efa:	f000 f821 	bl	6f40 <__udivmoddi4>
    6efe:	f8dd e004 	ldr.w	lr, [sp, #4]
    6f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f06:	b004      	add	sp, #16
    6f08:	4252      	negs	r2, r2
    6f0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6f0e:	4770      	bx	lr

00006f10 <__aeabi_uldivmod>:
    6f10:	b953      	cbnz	r3, 6f28 <__aeabi_uldivmod+0x18>
    6f12:	b94a      	cbnz	r2, 6f28 <__aeabi_uldivmod+0x18>
    6f14:	2900      	cmp	r1, #0
    6f16:	bf08      	it	eq
    6f18:	2800      	cmpeq	r0, #0
    6f1a:	bf1c      	itt	ne
    6f1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6f20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6f24:	f001 b8c0 	b.w	80a8 <__aeabi_idiv0>
    6f28:	f1ad 0c08 	sub.w	ip, sp, #8
    6f2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6f30:	f000 f806 	bl	6f40 <__udivmoddi4>
    6f34:	f8dd e004 	ldr.w	lr, [sp, #4]
    6f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f3c:	b004      	add	sp, #16
    6f3e:	4770      	bx	lr

00006f40 <__udivmoddi4>:
    6f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f44:	9d08      	ldr	r5, [sp, #32]
    6f46:	4604      	mov	r4, r0
    6f48:	468c      	mov	ip, r1
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	f040 8083 	bne.w	7056 <__udivmoddi4+0x116>
    6f50:	428a      	cmp	r2, r1
    6f52:	4617      	mov	r7, r2
    6f54:	d947      	bls.n	6fe6 <__udivmoddi4+0xa6>
    6f56:	fab2 f282 	clz	r2, r2
    6f5a:	b142      	cbz	r2, 6f6e <__udivmoddi4+0x2e>
    6f5c:	f1c2 0020 	rsb	r0, r2, #32
    6f60:	fa24 f000 	lsr.w	r0, r4, r0
    6f64:	4091      	lsls	r1, r2
    6f66:	4097      	lsls	r7, r2
    6f68:	ea40 0c01 	orr.w	ip, r0, r1
    6f6c:	4094      	lsls	r4, r2
    6f6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    6f72:	0c23      	lsrs	r3, r4, #16
    6f74:	fbbc f6f8 	udiv	r6, ip, r8
    6f78:	fa1f fe87 	uxth.w	lr, r7
    6f7c:	fb08 c116 	mls	r1, r8, r6, ip
    6f80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6f84:	fb06 f10e 	mul.w	r1, r6, lr
    6f88:	4299      	cmp	r1, r3
    6f8a:	d909      	bls.n	6fa0 <__udivmoddi4+0x60>
    6f8c:	18fb      	adds	r3, r7, r3
    6f8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    6f92:	f080 8119 	bcs.w	71c8 <__udivmoddi4+0x288>
    6f96:	4299      	cmp	r1, r3
    6f98:	f240 8116 	bls.w	71c8 <__udivmoddi4+0x288>
    6f9c:	3e02      	subs	r6, #2
    6f9e:	443b      	add	r3, r7
    6fa0:	1a5b      	subs	r3, r3, r1
    6fa2:	b2a4      	uxth	r4, r4
    6fa4:	fbb3 f0f8 	udiv	r0, r3, r8
    6fa8:	fb08 3310 	mls	r3, r8, r0, r3
    6fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6fb0:	fb00 fe0e 	mul.w	lr, r0, lr
    6fb4:	45a6      	cmp	lr, r4
    6fb6:	d909      	bls.n	6fcc <__udivmoddi4+0x8c>
    6fb8:	193c      	adds	r4, r7, r4
    6fba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6fbe:	f080 8105 	bcs.w	71cc <__udivmoddi4+0x28c>
    6fc2:	45a6      	cmp	lr, r4
    6fc4:	f240 8102 	bls.w	71cc <__udivmoddi4+0x28c>
    6fc8:	3802      	subs	r0, #2
    6fca:	443c      	add	r4, r7
    6fcc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6fd0:	eba4 040e 	sub.w	r4, r4, lr
    6fd4:	2600      	movs	r6, #0
    6fd6:	b11d      	cbz	r5, 6fe0 <__udivmoddi4+0xa0>
    6fd8:	40d4      	lsrs	r4, r2
    6fda:	2300      	movs	r3, #0
    6fdc:	e9c5 4300 	strd	r4, r3, [r5]
    6fe0:	4631      	mov	r1, r6
    6fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fe6:	b902      	cbnz	r2, 6fea <__udivmoddi4+0xaa>
    6fe8:	deff      	udf	#255	; 0xff
    6fea:	fab2 f282 	clz	r2, r2
    6fee:	2a00      	cmp	r2, #0
    6ff0:	d150      	bne.n	7094 <__udivmoddi4+0x154>
    6ff2:	1bcb      	subs	r3, r1, r7
    6ff4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6ff8:	fa1f f887 	uxth.w	r8, r7
    6ffc:	2601      	movs	r6, #1
    6ffe:	fbb3 fcfe 	udiv	ip, r3, lr
    7002:	0c21      	lsrs	r1, r4, #16
    7004:	fb0e 331c 	mls	r3, lr, ip, r3
    7008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    700c:	fb08 f30c 	mul.w	r3, r8, ip
    7010:	428b      	cmp	r3, r1
    7012:	d907      	bls.n	7024 <__udivmoddi4+0xe4>
    7014:	1879      	adds	r1, r7, r1
    7016:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    701a:	d202      	bcs.n	7022 <__udivmoddi4+0xe2>
    701c:	428b      	cmp	r3, r1
    701e:	f200 80e9 	bhi.w	71f4 <__udivmoddi4+0x2b4>
    7022:	4684      	mov	ip, r0
    7024:	1ac9      	subs	r1, r1, r3
    7026:	b2a3      	uxth	r3, r4
    7028:	fbb1 f0fe 	udiv	r0, r1, lr
    702c:	fb0e 1110 	mls	r1, lr, r0, r1
    7030:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    7034:	fb08 f800 	mul.w	r8, r8, r0
    7038:	45a0      	cmp	r8, r4
    703a:	d907      	bls.n	704c <__udivmoddi4+0x10c>
    703c:	193c      	adds	r4, r7, r4
    703e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7042:	d202      	bcs.n	704a <__udivmoddi4+0x10a>
    7044:	45a0      	cmp	r8, r4
    7046:	f200 80d9 	bhi.w	71fc <__udivmoddi4+0x2bc>
    704a:	4618      	mov	r0, r3
    704c:	eba4 0408 	sub.w	r4, r4, r8
    7050:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    7054:	e7bf      	b.n	6fd6 <__udivmoddi4+0x96>
    7056:	428b      	cmp	r3, r1
    7058:	d909      	bls.n	706e <__udivmoddi4+0x12e>
    705a:	2d00      	cmp	r5, #0
    705c:	f000 80b1 	beq.w	71c2 <__udivmoddi4+0x282>
    7060:	2600      	movs	r6, #0
    7062:	e9c5 0100 	strd	r0, r1, [r5]
    7066:	4630      	mov	r0, r6
    7068:	4631      	mov	r1, r6
    706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    706e:	fab3 f683 	clz	r6, r3
    7072:	2e00      	cmp	r6, #0
    7074:	d14a      	bne.n	710c <__udivmoddi4+0x1cc>
    7076:	428b      	cmp	r3, r1
    7078:	d302      	bcc.n	7080 <__udivmoddi4+0x140>
    707a:	4282      	cmp	r2, r0
    707c:	f200 80b8 	bhi.w	71f0 <__udivmoddi4+0x2b0>
    7080:	1a84      	subs	r4, r0, r2
    7082:	eb61 0103 	sbc.w	r1, r1, r3
    7086:	2001      	movs	r0, #1
    7088:	468c      	mov	ip, r1
    708a:	2d00      	cmp	r5, #0
    708c:	d0a8      	beq.n	6fe0 <__udivmoddi4+0xa0>
    708e:	e9c5 4c00 	strd	r4, ip, [r5]
    7092:	e7a5      	b.n	6fe0 <__udivmoddi4+0xa0>
    7094:	f1c2 0320 	rsb	r3, r2, #32
    7098:	fa20 f603 	lsr.w	r6, r0, r3
    709c:	4097      	lsls	r7, r2
    709e:	fa01 f002 	lsl.w	r0, r1, r2
    70a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    70a6:	40d9      	lsrs	r1, r3
    70a8:	4330      	orrs	r0, r6
    70aa:	0c03      	lsrs	r3, r0, #16
    70ac:	fbb1 f6fe 	udiv	r6, r1, lr
    70b0:	fa1f f887 	uxth.w	r8, r7
    70b4:	fb0e 1116 	mls	r1, lr, r6, r1
    70b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    70bc:	fb06 f108 	mul.w	r1, r6, r8
    70c0:	4299      	cmp	r1, r3
    70c2:	fa04 f402 	lsl.w	r4, r4, r2
    70c6:	d909      	bls.n	70dc <__udivmoddi4+0x19c>
    70c8:	18fb      	adds	r3, r7, r3
    70ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    70ce:	f080 808d 	bcs.w	71ec <__udivmoddi4+0x2ac>
    70d2:	4299      	cmp	r1, r3
    70d4:	f240 808a 	bls.w	71ec <__udivmoddi4+0x2ac>
    70d8:	3e02      	subs	r6, #2
    70da:	443b      	add	r3, r7
    70dc:	1a5b      	subs	r3, r3, r1
    70de:	b281      	uxth	r1, r0
    70e0:	fbb3 f0fe 	udiv	r0, r3, lr
    70e4:	fb0e 3310 	mls	r3, lr, r0, r3
    70e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    70ec:	fb00 f308 	mul.w	r3, r0, r8
    70f0:	428b      	cmp	r3, r1
    70f2:	d907      	bls.n	7104 <__udivmoddi4+0x1c4>
    70f4:	1879      	adds	r1, r7, r1
    70f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    70fa:	d273      	bcs.n	71e4 <__udivmoddi4+0x2a4>
    70fc:	428b      	cmp	r3, r1
    70fe:	d971      	bls.n	71e4 <__udivmoddi4+0x2a4>
    7100:	3802      	subs	r0, #2
    7102:	4439      	add	r1, r7
    7104:	1acb      	subs	r3, r1, r3
    7106:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    710a:	e778      	b.n	6ffe <__udivmoddi4+0xbe>
    710c:	f1c6 0c20 	rsb	ip, r6, #32
    7110:	fa03 f406 	lsl.w	r4, r3, r6
    7114:	fa22 f30c 	lsr.w	r3, r2, ip
    7118:	431c      	orrs	r4, r3
    711a:	fa20 f70c 	lsr.w	r7, r0, ip
    711e:	fa01 f306 	lsl.w	r3, r1, r6
    7122:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    7126:	fa21 f10c 	lsr.w	r1, r1, ip
    712a:	431f      	orrs	r7, r3
    712c:	0c3b      	lsrs	r3, r7, #16
    712e:	fbb1 f9fe 	udiv	r9, r1, lr
    7132:	fa1f f884 	uxth.w	r8, r4
    7136:	fb0e 1119 	mls	r1, lr, r9, r1
    713a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    713e:	fb09 fa08 	mul.w	sl, r9, r8
    7142:	458a      	cmp	sl, r1
    7144:	fa02 f206 	lsl.w	r2, r2, r6
    7148:	fa00 f306 	lsl.w	r3, r0, r6
    714c:	d908      	bls.n	7160 <__udivmoddi4+0x220>
    714e:	1861      	adds	r1, r4, r1
    7150:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    7154:	d248      	bcs.n	71e8 <__udivmoddi4+0x2a8>
    7156:	458a      	cmp	sl, r1
    7158:	d946      	bls.n	71e8 <__udivmoddi4+0x2a8>
    715a:	f1a9 0902 	sub.w	r9, r9, #2
    715e:	4421      	add	r1, r4
    7160:	eba1 010a 	sub.w	r1, r1, sl
    7164:	b2bf      	uxth	r7, r7
    7166:	fbb1 f0fe 	udiv	r0, r1, lr
    716a:	fb0e 1110 	mls	r1, lr, r0, r1
    716e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    7172:	fb00 f808 	mul.w	r8, r0, r8
    7176:	45b8      	cmp	r8, r7
    7178:	d907      	bls.n	718a <__udivmoddi4+0x24a>
    717a:	19e7      	adds	r7, r4, r7
    717c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    7180:	d22e      	bcs.n	71e0 <__udivmoddi4+0x2a0>
    7182:	45b8      	cmp	r8, r7
    7184:	d92c      	bls.n	71e0 <__udivmoddi4+0x2a0>
    7186:	3802      	subs	r0, #2
    7188:	4427      	add	r7, r4
    718a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    718e:	eba7 0708 	sub.w	r7, r7, r8
    7192:	fba0 8902 	umull	r8, r9, r0, r2
    7196:	454f      	cmp	r7, r9
    7198:	46c6      	mov	lr, r8
    719a:	4649      	mov	r1, r9
    719c:	d31a      	bcc.n	71d4 <__udivmoddi4+0x294>
    719e:	d017      	beq.n	71d0 <__udivmoddi4+0x290>
    71a0:	b15d      	cbz	r5, 71ba <__udivmoddi4+0x27a>
    71a2:	ebb3 020e 	subs.w	r2, r3, lr
    71a6:	eb67 0701 	sbc.w	r7, r7, r1
    71aa:	fa07 fc0c 	lsl.w	ip, r7, ip
    71ae:	40f2      	lsrs	r2, r6
    71b0:	ea4c 0202 	orr.w	r2, ip, r2
    71b4:	40f7      	lsrs	r7, r6
    71b6:	e9c5 2700 	strd	r2, r7, [r5]
    71ba:	2600      	movs	r6, #0
    71bc:	4631      	mov	r1, r6
    71be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71c2:	462e      	mov	r6, r5
    71c4:	4628      	mov	r0, r5
    71c6:	e70b      	b.n	6fe0 <__udivmoddi4+0xa0>
    71c8:	4606      	mov	r6, r0
    71ca:	e6e9      	b.n	6fa0 <__udivmoddi4+0x60>
    71cc:	4618      	mov	r0, r3
    71ce:	e6fd      	b.n	6fcc <__udivmoddi4+0x8c>
    71d0:	4543      	cmp	r3, r8
    71d2:	d2e5      	bcs.n	71a0 <__udivmoddi4+0x260>
    71d4:	ebb8 0e02 	subs.w	lr, r8, r2
    71d8:	eb69 0104 	sbc.w	r1, r9, r4
    71dc:	3801      	subs	r0, #1
    71de:	e7df      	b.n	71a0 <__udivmoddi4+0x260>
    71e0:	4608      	mov	r0, r1
    71e2:	e7d2      	b.n	718a <__udivmoddi4+0x24a>
    71e4:	4660      	mov	r0, ip
    71e6:	e78d      	b.n	7104 <__udivmoddi4+0x1c4>
    71e8:	4681      	mov	r9, r0
    71ea:	e7b9      	b.n	7160 <__udivmoddi4+0x220>
    71ec:	4666      	mov	r6, ip
    71ee:	e775      	b.n	70dc <__udivmoddi4+0x19c>
    71f0:	4630      	mov	r0, r6
    71f2:	e74a      	b.n	708a <__udivmoddi4+0x14a>
    71f4:	f1ac 0c02 	sub.w	ip, ip, #2
    71f8:	4439      	add	r1, r7
    71fa:	e713      	b.n	7024 <__udivmoddi4+0xe4>
    71fc:	3802      	subs	r0, #2
    71fe:	443c      	add	r4, r7
    7200:	e724      	b.n	704c <__udivmoddi4+0x10c>
    7202:	bf00      	nop

00007204 <selfrel_offset31>:
    7204:	6803      	ldr	r3, [r0, #0]
    7206:	005a      	lsls	r2, r3, #1
    7208:	bf4c      	ite	mi
    720a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    720e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    7212:	4418      	add	r0, r3
    7214:	4770      	bx	lr
    7216:	bf00      	nop

00007218 <search_EIT_table>:
    7218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    721c:	b329      	cbz	r1, 726a <search_EIT_table+0x52>
    721e:	1e4f      	subs	r7, r1, #1
    7220:	4604      	mov	r4, r0
    7222:	4615      	mov	r5, r2
    7224:	463e      	mov	r6, r7
    7226:	f04f 0800 	mov.w	r8, #0
    722a:	eb08 0106 	add.w	r1, r8, r6
    722e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    7232:	1049      	asrs	r1, r1, #1
    7234:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    7238:	4648      	mov	r0, r9
    723a:	f7ff ffe3 	bl	7204 <selfrel_offset31>
    723e:	4603      	mov	r3, r0
    7240:	00c8      	lsls	r0, r1, #3
    7242:	3008      	adds	r0, #8
    7244:	428f      	cmp	r7, r1
    7246:	4420      	add	r0, r4
    7248:	d009      	beq.n	725e <search_EIT_table+0x46>
    724a:	42ab      	cmp	r3, r5
    724c:	d809      	bhi.n	7262 <search_EIT_table+0x4a>
    724e:	f7ff ffd9 	bl	7204 <selfrel_offset31>
    7252:	3801      	subs	r0, #1
    7254:	42a8      	cmp	r0, r5
    7256:	d20a      	bcs.n	726e <search_EIT_table+0x56>
    7258:	f101 0801 	add.w	r8, r1, #1
    725c:	e7e5      	b.n	722a <search_EIT_table+0x12>
    725e:	42ab      	cmp	r3, r5
    7260:	d905      	bls.n	726e <search_EIT_table+0x56>
    7262:	4588      	cmp	r8, r1
    7264:	d001      	beq.n	726a <search_EIT_table+0x52>
    7266:	1e4e      	subs	r6, r1, #1
    7268:	e7df      	b.n	722a <search_EIT_table+0x12>
    726a:	f04f 0900 	mov.w	r9, #0
    726e:	4648      	mov	r0, r9
    7270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007274 <__gnu_unwind_get_pr_addr>:
    7274:	2801      	cmp	r0, #1
    7276:	d007      	beq.n	7288 <__gnu_unwind_get_pr_addr+0x14>
    7278:	2802      	cmp	r0, #2
    727a:	d007      	beq.n	728c <__gnu_unwind_get_pr_addr+0x18>
    727c:	4b04      	ldr	r3, [pc, #16]	; (7290 <__gnu_unwind_get_pr_addr+0x1c>)
    727e:	2800      	cmp	r0, #0
    7280:	bf0c      	ite	eq
    7282:	4618      	moveq	r0, r3
    7284:	2000      	movne	r0, #0
    7286:	4770      	bx	lr
    7288:	4802      	ldr	r0, [pc, #8]	; (7294 <__gnu_unwind_get_pr_addr+0x20>)
    728a:	4770      	bx	lr
    728c:	4802      	ldr	r0, [pc, #8]	; (7298 <__gnu_unwind_get_pr_addr+0x24>)
    728e:	4770      	bx	lr
    7290:	00007939 	.word	0x00007939
    7294:	0000793d 	.word	0x0000793d
    7298:	00007941 	.word	0x00007941

0000729c <get_eit_entry>:
    729c:	b530      	push	{r4, r5, lr}
    729e:	4b23      	ldr	r3, [pc, #140]	; (732c <get_eit_entry+0x90>)
    72a0:	b083      	sub	sp, #12
    72a2:	4604      	mov	r4, r0
    72a4:	1e8d      	subs	r5, r1, #2
    72a6:	b33b      	cbz	r3, 72f8 <get_eit_entry+0x5c>
    72a8:	a901      	add	r1, sp, #4
    72aa:	4628      	mov	r0, r5
    72ac:	f3af 8000 	nop.w
    72b0:	b1e8      	cbz	r0, 72ee <get_eit_entry+0x52>
    72b2:	9901      	ldr	r1, [sp, #4]
    72b4:	462a      	mov	r2, r5
    72b6:	f7ff ffaf 	bl	7218 <search_EIT_table>
    72ba:	4601      	mov	r1, r0
    72bc:	b1b8      	cbz	r0, 72ee <get_eit_entry+0x52>
    72be:	f7ff ffa1 	bl	7204 <selfrel_offset31>
    72c2:	684b      	ldr	r3, [r1, #4]
    72c4:	64a0      	str	r0, [r4, #72]	; 0x48
    72c6:	2b01      	cmp	r3, #1
    72c8:	d02b      	beq.n	7322 <get_eit_entry+0x86>
    72ca:	2b00      	cmp	r3, #0
    72cc:	f101 0004 	add.w	r0, r1, #4
    72d0:	db23      	blt.n	731a <get_eit_entry+0x7e>
    72d2:	f7ff ff97 	bl	7204 <selfrel_offset31>
    72d6:	2300      	movs	r3, #0
    72d8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    72dc:	6803      	ldr	r3, [r0, #0]
    72de:	2b00      	cmp	r3, #0
    72e0:	db10      	blt.n	7304 <get_eit_entry+0x68>
    72e2:	f7ff ff8f 	bl	7204 <selfrel_offset31>
    72e6:	6120      	str	r0, [r4, #16]
    72e8:	2000      	movs	r0, #0
    72ea:	b003      	add	sp, #12
    72ec:	bd30      	pop	{r4, r5, pc}
    72ee:	2300      	movs	r3, #0
    72f0:	2009      	movs	r0, #9
    72f2:	6123      	str	r3, [r4, #16]
    72f4:	b003      	add	sp, #12
    72f6:	bd30      	pop	{r4, r5, pc}
    72f8:	490d      	ldr	r1, [pc, #52]	; (7330 <get_eit_entry+0x94>)
    72fa:	480e      	ldr	r0, [pc, #56]	; (7334 <get_eit_entry+0x98>)
    72fc:	1a09      	subs	r1, r1, r0
    72fe:	10c9      	asrs	r1, r1, #3
    7300:	9101      	str	r1, [sp, #4]
    7302:	e7d7      	b.n	72b4 <get_eit_entry+0x18>
    7304:	f3c3 6003 	ubfx	r0, r3, #24, #4
    7308:	f7ff ffb4 	bl	7274 <__gnu_unwind_get_pr_addr>
    730c:	2800      	cmp	r0, #0
    730e:	6120      	str	r0, [r4, #16]
    7310:	bf14      	ite	ne
    7312:	2000      	movne	r0, #0
    7314:	2009      	moveq	r0, #9
    7316:	b003      	add	sp, #12
    7318:	bd30      	pop	{r4, r5, pc}
    731a:	2301      	movs	r3, #1
    731c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7320:	e7dc      	b.n	72dc <get_eit_entry+0x40>
    7322:	2300      	movs	r3, #0
    7324:	6123      	str	r3, [r4, #16]
    7326:	2005      	movs	r0, #5
    7328:	e7df      	b.n	72ea <get_eit_entry+0x4e>
    732a:	bf00      	nop
    732c:	00000000 	.word	0x00000000
    7330:	00009884 	.word	0x00009884
    7334:	000097cc 	.word	0x000097cc

00007338 <restore_non_core_regs>:
    7338:	6803      	ldr	r3, [r0, #0]
    733a:	07da      	lsls	r2, r3, #31
    733c:	b510      	push	{r4, lr}
    733e:	4604      	mov	r4, r0
    7340:	d406      	bmi.n	7350 <restore_non_core_regs+0x18>
    7342:	079b      	lsls	r3, r3, #30
    7344:	f100 0048 	add.w	r0, r0, #72	; 0x48
    7348:	d509      	bpl.n	735e <restore_non_core_regs+0x26>
    734a:	f000 fc4b 	bl	7be4 <__gnu_Unwind_Restore_VFP_D>
    734e:	6823      	ldr	r3, [r4, #0]
    7350:	0759      	lsls	r1, r3, #29
    7352:	d509      	bpl.n	7368 <restore_non_core_regs+0x30>
    7354:	071a      	lsls	r2, r3, #28
    7356:	d50e      	bpl.n	7376 <restore_non_core_regs+0x3e>
    7358:	06db      	lsls	r3, r3, #27
    735a:	d513      	bpl.n	7384 <restore_non_core_regs+0x4c>
    735c:	bd10      	pop	{r4, pc}
    735e:	f000 fc39 	bl	7bd4 <__gnu_Unwind_Restore_VFP>
    7362:	6823      	ldr	r3, [r4, #0]
    7364:	0759      	lsls	r1, r3, #29
    7366:	d4f5      	bmi.n	7354 <restore_non_core_regs+0x1c>
    7368:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    736c:	f000 fc42 	bl	7bf4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7370:	6823      	ldr	r3, [r4, #0]
    7372:	071a      	lsls	r2, r3, #28
    7374:	d4f0      	bmi.n	7358 <restore_non_core_regs+0x20>
    7376:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    737a:	f000 fc43 	bl	7c04 <__gnu_Unwind_Restore_WMMXD>
    737e:	6823      	ldr	r3, [r4, #0]
    7380:	06db      	lsls	r3, r3, #27
    7382:	d4eb      	bmi.n	735c <restore_non_core_regs+0x24>
    7384:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    7388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    738c:	f000 bc7e 	b.w	7c8c <__gnu_Unwind_Restore_WMMXC>

00007390 <_Unwind_decode_typeinfo_ptr.isra.0>:
    7390:	4603      	mov	r3, r0
    7392:	6800      	ldr	r0, [r0, #0]
    7394:	b100      	cbz	r0, 7398 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    7396:	4418      	add	r0, r3
    7398:	4770      	bx	lr
    739a:	bf00      	nop

0000739c <__gnu_unwind_24bit.isra.0>:
    739c:	2009      	movs	r0, #9
    739e:	4770      	bx	lr

000073a0 <_Unwind_DebugHook>:
    73a0:	4770      	bx	lr
    73a2:	bf00      	nop

000073a4 <unwind_phase2>:
    73a4:	b570      	push	{r4, r5, r6, lr}
    73a6:	4604      	mov	r4, r0
    73a8:	460e      	mov	r6, r1
    73aa:	6c31      	ldr	r1, [r6, #64]	; 0x40
    73ac:	4620      	mov	r0, r4
    73ae:	f7ff ff75 	bl	729c <get_eit_entry>
    73b2:	4605      	mov	r5, r0
    73b4:	b988      	cbnz	r0, 73da <unwind_phase2+0x36>
    73b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    73b8:	6163      	str	r3, [r4, #20]
    73ba:	4632      	mov	r2, r6
    73bc:	6923      	ldr	r3, [r4, #16]
    73be:	4621      	mov	r1, r4
    73c0:	2001      	movs	r0, #1
    73c2:	4798      	blx	r3
    73c4:	2808      	cmp	r0, #8
    73c6:	d0f0      	beq.n	73aa <unwind_phase2+0x6>
    73c8:	2807      	cmp	r0, #7
    73ca:	d106      	bne.n	73da <unwind_phase2+0x36>
    73cc:	4628      	mov	r0, r5
    73ce:	6c31      	ldr	r1, [r6, #64]	; 0x40
    73d0:	f7ff ffe6 	bl	73a0 <_Unwind_DebugHook>
    73d4:	1d30      	adds	r0, r6, #4
    73d6:	f000 fbf1 	bl	7bbc <__restore_core_regs>
    73da:	f000 fe67 	bl	80ac <abort>
    73de:	bf00      	nop

000073e0 <unwind_phase2_forced>:
    73e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73e4:	1d0d      	adds	r5, r1, #4
    73e6:	4606      	mov	r6, r0
    73e8:	4614      	mov	r4, r2
    73ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    73ec:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    73f0:	f10d 0c0c 	add.w	ip, sp, #12
    73f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    73f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    73fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    73fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7404:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7408:	ad02      	add	r5, sp, #8
    740a:	68f7      	ldr	r7, [r6, #12]
    740c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    7410:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    7414:	2300      	movs	r3, #0
    7416:	602b      	str	r3, [r5, #0]
    7418:	e021      	b.n	745e <unwind_phase2_forced+0x7e>
    741a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    741c:	6173      	str	r3, [r6, #20]
    741e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7422:	4629      	mov	r1, r5
    7424:	a87a      	add	r0, sp, #488	; 0x1e8
    7426:	f000 fe7b 	bl	8120 <memcpy>
    742a:	6933      	ldr	r3, [r6, #16]
    742c:	aa7a      	add	r2, sp, #488	; 0x1e8
    742e:	4631      	mov	r1, r6
    7430:	4650      	mov	r0, sl
    7432:	4798      	blx	r3
    7434:	9b88      	ldr	r3, [sp, #544]	; 0x220
    7436:	e9cd 5800 	strd	r5, r8, [sp]
    743a:	4621      	mov	r1, r4
    743c:	646b      	str	r3, [r5, #68]	; 0x44
    743e:	4681      	mov	r9, r0
    7440:	4633      	mov	r3, r6
    7442:	4632      	mov	r2, r6
    7444:	2001      	movs	r0, #1
    7446:	47b8      	blx	r7
    7448:	4604      	mov	r4, r0
    744a:	b9e8      	cbnz	r0, 7488 <unwind_phase2_forced+0xa8>
    744c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7450:	a97a      	add	r1, sp, #488	; 0x1e8
    7452:	4628      	mov	r0, r5
    7454:	f000 fe64 	bl	8120 <memcpy>
    7458:	f1b9 0f08 	cmp.w	r9, #8
    745c:	d11b      	bne.n	7496 <unwind_phase2_forced+0xb6>
    745e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7460:	4630      	mov	r0, r6
    7462:	f7ff ff1b 	bl	729c <get_eit_entry>
    7466:	3409      	adds	r4, #9
    7468:	fa5f fa84 	uxtb.w	sl, r4
    746c:	4681      	mov	r9, r0
    746e:	2800      	cmp	r0, #0
    7470:	d0d3      	beq.n	741a <unwind_phase2_forced+0x3a>
    7472:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7474:	f04a 0110 	orr.w	r1, sl, #16
    7478:	e9cd 5800 	strd	r5, r8, [sp]
    747c:	4632      	mov	r2, r6
    747e:	646b      	str	r3, [r5, #68]	; 0x44
    7480:	2001      	movs	r0, #1
    7482:	4633      	mov	r3, r6
    7484:	47b8      	blx	r7
    7486:	b108      	cbz	r0, 748c <unwind_phase2_forced+0xac>
    7488:	f04f 0909 	mov.w	r9, #9
    748c:	4648      	mov	r0, r9
    748e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    7492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7496:	f1b9 0f07 	cmp.w	r9, #7
    749a:	d1f5      	bne.n	7488 <unwind_phase2_forced+0xa8>
    749c:	4620      	mov	r0, r4
    749e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    74a0:	f7ff ff7e 	bl	73a0 <_Unwind_DebugHook>
    74a4:	a803      	add	r0, sp, #12
    74a6:	f000 fb89 	bl	7bbc <__restore_core_regs>
    74aa:	bf00      	nop

000074ac <_Unwind_GetCFA>:
    74ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
    74ae:	4770      	bx	lr

000074b0 <__gnu_Unwind_RaiseException>:
    74b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    74b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    74b4:	640b      	str	r3, [r1, #64]	; 0x40
    74b6:	1d0e      	adds	r6, r1, #4
    74b8:	460f      	mov	r7, r1
    74ba:	4605      	mov	r5, r0
    74bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    74be:	b0f9      	sub	sp, #484	; 0x1e4
    74c0:	ac01      	add	r4, sp, #4
    74c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    74c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    74ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    74cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    74d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    74d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    74d8:	9600      	str	r6, [sp, #0]
    74da:	e006      	b.n	74ea <__gnu_Unwind_RaiseException+0x3a>
    74dc:	692b      	ldr	r3, [r5, #16]
    74de:	466a      	mov	r2, sp
    74e0:	4629      	mov	r1, r5
    74e2:	4798      	blx	r3
    74e4:	2808      	cmp	r0, #8
    74e6:	4604      	mov	r4, r0
    74e8:	d108      	bne.n	74fc <__gnu_Unwind_RaiseException+0x4c>
    74ea:	9910      	ldr	r1, [sp, #64]	; 0x40
    74ec:	4628      	mov	r0, r5
    74ee:	f7ff fed5 	bl	729c <get_eit_entry>
    74f2:	2800      	cmp	r0, #0
    74f4:	d0f2      	beq.n	74dc <__gnu_Unwind_RaiseException+0x2c>
    74f6:	2009      	movs	r0, #9
    74f8:	b079      	add	sp, #484	; 0x1e4
    74fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74fc:	4668      	mov	r0, sp
    74fe:	f7ff ff1b 	bl	7338 <restore_non_core_regs>
    7502:	2c06      	cmp	r4, #6
    7504:	d1f7      	bne.n	74f6 <__gnu_Unwind_RaiseException+0x46>
    7506:	4639      	mov	r1, r7
    7508:	4628      	mov	r0, r5
    750a:	f7ff ff4b 	bl	73a4 <unwind_phase2>
    750e:	bf00      	nop

00007510 <__gnu_Unwind_ForcedUnwind>:
    7510:	b430      	push	{r4, r5}
    7512:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    7514:	60c1      	str	r1, [r0, #12]
    7516:	6182      	str	r2, [r0, #24]
    7518:	4619      	mov	r1, r3
    751a:	641d      	str	r5, [r3, #64]	; 0x40
    751c:	2200      	movs	r2, #0
    751e:	bc30      	pop	{r4, r5}
    7520:	e75e      	b.n	73e0 <unwind_phase2_forced>
    7522:	bf00      	nop

00007524 <__gnu_Unwind_Resume>:
    7524:	b570      	push	{r4, r5, r6, lr}
    7526:	68c6      	ldr	r6, [r0, #12]
    7528:	6943      	ldr	r3, [r0, #20]
    752a:	640b      	str	r3, [r1, #64]	; 0x40
    752c:	b9ae      	cbnz	r6, 755a <__gnu_Unwind_Resume+0x36>
    752e:	6903      	ldr	r3, [r0, #16]
    7530:	460a      	mov	r2, r1
    7532:	4604      	mov	r4, r0
    7534:	460d      	mov	r5, r1
    7536:	4601      	mov	r1, r0
    7538:	2002      	movs	r0, #2
    753a:	4798      	blx	r3
    753c:	2807      	cmp	r0, #7
    753e:	d005      	beq.n	754c <__gnu_Unwind_Resume+0x28>
    7540:	2808      	cmp	r0, #8
    7542:	d10f      	bne.n	7564 <__gnu_Unwind_Resume+0x40>
    7544:	4629      	mov	r1, r5
    7546:	4620      	mov	r0, r4
    7548:	f7ff ff2c 	bl	73a4 <unwind_phase2>
    754c:	4630      	mov	r0, r6
    754e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7550:	f7ff ff26 	bl	73a0 <_Unwind_DebugHook>
    7554:	1d28      	adds	r0, r5, #4
    7556:	f000 fb31 	bl	7bbc <__restore_core_regs>
    755a:	2201      	movs	r2, #1
    755c:	f7ff ff40 	bl	73e0 <unwind_phase2_forced>
    7560:	f000 fda4 	bl	80ac <abort>
    7564:	f000 fda2 	bl	80ac <abort>

00007568 <__gnu_Unwind_Resume_or_Rethrow>:
    7568:	68c2      	ldr	r2, [r0, #12]
    756a:	b11a      	cbz	r2, 7574 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    756c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    756e:	640a      	str	r2, [r1, #64]	; 0x40
    7570:	2200      	movs	r2, #0
    7572:	e735      	b.n	73e0 <unwind_phase2_forced>
    7574:	e79c      	b.n	74b0 <__gnu_Unwind_RaiseException>
    7576:	bf00      	nop

00007578 <_Unwind_Complete>:
    7578:	4770      	bx	lr
    757a:	bf00      	nop

0000757c <_Unwind_DeleteException>:
    757c:	6883      	ldr	r3, [r0, #8]
    757e:	4601      	mov	r1, r0
    7580:	b10b      	cbz	r3, 7586 <_Unwind_DeleteException+0xa>
    7582:	2001      	movs	r0, #1
    7584:	4718      	bx	r3
    7586:	4770      	bx	lr

00007588 <_Unwind_VRS_Get>:
    7588:	2901      	cmp	r1, #1
    758a:	d012      	beq.n	75b2 <_Unwind_VRS_Get+0x2a>
    758c:	d809      	bhi.n	75a2 <_Unwind_VRS_Get+0x1a>
    758e:	b973      	cbnz	r3, 75ae <_Unwind_VRS_Get+0x26>
    7590:	2a0f      	cmp	r2, #15
    7592:	d80c      	bhi.n	75ae <_Unwind_VRS_Get+0x26>
    7594:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    7598:	4618      	mov	r0, r3
    759a:	6853      	ldr	r3, [r2, #4]
    759c:	9a00      	ldr	r2, [sp, #0]
    759e:	6013      	str	r3, [r2, #0]
    75a0:	4770      	bx	lr
    75a2:	3903      	subs	r1, #3
    75a4:	2901      	cmp	r1, #1
    75a6:	bf94      	ite	ls
    75a8:	2001      	movls	r0, #1
    75aa:	2002      	movhi	r0, #2
    75ac:	4770      	bx	lr
    75ae:	2002      	movs	r0, #2
    75b0:	4770      	bx	lr
    75b2:	4608      	mov	r0, r1
    75b4:	4770      	bx	lr
    75b6:	bf00      	nop

000075b8 <_Unwind_GetGR>:
    75b8:	b510      	push	{r4, lr}
    75ba:	b084      	sub	sp, #16
    75bc:	2300      	movs	r3, #0
    75be:	ac03      	add	r4, sp, #12
    75c0:	460a      	mov	r2, r1
    75c2:	9400      	str	r4, [sp, #0]
    75c4:	4619      	mov	r1, r3
    75c6:	f7ff ffdf 	bl	7588 <_Unwind_VRS_Get>
    75ca:	9803      	ldr	r0, [sp, #12]
    75cc:	b004      	add	sp, #16
    75ce:	bd10      	pop	{r4, pc}

000075d0 <_Unwind_VRS_Set>:
    75d0:	2901      	cmp	r1, #1
    75d2:	d012      	beq.n	75fa <_Unwind_VRS_Set+0x2a>
    75d4:	d809      	bhi.n	75ea <_Unwind_VRS_Set+0x1a>
    75d6:	b973      	cbnz	r3, 75f6 <_Unwind_VRS_Set+0x26>
    75d8:	2a0f      	cmp	r2, #15
    75da:	d80c      	bhi.n	75f6 <_Unwind_VRS_Set+0x26>
    75dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    75e0:	9a00      	ldr	r2, [sp, #0]
    75e2:	6812      	ldr	r2, [r2, #0]
    75e4:	6042      	str	r2, [r0, #4]
    75e6:	4618      	mov	r0, r3
    75e8:	4770      	bx	lr
    75ea:	3903      	subs	r1, #3
    75ec:	2901      	cmp	r1, #1
    75ee:	bf94      	ite	ls
    75f0:	2001      	movls	r0, #1
    75f2:	2002      	movhi	r0, #2
    75f4:	4770      	bx	lr
    75f6:	2002      	movs	r0, #2
    75f8:	4770      	bx	lr
    75fa:	4608      	mov	r0, r1
    75fc:	4770      	bx	lr
    75fe:	bf00      	nop

00007600 <_Unwind_SetGR>:
    7600:	b510      	push	{r4, lr}
    7602:	b084      	sub	sp, #16
    7604:	2300      	movs	r3, #0
    7606:	ac03      	add	r4, sp, #12
    7608:	9203      	str	r2, [sp, #12]
    760a:	9400      	str	r4, [sp, #0]
    760c:	460a      	mov	r2, r1
    760e:	4619      	mov	r1, r3
    7610:	f7ff ffde 	bl	75d0 <_Unwind_VRS_Set>
    7614:	b004      	add	sp, #16
    7616:	bd10      	pop	{r4, pc}

00007618 <__gnu_Unwind_Backtrace>:
    7618:	b5f0      	push	{r4, r5, r6, r7, lr}
    761a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    761c:	6413      	str	r3, [r2, #64]	; 0x40
    761e:	1d15      	adds	r5, r2, #4
    7620:	468c      	mov	ip, r1
    7622:	4606      	mov	r6, r0
    7624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7626:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    762a:	ac17      	add	r4, sp, #92	; 0x5c
    762c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    762e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7636:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    763a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    763e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7642:	4665      	mov	r5, ip
    7644:	9716      	str	r7, [sp, #88]	; 0x58
    7646:	e010      	b.n	766a <__gnu_Unwind_Backtrace+0x52>
    7648:	f7ff ffda 	bl	7600 <_Unwind_SetGR>
    764c:	4629      	mov	r1, r5
    764e:	a816      	add	r0, sp, #88	; 0x58
    7650:	47b0      	blx	r6
    7652:	4603      	mov	r3, r0
    7654:	aa16      	add	r2, sp, #88	; 0x58
    7656:	4669      	mov	r1, sp
    7658:	2008      	movs	r0, #8
    765a:	b983      	cbnz	r3, 767e <__gnu_Unwind_Backtrace+0x66>
    765c:	9b04      	ldr	r3, [sp, #16]
    765e:	4798      	blx	r3
    7660:	2805      	cmp	r0, #5
    7662:	4604      	mov	r4, r0
    7664:	d00c      	beq.n	7680 <__gnu_Unwind_Backtrace+0x68>
    7666:	2809      	cmp	r0, #9
    7668:	d009      	beq.n	767e <__gnu_Unwind_Backtrace+0x66>
    766a:	9926      	ldr	r1, [sp, #152]	; 0x98
    766c:	4668      	mov	r0, sp
    766e:	f7ff fe15 	bl	729c <get_eit_entry>
    7672:	4603      	mov	r3, r0
    7674:	466a      	mov	r2, sp
    7676:	210c      	movs	r1, #12
    7678:	a816      	add	r0, sp, #88	; 0x58
    767a:	2b00      	cmp	r3, #0
    767c:	d0e4      	beq.n	7648 <__gnu_Unwind_Backtrace+0x30>
    767e:	2409      	movs	r4, #9
    7680:	a816      	add	r0, sp, #88	; 0x58
    7682:	f7ff fe59 	bl	7338 <restore_non_core_regs>
    7686:	4620      	mov	r0, r4
    7688:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    768c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    768e:	bf00      	nop

00007690 <__gnu_unwind_pr_common>:
    7690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7694:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    7696:	b089      	sub	sp, #36	; 0x24
    7698:	460d      	mov	r5, r1
    769a:	f854 1b04 	ldr.w	r1, [r4], #4
    769e:	9406      	str	r4, [sp, #24]
    76a0:	4617      	mov	r7, r2
    76a2:	f000 0803 	and.w	r8, r0, #3
    76a6:	461e      	mov	r6, r3
    76a8:	2b00      	cmp	r3, #0
    76aa:	d079      	beq.n	77a0 <__gnu_unwind_pr_common+0x110>
    76ac:	0c0b      	lsrs	r3, r1, #16
    76ae:	b2da      	uxtb	r2, r3
    76b0:	0409      	lsls	r1, r1, #16
    76b2:	f88d 301d 	strb.w	r3, [sp, #29]
    76b6:	2302      	movs	r3, #2
    76b8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    76bc:	9105      	str	r1, [sp, #20]
    76be:	f88d 301c 	strb.w	r3, [sp, #28]
    76c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    76c4:	f1b8 0f02 	cmp.w	r8, #2
    76c8:	bf08      	it	eq
    76ca:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    76cc:	f013 0301 	ands.w	r3, r3, #1
    76d0:	d00c      	beq.n	76ec <__gnu_unwind_pr_common+0x5c>
    76d2:	4638      	mov	r0, r7
    76d4:	a905      	add	r1, sp, #20
    76d6:	f000 fb73 	bl	7dc0 <__gnu_unwind_execute>
    76da:	b918      	cbnz	r0, 76e4 <__gnu_unwind_pr_common+0x54>
    76dc:	2008      	movs	r0, #8
    76de:	b009      	add	sp, #36	; 0x24
    76e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76e4:	2009      	movs	r0, #9
    76e6:	b009      	add	sp, #36	; 0x24
    76e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76ec:	f8d4 a000 	ldr.w	sl, [r4]
    76f0:	f1ba 0f00 	cmp.w	sl, #0
    76f4:	d0ed      	beq.n	76d2 <__gnu_unwind_pr_common+0x42>
    76f6:	9301      	str	r3, [sp, #4]
    76f8:	f000 0308 	and.w	r3, r0, #8
    76fc:	9302      	str	r3, [sp, #8]
    76fe:	2e02      	cmp	r6, #2
    7700:	d04a      	beq.n	7798 <__gnu_unwind_pr_common+0x108>
    7702:	f8b4 a000 	ldrh.w	sl, [r4]
    7706:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    770a:	3404      	adds	r4, #4
    770c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    770e:	f029 0b01 	bic.w	fp, r9, #1
    7712:	210f      	movs	r1, #15
    7714:	4638      	mov	r0, r7
    7716:	4493      	add	fp, r2
    7718:	f7ff ff4e 	bl	75b8 <_Unwind_GetGR>
    771c:	4583      	cmp	fp, r0
    771e:	d839      	bhi.n	7794 <__gnu_unwind_pr_common+0x104>
    7720:	f02a 0201 	bic.w	r2, sl, #1
    7724:	445a      	add	r2, fp
    7726:	4282      	cmp	r2, r0
    7728:	bf94      	ite	ls
    772a:	2000      	movls	r0, #0
    772c:	2001      	movhi	r0, #1
    772e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7732:	f003 0302 	and.w	r3, r3, #2
    7736:	f00a 0a01 	and.w	sl, sl, #1
    773a:	ea43 030a 	orr.w	r3, r3, sl
    773e:	2b01      	cmp	r3, #1
    7740:	d049      	beq.n	77d6 <__gnu_unwind_pr_common+0x146>
    7742:	2b02      	cmp	r3, #2
    7744:	d032      	beq.n	77ac <__gnu_unwind_pr_common+0x11c>
    7746:	2b00      	cmp	r3, #0
    7748:	d1cc      	bne.n	76e4 <__gnu_unwind_pr_common+0x54>
    774a:	f1b8 0f00 	cmp.w	r8, #0
    774e:	d002      	beq.n	7756 <__gnu_unwind_pr_common+0xc6>
    7750:	2800      	cmp	r0, #0
    7752:	f040 80cd 	bne.w	78f0 <__gnu_unwind_pr_common+0x260>
    7756:	3404      	adds	r4, #4
    7758:	f8d4 a000 	ldr.w	sl, [r4]
    775c:	f1ba 0f00 	cmp.w	sl, #0
    7760:	d1cd      	bne.n	76fe <__gnu_unwind_pr_common+0x6e>
    7762:	a905      	add	r1, sp, #20
    7764:	4638      	mov	r0, r7
    7766:	f000 fb2b 	bl	7dc0 <__gnu_unwind_execute>
    776a:	2800      	cmp	r0, #0
    776c:	d1ba      	bne.n	76e4 <__gnu_unwind_pr_common+0x54>
    776e:	9b01      	ldr	r3, [sp, #4]
    7770:	2b00      	cmp	r3, #0
    7772:	d0b3      	beq.n	76dc <__gnu_unwind_pr_common+0x4c>
    7774:	210f      	movs	r1, #15
    7776:	4638      	mov	r0, r7
    7778:	f7ff ff1e 	bl	75b8 <_Unwind_GetGR>
    777c:	210e      	movs	r1, #14
    777e:	4602      	mov	r2, r0
    7780:	4638      	mov	r0, r7
    7782:	f7ff ff3d 	bl	7600 <_Unwind_SetGR>
    7786:	4638      	mov	r0, r7
    7788:	4a6a      	ldr	r2, [pc, #424]	; (7934 <__gnu_unwind_pr_common+0x2a4>)
    778a:	210f      	movs	r1, #15
    778c:	f7ff ff38 	bl	7600 <_Unwind_SetGR>
    7790:	2007      	movs	r0, #7
    7792:	e7a8      	b.n	76e6 <__gnu_unwind_pr_common+0x56>
    7794:	2000      	movs	r0, #0
    7796:	e7ca      	b.n	772e <__gnu_unwind_pr_common+0x9e>
    7798:	f8d4 9004 	ldr.w	r9, [r4, #4]
    779c:	3408      	adds	r4, #8
    779e:	e7b5      	b.n	770c <__gnu_unwind_pr_common+0x7c>
    77a0:	0209      	lsls	r1, r1, #8
    77a2:	2303      	movs	r3, #3
    77a4:	9105      	str	r1, [sp, #20]
    77a6:	f8ad 301c 	strh.w	r3, [sp, #28]
    77aa:	e78a      	b.n	76c2 <__gnu_unwind_pr_common+0x32>
    77ac:	6823      	ldr	r3, [r4, #0]
    77ae:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    77b2:	f1b8 0f00 	cmp.w	r8, #0
    77b6:	d145      	bne.n	7844 <__gnu_unwind_pr_common+0x1b4>
    77b8:	b128      	cbz	r0, 77c6 <__gnu_unwind_pr_common+0x136>
    77ba:	9a02      	ldr	r2, [sp, #8]
    77bc:	2a00      	cmp	r2, #0
    77be:	d05c      	beq.n	787a <__gnu_unwind_pr_common+0x1ea>
    77c0:	f1bb 0f00 	cmp.w	fp, #0
    77c4:	d074      	beq.n	78b0 <__gnu_unwind_pr_common+0x220>
    77c6:	2b00      	cmp	r3, #0
    77c8:	da00      	bge.n	77cc <__gnu_unwind_pr_common+0x13c>
    77ca:	3404      	adds	r4, #4
    77cc:	f10b 0b01 	add.w	fp, fp, #1
    77d0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    77d4:	e7c0      	b.n	7758 <__gnu_unwind_pr_common+0xc8>
    77d6:	f1b8 0f00 	cmp.w	r8, #0
    77da:	d119      	bne.n	7810 <__gnu_unwind_pr_common+0x180>
    77dc:	b1b0      	cbz	r0, 780c <__gnu_unwind_pr_common+0x17c>
    77de:	e9d4 2300 	ldrd	r2, r3, [r4]
    77e2:	1c99      	adds	r1, r3, #2
    77e4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    77e8:	f43f af7c 	beq.w	76e4 <__gnu_unwind_pr_common+0x54>
    77ec:	f105 0158 	add.w	r1, r5, #88	; 0x58
    77f0:	3301      	adds	r3, #1
    77f2:	9104      	str	r1, [sp, #16]
    77f4:	f000 8090 	beq.w	7918 <__gnu_unwind_pr_common+0x288>
    77f8:	1d20      	adds	r0, r4, #4
    77fa:	f7ff fdc9 	bl	7390 <_Unwind_decode_typeinfo_ptr.isra.0>
    77fe:	ab04      	add	r3, sp, #16
    7800:	4601      	mov	r1, r0
    7802:	4628      	mov	r0, r5
    7804:	f3af 8000 	nop.w
    7808:	2800      	cmp	r0, #0
    780a:	d15b      	bne.n	78c4 <__gnu_unwind_pr_common+0x234>
    780c:	3408      	adds	r4, #8
    780e:	e7a3      	b.n	7758 <__gnu_unwind_pr_common+0xc8>
    7810:	210d      	movs	r1, #13
    7812:	4638      	mov	r0, r7
    7814:	f8d5 9020 	ldr.w	r9, [r5, #32]
    7818:	f7ff fece 	bl	75b8 <_Unwind_GetGR>
    781c:	4581      	cmp	r9, r0
    781e:	d1f5      	bne.n	780c <__gnu_unwind_pr_common+0x17c>
    7820:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7822:	429c      	cmp	r4, r3
    7824:	d1f2      	bne.n	780c <__gnu_unwind_pr_common+0x17c>
    7826:	4620      	mov	r0, r4
    7828:	f7ff fcec 	bl	7204 <selfrel_offset31>
    782c:	210f      	movs	r1, #15
    782e:	4602      	mov	r2, r0
    7830:	4638      	mov	r0, r7
    7832:	f7ff fee5 	bl	7600 <_Unwind_SetGR>
    7836:	4638      	mov	r0, r7
    7838:	462a      	mov	r2, r5
    783a:	2100      	movs	r1, #0
    783c:	f7ff fee0 	bl	7600 <_Unwind_SetGR>
    7840:	2007      	movs	r0, #7
    7842:	e750      	b.n	76e6 <__gnu_unwind_pr_common+0x56>
    7844:	210d      	movs	r1, #13
    7846:	4638      	mov	r0, r7
    7848:	f8d5 9020 	ldr.w	r9, [r5, #32]
    784c:	f7ff feb4 	bl	75b8 <_Unwind_GetGR>
    7850:	4581      	cmp	r9, r0
    7852:	d001      	beq.n	7858 <__gnu_unwind_pr_common+0x1c8>
    7854:	6823      	ldr	r3, [r4, #0]
    7856:	e7b6      	b.n	77c6 <__gnu_unwind_pr_common+0x136>
    7858:	6aab      	ldr	r3, [r5, #40]	; 0x28
    785a:	429c      	cmp	r4, r3
    785c:	d1fa      	bne.n	7854 <__gnu_unwind_pr_common+0x1c4>
    785e:	2204      	movs	r2, #4
    7860:	2100      	movs	r1, #0
    7862:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    7866:	18a3      	adds	r3, r4, r2
    7868:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    786c:	636b      	str	r3, [r5, #52]	; 0x34
    786e:	6823      	ldr	r3, [r4, #0]
    7870:	428b      	cmp	r3, r1
    7872:	db59      	blt.n	7928 <__gnu_unwind_pr_common+0x298>
    7874:	2301      	movs	r3, #1
    7876:	9301      	str	r3, [sp, #4]
    7878:	e7a8      	b.n	77cc <__gnu_unwind_pr_common+0x13c>
    787a:	f105 0358 	add.w	r3, r5, #88	; 0x58
    787e:	f8cd 800c 	str.w	r8, [sp, #12]
    7882:	f104 0a04 	add.w	sl, r4, #4
    7886:	46b0      	mov	r8, r6
    7888:	4691      	mov	r9, r2
    788a:	461e      	mov	r6, r3
    788c:	e00d      	b.n	78aa <__gnu_unwind_pr_common+0x21a>
    788e:	9604      	str	r6, [sp, #16]
    7890:	f7ff fd7e 	bl	7390 <_Unwind_decode_typeinfo_ptr.isra.0>
    7894:	ab04      	add	r3, sp, #16
    7896:	4601      	mov	r1, r0
    7898:	2200      	movs	r2, #0
    789a:	4628      	mov	r0, r5
    789c:	f3af 8000 	nop.w
    78a0:	f109 0901 	add.w	r9, r9, #1
    78a4:	f10a 0a04 	add.w	sl, sl, #4
    78a8:	b9e8      	cbnz	r0, 78e6 <__gnu_unwind_pr_common+0x256>
    78aa:	45d9      	cmp	r9, fp
    78ac:	4650      	mov	r0, sl
    78ae:	d1ee      	bne.n	788e <__gnu_unwind_pr_common+0x1fe>
    78b0:	4638      	mov	r0, r7
    78b2:	210d      	movs	r1, #13
    78b4:	f7ff fe80 	bl	75b8 <_Unwind_GetGR>
    78b8:	9b04      	ldr	r3, [sp, #16]
    78ba:	6228      	str	r0, [r5, #32]
    78bc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    78c0:	2006      	movs	r0, #6
    78c2:	e710      	b.n	76e6 <__gnu_unwind_pr_common+0x56>
    78c4:	4681      	mov	r9, r0
    78c6:	210d      	movs	r1, #13
    78c8:	4638      	mov	r0, r7
    78ca:	f7ff fe75 	bl	75b8 <_Unwind_GetGR>
    78ce:	f1b9 0f02 	cmp.w	r9, #2
    78d2:	6228      	str	r0, [r5, #32]
    78d4:	d125      	bne.n	7922 <__gnu_unwind_pr_common+0x292>
    78d6:	462b      	mov	r3, r5
    78d8:	9a04      	ldr	r2, [sp, #16]
    78da:	f843 2f2c 	str.w	r2, [r3, #44]!
    78de:	626b      	str	r3, [r5, #36]	; 0x24
    78e0:	62ac      	str	r4, [r5, #40]	; 0x28
    78e2:	2006      	movs	r0, #6
    78e4:	e6ff      	b.n	76e6 <__gnu_unwind_pr_common+0x56>
    78e6:	4646      	mov	r6, r8
    78e8:	6823      	ldr	r3, [r4, #0]
    78ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
    78ee:	e76a      	b.n	77c6 <__gnu_unwind_pr_common+0x136>
    78f0:	4620      	mov	r0, r4
    78f2:	f7ff fc87 	bl	7204 <selfrel_offset31>
    78f6:	3404      	adds	r4, #4
    78f8:	4602      	mov	r2, r0
    78fa:	63ac      	str	r4, [r5, #56]	; 0x38
    78fc:	4628      	mov	r0, r5
    78fe:	4614      	mov	r4, r2
    7900:	f3af 8000 	nop.w
    7904:	2800      	cmp	r0, #0
    7906:	f43f aeed 	beq.w	76e4 <__gnu_unwind_pr_common+0x54>
    790a:	4638      	mov	r0, r7
    790c:	4622      	mov	r2, r4
    790e:	210f      	movs	r1, #15
    7910:	f7ff fe76 	bl	7600 <_Unwind_SetGR>
    7914:	2007      	movs	r0, #7
    7916:	e6e6      	b.n	76e6 <__gnu_unwind_pr_common+0x56>
    7918:	4638      	mov	r0, r7
    791a:	210d      	movs	r1, #13
    791c:	f7ff fe4c 	bl	75b8 <_Unwind_GetGR>
    7920:	6228      	str	r0, [r5, #32]
    7922:	9b04      	ldr	r3, [sp, #16]
    7924:	626b      	str	r3, [r5, #36]	; 0x24
    7926:	e7db      	b.n	78e0 <__gnu_unwind_pr_common+0x250>
    7928:	f10b 0001 	add.w	r0, fp, #1
    792c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7930:	e77a      	b.n	7828 <__gnu_unwind_pr_common+0x198>
    7932:	bf00      	nop
    7934:	00000000 	.word	0x00000000

00007938 <__aeabi_unwind_cpp_pr0>:
    7938:	2300      	movs	r3, #0
    793a:	e6a9      	b.n	7690 <__gnu_unwind_pr_common>

0000793c <__aeabi_unwind_cpp_pr1>:
    793c:	2301      	movs	r3, #1
    793e:	e6a7      	b.n	7690 <__gnu_unwind_pr_common>

00007940 <__aeabi_unwind_cpp_pr2>:
    7940:	2302      	movs	r3, #2
    7942:	e6a5      	b.n	7690 <__gnu_unwind_pr_common>

00007944 <_Unwind_VRS_Pop>:
    7944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7948:	4606      	mov	r6, r0
    794a:	b0c3      	sub	sp, #268	; 0x10c
    794c:	4615      	mov	r5, r2
    794e:	461c      	mov	r4, r3
    7950:	2904      	cmp	r1, #4
    7952:	f200 80b9 	bhi.w	7ac8 <_Unwind_VRS_Pop+0x184>
    7956:	e8df f001 	tbb	[pc, r1]
    795a:	539a      	.short	0x539a
    795c:	29b7      	.short	0x29b7
    795e:	03          	.byte	0x03
    795f:	00          	.byte	0x00
    7960:	2c00      	cmp	r4, #0
    7962:	f040 80b1 	bne.w	7ac8 <_Unwind_VRS_Pop+0x184>
    7966:	2a10      	cmp	r2, #16
    7968:	f200 80ae 	bhi.w	7ac8 <_Unwind_VRS_Pop+0x184>
    796c:	6803      	ldr	r3, [r0, #0]
    796e:	06d8      	lsls	r0, r3, #27
    7970:	f100 80f3 	bmi.w	7b5a <_Unwind_VRS_Pop+0x216>
    7974:	af20      	add	r7, sp, #128	; 0x80
    7976:	4638      	mov	r0, r7
    7978:	f000 f992 	bl	7ca0 <__gnu_Unwind_Save_WMMXC>
    797c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    797e:	2300      	movs	r3, #0
    7980:	2401      	movs	r4, #1
    7982:	fa04 f203 	lsl.w	r2, r4, r3
    7986:	422a      	tst	r2, r5
    7988:	4601      	mov	r1, r0
    798a:	d004      	beq.n	7996 <_Unwind_VRS_Pop+0x52>
    798c:	f851 2b04 	ldr.w	r2, [r1], #4
    7990:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    7994:	4608      	mov	r0, r1
    7996:	3301      	adds	r3, #1
    7998:	2b04      	cmp	r3, #4
    799a:	d1f2      	bne.n	7982 <_Unwind_VRS_Pop+0x3e>
    799c:	63b0      	str	r0, [r6, #56]	; 0x38
    799e:	4638      	mov	r0, r7
    79a0:	f000 f974 	bl	7c8c <__gnu_Unwind_Restore_WMMXC>
    79a4:	2000      	movs	r0, #0
    79a6:	b043      	add	sp, #268	; 0x10c
    79a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    79ac:	2c03      	cmp	r4, #3
    79ae:	f040 808b 	bne.w	7ac8 <_Unwind_VRS_Pop+0x184>
    79b2:	b294      	uxth	r4, r2
    79b4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    79b8:	2b10      	cmp	r3, #16
    79ba:	ea4f 4512 	mov.w	r5, r2, lsr #16
    79be:	f200 8083 	bhi.w	7ac8 <_Unwind_VRS_Pop+0x184>
    79c2:	6803      	ldr	r3, [r0, #0]
    79c4:	071f      	lsls	r7, r3, #28
    79c6:	f100 80d0 	bmi.w	7b6a <_Unwind_VRS_Pop+0x226>
    79ca:	af20      	add	r7, sp, #128	; 0x80
    79cc:	4638      	mov	r0, r7
    79ce:	f000 f93b 	bl	7c48 <__gnu_Unwind_Save_WMMXD>
    79d2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    79d6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    79d8:	b154      	cbz	r4, 79f0 <_Unwind_VRS_Pop+0xac>
    79da:	460b      	mov	r3, r1
    79dc:	1ae8      	subs	r0, r5, r3
    79de:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    79e2:	00e4      	lsls	r4, r4, #3
    79e4:	581a      	ldr	r2, [r3, r0]
    79e6:	f843 2b04 	str.w	r2, [r3], #4
    79ea:	428b      	cmp	r3, r1
    79ec:	d1fa      	bne.n	79e4 <_Unwind_VRS_Pop+0xa0>
    79ee:	4425      	add	r5, r4
    79f0:	4638      	mov	r0, r7
    79f2:	63b5      	str	r5, [r6, #56]	; 0x38
    79f4:	f000 f906 	bl	7c04 <__gnu_Unwind_Restore_WMMXD>
    79f8:	2000      	movs	r0, #0
    79fa:	b043      	add	sp, #268	; 0x10c
    79fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a00:	2c01      	cmp	r4, #1
    7a02:	ea4f 4812 	mov.w	r8, r2, lsr #16
    7a06:	b295      	uxth	r5, r2
    7a08:	d05a      	beq.n	7ac0 <_Unwind_VRS_Pop+0x17c>
    7a0a:	2c05      	cmp	r4, #5
    7a0c:	d15c      	bne.n	7ac8 <_Unwind_VRS_Pop+0x184>
    7a0e:	eb08 0905 	add.w	r9, r8, r5
    7a12:	f1b9 0f20 	cmp.w	r9, #32
    7a16:	d857      	bhi.n	7ac8 <_Unwind_VRS_Pop+0x184>
    7a18:	f1b8 0f0f 	cmp.w	r8, #15
    7a1c:	d977      	bls.n	7b0e <_Unwind_VRS_Pop+0x1ca>
    7a1e:	46a9      	mov	r9, r5
    7a20:	2d00      	cmp	r5, #0
    7a22:	f040 8088 	bne.w	7b36 <_Unwind_VRS_Pop+0x1f2>
    7a26:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7a28:	b36d      	cbz	r5, 7a86 <_Unwind_VRS_Pop+0x142>
    7a2a:	af20      	add	r7, sp, #128	; 0x80
    7a2c:	f04f 0900 	mov.w	r9, #0
    7a30:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    7a34:	3f04      	subs	r7, #4
    7a36:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    7a3a:	f853 1b04 	ldr.w	r1, [r3], #4
    7a3e:	f847 1f04 	str.w	r1, [r7, #4]!
    7a42:	42ab      	cmp	r3, r5
    7a44:	d1f9      	bne.n	7a3a <_Unwind_VRS_Pop+0xf6>
    7a46:	f1b9 0f00 	cmp.w	r9, #0
    7a4a:	d00f      	beq.n	7a6c <_Unwind_VRS_Pop+0x128>
    7a4c:	466f      	mov	r7, sp
    7a4e:	4641      	mov	r1, r8
    7a50:	2910      	cmp	r1, #16
    7a52:	bf38      	it	cc
    7a54:	2110      	movcc	r1, #16
    7a56:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    7a5a:	3984      	subs	r1, #132	; 0x84
    7a5c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    7a60:	f853 0b04 	ldr.w	r0, [r3], #4
    7a64:	f841 0f04 	str.w	r0, [r1, #4]!
    7a68:	42ab      	cmp	r3, r5
    7a6a:	d1f9      	bne.n	7a60 <_Unwind_VRS_Pop+0x11c>
    7a6c:	2c01      	cmp	r4, #1
    7a6e:	f000 8084 	beq.w	7b7a <_Unwind_VRS_Pop+0x236>
    7a72:	f1b8 0f0f 	cmp.w	r8, #15
    7a76:	63b5      	str	r5, [r6, #56]	; 0x38
    7a78:	d945      	bls.n	7b06 <_Unwind_VRS_Pop+0x1c2>
    7a7a:	f1b9 0f00 	cmp.w	r9, #0
    7a7e:	d002      	beq.n	7a86 <_Unwind_VRS_Pop+0x142>
    7a80:	4668      	mov	r0, sp
    7a82:	f000 f8b7 	bl	7bf4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7a86:	2000      	movs	r0, #0
    7a88:	b043      	add	sp, #268	; 0x10c
    7a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a8e:	b9dc      	cbnz	r4, 7ac8 <_Unwind_VRS_Pop+0x184>
    7a90:	6b87      	ldr	r7, [r0, #56]	; 0x38
    7a92:	4623      	mov	r3, r4
    7a94:	2001      	movs	r0, #1
    7a96:	b294      	uxth	r4, r2
    7a98:	f106 0c04 	add.w	ip, r6, #4
    7a9c:	fa00 f203 	lsl.w	r2, r0, r3
    7aa0:	4222      	tst	r2, r4
    7aa2:	4639      	mov	r1, r7
    7aa4:	d004      	beq.n	7ab0 <_Unwind_VRS_Pop+0x16c>
    7aa6:	f851 2b04 	ldr.w	r2, [r1], #4
    7aaa:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    7aae:	460f      	mov	r7, r1
    7ab0:	3301      	adds	r3, #1
    7ab2:	2b10      	cmp	r3, #16
    7ab4:	d1f2      	bne.n	7a9c <_Unwind_VRS_Pop+0x158>
    7ab6:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    7aba:	d1e4      	bne.n	7a86 <_Unwind_VRS_Pop+0x142>
    7abc:	63b7      	str	r7, [r6, #56]	; 0x38
    7abe:	e004      	b.n	7aca <_Unwind_VRS_Pop+0x186>
    7ac0:	eb08 0305 	add.w	r3, r8, r5
    7ac4:	2b10      	cmp	r3, #16
    7ac6:	d903      	bls.n	7ad0 <_Unwind_VRS_Pop+0x18c>
    7ac8:	2002      	movs	r0, #2
    7aca:	b043      	add	sp, #268	; 0x10c
    7acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7ad0:	f1b8 0f0f 	cmp.w	r8, #15
    7ad4:	d8f8      	bhi.n	7ac8 <_Unwind_VRS_Pop+0x184>
    7ad6:	6833      	ldr	r3, [r6, #0]
    7ad8:	07da      	lsls	r2, r3, #31
    7ada:	d506      	bpl.n	7aea <_Unwind_VRS_Pop+0x1a6>
    7adc:	4630      	mov	r0, r6
    7ade:	f023 0303 	bic.w	r3, r3, #3
    7ae2:	f840 3b48 	str.w	r3, [r0], #72
    7ae6:	f000 f879 	bl	7bdc <__gnu_Unwind_Save_VFP>
    7aea:	af20      	add	r7, sp, #128	; 0x80
    7aec:	4638      	mov	r0, r7
    7aee:	f000 f875 	bl	7bdc <__gnu_Unwind_Save_VFP>
    7af2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7af4:	2d00      	cmp	r5, #0
    7af6:	d199      	bne.n	7a2c <_Unwind_VRS_Pop+0xe8>
    7af8:	461d      	mov	r5, r3
    7afa:	3504      	adds	r5, #4
    7afc:	63b5      	str	r5, [r6, #56]	; 0x38
    7afe:	4638      	mov	r0, r7
    7b00:	f000 f868 	bl	7bd4 <__gnu_Unwind_Restore_VFP>
    7b04:	e7bf      	b.n	7a86 <_Unwind_VRS_Pop+0x142>
    7b06:	a820      	add	r0, sp, #128	; 0x80
    7b08:	f000 f86c 	bl	7be4 <__gnu_Unwind_Restore_VFP_D>
    7b0c:	e7b5      	b.n	7a7a <_Unwind_VRS_Pop+0x136>
    7b0e:	f1b9 0f10 	cmp.w	r9, #16
    7b12:	d940      	bls.n	7b96 <_Unwind_VRS_Pop+0x252>
    7b14:	f1a9 0910 	sub.w	r9, r9, #16
    7b18:	6833      	ldr	r3, [r6, #0]
    7b1a:	07d9      	lsls	r1, r3, #31
    7b1c:	d508      	bpl.n	7b30 <_Unwind_VRS_Pop+0x1ec>
    7b1e:	f023 0301 	bic.w	r3, r3, #1
    7b22:	4630      	mov	r0, r6
    7b24:	f043 0302 	orr.w	r3, r3, #2
    7b28:	f840 3b48 	str.w	r3, [r0], #72
    7b2c:	f000 f85e 	bl	7bec <__gnu_Unwind_Save_VFP_D>
    7b30:	f1b9 0f00 	cmp.w	r9, #0
    7b34:	d032      	beq.n	7b9c <_Unwind_VRS_Pop+0x258>
    7b36:	6833      	ldr	r3, [r6, #0]
    7b38:	075a      	lsls	r2, r3, #29
    7b3a:	d420      	bmi.n	7b7e <_Unwind_VRS_Pop+0x23a>
    7b3c:	f1b8 0f0f 	cmp.w	r8, #15
    7b40:	d925      	bls.n	7b8e <_Unwind_VRS_Pop+0x24a>
    7b42:	466f      	mov	r7, sp
    7b44:	4638      	mov	r0, r7
    7b46:	f1c8 0510 	rsb	r5, r8, #16
    7b4a:	f000 f857 	bl	7bfc <__gnu_Unwind_Save_VFP_D_16_to_31>
    7b4e:	2d00      	cmp	r5, #0
    7b50:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7b52:	f77f af7c 	ble.w	7a4e <_Unwind_VRS_Pop+0x10a>
    7b56:	af20      	add	r7, sp, #128	; 0x80
    7b58:	e76a      	b.n	7a30 <_Unwind_VRS_Pop+0xec>
    7b5a:	f023 0310 	bic.w	r3, r3, #16
    7b5e:	6033      	str	r3, [r6, #0]
    7b60:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    7b64:	f000 f89c 	bl	7ca0 <__gnu_Unwind_Save_WMMXC>
    7b68:	e704      	b.n	7974 <_Unwind_VRS_Pop+0x30>
    7b6a:	f023 0308 	bic.w	r3, r3, #8
    7b6e:	6003      	str	r3, [r0, #0]
    7b70:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7b74:	f000 f868 	bl	7c48 <__gnu_Unwind_Save_WMMXD>
    7b78:	e727      	b.n	79ca <_Unwind_VRS_Pop+0x86>
    7b7a:	af20      	add	r7, sp, #128	; 0x80
    7b7c:	e7bd      	b.n	7afa <_Unwind_VRS_Pop+0x1b6>
    7b7e:	4630      	mov	r0, r6
    7b80:	f023 0304 	bic.w	r3, r3, #4
    7b84:	f840 3bd0 	str.w	r3, [r0], #208
    7b88:	f000 f838 	bl	7bfc <__gnu_Unwind_Save_VFP_D_16_to_31>
    7b8c:	e7d6      	b.n	7b3c <_Unwind_VRS_Pop+0x1f8>
    7b8e:	a820      	add	r0, sp, #128	; 0x80
    7b90:	f000 f82c 	bl	7bec <__gnu_Unwind_Save_VFP_D>
    7b94:	e7d5      	b.n	7b42 <_Unwind_VRS_Pop+0x1fe>
    7b96:	f04f 0900 	mov.w	r9, #0
    7b9a:	e7bd      	b.n	7b18 <_Unwind_VRS_Pop+0x1d4>
    7b9c:	f1b8 0f0f 	cmp.w	r8, #15
    7ba0:	f63f af41 	bhi.w	7a26 <_Unwind_VRS_Pop+0xe2>
    7ba4:	af20      	add	r7, sp, #128	; 0x80
    7ba6:	4638      	mov	r0, r7
    7ba8:	f000 f820 	bl	7bec <__gnu_Unwind_Save_VFP_D>
    7bac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7bae:	2d00      	cmp	r5, #0
    7bb0:	f47f af3c 	bne.w	7a2c <_Unwind_VRS_Pop+0xe8>
    7bb4:	4638      	mov	r0, r7
    7bb6:	f000 f815 	bl	7be4 <__gnu_Unwind_Restore_VFP_D>
    7bba:	e764      	b.n	7a86 <_Unwind_VRS_Pop+0x142>

00007bbc <__restore_core_regs>:
    7bbc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    7bc0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    7bc4:	469c      	mov	ip, r3
    7bc6:	46a6      	mov	lr, r4
    7bc8:	f84c 5d04 	str.w	r5, [ip, #-4]!
    7bcc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    7bd0:	46e5      	mov	sp, ip
    7bd2:	bd00      	pop	{pc}

00007bd4 <__gnu_Unwind_Restore_VFP>:
    7bd4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    7bd8:	4770      	bx	lr
    7bda:	bf00      	nop

00007bdc <__gnu_Unwind_Save_VFP>:
    7bdc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    7be0:	4770      	bx	lr
    7be2:	bf00      	nop

00007be4 <__gnu_Unwind_Restore_VFP_D>:
    7be4:	ec90 0b20 	vldmia	r0, {d0-d15}
    7be8:	4770      	bx	lr
    7bea:	bf00      	nop

00007bec <__gnu_Unwind_Save_VFP_D>:
    7bec:	ec80 0b20 	vstmia	r0, {d0-d15}
    7bf0:	4770      	bx	lr
    7bf2:	bf00      	nop

00007bf4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    7bf4:	ecd0 0b20 	vldmia	r0, {d16-d31}
    7bf8:	4770      	bx	lr
    7bfa:	bf00      	nop

00007bfc <__gnu_Unwind_Save_VFP_D_16_to_31>:
    7bfc:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7c00:	4770      	bx	lr
    7c02:	bf00      	nop

00007c04 <__gnu_Unwind_Restore_WMMXD>:
    7c04:	ecf0 0102 	ldfe	f0, [r0], #8
    7c08:	ecf0 1102 	ldfe	f1, [r0], #8
    7c0c:	ecf0 2102 	ldfe	f2, [r0], #8
    7c10:	ecf0 3102 	ldfe	f3, [r0], #8
    7c14:	ecf0 4102 	ldfe	f4, [r0], #8
    7c18:	ecf0 5102 	ldfe	f5, [r0], #8
    7c1c:	ecf0 6102 	ldfe	f6, [r0], #8
    7c20:	ecf0 7102 	ldfe	f7, [r0], #8
    7c24:	ecf0 8102 	ldfp	f0, [r0], #8
    7c28:	ecf0 9102 	ldfp	f1, [r0], #8
    7c2c:	ecf0 a102 	ldfp	f2, [r0], #8
    7c30:	ecf0 b102 	ldfp	f3, [r0], #8
    7c34:	ecf0 c102 	ldfp	f4, [r0], #8
    7c38:	ecf0 d102 	ldfp	f5, [r0], #8
    7c3c:	ecf0 e102 	ldfp	f6, [r0], #8
    7c40:	ecf0 f102 	ldfp	f7, [r0], #8
    7c44:	4770      	bx	lr
    7c46:	bf00      	nop

00007c48 <__gnu_Unwind_Save_WMMXD>:
    7c48:	ece0 0102 	stfe	f0, [r0], #8
    7c4c:	ece0 1102 	stfe	f1, [r0], #8
    7c50:	ece0 2102 	stfe	f2, [r0], #8
    7c54:	ece0 3102 	stfe	f3, [r0], #8
    7c58:	ece0 4102 	stfe	f4, [r0], #8
    7c5c:	ece0 5102 	stfe	f5, [r0], #8
    7c60:	ece0 6102 	stfe	f6, [r0], #8
    7c64:	ece0 7102 	stfe	f7, [r0], #8
    7c68:	ece0 8102 	stfp	f0, [r0], #8
    7c6c:	ece0 9102 	stfp	f1, [r0], #8
    7c70:	ece0 a102 	stfp	f2, [r0], #8
    7c74:	ece0 b102 	stfp	f3, [r0], #8
    7c78:	ece0 c102 	stfp	f4, [r0], #8
    7c7c:	ece0 d102 	stfp	f5, [r0], #8
    7c80:	ece0 e102 	stfp	f6, [r0], #8
    7c84:	ece0 f102 	stfp	f7, [r0], #8
    7c88:	4770      	bx	lr
    7c8a:	bf00      	nop

00007c8c <__gnu_Unwind_Restore_WMMXC>:
    7c8c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7c90:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    7c94:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7c98:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    7c9c:	4770      	bx	lr
    7c9e:	bf00      	nop

00007ca0 <__gnu_Unwind_Save_WMMXC>:
    7ca0:	fca0 8101 	stc2	1, cr8, [r0], #4
    7ca4:	fca0 9101 	stc2	1, cr9, [r0], #4
    7ca8:	fca0 a101 	stc2	1, cr10, [r0], #4
    7cac:	fca0 b101 	stc2	1, cr11, [r0], #4
    7cb0:	4770      	bx	lr
    7cb2:	bf00      	nop

00007cb4 <_Unwind_RaiseException>:
    7cb4:	46ec      	mov	ip, sp
    7cb6:	b500      	push	{lr}
    7cb8:	e92d 5000 	stmdb	sp!, {ip, lr}
    7cbc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7cc0:	f04f 0300 	mov.w	r3, #0
    7cc4:	e92d 000c 	stmdb	sp!, {r2, r3}
    7cc8:	a901      	add	r1, sp, #4
    7cca:	f7ff fbf1 	bl	74b0 <__gnu_Unwind_RaiseException>
    7cce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7cd2:	b012      	add	sp, #72	; 0x48
    7cd4:	4770      	bx	lr
    7cd6:	bf00      	nop

00007cd8 <_Unwind_Resume>:
    7cd8:	46ec      	mov	ip, sp
    7cda:	b500      	push	{lr}
    7cdc:	e92d 5000 	stmdb	sp!, {ip, lr}
    7ce0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7ce4:	f04f 0300 	mov.w	r3, #0
    7ce8:	e92d 000c 	stmdb	sp!, {r2, r3}
    7cec:	a901      	add	r1, sp, #4
    7cee:	f7ff fc19 	bl	7524 <__gnu_Unwind_Resume>
    7cf2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7cf6:	b012      	add	sp, #72	; 0x48
    7cf8:	4770      	bx	lr
    7cfa:	bf00      	nop

00007cfc <_Unwind_Resume_or_Rethrow>:
    7cfc:	46ec      	mov	ip, sp
    7cfe:	b500      	push	{lr}
    7d00:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d04:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d08:	f04f 0300 	mov.w	r3, #0
    7d0c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7d10:	a901      	add	r1, sp, #4
    7d12:	f7ff fc29 	bl	7568 <__gnu_Unwind_Resume_or_Rethrow>
    7d16:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7d1a:	b012      	add	sp, #72	; 0x48
    7d1c:	4770      	bx	lr
    7d1e:	bf00      	nop

00007d20 <_Unwind_ForcedUnwind>:
    7d20:	46ec      	mov	ip, sp
    7d22:	b500      	push	{lr}
    7d24:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d2c:	f04f 0300 	mov.w	r3, #0
    7d30:	e92d 000c 	stmdb	sp!, {r2, r3}
    7d34:	ab01      	add	r3, sp, #4
    7d36:	f7ff fbeb 	bl	7510 <__gnu_Unwind_ForcedUnwind>
    7d3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7d3e:	b012      	add	sp, #72	; 0x48
    7d40:	4770      	bx	lr
    7d42:	bf00      	nop

00007d44 <_Unwind_Backtrace>:
    7d44:	46ec      	mov	ip, sp
    7d46:	b500      	push	{lr}
    7d48:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d50:	f04f 0300 	mov.w	r3, #0
    7d54:	e92d 000c 	stmdb	sp!, {r2, r3}
    7d58:	aa01      	add	r2, sp, #4
    7d5a:	f7ff fc5d 	bl	7618 <__gnu_Unwind_Backtrace>
    7d5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7d62:	b012      	add	sp, #72	; 0x48
    7d64:	4770      	bx	lr
    7d66:	bf00      	nop

00007d68 <next_unwind_byte>:
    7d68:	7a02      	ldrb	r2, [r0, #8]
    7d6a:	b97a      	cbnz	r2, 7d8c <next_unwind_byte+0x24>
    7d6c:	7a43      	ldrb	r3, [r0, #9]
    7d6e:	b1a3      	cbz	r3, 7d9a <next_unwind_byte+0x32>
    7d70:	6842      	ldr	r2, [r0, #4]
    7d72:	3b01      	subs	r3, #1
    7d74:	b410      	push	{r4}
    7d76:	7243      	strb	r3, [r0, #9]
    7d78:	6813      	ldr	r3, [r2, #0]
    7d7a:	2103      	movs	r1, #3
    7d7c:	1d14      	adds	r4, r2, #4
    7d7e:	7201      	strb	r1, [r0, #8]
    7d80:	021a      	lsls	r2, r3, #8
    7d82:	6044      	str	r4, [r0, #4]
    7d84:	6002      	str	r2, [r0, #0]
    7d86:	bc10      	pop	{r4}
    7d88:	0e18      	lsrs	r0, r3, #24
    7d8a:	4770      	bx	lr
    7d8c:	6803      	ldr	r3, [r0, #0]
    7d8e:	3a01      	subs	r2, #1
    7d90:	7202      	strb	r2, [r0, #8]
    7d92:	021a      	lsls	r2, r3, #8
    7d94:	6002      	str	r2, [r0, #0]
    7d96:	0e18      	lsrs	r0, r3, #24
    7d98:	4770      	bx	lr
    7d9a:	20b0      	movs	r0, #176	; 0xb0
    7d9c:	4770      	bx	lr
    7d9e:	bf00      	nop

00007da0 <_Unwind_GetGR.constprop.0>:
    7da0:	b500      	push	{lr}
    7da2:	b085      	sub	sp, #20
    7da4:	aa03      	add	r2, sp, #12
    7da6:	2300      	movs	r3, #0
    7da8:	9200      	str	r2, [sp, #0]
    7daa:	4619      	mov	r1, r3
    7dac:	220c      	movs	r2, #12
    7dae:	f7ff fbeb 	bl	7588 <_Unwind_VRS_Get>
    7db2:	9803      	ldr	r0, [sp, #12]
    7db4:	b005      	add	sp, #20
    7db6:	f85d fb04 	ldr.w	pc, [sp], #4
    7dba:	bf00      	nop

00007dbc <unwind_UCB_from_context>:
    7dbc:	e7f0      	b.n	7da0 <_Unwind_GetGR.constprop.0>
    7dbe:	bf00      	nop

00007dc0 <__gnu_unwind_execute>:
    7dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7dc4:	4605      	mov	r5, r0
    7dc6:	b085      	sub	sp, #20
    7dc8:	460e      	mov	r6, r1
    7dca:	f04f 0800 	mov.w	r8, #0
    7dce:	4630      	mov	r0, r6
    7dd0:	f7ff ffca 	bl	7d68 <next_unwind_byte>
    7dd4:	28b0      	cmp	r0, #176	; 0xb0
    7dd6:	4604      	mov	r4, r0
    7dd8:	f000 80b2 	beq.w	7f40 <__gnu_unwind_execute+0x180>
    7ddc:	0607      	lsls	r7, r0, #24
    7dde:	d520      	bpl.n	7e22 <__gnu_unwind_execute+0x62>
    7de0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7de4:	2b80      	cmp	r3, #128	; 0x80
    7de6:	d04d      	beq.n	7e84 <__gnu_unwind_execute+0xc4>
    7de8:	2b90      	cmp	r3, #144	; 0x90
    7dea:	d036      	beq.n	7e5a <__gnu_unwind_execute+0x9a>
    7dec:	2ba0      	cmp	r3, #160	; 0xa0
    7dee:	d060      	beq.n	7eb2 <__gnu_unwind_execute+0xf2>
    7df0:	2bb0      	cmp	r3, #176	; 0xb0
    7df2:	d074      	beq.n	7ede <__gnu_unwind_execute+0x11e>
    7df4:	2bc0      	cmp	r3, #192	; 0xc0
    7df6:	f000 808b 	beq.w	7f10 <__gnu_unwind_execute+0x150>
    7dfa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7dfe:	2bd0      	cmp	r3, #208	; 0xd0
    7e00:	d10b      	bne.n	7e1a <__gnu_unwind_execute+0x5a>
    7e02:	f000 0207 	and.w	r2, r0, #7
    7e06:	3201      	adds	r2, #1
    7e08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7e0c:	2305      	movs	r3, #5
    7e0e:	2101      	movs	r1, #1
    7e10:	4628      	mov	r0, r5
    7e12:	f7ff fd97 	bl	7944 <_Unwind_VRS_Pop>
    7e16:	2800      	cmp	r0, #0
    7e18:	d0d9      	beq.n	7dce <__gnu_unwind_execute+0xe>
    7e1a:	2009      	movs	r0, #9
    7e1c:	b005      	add	sp, #20
    7e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7e22:	f10d 090c 	add.w	r9, sp, #12
    7e26:	2300      	movs	r3, #0
    7e28:	4619      	mov	r1, r3
    7e2a:	0087      	lsls	r7, r0, #2
    7e2c:	f8cd 9000 	str.w	r9, [sp]
    7e30:	220d      	movs	r2, #13
    7e32:	4628      	mov	r0, r5
    7e34:	f7ff fba8 	bl	7588 <_Unwind_VRS_Get>
    7e38:	b2ff      	uxtb	r7, r7
    7e3a:	9b03      	ldr	r3, [sp, #12]
    7e3c:	f8cd 9000 	str.w	r9, [sp]
    7e40:	3704      	adds	r7, #4
    7e42:	0660      	lsls	r0, r4, #25
    7e44:	bf4c      	ite	mi
    7e46:	1bdf      	submi	r7, r3, r7
    7e48:	18ff      	addpl	r7, r7, r3
    7e4a:	2300      	movs	r3, #0
    7e4c:	4619      	mov	r1, r3
    7e4e:	220d      	movs	r2, #13
    7e50:	4628      	mov	r0, r5
    7e52:	9703      	str	r7, [sp, #12]
    7e54:	f7ff fbbc 	bl	75d0 <_Unwind_VRS_Set>
    7e58:	e7b9      	b.n	7dce <__gnu_unwind_execute+0xe>
    7e5a:	f000 030d 	and.w	r3, r0, #13
    7e5e:	2b0d      	cmp	r3, #13
    7e60:	d0db      	beq.n	7e1a <__gnu_unwind_execute+0x5a>
    7e62:	af03      	add	r7, sp, #12
    7e64:	2300      	movs	r3, #0
    7e66:	f000 020f 	and.w	r2, r0, #15
    7e6a:	4619      	mov	r1, r3
    7e6c:	9700      	str	r7, [sp, #0]
    7e6e:	4628      	mov	r0, r5
    7e70:	f7ff fb8a 	bl	7588 <_Unwind_VRS_Get>
    7e74:	2300      	movs	r3, #0
    7e76:	9700      	str	r7, [sp, #0]
    7e78:	4619      	mov	r1, r3
    7e7a:	220d      	movs	r2, #13
    7e7c:	4628      	mov	r0, r5
    7e7e:	f7ff fba7 	bl	75d0 <_Unwind_VRS_Set>
    7e82:	e7a4      	b.n	7dce <__gnu_unwind_execute+0xe>
    7e84:	4630      	mov	r0, r6
    7e86:	f7ff ff6f 	bl	7d68 <next_unwind_byte>
    7e8a:	0224      	lsls	r4, r4, #8
    7e8c:	4320      	orrs	r0, r4
    7e8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    7e92:	d0c2      	beq.n	7e1a <__gnu_unwind_execute+0x5a>
    7e94:	0104      	lsls	r4, r0, #4
    7e96:	2300      	movs	r3, #0
    7e98:	b2a2      	uxth	r2, r4
    7e9a:	4619      	mov	r1, r3
    7e9c:	4628      	mov	r0, r5
    7e9e:	f7ff fd51 	bl	7944 <_Unwind_VRS_Pop>
    7ea2:	2800      	cmp	r0, #0
    7ea4:	d1b9      	bne.n	7e1a <__gnu_unwind_execute+0x5a>
    7ea6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    7eaa:	bf18      	it	ne
    7eac:	f04f 0801 	movne.w	r8, #1
    7eb0:	e78d      	b.n	7dce <__gnu_unwind_execute+0xe>
    7eb2:	43c2      	mvns	r2, r0
    7eb4:	f002 0307 	and.w	r3, r2, #7
    7eb8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    7ebc:	411a      	asrs	r2, r3
    7ebe:	0701      	lsls	r1, r0, #28
    7ec0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7ec4:	f04f 0300 	mov.w	r3, #0
    7ec8:	bf48      	it	mi
    7eca:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    7ece:	4619      	mov	r1, r3
    7ed0:	4628      	mov	r0, r5
    7ed2:	f7ff fd37 	bl	7944 <_Unwind_VRS_Pop>
    7ed6:	2800      	cmp	r0, #0
    7ed8:	f43f af79 	beq.w	7dce <__gnu_unwind_execute+0xe>
    7edc:	e79d      	b.n	7e1a <__gnu_unwind_execute+0x5a>
    7ede:	28b1      	cmp	r0, #177	; 0xb1
    7ee0:	d033      	beq.n	7f4a <__gnu_unwind_execute+0x18a>
    7ee2:	28b2      	cmp	r0, #178	; 0xb2
    7ee4:	f000 808b 	beq.w	7ffe <__gnu_unwind_execute+0x23e>
    7ee8:	28b3      	cmp	r0, #179	; 0xb3
    7eea:	d039      	beq.n	7f60 <__gnu_unwind_execute+0x1a0>
    7eec:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7ef0:	2bb4      	cmp	r3, #180	; 0xb4
    7ef2:	d092      	beq.n	7e1a <__gnu_unwind_execute+0x5a>
    7ef4:	f000 0207 	and.w	r2, r0, #7
    7ef8:	3201      	adds	r2, #1
    7efa:	2301      	movs	r3, #1
    7efc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7f00:	4619      	mov	r1, r3
    7f02:	4628      	mov	r0, r5
    7f04:	f7ff fd1e 	bl	7944 <_Unwind_VRS_Pop>
    7f08:	2800      	cmp	r0, #0
    7f0a:	f43f af60 	beq.w	7dce <__gnu_unwind_execute+0xe>
    7f0e:	e784      	b.n	7e1a <__gnu_unwind_execute+0x5a>
    7f10:	28c6      	cmp	r0, #198	; 0xc6
    7f12:	d042      	beq.n	7f9a <__gnu_unwind_execute+0x1da>
    7f14:	28c7      	cmp	r0, #199	; 0xc7
    7f16:	d04c      	beq.n	7fb2 <__gnu_unwind_execute+0x1f2>
    7f18:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7f1c:	2bc0      	cmp	r3, #192	; 0xc0
    7f1e:	d05b      	beq.n	7fd8 <__gnu_unwind_execute+0x218>
    7f20:	28c8      	cmp	r0, #200	; 0xc8
    7f22:	d060      	beq.n	7fe6 <__gnu_unwind_execute+0x226>
    7f24:	28c9      	cmp	r0, #201	; 0xc9
    7f26:	f47f af78 	bne.w	7e1a <__gnu_unwind_execute+0x5a>
    7f2a:	4630      	mov	r0, r6
    7f2c:	f7ff ff1c 	bl	7d68 <next_unwind_byte>
    7f30:	0302      	lsls	r2, r0, #12
    7f32:	f000 000f 	and.w	r0, r0, #15
    7f36:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    7f3a:	3001      	adds	r0, #1
    7f3c:	4302      	orrs	r2, r0
    7f3e:	e765      	b.n	7e0c <__gnu_unwind_execute+0x4c>
    7f40:	f1b8 0f00 	cmp.w	r8, #0
    7f44:	d018      	beq.n	7f78 <__gnu_unwind_execute+0x1b8>
    7f46:	2000      	movs	r0, #0
    7f48:	e768      	b.n	7e1c <__gnu_unwind_execute+0x5c>
    7f4a:	4630      	mov	r0, r6
    7f4c:	f7ff ff0c 	bl	7d68 <next_unwind_byte>
    7f50:	4602      	mov	r2, r0
    7f52:	2800      	cmp	r0, #0
    7f54:	f43f af61 	beq.w	7e1a <__gnu_unwind_execute+0x5a>
    7f58:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7f5c:	d0d0      	beq.n	7f00 <__gnu_unwind_execute+0x140>
    7f5e:	e75c      	b.n	7e1a <__gnu_unwind_execute+0x5a>
    7f60:	4630      	mov	r0, r6
    7f62:	f7ff ff01 	bl	7d68 <next_unwind_byte>
    7f66:	0301      	lsls	r1, r0, #12
    7f68:	f000 000f 	and.w	r0, r0, #15
    7f6c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7f70:	1c42      	adds	r2, r0, #1
    7f72:	2301      	movs	r3, #1
    7f74:	430a      	orrs	r2, r1
    7f76:	e7c3      	b.n	7f00 <__gnu_unwind_execute+0x140>
    7f78:	ac03      	add	r4, sp, #12
    7f7a:	4643      	mov	r3, r8
    7f7c:	220e      	movs	r2, #14
    7f7e:	4641      	mov	r1, r8
    7f80:	9400      	str	r4, [sp, #0]
    7f82:	4628      	mov	r0, r5
    7f84:	f7ff fb00 	bl	7588 <_Unwind_VRS_Get>
    7f88:	9400      	str	r4, [sp, #0]
    7f8a:	4628      	mov	r0, r5
    7f8c:	4643      	mov	r3, r8
    7f8e:	220f      	movs	r2, #15
    7f90:	4641      	mov	r1, r8
    7f92:	f7ff fb1d 	bl	75d0 <_Unwind_VRS_Set>
    7f96:	4640      	mov	r0, r8
    7f98:	e740      	b.n	7e1c <__gnu_unwind_execute+0x5c>
    7f9a:	4630      	mov	r0, r6
    7f9c:	f7ff fee4 	bl	7d68 <next_unwind_byte>
    7fa0:	0301      	lsls	r1, r0, #12
    7fa2:	f000 000f 	and.w	r0, r0, #15
    7fa6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7faa:	1c42      	adds	r2, r0, #1
    7fac:	2303      	movs	r3, #3
    7fae:	430a      	orrs	r2, r1
    7fb0:	e7a6      	b.n	7f00 <__gnu_unwind_execute+0x140>
    7fb2:	4630      	mov	r0, r6
    7fb4:	f7ff fed8 	bl	7d68 <next_unwind_byte>
    7fb8:	4602      	mov	r2, r0
    7fba:	2800      	cmp	r0, #0
    7fbc:	f43f af2d 	beq.w	7e1a <__gnu_unwind_execute+0x5a>
    7fc0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7fc4:	f47f af29 	bne.w	7e1a <__gnu_unwind_execute+0x5a>
    7fc8:	2104      	movs	r1, #4
    7fca:	4628      	mov	r0, r5
    7fcc:	f7ff fcba 	bl	7944 <_Unwind_VRS_Pop>
    7fd0:	2800      	cmp	r0, #0
    7fd2:	f43f aefc 	beq.w	7dce <__gnu_unwind_execute+0xe>
    7fd6:	e720      	b.n	7e1a <__gnu_unwind_execute+0x5a>
    7fd8:	f000 020f 	and.w	r2, r0, #15
    7fdc:	3201      	adds	r2, #1
    7fde:	2303      	movs	r3, #3
    7fe0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    7fe4:	e78c      	b.n	7f00 <__gnu_unwind_execute+0x140>
    7fe6:	4630      	mov	r0, r6
    7fe8:	f7ff febe 	bl	7d68 <next_unwind_byte>
    7fec:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    7ff0:	f000 030f 	and.w	r3, r0, #15
    7ff4:	3210      	adds	r2, #16
    7ff6:	3301      	adds	r3, #1
    7ff8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    7ffc:	e706      	b.n	7e0c <__gnu_unwind_execute+0x4c>
    7ffe:	2300      	movs	r3, #0
    8000:	f10d 090c 	add.w	r9, sp, #12
    8004:	220d      	movs	r2, #13
    8006:	4619      	mov	r1, r3
    8008:	f8cd 9000 	str.w	r9, [sp]
    800c:	4628      	mov	r0, r5
    800e:	f7ff fabb 	bl	7588 <_Unwind_VRS_Get>
    8012:	4630      	mov	r0, r6
    8014:	f7ff fea8 	bl	7d68 <next_unwind_byte>
    8018:	0602      	lsls	r2, r0, #24
    801a:	f04f 0702 	mov.w	r7, #2
    801e:	d50c      	bpl.n	803a <__gnu_unwind_execute+0x27a>
    8020:	9b03      	ldr	r3, [sp, #12]
    8022:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    8026:	40b8      	lsls	r0, r7
    8028:	4403      	add	r3, r0
    802a:	4630      	mov	r0, r6
    802c:	9303      	str	r3, [sp, #12]
    802e:	f7ff fe9b 	bl	7d68 <next_unwind_byte>
    8032:	0603      	lsls	r3, r0, #24
    8034:	f107 0707 	add.w	r7, r7, #7
    8038:	d4f2      	bmi.n	8020 <__gnu_unwind_execute+0x260>
    803a:	9b03      	ldr	r3, [sp, #12]
    803c:	f8cd 9000 	str.w	r9, [sp]
    8040:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    8044:	f503 7201 	add.w	r2, r3, #516	; 0x204
    8048:	40bc      	lsls	r4, r7
    804a:	2300      	movs	r3, #0
    804c:	4414      	add	r4, r2
    804e:	4619      	mov	r1, r3
    8050:	220d      	movs	r2, #13
    8052:	4628      	mov	r0, r5
    8054:	9403      	str	r4, [sp, #12]
    8056:	f7ff fabb 	bl	75d0 <_Unwind_VRS_Set>
    805a:	e6b8      	b.n	7dce <__gnu_unwind_execute+0xe>

0000805c <__gnu_unwind_frame>:
    805c:	b510      	push	{r4, lr}
    805e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    8060:	b084      	sub	sp, #16
    8062:	6853      	ldr	r3, [r2, #4]
    8064:	2403      	movs	r4, #3
    8066:	f88d 400c 	strb.w	r4, [sp, #12]
    806a:	021b      	lsls	r3, r3, #8
    806c:	f102 0408 	add.w	r4, r2, #8
    8070:	4608      	mov	r0, r1
    8072:	79d2      	ldrb	r2, [r2, #7]
    8074:	9301      	str	r3, [sp, #4]
    8076:	a901      	add	r1, sp, #4
    8078:	9402      	str	r4, [sp, #8]
    807a:	f88d 200d 	strb.w	r2, [sp, #13]
    807e:	f7ff fe9f 	bl	7dc0 <__gnu_unwind_execute>
    8082:	b004      	add	sp, #16
    8084:	bd10      	pop	{r4, pc}
    8086:	bf00      	nop

00008088 <_Unwind_GetRegionStart>:
    8088:	b508      	push	{r3, lr}
    808a:	f7ff fe97 	bl	7dbc <unwind_UCB_from_context>
    808e:	6c80      	ldr	r0, [r0, #72]	; 0x48
    8090:	bd08      	pop	{r3, pc}
    8092:	bf00      	nop

00008094 <_Unwind_GetLanguageSpecificData>:
    8094:	b508      	push	{r3, lr}
    8096:	f7ff fe91 	bl	7dbc <unwind_UCB_from_context>
    809a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    809c:	79c3      	ldrb	r3, [r0, #7]
    809e:	3302      	adds	r3, #2
    80a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    80a4:	bd08      	pop	{r3, pc}
    80a6:	bf00      	nop

000080a8 <__aeabi_idiv0>:
    80a8:	4770      	bx	lr
    80aa:	bf00      	nop

000080ac <abort>:
    80ac:	b508      	push	{r3, lr}
    80ae:	2006      	movs	r0, #6
    80b0:	f000 f874 	bl	819c <raise>
    80b4:	2001      	movs	r0, #1
    80b6:	f7fb fae3 	bl	3680 <_exit>
    80ba:	Address 0x00000000000080ba is out of bounds.


000080bc <__cxa_atexit>:
    80bc:	b510      	push	{r4, lr}
    80be:	4c05      	ldr	r4, [pc, #20]	; (80d4 <__cxa_atexit+0x18>)
    80c0:	4613      	mov	r3, r2
    80c2:	b12c      	cbz	r4, 80d0 <__cxa_atexit+0x14>
    80c4:	460a      	mov	r2, r1
    80c6:	4601      	mov	r1, r0
    80c8:	2002      	movs	r0, #2
    80ca:	f3af 8000 	nop.w
    80ce:	bd10      	pop	{r4, pc}
    80d0:	4620      	mov	r0, r4
    80d2:	e7fc      	b.n	80ce <__cxa_atexit+0x12>
    80d4:	00000000 	.word	0x00000000

000080d8 <__libc_init_array>:
    80d8:	b570      	push	{r4, r5, r6, lr}
    80da:	4d0d      	ldr	r5, [pc, #52]	; (8110 <__libc_init_array+0x38>)
    80dc:	4c0d      	ldr	r4, [pc, #52]	; (8114 <__libc_init_array+0x3c>)
    80de:	1b64      	subs	r4, r4, r5
    80e0:	10a4      	asrs	r4, r4, #2
    80e2:	2600      	movs	r6, #0
    80e4:	42a6      	cmp	r6, r4
    80e6:	d109      	bne.n	80fc <__libc_init_array+0x24>
    80e8:	4d0b      	ldr	r5, [pc, #44]	; (8118 <__libc_init_array+0x40>)
    80ea:	4c0c      	ldr	r4, [pc, #48]	; (811c <__libc_init_array+0x44>)
    80ec:	f7f8 f908 	bl	300 <_init>
    80f0:	1b64      	subs	r4, r4, r5
    80f2:	10a4      	asrs	r4, r4, #2
    80f4:	2600      	movs	r6, #0
    80f6:	42a6      	cmp	r6, r4
    80f8:	d105      	bne.n	8106 <__libc_init_array+0x2e>
    80fa:	bd70      	pop	{r4, r5, r6, pc}
    80fc:	f855 3b04 	ldr.w	r3, [r5], #4
    8100:	4798      	blx	r3
    8102:	3601      	adds	r6, #1
    8104:	e7ee      	b.n	80e4 <__libc_init_array+0xc>
    8106:	f855 3b04 	ldr.w	r3, [r5], #4
    810a:	4798      	blx	r3
    810c:	3601      	adds	r6, #1
    810e:	e7f2      	b.n	80f6 <__libc_init_array+0x1e>
    8110:	0000030c 	.word	0x0000030c
    8114:	0000030c 	.word	0x0000030c
    8118:	0000030c 	.word	0x0000030c
    811c:	00000320 	.word	0x00000320

00008120 <memcpy>:
    8120:	440a      	add	r2, r1
    8122:	4291      	cmp	r1, r2
    8124:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    8128:	d100      	bne.n	812c <memcpy+0xc>
    812a:	4770      	bx	lr
    812c:	b510      	push	{r4, lr}
    812e:	f811 4b01 	ldrb.w	r4, [r1], #1
    8132:	f803 4f01 	strb.w	r4, [r3, #1]!
    8136:	4291      	cmp	r1, r2
    8138:	d1f9      	bne.n	812e <memcpy+0xe>
    813a:	bd10      	pop	{r4, pc}

0000813c <memset>:
    813c:	4402      	add	r2, r0
    813e:	4603      	mov	r3, r0
    8140:	4293      	cmp	r3, r2
    8142:	d100      	bne.n	8146 <memset+0xa>
    8144:	4770      	bx	lr
    8146:	f803 1b01 	strb.w	r1, [r3], #1
    814a:	e7f9      	b.n	8140 <memset+0x4>

0000814c <_raise_r>:
    814c:	291f      	cmp	r1, #31
    814e:	b538      	push	{r3, r4, r5, lr}
    8150:	4604      	mov	r4, r0
    8152:	460d      	mov	r5, r1
    8154:	d904      	bls.n	8160 <_raise_r+0x14>
    8156:	2316      	movs	r3, #22
    8158:	6003      	str	r3, [r0, #0]
    815a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    815e:	bd38      	pop	{r3, r4, r5, pc}
    8160:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8162:	b112      	cbz	r2, 816a <_raise_r+0x1e>
    8164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8168:	b94b      	cbnz	r3, 817e <_raise_r+0x32>
    816a:	4620      	mov	r0, r4
    816c:	f000 f830 	bl	81d0 <_getpid_r>
    8170:	462a      	mov	r2, r5
    8172:	4601      	mov	r1, r0
    8174:	4620      	mov	r0, r4
    8176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    817a:	f000 b817 	b.w	81ac <_kill_r>
    817e:	2b01      	cmp	r3, #1
    8180:	d00a      	beq.n	8198 <_raise_r+0x4c>
    8182:	1c59      	adds	r1, r3, #1
    8184:	d103      	bne.n	818e <_raise_r+0x42>
    8186:	2316      	movs	r3, #22
    8188:	6003      	str	r3, [r0, #0]
    818a:	2001      	movs	r0, #1
    818c:	e7e7      	b.n	815e <_raise_r+0x12>
    818e:	2400      	movs	r4, #0
    8190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    8194:	4628      	mov	r0, r5
    8196:	4798      	blx	r3
    8198:	2000      	movs	r0, #0
    819a:	e7e0      	b.n	815e <_raise_r+0x12>

0000819c <raise>:
    819c:	4b02      	ldr	r3, [pc, #8]	; (81a8 <raise+0xc>)
    819e:	4601      	mov	r1, r0
    81a0:	6818      	ldr	r0, [r3, #0]
    81a2:	f7ff bfd3 	b.w	814c <_raise_r>
    81a6:	bf00      	nop
    81a8:	10000c9c 	.word	0x10000c9c

000081ac <_kill_r>:
    81ac:	b538      	push	{r3, r4, r5, lr}
    81ae:	4d07      	ldr	r5, [pc, #28]	; (81cc <_kill_r+0x20>)
    81b0:	2300      	movs	r3, #0
    81b2:	4604      	mov	r4, r0
    81b4:	4608      	mov	r0, r1
    81b6:	4611      	mov	r1, r2
    81b8:	602b      	str	r3, [r5, #0]
    81ba:	f7fb fa17 	bl	35ec <_kill>
    81be:	1c43      	adds	r3, r0, #1
    81c0:	d102      	bne.n	81c8 <_kill_r+0x1c>
    81c2:	682b      	ldr	r3, [r5, #0]
    81c4:	b103      	cbz	r3, 81c8 <_kill_r+0x1c>
    81c6:	6023      	str	r3, [r4, #0]
    81c8:	bd38      	pop	{r3, r4, r5, pc}
    81ca:	bf00      	nop
    81cc:	1000171c 	.word	0x1000171c

000081d0 <_getpid_r>:
    81d0:	f7fb ba04 	b.w	35dc <_getpid>

000081d4 <strlen>:
    81d4:	4603      	mov	r3, r0
    81d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    81da:	2a00      	cmp	r2, #0
    81dc:	d1fb      	bne.n	81d6 <strlen+0x2>
    81de:	1a18      	subs	r0, r3, r0
    81e0:	3801      	subs	r0, #1
    81e2:	4770      	bx	lr

000081e4 <sjsu::lpc40xx::Pin::kFunction>:
    81e4:	0300 ffff                                   ....

000081e8 <sjsu::lpc40xx::Pin::kResistor>:
    81e8:	0203 ffff                                   ....

000081ec <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    81ec:	0107 ffff                                   ....

000081f0 <sjsu::lpc40xx::Pin::kOpenDrain>:
    81f0:	010a ffff                                   ....

000081f4 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    81f4:	0302 0100                                   ....

000081f8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    81f8:	6970 2e6e 7068 0070 6976 7472 6175 206c     pin.hpp.virtual 
    8208:	6f76 6469 7320 736a 3a75 6c3a 6370 3731     void sjsu::lpc17
    8218:	7878 3a3a 6950 3a6e 533a 7465 7341 6e41     xx::Pin::SetAsAn
    8228:	6c61 676f 6f4d 6564 6228 6f6f 296c 6320     alogMode(bool) c
    8238:	6e6f 7473 0000 0000 5b1b 3334 206d 4157     onst.....[43m WA
    8248:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    8258:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8268:	256d 3e64 1b20 305b 333b 6d37 6e55 7573     m%d> .[0;37mUnsu
    8278:	7070 726f 6574 2064 706f 7265 7461 6f69     pported operatio
    8288:	1b6e 305b 0a6d 0000 6f62 6c6f 7320 736a     n.[0m...bool sjs
    8298:	3a75 6c3a 6370 3034 7878 3a3a 7047 6f69     u::lpc40xx::Gpio
    82a8:	3a3a 7349 5641 6c61 6469 6f50 7472 2928     ::IsAValidPort()
    82b8:	6320 6e6f 7473 0000 5b1b 3334 206d 4157      const...[43m WA
    82c8:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    82d8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    82e8:	256d 3e64 1b20 305b 333b 6d37 6854 7369     m%d> .[0;37mThis
    82f8:	6720 6970 206f 6f70 7472 6320 6e61 6f6e      gpio port canno
    8308:	2074 6562 7520 6573 2064 6f66 2072 7845     t be used for Ex
    8318:	6574 6e72 6c61 4920 746e 7265 7572 7470     ternal Interrupt
    8328:	2e73 4e20 6565 2064 6f74 7520 6573 4720     s. Need to use G
    8338:	4950 734f 6f20 206e 6f50 7472 3020 6f20     PIOs on Port 0 o
    8348:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    8358:	6f76 6469 7320 736a 3a75 533a 6473 3331     void sjsu::Ssd13
    8368:	3630 3a3a 7257 7469 2865 6975 746e 3233     06::Write(uint32
    8378:	745f 202c 6a73 7573 3a3a 7353 3164 3033     _t, sjsu::Ssd130
    8388:	3a36 543a 6172 736e 6361 6974 6e6f 202c     6::Transaction, 
    8398:	6973 657a 745f 0029 2020 4420 4245 4755     size_t).   DEBUG
    83a8:	5b1b 3b30 3439 3a6d 7325 1b3a 305b 393b     .[0;94m:%s:.[0;9
    83b8:	6d32 7325 1b3a 305b 393b 6d33 6425 203e     2m%s:.[0;93m%d> 
    83c8:	5b1b 3b30 3733 736d 6e65 2064 203d 7830     .[0;37msend = 0x
    83d8:	5825 5b1b 6d30 000a 6544 6963 616d 206c     %X.[0m..Decimal 
    83e8:	3a31 2520 0a64 0000 6544 6963 616d 206c     1: %d...Decimal 
    83f8:	3a32 2520 0a64 0000 6544 6963 616d 206c     2: %d...Decimal 
    8408:	6f54 6174 3a6c 250a 0a64 0000 6942 616e     Total:.%d...Bina
    8418:	7972 5420 746f 6c61 0a3a 0000 6425 ff00     ry Total:...%d..

00008428 <sjsu::lpc40xx::Gpio::IsAValidPort() const::file>:
    8428:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00008434 <sjsu::lpc40xx::I2c::Bus::kI2c0SdaPin>:
    8434:	85a4 0000 0000 0000                         ........

0000843c <sjsu::lpc40xx::I2c::Bus::kI2c0SclPin>:
    843c:	85a4 0000 0100 0000                         ........

00008444 <sjsu::lpc40xx::I2c::Bus::kI2c1SdaPin>:
    8444:	85a4 0000 1e01 0000                         ........

0000844c <sjsu::lpc40xx::I2c::Bus::kI2c1SclPin>:
    844c:	85a4 0000 1f01 0000                         ........

00008454 <sjsu::lpc40xx::I2c::Bus::kI2c2SdaPin>:
    8454:	85a4 0000 0a00 0000                         ........

0000845c <sjsu::lpc40xx::I2c::Bus::kI2c2SclPin>:
    845c:	85a4 0000 0b00 0000                         ........

00008464 <sjsu::lpc40xx::Spi::ControlRegister0::kDataBit>:
    8464:	0400 ffff                                   ....

00008468 <sjsu::lpc40xx::Spi::ControlRegister0::kFrameBit>:
    8468:	0204 ffff                                   ....

0000846c <sjsu::lpc40xx::Spi::ControlRegister0::kPolarityBit>:
    846c:	0106 ffff                                   ....

00008470 <sjsu::lpc40xx::Spi::ControlRegister0::kPhaseBit>:
    8470:	0107 ffff                                   ....

00008474 <sjsu::lpc40xx::Spi::ControlRegister0::kDividerBit>:
    8474:	0808 ffff                                   ....

00008478 <sjsu::lpc40xx::Spi::ControlRegister1::kSpiEnable>:
    8478:	0101 ffff                                   ....

0000847c <sjsu::lpc40xx::Spi::ControlRegister1::kSlaveModeBit>:
    847c:	0102 ffff                                   ....

00008480 <sjsu::lpc40xx::Spi::StatusRegister::kDataLineBusyBit>:
    8480:	0104 ffff                                   ....

00008484 <sjsu::lpc40xx::Spi::Bus::kMosi0>:
    8484:	85a4 0000 1200 0000                         ........

0000848c <sjsu::lpc40xx::Spi::Bus::kMiso0>:
    848c:	85a4 0000 1100 0000                         ........

00008494 <sjsu::lpc40xx::Spi::Bus::kSck0>:
    8494:	85a4 0000 0f00 0000                         ........

0000849c <sjsu::lpc40xx::Spi::Bus::kMosi1>:
    849c:	85a4 0000 0900 0000                         ........

000084a4 <sjsu::lpc40xx::Spi::Bus::kMiso1>:
    84a4:	85a4 0000 0800 0000                         ........

000084ac <sjsu::lpc40xx::Spi::Bus::kSck1>:
    84ac:	85a4 0000 0700 0000                         ........

000084b4 <sjsu::lpc40xx::Spi::Bus::kMosi2>:
    84b4:	85a4 0000 0101 0000                         ........

000084bc <sjsu::lpc40xx::Spi::Bus::kMiso2>:
    84bc:	85a4 0000 0401 0000                         ........

000084c4 <sjsu::lpc40xx::Spi::Bus::kSck2>:
    84c4:	85a4 0000 0001 0000                         ........

000084cc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)::file>:
    84cc:	7373 3164 3033 2e36 7068 0070               ssd1306.hpp.

000084d8 <vtable for sjsu::Button>:
	...
    84e0:	1cf9 0000 1d35 0000 1dbd 0000 1e45 0000     ....5.......E...
    84f0:	1e65 0000                                   e...

000084f4 <vtable for sjsu::Ssd1306>:
	...
    84fc:	1473 0000 1489 0000 149f 0000 1591 0000     s...............
    850c:	144b 0000 145f 0000 1771 0000 1791 0000     K..._...q.......
    851c:	180f 0000                                   ....

00008520 <vtable for sjsu::lpc40xx::Spi>:
	...
    8528:	10ad 0000 11e9 0000 1239 0000 1321 0000     ........9...!...

00008538 <vtable for sjsu::lpc40xx::Gpio>:
	...
    8540:	0cd9 0000 0d41 0000 0d85 0000 0db3 0000     ....A...........
    8550:	0dd7 0000 0e25 0000 0f01 0000               ....%.......

0000855c <vtable for sjsu::lpc17xx::Pin>:
	...
    8564:	0909 0000 091d 0000 097d 0000 0a05 0000     ........}.......
    8574:	09d9 0000                                   ....

00008578 <vtable for sjsu::Gpio>:
	...
    8580:	6b83 0000 6b83 0000 6b83 0000 6b83 0000     .k...k...k...k..
    8590:	6b83 0000 6b83 0000 6b83 0000               .k...k...k..

0000859c <vtable for sjsu::lpc40xx::Pin>:
	...
    85a4:	04e1 0000 04f5 0000 0529 0000 0599 0000     ........).......
    85b4:	055d 0000                                   ]...

000085b8 <vtable for sjsu::Pin>:
	...
    85c0:	6b83 0000 6b83 0000 6b83 0000 6b83 0000     .k...k...k...k..
    85d0:	6b83 0000 2020 6425 2029 7830 3025 5838     .k..  %d) 0x%08X
    85e0:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    85f0:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    8600:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    8610:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    8620:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8630:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8640:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8650:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8660:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8670:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8680:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8690:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    86a0:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    86b0:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    86c0:	6175 206c 6f76 6469 7320 736a 3a75 723a     ual void sjsu::r
    86d0:	6f74 3a73 543a 7361 536b 6863 6465 6c75     tos::TaskSchedul
    86e0:	7265 3a3a 6441 5464 7361 286b 6a73 7573     er::AddTask(sjsu
    86f0:	3a3a 7472 736f 3a3a 6154 6b73 6e49 6574     ::rtos::TaskInte
    8700:	6672 6361 2a65 0029 5b1b 3534 206d 2020     rface*)..[45m   
    8710:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8720:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8730:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8740:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8750:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8760:	2820 6174 6b73 635f 756f 746e 205f 202b      (task_count_ + 
    8770:	2031 203c 6f63 666e 6769 3a3a 546b 7361     1 < config::kTas
    8780:	536b 6863 6465 6c75 7265 6953 657a 0a29     kSchedulerSize).
    8790:	2020 2020 2020 2020 2020 6854 2065 6373               The sc
    87a0:	6568 7564 656c 2072 7369 6320 7275 6572     heduler is curre
    87b0:	746e 796c 6620 6c75 2c6c 7420 6568 7420     ntly full, the t
    87c0:	7361 206b 6977 6c6c 6e20 746f 6220 2065     ask will not be 
    87d0:	6461 6564 2e64 4320 6e6f 6973 6564 2072     added. Consider 
    87e0:	6e69 7263 6165 6973 676e 7420 6568 7320     increasing the s
    87f0:	6863 6465 6c75 7265 7320 7a69 2065 6f63     cheduler size co
    8800:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
    8810:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    8820:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    8830:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8840:	3a3a 7472 736f 3a3a 6154 6b73 6353 6568     ::rtos::TaskSche
    8850:	7564 656c 3a72 523a 6e75 6154 6b73 7628     duler::RunTask(v
    8860:	696f 2a64 0029 0000 5b1b 3534 206d 2020     oid*)....[45m   
    8870:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8880:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8890:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    88a0:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    88b0:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    88c0:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    88d0:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    88e0:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    88f0:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    8900:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    8910:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    8920:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8930:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8940:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8950:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8960:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8970:	5420 7365 6574 3a64 2820 6174 6b73 502e      Tested: (task.P
    8980:	6572 7552 286e 2929 200a 2020 2020 2020     reRun()).       
    8990:	2020 5020 6572 7552 286e 2029 6166 6c69        PreRun() fail
    89a0:	6465 6620 726f 7420 7361 3a6b 2520 2c73     ed for task: %s,
    89b0:	7420 7265 696d 616e 6974 676e 7320 6863      terminating sch
    89c0:	6465 6c75 7265 1b21 305b 1b6d 305b 0a6d     eduler!.[0m.[0m.
    89d0:	0000 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    89e0:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    89f0:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8a00:	1b20 305b 333b 6d37 6e41 6520 7272 726f      .[0;37mAn error
    8a10:	6f20 6363 7275 6572 2c64 7420 6568 6620      occurred, the f
    8a20:	6c6f 6f6c 6977 676e 7420 7361 206b 6977     ollowing task wi
    8a30:	6c6c 6220 2065 7573 7073 6e65 6564 3a64     ll be suspended:
    8a40:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8a50:	6f76 6469 7320 736a 3a75 723a 6f74 3a73     void sjsu::rtos:
    8a60:	543a 7361 536b 6863 6465 6c75 7265 3a3a     :TaskScheduler::
    8a70:	6e49 7469 6169 696c 657a 6c41 546c 7361     InitializeAllTas
    8a80:	736b 2928 0000 0000 5b1b 3534 206d 2020     ks().....[45m   
    8a90:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8aa0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8ab0:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8ac0:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8ad0:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8ae0:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    8af0:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    8b00:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    8b10:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    8b20:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8b30:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8b40:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8b50:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8b60:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8b70:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8b80:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    8b90:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    8ba0:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    8bb0:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    8bc0:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    8bd0:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    8be0:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8bf0:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8c00:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8c10:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8c20:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    8c30:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    8c40:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    8c50:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    8c60:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    8c70:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    8c80:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    8c90:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    8ca0:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    8cb0:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    8cc0:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    8cd0:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    8ce0:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    8cf0:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    8d00:	6b63 7274 6361 2065 5254 4341 5345 223d     cktrace TRACES="
    8d10:	0000 0000 7830 7025 0020 0000 0a22 1b0a     ....0x%p ..."...
    8d20:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    8d30:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    8d40:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    8d50:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    8d60:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    8d70:	6c6c 6465 002e 0000 5b1b 3134 486d 7261     lled.....[41mHar
    8d80:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    8d90:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    8da0:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    8db0:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    8dc0:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    8dd0:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    8de0:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    8df0:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    8e00:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    8e10:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    8e20:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    8e30:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    8e40:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    8e50:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    8e60:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    8e70:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00008e7c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    8e7c:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    8e8c:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    8e9c:	bc20 4cbe 6b28 4e6e 743a 0074                ..L(knN:tt.

00008ea8 <config::kSystemClockRateMhz>:
    8ea8:	0000 4240                                   ..@B

00008eac <config::kRtosFrequency>:
    8eac:	0000 447a 2020 6425 2029 7830 3025 5838     ..zD  %d) 0x%08X
    8ebc:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    8ecc:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    8edc:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    8eec:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    8efc:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8f0c:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8f1c:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8f2c:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8f3c:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8f4c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8f5c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8f6c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8f7c:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8f8c:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8f9c:	6175 206c 6f76 6469 7320 736a 3a75 6c3a     ual void sjsu::l
    8fac:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    8fbc:	746e 6f72 6c6c 7265 3a3a 6553 5074 7265     ntroller::SetPer
    8fcc:	7069 6568 6172 436c 6f6c 6b63 6944 6976     ipheralClockDivi
    8fdc:	6564 2872 6f63 736e 2074 6a73 7573 3a3a     der(const sjsu::
    8fec:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    8ffc:	3a3a 6550 6972 6870 7265 6c61 4449 2c26     ::PeripheralID&,
    900c:	7520 6e69 3874 745f 2029 6f63 736e 0074      uint8_t) const.
    901c:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    902c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    903c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    904c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    905c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    906c:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    907c:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    908c:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    909c:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    90ac:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    90bc:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    90cc:	7254 6361 3a65 000a 6975 746e 3233 745f     Trace:..uint32_t
    90dc:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    90ec:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    90fc:	3a3a 6143 636c 6c75 7461 5065 6c6c 7528     ::CalculatePll(u
    910c:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    911c:	6d3a 6765 6861 7265 7a74 745f 202c 6e75     :megahertz_t, un
    912c:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    913c:	656d 6167 6568 7472 5f7a 2974 6320 6e6f     megahertz_t) con
    914c:	7473 0000 5b1b 3534 206d 2020 5245 4f52     st...[45m   ERRO
    915c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    916c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    917c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    918c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    919c:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    91ac:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    91bc:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    91cc:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    91dc:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    91ec:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    91fc:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    920c:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    921c:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    922c:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    923c:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    924c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    925c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    926c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    927c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    928c:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    929c:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    92ac:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    92bc:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    92cc:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    92dc:	305b 1b6d 305b 0a6d 0000 0000 6f76 6469     [0m.[0m.....void
    92ec:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    92fc:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    930c:	3a3a 6553 4374 7570 6c43 636f 446b 7669     ::SetCpuClockDiv
    931c:	6469 7265 7528 6e69 3874 745f 2029 6f63     ider(uint8_t) co
    932c:	736e 0074 5b1b 3534 206d 2020 5245 4f52     nst..[45m   ERRO
    933c:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    934c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    935c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    936c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    937c:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    938c:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    939c:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    93ac:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    93bc:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    93cc:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    93dc:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    93ec:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    93fc:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    940c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    941c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    942c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    943c:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    944c:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    945c:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    946c:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    947c:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    948c:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    949c:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    94ac:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..
    94bc:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    94cc:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    94dc:	7075 4374 6e6f 7274 6c6f 656c 3c72 4e6b     uptController<kN
    94ec:	6d75 6562 4f72 4966 746e 7265 7572 7470     umberOfInterrupt
    94fc:	2c73 6b20 764e 6369 7250 6f69 6972 7974     s, kNvicPriority
    950c:	6942 7374 3a3e 553a 726e 6765 7369 6574     Bits>::Unregiste
    951c:	6572 4864 6e61 6c64 7265 2928 5b20 6977     redHandler() [wi
    952c:	6874 7520 736e 6769 656e 2064 6e69 2074     th unsigned int 
    953c:	4e6b 6d75 6562 4f72 4966 746e 7265 7572     kNumberOfInterru
    954c:	7470 2073 203d 3334 203b 6f6c 676e 7520     pts = 43; long u
    955c:	736e 6769 656e 2064 6e69 2074 4e6b 6976     nsigned int kNvi
    956c:	5063 6972 726f 7469 4279 7469 2073 203d     cPriorityBits = 
    957c:	5d35 0000 2020 4420 4245 4755 5b1b 3b30     5]..   DEBUG.[0;
    958c:	3439 3a6d 7325 1b3a 305b 393b 6d32 7325     94m:%s:.[0;92m%s
    959c:	1b3a 305b 393b 6d33 6425 203e 5b1b 3b30     :.[0;93m%d> .[0;
    95ac:	3733 4e6d 206f 6e69 6574 7272 7075 2074     37mNo interrupt 
    95bc:	6168 646e 656c 2072 6f66 6e75 2e64 4420     handler found. D
    95cc:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
    95dc:	7470 7220 7165 6575 7473 2520 2164 5b1b     pt request %d!.[
    95ec:	6d30 000a                                   0m..

000095f0 <sjsu::cortex::SystemTimer::kFixedPointScaling>:
    95f0:	4240 000f                                   @B..

000095f4 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    95f4:	0000 4140                                   ..@A

000095f8 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    95f8:	0000 4140                                   ..@A

000095fc <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    95fc:	0100 ffff                                   ....

00009600 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    9600:	0100 ffff                                   ....

00009604 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    9604:	0500 ffff                                   ....

00009608 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    9608:	0108 ffff                                   ....

0000960c <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    960c:	0208 ffff                                   ....

00009610 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    9610:	0208 ffff                                   ....

00009614 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    9614:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9624:	2e72 7068 0070 ffff                         r.hpp...

0000962c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    962c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    963c:	2e72 7068 0070 ffff                         r.hpp...

00009644 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9644:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9654:	2e72 7068 0070 ffff                         r.hpp...

0000965c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    965c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    966c:	2e72 7068 0070 ffff                         r.hpp...

00009674 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    9674:	85a4 0000 0200 0000                         ........

0000967c <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    967c:	85a4 0000 0300 0000                         ........

00009684 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    9684:	85a4 0000 0802 0000                         ........

0000968c <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    968c:	85a4 0000 0902 0000                         ........

00009694 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    9694:	85a4 0000 1c04 0000                         ........

0000969c <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    969c:	85a4 0000 1d04 0000                         ........

000096a4 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    96a4:	85a4 0000 1d01 0000                         ........

000096ac <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    96ac:	85a4 0000 0902 0000                         ........

000096b4 <sjsu::lpc40xx::Uart::Port::kUart0>:
    96b4:	c000 4000 0003 0000 9674 0000 967c 0000     ...@....t...|...
    96c4:	0009 0000                                   ....

000096c8 <sjsu::InitializePlatform()::file>:
    96c8:	7473 7261 7574 2e70 7063 0070               startup.cpp.

000096d4 <vtable for sjsu::cortex::InterruptController<43u, 5ul>>:
	...
    96dc:	6751 0000 6781 0000 67dd 0000               Qg...g...g..

000096e8 <vtable for sjsu::lpc40xx::Uart>:
	...
    96f0:	5c4d 0000 5cf7 0000 5d89 0000 5ddb 0000     M\...\...]...]..
    9700:	5e29 0000 57df 0000                         )^...W..

00009708 <vtable for sjsu::lpc40xx::SystemController>:
	...
    9710:	50c9 0000 5165 0000 51bd 0000 51e1 0000     .P..eQ...Q...Q..
    9720:	51fd 0000 5239 0000 526d 0000               .Q..9R..mR..

0000972c <vtable for sjsu::cortex::SystemTimer>:
	...
    9734:	4dad 0000 4e3d 0000 4f79 0000 4e5d 0000     .M..=N..yO..]N..

00009744 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file>:
    9744:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

00009754 <__sf_fake_stderr>:
	...

00009774 <__sf_fake_stdin>:
	...

00009794 <__sf_fake_stdout>:
	...
