
build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/lpc40xx/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000322d

Program Header:
0x70000001 off    0x00019590 vaddr 0x00009590 paddr 0x00009590 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009648 memsz 0x00009648 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009648 align 2**16
         filesz 0x00000d00 memsz 0x00000d00 flags rw-
    LOAD off    0x00020d00 vaddr 0x10000d00 paddr 0x10000d00 align 2**16
         filesz 0x00000000 memsz 0x00000a20 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009578  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000d00  10000000  00009648  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  20000000  20000000  00020d00  2**2
                  CONTENTS
  3 .bss          00000a20  10000d00  10000d00  00020d00  2**3
                  ALLOC
  4 .ARM.extab    00000018  00009578  00009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx    000000b8  00009590  00009590  00019590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  00020d00  2**2
                  CONTENTS
  7 .noinit_RAM2  00000000  20000000  20000000  00020d00  2**2
                  CONTENTS
  8 .noinit       00000000  10001720  10001720  00020d00  2**2
                  CONTENTS
  9 .ARM.attributes 00000030  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY
 10 .comment      00000079  00000000  00000000  00020d30  2**0
                  CONTENTS, READONLY
 11 .debug_info   0009d7cd  00000000  00000000  00020da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006876  00000000  00000000  000be576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001390  00000000  00000000  000c4dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012f0  00000000  00000000  000c617c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b1ab  00000000  00000000  000c746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0003e360  00000000  00000000  000d2617  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000062a0  00000000  00000000  00110978  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000d00 l    d  .bss	00000000 .bss
00009578 l    d  .ARM.extab	00000000 .ARM.extab
00009590 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001720 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00008c6c l     O .text	00000004 config::kSystemClockRateMhz
00004930 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000494c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00008c70 l     O .text	00000004 config::kRtosFrequency
00004970 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000498c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004e7c l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004e98 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00005860 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000c74 l     O .data	00000004 (anonymous namespace)::system_controller
10001354 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000c78 l     O .data	00000008 (anonymous namespace)::uart0
10000c80 l     O .data	00000008 (anonymous namespace)::system_timer
10000c94 l     O .data	00000004 (anonymous namespace)::interrupt_controller
00005c88 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005cac l     F .text	00000038 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
0000948c l     O .text	0000000c sjsu::InitializePlatform()::file
000061d0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00006374 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000063e4 l     F .text	0000016c __static_initialization_and_destruction_0(int, int)
0000685a l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/vsawce/Documents/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/vsawce/Documents/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000032c l     F .text	00000000 __do_global_dtors_aux
10000d00 l       .bss	00000001 completed.10274
00000350 l     F .text	00000000 frame_dummy
10000d04 l       .bss	00000018 object.10279
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000734 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00000750 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00001004 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00001020 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002730 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002aec l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002b9c l     F .text	00000028 __tcf_0
00002bc4 l     F .text	000002d0 __static_initialization_and_destruction_0(int, int)
00002e94 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00002ea4 l     F .text	00000026 _Unwind_GetGR
00002ff8 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00003054 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv
00000000 l    df *ABS*	00000000 exceptions.cpp
0000321c l       .text	00000000 handler2_address_const
000032ac l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00003308 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
100012bc l     O .bss	00000064 pxReadyTasksLists
10001320 l     O .bss	00000004 uxTopReadyPriority
10001324 l     O .bss	00000004 xYieldPending
10001328 l     O .bss	00000004 uxSchedulerSuspended
1000132c l     O .bss	00000004 ulTaskSwitchedInTime
10001330 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
0000348c l     F .text	0000002e _out_buffer(char, void*, unsigned int, unsigned int)
0000352c l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00003548 l     F .text	0000002e _strlen(char const*)
00003576 l     F .text	00000028 _is_digit(char)
0000359e l     F .text	00000048 _atoi(char const**)
000035e6 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00003828 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000038f8 l     F .text	000000de _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00008c40 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
000039d8 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00003e1c l     F .text	000008d6 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00004790 l     F .text	000000c8 _trace_write_semihosting_stdout(char const*, unsigned int)
10001334 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00006890 l       .text	00000000 pxCurrentTCBConst2
00006900 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00007004 l     F .text	00000012 selfrel_offset31
00007018 l     F .text	0000005c search_EIT_table
00007074 l     F .text	00000028 __gnu_unwind_get_pr_addr
0000709c l     F .text	0000009c get_eit_entry
00007138 l     F .text	00000058 restore_non_core_regs
00007190 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
0000719c l     F .text	00000004 __gnu_unwind_24bit.isra.0
000071a0 l     F .text	00000002 _Unwind_DebugHook
000071a4 l     F .text	0000003a unwind_phase2
000071e0 l     F .text	000000ca unwind_phase2_forced
000073b8 l     F .text	00000018 _Unwind_GetGR
00007400 l     F .text	00000018 _Unwind_SetGR
00007490 l     F .text	000002a8 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00007b68 l     F .text	00000036 next_unwind_byte
00007ba0 l     F .text	0000001a _Unwind_GetGR.constprop.0
00007bbc l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000ca0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00002ecc  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00001c88  w    F .text	00000034 sjsu::Button::Button(sjsu::Gpio const&)
00007b20 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000072b0 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00000f90  w    F .text	0000001c sjsu::lpc40xx::Gpio::LocalInterruptRegister() const
00004a28  w    F .text	0000004c sjsu::cortex::SystemTimer::SystemTimerHandler()
000029f6  w    F .text	00000020 std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)
10001350  w    O .bss	00000001 sjsu::cortex::SystemTimer::dwt_counter
00002334  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00004a74  w    F .text	00000022 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
100012a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi1
100000b4  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c1
00003100  w    F .text	0000006c sjsu::InitializeBssSection()
000033dc g     F .text	00000010 _getpid
000093c4  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00000b80  w    F .text	00000070 sjsu::lpc40xx::Gpio::InterruptHandler()
00001cbc  w    F .text	0000003c sjsu::Button::Initialize()
00001a22  w    F .text	0000016c sjsu::GraphicalTerminal::printf(char const*, ...)
00004b34  w    F .text	00000078 sjsu::cortex::SystemTimer::GetCount()
00009420  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
10000c90  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::current_vector
00004904  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00004e3c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000664  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const
10001278  w    O .bss	00000004 guard variable for sjsu::Uptime
10001718  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController<43u, 5ul>::table
10000c14  w    O .data	00000004 sjsu::newlib::in
10001294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c1
000060d0  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
10001710  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00000d48  w    F .text	0000002e sjsu::lpc40xx::Gpio::Toggle() const
000004e0  w    F .text	00000014 sjsu::lpc40xx::Pin::Initialize() const
00004c3c  w    F .text	00000020 sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const
0000078c  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00007fac g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
10000038  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c1
000046f4 g     F .text	00000044 printf
00000928  w    F .text	00000018 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
00000f48  w    F .text	00000048 sjsu::lpc40xx::Gpio::IsAValidPort() const
00000850  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000000 g       *ABS*	00000000 __vectors_start__
00002b3e  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()
0000629a  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
0000144c  w    F .text	00000016 sjsu::Ssd1306::GetHeight()
00005f44  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
1000053c  w    O .data	000006d4 sjtwo::Oled()::oled_display
00002096  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
000065dc  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)
00006078  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()
0000625c  w    F .text	0000001e std::array<std::function<void ()>, 59u>::operator[](unsigned int)
00008228  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kDataBit
000067d2  w    F .text	0000001a std::array<std::function<void ()>, 59u>::data()
000028aa  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()
000018ea  w    F .text	00000022 sjsu::Graphics::Update()
00002f58  w    F .text	00000098 sjsu::debug::PrintBacktrace(bool, void*)
0000099c  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
00008268  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso1
20000000 g       *ABS*	00000000 __base_RAM2
000079dc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00007afc g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00001070  w    F .text	00000108 sjsu::lpc40xx::Spi::Initialize() const
00001734  w    F .text	00000020 sjsu::Ssd1306::Clear()
10000d1c  w    O .bss	00000004 sjsu::InterruptController::platform_interrupt_controller
00009648 g       .ARM.exidx	00000000 __exidx_end
0000829c  w    O .text	0000001c vtable for sjsu::Button
0000086c  w    F .text	00000020 sjsu::Gpio::Gpio()
00007fe4  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00005ce4 g     F .text	00000014 ThreadRuntimeCounter
00007738 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
000028f4  w    F .text	00000018 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
000049ec  w    F .text	0000001c sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)
00005038  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00008258  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck0
100012b8 g     O .bss	00000004 pxCurrentTCB
00001830  w    F .text	0000002e sjsu::PixelDisplay::Color_t::Color_t()
000025de  w    F .text	00000020 bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())
00007e88 g     F .text	0000000a .hidden _Unwind_GetRegionStart
000081f8  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c0SdaPin
0000290c  w    F .text	00000016 std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
000004b0  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
00007afc g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
000055f4  w    F .text	00000038 sjsu::Uart::Read() const
000093bc  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00002b56  w    F .text	00000018 void (* const&std::_Any_data::_M_access<void (*)()>() const)()
00000680  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)
10010000 g       *ABS*	00000000 __top_SRAM
1000171c g     O .bss	00000004 errno
00009648 g       .ARM.exidx	00000000 _etext
00005f0e  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000598  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00005130  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
10001270  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled
00008240  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister1::kSlaveModeBit
00007b44 g     F .text	00000022 .hidden _Unwind_Backtrace
00001830  w    F .text	0000002e sjsu::PixelDisplay::Color_t::Color_t()
10000d20  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00006a60 g     F .text	00000160 .hidden __aeabi_fadd
10001260  w    O .bss	00000010 sjtwo::Oled()::oled
00006a5c g     F .text	00000164 .hidden __subsf3
00005238  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00009458  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
000079bc g     F .text	00000018 .hidden __restore_core_regs
000079fc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00006802  w    F .text	0000002c __gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00002584  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000060d0  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000093b8  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
0000185e  w    F .text	0000006a sjsu::Graphics::Graphics(sjsu::PixelDisplay&)
000094ac  w    O .text	00000020 vtable for sjsu::lpc40xx::Uart
00007fe8  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00005578  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000072ac g     F .text	00000004 .hidden _Unwind_GetCFA
00007f20 g     F .text	0000001c memcpy
0000529c  w    F .text	00000198 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006920 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00001618  w    F .text	000000da sjsu::Ssd1306::InitializationPanel()
000073d0 g     F .text	0000002e .hidden _Unwind_VRS_Set
00005ea8  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00001e28  w    F .text	00000018 sjsu::Button::GetGpio()
00006d10 g     F .text	00000000 .hidden __aeabi_uldivmod
10001720 g       .noinit	00000000 _noinit
00005250  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000008e0  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
00003438 g     F .text	00000048 puts
00000a46  w    F .text	00000030 sjsu::lpc17xx::Pin::PinRegisterLookup() const
00001268  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00005658  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00005f6a  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00000fe2  w    F .text	00000022 units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)
0000250a  w    F .text	00000024 std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)
000082e4  w    O .text	00000018 vtable for sjsu::lpc40xx::Spi
00001e08  w    F .text	00000020 sjsu::Button::ResetState()
00004f64  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
10000c20  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
000003f2  w    F .text	00000022 std::_Function_base::_M_empty() const
00007f4c g     F .text	00000050 _raise_r
00006bc8 g     F .text	0000001c .hidden __aeabi_i2f
000055c0  w    F .text	0000001e sjsu::Pin::PullUp() const
00002858  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)
10000d4c  w    O .bss	00000400 sjsu::lpc40xx::Gpio::handlers
10010000 g       *ABS*	00000000 __top_RAM
00000fac  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000068a0 g     F .text	00000066 xPortPendSVHandler
00004738 g     F .text	0000002c vsnprintf
00002492  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000534  w    O .data	00000008 sjtwo::spi1
00000dcc  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
000006d0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
0000055c  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00007fd0 g     F .text	00000004 _getpid_r
0000562c  w    F .text	0000002a sjsu::Uart::PollingFlush() const
00001c22  w    F .text	0000003a sjsu::GraphicalTerminal::ClearRow(unsigned long)
00007418 g     F .text	00000076 .hidden __gnu_Unwind_Backtrace
000062ee  w    F .text	00000086 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
10000000 g     O .data	00000000 .hidden __dso_handle
00002070  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00000850  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00008238  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kDividerBit
00001554  w    F .text	000000c4 sjsu::Ssd1306::Initialize()
00008244  w    O .text	00000002 sjsu::lpc40xx::Spi::StatusRegister::kDataLineBusyBit
00001cf8  w    F .text	00000088 sjsu::Button::Released()
10010000 g       *ABS*	00000000 StackTop
0000088c  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00006720  w    F .text	00000034 sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)
00006114  w    F .text	00000042 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)
00005fe6  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00006d40 g     F .text	000002c2 .hidden __udivmoddi4
00005ddc  w    F .text	00000036 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000000fc g       .text	00000000 bss_section_table
00008218  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c2SdaPin
00007fec  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00004ce8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00006050  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
000079ec g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
000024e6  w    F .text	00000024 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())
20008000 g       *ABS*	00000000 __top_RAM2
000023cc  w    F .text	00000044 sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)
000012e4  w    F .text	000000f0 sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const
1000123c  w    O .bss	00000020 sjtwo::Oled()::oled_dc
00007744 g     F .text	00000278 .hidden _Unwind_VRS_Pop
00007740  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000134  w    O .data	00000400 font8x8_basic
00004c5c  w    F .text	0000008c sjsu::cortex::SystemTimer::StartTimer() const
1000128c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00000dcc  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
00007b44 g     F .text	00000022 .hidden ___Unwind_Backtrace
000027a4  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00002f14  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00009470  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00000de8  w    F .text	000000dc sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)
0000833c  w    O .text	00000024 vtable for sjsu::Gpio
000019b4  w    F .text	00000040 sjsu::Graphics::DrawPixel(unsigned long, unsigned long)
20000000 g       *ABS*	00000000 __user_heap_base
1000011c  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi2
00009590 g       .ARM.extab	00000000 __exidx_start
00006650  w    F .text	0000002e void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
000063b6  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00000648  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
0000661c  w    F .text	00000018 std::array<std::function<void ()>, 59u>::begin()
00008200  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c0SclPin
00007ed8 g     F .text	00000048 __libc_init_array
00006550  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)
000057d0  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00007ab4 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
0000252e  w    F .text	00000056 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00002970  w    F .text	00000016 std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00008270  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck1
00004d54  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00007eac g     F .text	0000000e abort
00007ad8 g     F .text	00000022 .hidden ___Unwind_Resume
00004d3c  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000c60  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00008288  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck2
000062b0  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
10001274  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000014a0  w    F .text	000000b4 sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)
00006794  w    F .text	0000003e std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00080000 g       *ABS*	00000000 __top_FLASH
10000104  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi1
00006908 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
10001238  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled_cs
00002638  w    F .text	0000001c std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)
00002aae  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
0000039a  w    F .text	00000016 std::_Any_data::_M_access() const
00007ff0  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00000bf0  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
000069a8 g     F .text	0000000a std::terminate()
00000460  w    F .text	0000001e sjsu::Pin::PullDown() const
000011ac  w    F .text	00000038 sjsu::lpc40xx::Spi::Transfer(unsigned short) const
000069b4 g     F .text	0000009e .hidden __aeabi_d2f
00007a04 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000003cc  w    F .text	00000026 std::_Function_base::~_Function_base()
00005ea8  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000027c8  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00006a5c g     F .text	00000164 .hidden __aeabi_fsub
00005af6  w    F .text	00000092 sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
000019f4  w    F .text	0000002e sjsu::GraphicalTerminal::Initialize()
00002206  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
10001714  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00003204 g     F .text	00000026 ArmHardFaultHandler
100012ac  w    O .bss	00000004 guard variable for sjtwo::led1
000000e4 g       .text	00000000 section_table_start
00000ec4  w    F .text	00000084 sjsu::lpc40xx::Gpio::DetachInterrupt() const
000012c0  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10001720 g       .bss	00000000 _ebss
00006844  w    F .text	00000016 std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])
10000098  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c0
0000288a  w    F .text	00000020 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)
000013d4  w    F .text	0000003a sjsu::PixelDisplay::Color_t::IsBlank()
00005c64  w    F .text	00000024 sjsu::lpc40xx::Uart::FifoHasData() const
00001436  w    F .text	00000016 sjsu::Ssd1306::GetWidth()
000011e4  w    F .text	00000018 auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)
000094cc  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
000021b4  w    F .text	0000002c std::function<void ()>::operator()() const
000023a8  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
00009508  w    O .text	0000000e sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file
10000c30  w    O .data	00000004 sjsu::cortex::SystemTimer::ticks_per_millisecond
00004fe0  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00004bac  w    F .text	00000090 sjsu::cortex::SystemTimer::Initialize() const
00000712  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006bf4 g     F .text	0000007c .hidden __floatdisf
00008230  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kPolarityBit
000018c8  w    F .text	00000022 sjsu::Graphics::Initialize()
000055de  w    F .text	00000016 sjsu::Uart::Flush() const
00001178  w    F .text	00000034 sjsu::lpc40xx::Spi::IsBusBusy() const
00009440  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00003180 g     F .text	00000084 GetRegistersFromStack
00006754  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()
000061a0  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
00002316  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
000011fc  w    F .text	00000054 sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const
1000127c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
00007ff8  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
000025fe  w    F .text	00000016 std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())
0000036c  w    F .text	00000018 operator new(unsigned int, void*)
00000bf0  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
000079d4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
1000125c  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled_dc
00005cf8  w    F .text	000000e4 sjsu::InitializePlatform()
10001190  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00009518 g     O .text	00000020 __sf_fake_stderr
000017d2  w    F .text	0000005e sjsu::Ssd1306::Update()
00001250  w    F .text	00000018 unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const
000027a4  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00006998 g     F .text	00000010 std::get_terminate()
00008320  w    O .text	0000001c vtable for sjsu::lpc17xx::Pin
10001720 g       .bss	00000000 end
000020ec  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10001218  w    O .bss	00000020 sjtwo::Oled()::oled_cs
00007ad8 g     F .text	00000022 .hidden _Unwind_Resume
0000737c g     F .text	0000000c .hidden _Unwind_DeleteException
00007378 g     F .text	00000002 .hidden _Unwind_Complete
000050e8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
000024b0  w    F .text	00000020 bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00000000 g       *ABS*	00000000 __base_Flash
000034ba g     F .text	00000072 _out_chunk(char, void*, unsigned int, unsigned int)
00001b8e  w    F .text	00000094 sjsu::GraphicalTerminal::Update()
000094f0  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
10000008  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c0
000028c2  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
000093d4  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
0000042c  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
00004772 g     F .text	0000001e trace_write
00006580  w    F .text	0000005c sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)
00008234  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kPhaseBit
00002120  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
1000170c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
10000d00 g       .bss	00000000 _bss
00009408  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000057fc  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecimal(float)
00005ef4  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
10001348  w    O .bss	00000008 sjsu::cortex::SystemTimer::millisecond_count
00004764 g     F .text	0000000e trace_initialize
00000940  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
00006982 g     F .text	00000006 __cxa_pure_virtual
00005274  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
0000627a  w    F .text	00000020 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const
00006bc8 g     F .text	0000001c .hidden __floatsisf
00002370  w    F .text	00000038 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00009448  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10001194  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007bc0 g     F .text	0000029c .hidden __gnu_unwind_execute
00004ec8  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000079e4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000496  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00002410  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00004e58  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
0000837c  w    O .text	0000001c vtable for sjsu::Pin
000020d2  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()
10001720 g       .noinit	00000000 _end_noinit
10001198  w    O .bss	00000020 sjtwo::led0
000003b0  w    F .text	0000001c std::_Function_base::_Function_base()
000029c4  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)
00004fbc  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00003318 g     F .text	000000c4 vTaskSwitchContext
00002258  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
000093c0  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00004a08  w    F .text	00000020 sjsu::SystemController::SetPlatformController(sjsu::SystemController*)
00005e8e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00007324 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00006156  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00007ebc g     F .text	0000001c __cxa_atexit
10001168  w    O .bss	00000028 sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
0000190c  w    F .text	00000022 sjsu::Graphics::Clear()
00004858  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00009450  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
000079f4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00004d78  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000067ec  w    F .text	00000016 std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)
0000219a  w    F .text	0000001a std::function<void ()>::function()
00007ff4  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
000009c8  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
0000185e  w    F .text	0000006a sjsu::Graphics::Graphics(sjsu::PixelDisplay&)
00002a2e  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00006be4 g     F .text	0000008c .hidden __floatundisf
10000d40  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00007ab4 g     F .text	00000022 .hidden _Unwind_RaiseException
00007ea8  w    F .text	00000002 .hidden __aeabi_ldiv0
00000db2  w    F .text	0000001a std::function<void ()>::~function()
10000c38  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
0000316c  w    F .text	00000014 sjsu::SystemInitialize()
10001338  w    O .bss	00000010 sjsu::cortex::SystemTimer::callback
00002a16  w    F .text	00000018 void (**&std::_Any_data::_M_access<void (**)()>())()
00006bc0 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
00008248  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi0
000007dc  w    F .text	0000002c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000d28  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002922  w    F .text	0000004e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
10001284  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00000a10  w    F .text	00000036 sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)
00006938 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000006a4  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
0000667e  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)
000004b0  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
00009538 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
0000219a  w    F .text	0000001a std::function<void ()>::function()
00006698  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)
000054fc  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00000414  w    F .text	00000018 sjsu::InterruptController::GetPlatformController()
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00004aea  w    F .text	0000004a std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
00007f3c g     F .text	00000010 memset
00001e40 g     F .text	00000230 main
0000489c  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00005bda  w    F .text	0000004e sjsu::lpc40xx::Uart::Read(void*, unsigned int) const
00008260  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi1
00006bf4 g     F .text	0000007c .hidden __aeabi_l2f
20000000 g       *ABS*	00000000 heap
000082b8  w    O .text	0000002c vtable for sjsu::Ssd1306
00006988 g     F .text	00000006 std::__throw_bad_function_call()
000048bc  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
00009478  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00008360  w    O .text	0000001c vtable for sjsu::lpc40xx::Pin
000069b4 g     F .text	0000009e .hidden __truncdfsf2
00000320 g       .text	00000000 __init_array_end
00006870 g     F .text	00000026 vPortSVCHandler
00001d80  w    F .text	00000088 sjsu::Button::Pressed()
00000000 g       *ABS*	00000000 __base_FLASH
10000d24  w    O .bss	00000004 sjsu::SystemController::platform_system_controller
100000d0  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c2
000093cc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
00001c88  w    F .text	00000034 sjsu::Button::Button(sjsu::Gpio const&)
10000c18  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006be4 g     F .text	0000008c .hidden __aeabi_ul2f
000049b0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00007310 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000003cc  w    F .text	00000026 std::_Function_base::~_Function_base()
00002a60  w    F .text	00000018 std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
000026aa  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
000026aa  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
00008280  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso2
000051fc  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000db2  w    F .text	0000001a std::function<void ()>::~function()
0000246a  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()
000008cc  w    F .text	00000014 sjsu::lpc17xx::Pin::Initialize() const
00002b6e  w    F .text	00000016 void (* const*std::__addressof<void (* const)()>(void (* const&)()))()
00007368 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10001280  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
10000c10  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
000063b6  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00006022  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00000320 g     F .text	00000000 _fini
000079bc g     F .text	00000018 .hidden restore_core_regs
00004ffc  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
000081ec  w    O .text	00000009 sjsu::lpc40xx::Gpio::IsAValidPort() const::file
00007aa0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00004a96  w    F .text	00000054 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
00001422  w    F .text	00000014 sjsu::PixelDisplay::Disable()
00009468  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00000d76  w    F .text	00000024 sjsu::lpc40xx::Gpio::Read() const
00000774  w    F .text	00000018 sjsu::SystemController::GetPlatformController()
000022e2  w    F .text	00000034 std::function<void ()>::operator=(decltype(nullptr))
00001754  w    F .text	0000007e sjsu::Ssd1306::DrawPixel(long, long, sjsu::PixelDisplay::Color_t)
0000086c  w    F .text	00000020 sjsu::Gpio::Gpio()
10000c4c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00002a78  w    F .text	00000020 std::function<void ()>::operator bool() const
00005c40  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
100011f8  w    O .bss	00000020 sjtwo::led3
00006a54 g     F .text	0000016c .hidden __aeabi_frsub
0000042c  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
000026ee  w    F .text	00000042 std::function<void ()>::swap(std::function<void ()>&)
10000c9c g     O .data	00000004 _impure_ptr
000093d0  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00001050  w    F .text	0000001e units::linear_scale<float>::operator()() const
000048e4  w    F .text	00000020 sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)
100000ec  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi0
00000a78  w    F .text	00000074 sjsu::lpc40xx::Gpio::GpioRegister(int)
000051c0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000030c g       .text	00000000 __preinit_array_end
0000682e  w    F .text	00000016 void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
000005cc  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
0000222a  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00005b88  w    F .text	00000052 sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const
00004d00  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00002986  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
000027e4  w    F .text	00000074 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00007e94 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000093f0  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
10001708  w    O .bss	00000004 guard variable for sjsu::cortex::SystemTimer::callback
00005e72  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006398  w    F .text	0000001e std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)
00000d04  w    F .text	00000044 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
0000322c g     F .text	00000080 ArmResetHandler
000066c8  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)
00002b84  w    F .text	00000018 void (*&std::_Any_data::_M_access<void (*)()>())()
00002352  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
00007388 g     F .text	0000002e .hidden _Unwind_VRS_Get
000003b0  w    F .text	0000001c std::_Function_base::_Function_base()
10000c98 g     O .data	00000004 __cxxabiv1::__terminate_handler
00007a8c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
100012a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi2
0000506c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00002614  w    F .text	00000024 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())
000050a0  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00003408 g     F .text	00000030 _write
00007e5c g     F .text	0000002a .hidden __gnu_unwind_frame
0000822c  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kFrameBit
00007b20 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
10000d00 g       .data	00000000 _edata
00001c5c  w    F .text	0000002c sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)
1000114c  w    O .bss	00000018 sjsu::lpc40xx::Gpio::GpioRegister(int)::port
10001358  w    O .bss	000003b0 sjsu::cortex::InterruptController<43u, 5ul>::table
00005e12  w    F .text	00000060 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000d48  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
00005c28  w    F .text	00000018 sjsu::lpc40xx::Uart::HasData() const
00000c9c  w    F .text	00000068 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
000082fc  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
100012b0  w    O .bss	00000004 guard variable for sjtwo::led2
0000823c  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister1::kSpiEnable
00002654  w    F .text	00000056 std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
10001290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c0
00008220  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c2SclPin
10000c8c  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::nvic
000093d8  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00002b10  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()
00005f8e  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
10000c88  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::scb
00006bc0 g     F .text	00000024 .hidden __floatunsisf
0000698e g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00007a48 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00008290  w    O .text	0000000c sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)::file
000093b4  w    O .text	00000004 sjsu::cortex::SystemTimer::kFixedPointScaling
000033ec g     F .text	0000001a _kill
00003064  w    F .text	0000009c sjsu::InitializeDataSection()
00006634  w    F .text	0000001c std::array<std::function<void ()>, 59u>::end()
0000274c  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00006050  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
00000808  w    F .text	00000048 sjsu::DefaultUptime()
00002120  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00009558 g     O .text	00000020 __sf_fake_stdout
00008208  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c1SdaPin
100012a8  w    O .bss	00000004 guard variable for sjtwo::led0
10000068  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c2
0000088c  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
0000030c g       .text	00000000 __init_array_start
00007ea8  w    F .text	00000002 .hidden __aeabi_idiv0
000021e0  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000022ac  w    F .text	00000036 std::function<void ()>::operator=(std::function<void ()> const&)
00002a98  w    F .text	00000016 std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
00000384  w    F .text	00000016 std::_Any_data::_M_access()
00008278  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi2
00005edc  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00008210  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c1SclPin
00003480 g     F .text	0000000c _exit
00009460  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000c34  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
100011b8  w    O .bss	00000020 sjtwo::led1
10001298  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c2
000006f2  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00005738  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
1000129c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi0
00000d9a  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
0000047e  w    F .text	00000018 sjsu::Pin::GetPort() const
00002b28  w    F .text	00000016 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()
00007fd4 g     F .text	00000010 strlen
000016f4  w    F .text	00000040 sjsu::Ssd1306::SetHorizontalAddressMode()
10000d30  w    O .bss	00000010 sjsu::Uptime
000004f4  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
0000773c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00001462  w    F .text	0000003e sjsu::Ssd1306::AvailableColors()
100011d8  w    O .bss	00000020 sjtwo::led2
00006244  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)
00008250  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso0
00005434  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006958 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00005784  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
00009498  w    O .text	00000014 vtable for sjsu::cortex::InterruptController<43u, 5ul>
10000c28  w    O .data	00000008 sjsu::cortex::SystemTimer::nanoseconds_per_tick
000061ec  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00001930  w    F .text	00000084 sjsu::Graphics::DrawCharacter(long, long, char)
00000528  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000140e  w    F .text	00000014 sjsu::PixelDisplay::Enable()
0000030c g       .text	00000000 __preinit_array_start
000023cc  w    F .text	00000044 sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)
0000617e  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00005178  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
10001288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::handlers
00006c70 g     F .text	00000000 .hidden __aeabi_ldivmod
00002ff0  w    F .text	00000008 sjsu::Halt()
100012b4  w    O .bss	00000004 guard variable for sjtwo::led3
00000b6c  w    F .text	00000014 sjsu::lpc40xx::Gpio::InterruptStatus()
000093c8  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00006978 g     F .text	0000000a __aeabi_atexit
00002258  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
00005e72  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006a60 g     F .text	00000160 .hidden __addsf3
000020ec  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00002174  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
00000aec  w    F .text	00000080 sjsu::lpc40xx::Gpio::InterruptRegister(int)
10000d44  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
00009438  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
00005a4c  w    F .text	000000aa sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000c1c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00007f9c g     F .text	00000010 raise
10001164  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::GpioRegister(int)::port
000024d0  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 2d 32 00 00 79 60 00 00 05 32 00 00     ....-2..y`...2..
      10:	79 60 00 00 79 60 00 00 79 60 00 00 00 00 00 00     y`..y`..y`......
	...
      2c:	71 68 00 00 79 60 00 00 00 00 00 00 a1 68 00 00     qh..y`.......h..
      3c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      4c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      5c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      6c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      7c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      8c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      9c:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      ac:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      bc:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      cc:	79 60 00 00 79 60 00 00 79 60 00 00 79 60 00 00     y`..y`..y`..y`..
      dc:	79 60 00 00 79 60 00 00                             y`..y`..

000000e4 <data_section_table>:
      e4:	00009648 	.word	0x00009648
      e8:	10000000 	.word	0x10000000
      ec:	00000d00 	.word	0x00000d00
      f0:	00009648 	.word	0x00009648
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	10000d00 	.word	0x10000d00
     100:	00000a20 	.word	0x00000a20
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000351 	.word	0x00000351
     310:	00002e95 	.word	0x00002e95
     314:	00003055 	.word	0x00003055
     318:	00003309 	.word	0x00003309
     31c:	0000685b 	.word	0x0000685b

00000320 <_fini>:
     320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     322:	bf00      	nop
     324:	bcf8      	pop	{r3, r4, r5, r6, r7}
     326:	bc08      	pop	{r3}
     328:	469e      	mov	lr, r3
     32a:	4770      	bx	lr

0000032c <__do_global_dtors_aux>:
     32c:	b510      	push	{r4, lr}
     32e:	4c05      	ldr	r4, [pc, #20]	; (344 <__do_global_dtors_aux+0x18>)
     330:	7823      	ldrb	r3, [r4, #0]
     332:	b933      	cbnz	r3, 342 <__do_global_dtors_aux+0x16>
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <__do_global_dtors_aux+0x1c>)
     336:	b113      	cbz	r3, 33e <__do_global_dtors_aux+0x12>
     338:	4804      	ldr	r0, [pc, #16]	; (34c <__do_global_dtors_aux+0x20>)
     33a:	f3af 8000 	nop.w
     33e:	2301      	movs	r3, #1
     340:	7023      	strb	r3, [r4, #0]
     342:	bd10      	pop	{r4, pc}
     344:	10000d00 	.word	0x10000d00
     348:	00000000 	.word	0x00000000
     34c:	00009590 	.word	0x00009590

00000350 <frame_dummy>:
     350:	b508      	push	{r3, lr}
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <frame_dummy+0x10>)
     354:	b11b      	cbz	r3, 35e <frame_dummy+0xe>
     356:	4903      	ldr	r1, [pc, #12]	; (364 <frame_dummy+0x14>)
     358:	4803      	ldr	r0, [pc, #12]	; (368 <frame_dummy+0x18>)
     35a:	f3af 8000 	nop.w
     35e:	bd08      	pop	{r3, pc}
     360:	00000000 	.word	0x00000000
     364:	10000d04 	.word	0x10000d04
     368:	00009590 	.word	0x00009590

0000036c <operator new(unsigned int, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	6039      	str	r1, [r7, #0]
     376:	683b      	ldr	r3, [r7, #0]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	f85d 7b04 	ldr.w	r7, [sp], #4
     382:	4770      	bx	lr

00000384 <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
     384:	b480      	push	{r7}
     386:	b083      	sub	sp, #12
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	4618      	mov	r0, r3
     390:	370c      	adds	r7, #12
     392:	46bd      	mov	sp, r7
     394:	f85d 7b04 	ldr.w	r7, [sp], #4
     398:	4770      	bx	lr

0000039a <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
     39a:	b480      	push	{r7}
     39c:	b083      	sub	sp, #12
     39e:	af00      	add	r7, sp, #0
     3a0:	6078      	str	r0, [r7, #4]
     3a2:	687b      	ldr	r3, [r7, #4]
     3a4:	4618      	mov	r0, r3
     3a6:	370c      	adds	r7, #12
     3a8:	46bd      	mov	sp, r7
     3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ae:	4770      	bx	lr

000003b0 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	2200      	movs	r2, #0
     3bc:	609a      	str	r2, [r3, #8]
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	4618      	mov	r0, r3
     3c2:	370c      	adds	r7, #12
     3c4:	46bd      	mov	sp, r7
     3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     3ca:	4770      	bx	lr

000003cc <std::_Function_base::~_Function_base()>:

    ~_Function_base()
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	689b      	ldr	r3, [r3, #8]
     3d8:	2b00      	cmp	r3, #0
     3da:	d005      	beq.n	3e8 <std::_Function_base::~_Function_base()+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	689b      	ldr	r3, [r3, #8]
     3e0:	6878      	ldr	r0, [r7, #4]
     3e2:	6879      	ldr	r1, [r7, #4]
     3e4:	2203      	movs	r2, #3
     3e6:	4798      	blx	r3
    }
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	4618      	mov	r0, r3
     3ec:	3708      	adds	r7, #8
     3ee:	46bd      	mov	sp, r7
     3f0:	bd80      	pop	{r7, pc}

000003f2 <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
     3f2:	b480      	push	{r7}
     3f4:	b083      	sub	sp, #12
     3f6:	af00      	add	r7, sp, #0
     3f8:	6078      	str	r0, [r7, #4]
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	689b      	ldr	r3, [r3, #8]
     3fe:	2b00      	cmp	r3, #0
     400:	bf0c      	ite	eq
     402:	2301      	moveq	r3, #1
     404:	2300      	movne	r3, #0
     406:	b2db      	uxtb	r3, r3
     408:	4618      	mov	r0, r3
     40a:	370c      	adds	r7, #12
     40c:	46bd      	mov	sp, r7
     40e:	f85d 7b04 	ldr.w	r7, [sp], #4
     412:	4770      	bx	lr

00000414 <sjsu::InterruptController::GetPlatformController()>:
  static void SetPlatformController(InterruptController * interrupt_controller)
  {
    platform_interrupt_controller = interrupt_controller;
  }
  /// Retrieve a reference of the platforms interrupt controller
  static sjsu::InterruptController & GetPlatformController()
     414:	b480      	push	{r7}
     416:	af00      	add	r7, sp, #0
  {
    return *platform_interrupt_controller;
     418:	4b03      	ldr	r3, [pc, #12]	; (428 <sjsu::InterruptController::GetPlatformController()+0x14>)
     41a:	681b      	ldr	r3, [r3, #0]
  }
     41c:	4618      	mov	r0, r3
     41e:	46bd      	mov	sp, r7
     420:	f85d 7b04 	ldr.w	r7, [sp], #4
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	10000d1c 	.word	0x10000d1c

0000042c <sjsu::Pin::Pin(unsigned char, unsigned char)>:
    /// resistor.
    kRepeater
  };

  /// Set internal port and pin values.
  constexpr Pin(uint8_t port, uint8_t pin) : port_(port), pin_(pin) {}
     42c:	b480      	push	{r7}
     42e:	b083      	sub	sp, #12
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
     434:	460b      	mov	r3, r1
     436:	70fb      	strb	r3, [r7, #3]
     438:	4613      	mov	r3, r2
     43a:	70bb      	strb	r3, [r7, #2]
     43c:	4a07      	ldr	r2, [pc, #28]	; (45c <sjsu::Pin::Pin(unsigned char, unsigned char)+0x30>)
     43e:	687b      	ldr	r3, [r7, #4]
     440:	601a      	str	r2, [r3, #0]
     442:	687b      	ldr	r3, [r7, #4]
     444:	78fa      	ldrb	r2, [r7, #3]
     446:	711a      	strb	r2, [r3, #4]
     448:	687b      	ldr	r3, [r7, #4]
     44a:	78ba      	ldrb	r2, [r7, #2]
     44c:	715a      	strb	r2, [r3, #5]
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	370c      	adds	r7, #12
     454:	46bd      	mov	sp, r7
     456:	f85d 7b04 	ldr.w	r7, [sp], #4
     45a:	4770      	bx	lr
     45c:	00008384 	.word	0x00008384

00000460 <sjsu::Pin::PullDown() const>:
  {
    SetPull(Resistor::kPullUp);
  }

  /// Attach internal pull down resistor to pin
  void PullDown() const
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
  {
    SetPull(Resistor::kPullDown);
     468:	687b      	ldr	r3, [r7, #4]
     46a:	681b      	ldr	r3, [r3, #0]
     46c:	3308      	adds	r3, #8
     46e:	681b      	ldr	r3, [r3, #0]
     470:	2101      	movs	r1, #1
     472:	6878      	ldr	r0, [r7, #4]
     474:	4798      	blx	r3
  }
     476:	bf00      	nop
     478:	3708      	adds	r7, #8
     47a:	46bd      	mov	sp, r7
     47c:	bd80      	pop	{r7, pc}

0000047e <sjsu::Pin::GetPort() const>:
  {
    SetPull(Resistor::kNone);
  }

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     47e:	b480      	push	{r7}
     480:	b083      	sub	sp, #12
     482:	af00      	add	r7, sp, #0
     484:	6078      	str	r0, [r7, #4]
  {
    return port_;
     486:	687b      	ldr	r3, [r7, #4]
     488:	791b      	ldrb	r3, [r3, #4]
  }
     48a:	4618      	mov	r0, r3
     48c:	370c      	adds	r7, #12
     48e:	46bd      	mov	sp, r7
     490:	f85d 7b04 	ldr.w	r7, [sp], #4
     494:	4770      	bx	lr

00000496 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     496:	b480      	push	{r7}
     498:	b083      	sub	sp, #12
     49a:	af00      	add	r7, sp, #0
     49c:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     49e:	687b      	ldr	r3, [r7, #4]
     4a0:	795b      	ldrb	r3, [r3, #5]
  }
     4a2:	4618      	mov	r0, r3
     4a4:	370c      	adds	r7, #12
     4a6:	46bd      	mov	sp, r7
     4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ac:	4770      	bx	lr
     4ae:	Address 0x00000000000004ae is out of bounds.


000004b0 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>:

  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}
     4b0:	b580      	push	{r7, lr}
     4b2:	b082      	sub	sp, #8
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
     4b8:	460b      	mov	r3, r1
     4ba:	70fb      	strb	r3, [r7, #3]
     4bc:	4613      	mov	r3, r2
     4be:	70bb      	strb	r3, [r7, #2]
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	78ba      	ldrb	r2, [r7, #2]
     4c4:	78f9      	ldrb	r1, [r7, #3]
     4c6:	4618      	mov	r0, r3
     4c8:	f7ff ffb0 	bl	42c <sjsu::Pin::Pin(unsigned char, unsigned char)>
     4cc:	4a03      	ldr	r2, [pc, #12]	; (4dc <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)+0x2c>)
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	601a      	str	r2, [r3, #0]
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	4618      	mov	r0, r3
     4d6:	3708      	adds	r7, #8
     4d8:	46bd      	mov	sp, r7
     4da:	bd80      	pop	{r7, pc}
     4dc:	00008368 	.word	0x00008368

000004e0 <sjsu::lpc40xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     4e0:	b480      	push	{r7}
     4e2:	b083      	sub	sp, #12
     4e4:	af00      	add	r7, sp, #0
     4e6:	6078      	str	r0, [r7, #4]
     4e8:	bf00      	nop
     4ea:	370c      	adds	r7, #12
     4ec:	46bd      	mov	sp, r7
     4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f2:	4770      	bx	lr

000004f4 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     4f4:	b580      	push	{r7, lr}
     4f6:	b082      	sub	sp, #8
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	460b      	mov	r3, r1
     4fe:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     500:	4b08      	ldr	r3, [pc, #32]	; (524 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     502:	78f9      	ldrb	r1, [r7, #3]
     504:	781a      	ldrb	r2, [r3, #0]
     506:	785b      	ldrb	r3, [r3, #1]
     508:	021b      	lsls	r3, r3, #8
     50a:	431a      	orrs	r2, r3
     50c:	2300      	movs	r3, #0
     50e:	f362 030f 	bfi	r3, r2, #0, #16
     512:	461a      	mov	r2, r3
     514:	6878      	ldr	r0, [r7, #4]
     516:	f000 f859 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     51a:	bf00      	nop
     51c:	3708      	adds	r7, #8
     51e:	46bd      	mov	sp, r7
     520:	bd80      	pop	{r7, pc}
     522:	bf00      	nop
     524:	00007fe4 	.word	0x00007fe4

00000528 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     528:	b580      	push	{r7, lr}
     52a:	b082      	sub	sp, #8
     52c:	af00      	add	r7, sp, #0
     52e:	6078      	str	r0, [r7, #4]
     530:	460b      	mov	r3, r1
     532:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     534:	4b08      	ldr	r3, [pc, #32]	; (558 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     536:	78f9      	ldrb	r1, [r7, #3]
     538:	781a      	ldrb	r2, [r3, #0]
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	021b      	lsls	r3, r3, #8
     53e:	431a      	orrs	r2, r3
     540:	2300      	movs	r3, #0
     542:	f362 030f 	bfi	r3, r2, #0, #16
     546:	461a      	mov	r2, r3
     548:	6878      	ldr	r0, [r7, #4]
     54a:	f000 f83f 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     54e:	bf00      	nop
     550:	3708      	adds	r7, #8
     552:	46bd      	mov	sp, r7
     554:	bd80      	pop	{r7, pc}
     556:	bf00      	nop
     558:	00007fe8 	.word	0x00007fe8

0000055c <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     55c:	b580      	push	{r7, lr}
     55e:	b082      	sub	sp, #8
     560:	af00      	add	r7, sp, #0
     562:	6078      	str	r0, [r7, #4]
     564:	460b      	mov	r3, r1
     566:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     568:	78fb      	ldrb	r3, [r7, #3]
     56a:	f083 0301 	eor.w	r3, r3, #1
     56e:	b2db      	uxtb	r3, r3
     570:	4619      	mov	r1, r3
     572:	4b08      	ldr	r3, [pc, #32]	; (594 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     574:	781a      	ldrb	r2, [r3, #0]
     576:	785b      	ldrb	r3, [r3, #1]
     578:	021b      	lsls	r3, r3, #8
     57a:	431a      	orrs	r2, r3
     57c:	2300      	movs	r3, #0
     57e:	f362 030f 	bfi	r3, r2, #0, #16
     582:	461a      	mov	r2, r3
     584:	6878      	ldr	r0, [r7, #4]
     586:	f000 f821 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     58a:	bf00      	nop
     58c:	3708      	adds	r7, #8
     58e:	46bd      	mov	sp, r7
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop
     594:	00007fec 	.word	0x00007fec

00000598 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
     5a0:	460b      	mov	r3, r1
     5a2:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     5a4:	78f9      	ldrb	r1, [r7, #3]
     5a6:	4b08      	ldr	r3, [pc, #32]	; (5c8 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     5a8:	781a      	ldrb	r2, [r3, #0]
     5aa:	785b      	ldrb	r3, [r3, #1]
     5ac:	021b      	lsls	r3, r3, #8
     5ae:	431a      	orrs	r2, r3
     5b0:	2300      	movs	r3, #0
     5b2:	f362 030f 	bfi	r3, r2, #0, #16
     5b6:	461a      	mov	r2, r3
     5b8:	6878      	ldr	r0, [r7, #4]
     5ba:	f000 f807 	bl	5cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     5be:	bf00      	nop
     5c0:	3708      	adds	r7, #8
     5c2:	46bd      	mov	sp, r7
     5c4:	bd80      	pop	{r7, pc}
     5c6:	bf00      	nop
     5c8:	00007ff0 	.word	0x00007ff0

000005cc <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	b087      	sub	sp, #28
     5d0:	af00      	add	r7, sp, #0
     5d2:	60f8      	str	r0, [r7, #12]
     5d4:	460b      	mov	r3, r1
     5d6:	80ba      	strh	r2, [r7, #4]
     5d8:	72fb      	strb	r3, [r7, #11]
     5da:	68fb      	ldr	r3, [r7, #12]
     5dc:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     5de:	4b19      	ldr	r3, [pc, #100]	; (644 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     5e0:	681c      	ldr	r4, [r3, #0]
     5e2:	693b      	ldr	r3, [r7, #16]
     5e4:	4618      	mov	r0, r3
     5e6:	f7ff ff4a 	bl	47e <sjsu::Pin::GetPort() const>
     5ea:	4603      	mov	r3, r0
     5ec:	461d      	mov	r5, r3
     5ee:	693b      	ldr	r3, [r7, #16]
     5f0:	4618      	mov	r0, r3
     5f2:	f7ff ff50 	bl	496 <sjsu::Pin::GetPin() const>
     5f6:	4603      	mov	r3, r0
     5f8:	461a      	mov	r2, r3
     5fa:	016b      	lsls	r3, r5, #5
     5fc:	4413      	add	r3, r2
     5fe:	009b      	lsls	r3, r3, #2
     600:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     602:	681b      	ldr	r3, [r3, #0]
     604:	7af9      	ldrb	r1, [r7, #11]
     606:	687a      	ldr	r2, [r7, #4]
     608:	4618      	mov	r0, r3
     60a:	f001 fd31 	bl	2070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     60e:	4605      	mov	r5, r0
     610:	68fb      	ldr	r3, [r7, #12]
     612:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     614:	4b0b      	ldr	r3, [pc, #44]	; (644 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     616:	681c      	ldr	r4, [r3, #0]
     618:	697b      	ldr	r3, [r7, #20]
     61a:	4618      	mov	r0, r3
     61c:	f7ff ff2f 	bl	47e <sjsu::Pin::GetPort() const>
     620:	4603      	mov	r3, r0
     622:	461e      	mov	r6, r3
     624:	697b      	ldr	r3, [r7, #20]
     626:	4618      	mov	r0, r3
     628:	f7ff ff35 	bl	496 <sjsu::Pin::GetPin() const>
     62c:	4603      	mov	r3, r0
     62e:	461a      	mov	r2, r3
     630:	0173      	lsls	r3, r6, #5
     632:	4413      	add	r3, r2
     634:	009b      	lsls	r3, r3, #2
     636:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     638:	601d      	str	r5, [r3, #0]
  }
     63a:	bf00      	nop
     63c:	371c      	adds	r7, #28
     63e:	46bd      	mov	sp, r7
     640:	bdf0      	pop	{r4, r5, r6, r7, pc}
     642:	bf00      	nop
     644:	10000d20 	.word	0x10000d20

00000648 <sjsu::Gpio::SetAsOutput() const>:
  void SetAsInput() const
  {
    SetDirection(Direction::kInput);
  }
  /// Set pin direction as output
  void SetAsOutput() const
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     650:	687b      	ldr	r3, [r7, #4]
     652:	681b      	ldr	r3, [r3, #0]
     654:	681b      	ldr	r3, [r3, #0]
     656:	2101      	movs	r1, #1
     658:	6878      	ldr	r0, [r7, #4]
     65a:	4798      	blx	r3
  }
     65c:	bf00      	nop
     65e:	3708      	adds	r7, #8
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}

00000664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     664:	b480      	push	{r7}
     666:	b083      	sub	sp, #12
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	{ return __r; }
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	e9d3 2300 	ldrd	r2, r3, [r3]
     672:	4610      	mov	r0, r2
     674:	4619      	mov	r1, r3
     676:	370c      	adds	r7, #12
     678:	46bd      	mov	sp, r7
     67a:	f85d 7b04 	ldr.w	r7, [sp], #4
     67e:	4770      	bx	lr

00000680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     680:	b480      	push	{r7}
     682:	b083      	sub	sp, #12
     684:	af00      	add	r7, sp, #0
     686:	6078      	str	r0, [r7, #4]
     688:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     68a:	683b      	ldr	r3, [r7, #0]
     68c:	e9d3 2300 	ldrd	r2, r3, [r3]
     690:	6879      	ldr	r1, [r7, #4]
     692:	e9c1 2300 	strd	r2, r3, [r1]
     696:	687b      	ldr	r3, [r7, #4]
     698:	4618      	mov	r0, r3
     69a:	370c      	adds	r7, #12
     69c:	46bd      	mov	sp, r7
     69e:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a2:	4770      	bx	lr

000006a4 <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     6a4:	b580      	push	{r7, lr}
     6a6:	b084      	sub	sp, #16
     6a8:	af00      	add	r7, sp, #0
     6aa:	e9c7 0100 	strd	r0, r1, [r7]
     6ae:	e9d7 0100 	ldrd	r0, r1, [r7]
     6b2:	f006 fa97 	bl	6be4 <__aeabi_ul2f>
     6b6:	4602      	mov	r2, r0
     6b8:	f107 030c 	add.w	r3, r7, #12
     6bc:	ee00 2a10 	vmov	s0, r2
     6c0:	4618      	mov	r0, r3
     6c2:	f000 f805 	bl	6d0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	4618      	mov	r0, r3
     6ca:	3710      	adds	r7, #16
     6cc:	46bd      	mov	sp, r7
     6ce:	bd80      	pop	{r7, pc}

000006d0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	ed87 0a00 	vstr	s0, [r7]
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	463a      	mov	r2, r7
     6e0:	4611      	mov	r1, r2
     6e2:	4618      	mov	r0, r3
     6e4:	f000 f805 	bl	6f2 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4618      	mov	r0, r3
     6ec:	3708      	adds	r7, #8
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}

000006f2 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     6f2:	b480      	push	{r7}
     6f4:	b083      	sub	sp, #12
     6f6:	af00      	add	r7, sp, #0
     6f8:	6078      	str	r0, [r7, #4]
     6fa:	6039      	str	r1, [r7, #0]
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	681a      	ldr	r2, [r3, #0]
     700:	687b      	ldr	r3, [r7, #4]
     702:	601a      	str	r2, [r3, #0]
     704:	687b      	ldr	r3, [r7, #4]
     706:	4618      	mov	r0, r3
     708:	370c      	adds	r7, #12
     70a:	46bd      	mov	sp, r7
     70c:	f85d 7b04 	ldr.w	r7, [sp], #4
     710:	4770      	bx	lr

00000712 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     712:	b580      	push	{r7, lr}
     714:	b082      	sub	sp, #8
     716:	af00      	add	r7, sp, #0
     718:	6078      	str	r0, [r7, #4]
     71a:	ed87 0a00 	vstr	s0, [r7]
     71e:	687b      	ldr	r3, [r7, #4]
     720:	463a      	mov	r2, r7
     722:	4611      	mov	r1, r2
     724:	4618      	mov	r0, r3
     726:	f7ff ffe4 	bl	6f2 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	4618      	mov	r0, r3
     72e:	3708      	adds	r7, #8
     730:	46bd      	mov	sp, r7
     732:	bd80      	pop	{r7, pc}

00000734 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     734:	b580      	push	{r7, lr}
     736:	b086      	sub	sp, #24
     738:	af00      	add	r7, sp, #0
     73a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     73c:	6878      	ldr	r0, [r7, #4]
     73e:	f000 f807 	bl	750 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     742:	eef0 7a40 	vmov.f32	s15, s0
	}
     746:	eeb0 0a67 	vmov.f32	s0, s15
     74a:	3718      	adds	r7, #24
     74c:	46bd      	mov	sp, r7
     74e:	bd80      	pop	{r7, pc}

00000750 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     750:	b480      	push	{r7}
     752:	b085      	sub	sp, #20
     754:	af00      	add	r7, sp, #0
     756:	60f8      	str	r0, [r7, #12]
     758:	7239      	strb	r1, [r7, #8]
     75a:	713a      	strb	r2, [r7, #4]
     75c:	703b      	strb	r3, [r7, #0]
			return value;
     75e:	68fb      	ldr	r3, [r7, #12]
     760:	681b      	ldr	r3, [r3, #0]
     762:	ee07 3a90 	vmov	s15, r3
		}
     766:	eeb0 0a67 	vmov.f32	s0, s15
     76a:	3714      	adds	r7, #20
     76c:	46bd      	mov	sp, r7
     76e:	f85d 7b04 	ldr.w	r7, [sp], #4
     772:	4770      	bx	lr

00000774 <sjsu::SystemController::GetPlatformController()>:
  static void SetPlatformController(SystemController * system_controller)
  {
    platform_system_controller = system_controller;
  }
  /// Retrieve a reference of the platforms system controller
  static sjsu::SystemController & GetPlatformController()
     774:	b480      	push	{r7}
     776:	af00      	add	r7, sp, #0
  {
    return *platform_system_controller;
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <sjsu::SystemController::GetPlatformController()+0x14>)
     77a:	681b      	ldr	r3, [r3, #0]
  }
     77c:	4618      	mov	r0, r3
     77e:	46bd      	mov	sp, r7
     780:	f85d 7b04 	ldr.w	r7, [sp], #4
     784:	4770      	bx	lr
     786:	bf00      	nop
     788:	10000d24 	.word	0x10000d24

0000078c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     78c:	b580      	push	{r7, lr}
     78e:	b086      	sub	sp, #24
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     796:	687b      	ldr	r3, [r7, #4]
     798:	681b      	ldr	r3, [r3, #0]
     79a:	3308      	adds	r3, #8
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	6839      	ldr	r1, [r7, #0]
     7a0:	6878      	ldr	r0, [r7, #4]
     7a2:	4798      	blx	r3
     7a4:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     7a6:	f04f 0300 	mov.w	r3, #0
     7aa:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7ac:	697b      	ldr	r3, [r7, #20]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d00f      	beq.n	7d2 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	330c      	adds	r3, #12
     7b8:	681b      	ldr	r3, [r3, #0]
     7ba:	6878      	ldr	r0, [r7, #4]
     7bc:	4798      	blx	r3
     7be:	4603      	mov	r3, r0
     7c0:	613b      	str	r3, [r7, #16]
     7c2:	f107 0310 	add.w	r3, r7, #16
     7c6:	6979      	ldr	r1, [r7, #20]
     7c8:	4618      	mov	r0, r3
     7ca:	f001 fc64 	bl	2096 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     7ce:	4603      	mov	r3, r0
     7d0:	60fb      	str	r3, [r7, #12]
    }
    return result;
     7d2:	68fb      	ldr	r3, [r7, #12]
  }
     7d4:	4618      	mov	r0, r3
     7d6:	3718      	adds	r7, #24
     7d8:	46bd      	mov	sp, r7
     7da:	bd80      	pop	{r7, pc}

000007dc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
	_GLIBCXX17_CONSTEXPR duration
	operator--(int)
	{ return duration(__r--); }

	_GLIBCXX17_CONSTEXPR duration&
	operator+=(const duration& __d)
     7dc:	b5b0      	push	{r4, r5, r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
     7e4:	6039      	str	r1, [r7, #0]
	{
	  __r += __d.count();
     7e6:	6838      	ldr	r0, [r7, #0]
     7e8:	f7ff ff3c 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
     7f2:	1884      	adds	r4, r0, r2
     7f4:	eb41 0503 	adc.w	r5, r1, r3
     7f8:	687b      	ldr	r3, [r7, #4]
     7fa:	e9c3 4500 	strd	r4, r5, [r3]
	  return *this;
     7fe:	687b      	ldr	r3, [r7, #4]
	}
     800:	4618      	mov	r0, r3
     802:	3708      	adds	r7, #8
     804:	46bd      	mov	sp, r7
     806:	bdb0      	pop	{r4, r5, r7, pc}

00000808 <sjsu::DefaultUptime()>:
/// means to keep time. It should not be used in production.
///
/// @return the current number of fake uptime nanoseconds that increments each
/// time this function is called.
inline std::chrono::nanoseconds DefaultUptime()
{
     808:	b580      	push	{r7, lr}
     80a:	b086      	sub	sp, #24
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
  static std::chrono::nanoseconds default_uptime = 0ns;
  default_uptime += 1us;
     810:	f107 0310 	add.w	r3, r7, #16
     814:	4618      	mov	r0, r3
     816:	f001 fc5c 	bl	20d2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>
     81a:	f107 0210 	add.w	r2, r7, #16
     81e:	f107 0308 	add.w	r3, r7, #8
     822:	4611      	mov	r1, r2
     824:	4618      	mov	r0, r3
     826:	f001 fc61 	bl	20ec <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     82a:	f107 0308 	add.w	r3, r7, #8
     82e:	4619      	mov	r1, r3
     830:	4806      	ldr	r0, [pc, #24]	; (84c <sjsu::DefaultUptime()+0x44>)
     832:	f7ff ffd3 	bl	7dc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  return default_uptime;
     836:	6879      	ldr	r1, [r7, #4]
     838:	4b04      	ldr	r3, [pc, #16]	; (84c <sjsu::DefaultUptime()+0x44>)
     83a:	e9d3 2300 	ldrd	r2, r3, [r3]
     83e:	e9c1 2300 	strd	r2, r3, [r1]
}
     842:	6878      	ldr	r0, [r7, #4]
     844:	3718      	adds	r7, #24
     846:	46bd      	mov	sp, r7
     848:	bd80      	pop	{r7, pc}
     84a:	bf00      	nop
     84c:	10000d28 	.word	0x10000d28

00000850 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     850:	b580      	push	{r7, lr}
     852:	b082      	sub	sp, #8
     854:	af00      	add	r7, sp, #0
     856:	6078      	str	r0, [r7, #4]
     858:	687b      	ldr	r3, [r7, #4]
     85a:	4618      	mov	r0, r3
     85c:	f7ff fdb6 	bl	3cc <std::_Function_base::~_Function_base()>
     860:	687b      	ldr	r3, [r7, #4]
     862:	4618      	mov	r0, r3
     864:	3708      	adds	r7, #8
     866:	46bd      	mov	sp, r7
     868:	bd80      	pop	{r7, pc}
     86a:	Address 0x000000000000086a is out of bounds.


0000086c <sjsu::Gpio::Gpio()>:
class Gpio
     86c:	b480      	push	{r7}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	4a04      	ldr	r2, [pc, #16]	; (888 <sjsu::Gpio::Gpio()+0x1c>)
     876:	687b      	ldr	r3, [r7, #4]
     878:	601a      	str	r2, [r3, #0]
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	4618      	mov	r0, r3
     87e:	370c      	adds	r7, #12
     880:	46bd      	mov	sp, r7
     882:	f85d 7b04 	ldr.w	r7, [sp], #4
     886:	4770      	bx	lr
     888:	00008344 	.word	0x00008344

0000088c <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>:
  }
  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin)
     88c:	b590      	push	{r4, r7, lr}
     88e:	b083      	sub	sp, #12
     890:	af00      	add	r7, sp, #0
     892:	6078      	str	r0, [r7, #4]
     894:	460b      	mov	r3, r1
     896:	70fb      	strb	r3, [r7, #3]
     898:	4613      	mov	r3, r2
     89a:	70bb      	strb	r3, [r7, #2]
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	78ba      	ldrb	r2, [r7, #2]
     8a0:	78f9      	ldrb	r1, [r7, #3]
     8a2:	4618      	mov	r0, r3
     8a4:	f7ff fdc2 	bl	42c <sjsu::Pin::Pin(unsigned char, unsigned char)>
     8a8:	4a07      	ldr	r2, [pc, #28]	; (8c8 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)+0x3c>)
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	601a      	str	r2, [r3, #0]
     8ae:	687c      	ldr	r4, [r7, #4]
     8b0:	78bb      	ldrb	r3, [r7, #2]
     8b2:	4618      	mov	r0, r3
     8b4:	f000 f8ac 	bl	a10 <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>
     8b8:	4603      	mov	r3, r0
     8ba:	80e3      	strh	r3, [r4, #6]
  {
  }
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	4618      	mov	r0, r3
     8c0:	370c      	adds	r7, #12
     8c2:	46bd      	mov	sp, r7
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	bf00      	nop
     8c8:	00008328 	.word	0x00008328

000008cc <sjsu::lpc17xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     8cc:	b480      	push	{r7}
     8ce:	b083      	sub	sp, #12
     8d0:	af00      	add	r7, sp, #0
     8d2:	6078      	str	r0, [r7, #4]
     8d4:	bf00      	nop
     8d6:	370c      	adds	r7, #12
     8d8:	46bd      	mov	sp, r7
     8da:	f85d 7b04 	ldr.w	r7, [sp], #4
     8de:	4770      	bx	lr

000008e0 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     8e0:	b590      	push	{r4, r7, lr}
     8e2:	b085      	sub	sp, #20
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
     8e8:	460b      	mov	r3, r1
     8ea:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
     8ec:	6878      	ldr	r0, [r7, #4]
     8ee:	f000 f8aa 	bl	a46 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     8f2:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     8f4:	4b0b      	ldr	r3, [pc, #44]	; (924 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	68fa      	ldr	r2, [r7, #12]
     8fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
     8fe:	4b09      	ldr	r3, [pc, #36]	; (924 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     900:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     902:	687b      	ldr	r3, [r7, #4]
     904:	78f9      	ldrb	r1, [r7, #3]
     906:	88da      	ldrh	r2, [r3, #6]
     908:	2300      	movs	r3, #0
     90a:	f362 030f 	bfi	r3, r2, #0, #16
     90e:	461a      	mov	r2, r3
     910:	f001 fbae 	bl	2070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     914:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
     916:	68fb      	ldr	r3, [r7, #12]
     918:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
     91c:	bf00      	nop
     91e:	3714      	adds	r7, #20
     920:	46bd      	mov	sp, r7
     922:	bd90      	pop	{r4, r7, pc}
     924:	10000d40 	.word	0x10000d40

00000928 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
     928:	b480      	push	{r7}
     92a:	b083      	sub	sp, #12
     92c:	af00      	add	r7, sp, #0
     92e:	4603      	mov	r3, r0
     930:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
     932:	79fb      	ldrb	r3, [r7, #7]
}
     934:	4618      	mov	r0, r3
     936:	370c      	adds	r7, #12
     938:	46bd      	mov	sp, r7
     93a:	f85d 7b04 	ldr.w	r7, [sp], #4
     93e:	4770      	bx	lr

00000940 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     940:	b5b0      	push	{r4, r5, r7, lr}
     942:	b084      	sub	sp, #16
     944:	af00      	add	r7, sp, #0
     946:	6078      	str	r0, [r7, #4]
     948:	460b      	mov	r3, r1
     94a:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
     94c:	6878      	ldr	r0, [r7, #4]
     94e:	f000 f87a 	bl	a46 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     952:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
     954:	4b0f      	ldr	r3, [pc, #60]	; (994 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     956:	681b      	ldr	r3, [r3, #0]
     958:	68fa      	ldr	r2, [r7, #12]
     95a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
     95e:	78fb      	ldrb	r3, [r7, #3]
     960:	4618      	mov	r0, r3
     962:	f7ff ffe1 	bl	928 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
     966:	4603      	mov	r3, r0
     968:	461a      	mov	r2, r3
     96a:	4b0b      	ldr	r3, [pc, #44]	; (998 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
     96c:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
     96e:	4b09      	ldr	r3, [pc, #36]	; (994 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     970:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
     972:	687b      	ldr	r3, [r7, #4]
     974:	88da      	ldrh	r2, [r3, #6]
     976:	2300      	movs	r3, #0
     978:	f362 030f 	bfi	r3, r2, #0, #16
     97c:	461a      	mov	r2, r3
     97e:	4628      	mov	r0, r5
     980:	f001 fb76 	bl	2070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     984:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
     986:	68fb      	ldr	r3, [r7, #12]
     988:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
     98c:	bf00      	nop
     98e:	3710      	adds	r7, #16
     990:	46bd      	mov	sp, r7
     992:	bdb0      	pop	{r4, r5, r7, pc}
     994:	10000d44 	.word	0x10000d44
     998:	00007ff4 	.word	0x00007ff4

0000099c <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
     99c:	b580      	push	{r7, lr}
     99e:	b082      	sub	sp, #8
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
     9a4:	460b      	mov	r3, r1
     9a6:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
     9a8:	2357      	movs	r3, #87	; 0x57
     9aa:	4a04      	ldr	r2, [pc, #16]	; (9bc <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
     9ac:	4904      	ldr	r1, [pc, #16]	; (9c0 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
     9ae:	4805      	ldr	r0, [pc, #20]	; (9c4 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
     9b0:	f003 fea0 	bl	46f4 <printf>
  }
     9b4:	bf00      	nop
     9b6:	3708      	adds	r7, #8
     9b8:	46bd      	mov	sp, r7
     9ba:	bd80      	pop	{r7, pc}
     9bc:	00008000 	.word	0x00008000
     9c0:	00007ff8 	.word	0x00007ff8
     9c4:	00008040 	.word	0x00008040

000009c8 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     9c8:	b5b0      	push	{r4, r5, r7, lr}
     9ca:	b084      	sub	sp, #16
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	460b      	mov	r3, r1
     9d2:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     9d4:	4b0d      	ldr	r3, [pc, #52]	; (a0c <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     9d6:	681b      	ldr	r3, [r3, #0]
     9d8:	687a      	ldr	r2, [r7, #4]
     9da:	7912      	ldrb	r2, [r2, #4]
     9dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     9e4:	733b      	strb	r3, [r7, #12]
     9e6:	2301      	movs	r3, #1
     9e8:	737b      	strb	r3, [r7, #13]
     9ea:	4b08      	ldr	r3, [pc, #32]	; (a0c <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     9ec:	681c      	ldr	r4, [r3, #0]
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	791b      	ldrb	r3, [r3, #4]
     9f2:	461d      	mov	r5, r3
     9f4:	78fb      	ldrb	r3, [r7, #3]
     9f6:	68fa      	ldr	r2, [r7, #12]
     9f8:	4619      	mov	r1, r3
     9fa:	f001 fbbb 	bl	2174 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
     9fe:	4603      	mov	r3, r0
     a00:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
     a04:	bf00      	nop
     a06:	3710      	adds	r7, #16
     a08:	46bd      	mov	sp, r7
     a0a:	bdb0      	pop	{r4, r5, r7, pc}
     a0c:	10000d48 	.word	0x10000d48

00000a10 <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>:

 private:
  /// Utility function for generating bitmasks for specific pins.
  static constexpr bit::Mask GetPinsBitmask(uint8_t pin)
     a10:	b480      	push	{r7}
     a12:	b085      	sub	sp, #20
     a14:	af00      	add	r7, sp, #0
     a16:	4603      	mov	r3, r0
     a18:	71fb      	strb	r3, [r7, #7]
  {
    return {
      .position = static_cast<uint8_t>((pin * 2) % kNumberOfPins),
     a1a:	79fb      	ldrb	r3, [r7, #7]
     a1c:	005b      	lsls	r3, r3, #1
     a1e:	b2db      	uxtb	r3, r3
     a20:	f003 031e 	and.w	r3, r3, #30
     a24:	b2db      	uxtb	r3, r3
      .width    = 2,
    };
     a26:	733b      	strb	r3, [r7, #12]
     a28:	2302      	movs	r3, #2
     a2a:	737b      	strb	r3, [r7, #13]
     a2c:	2300      	movs	r3, #0
     a2e:	7b3a      	ldrb	r2, [r7, #12]
     a30:	f362 0307 	bfi	r3, r2, #0, #8
     a34:	7b7a      	ldrb	r2, [r7, #13]
     a36:	f362 230f 	bfi	r3, r2, #8, #8
  }
     a3a:	4618      	mov	r0, r3
     a3c:	3714      	adds	r7, #20
     a3e:	46bd      	mov	sp, r7
     a40:	f85d 7b04 	ldr.w	r7, [sp], #4
     a44:	4770      	bx	lr

00000a46 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
     a46:	b480      	push	{r7}
     a48:	b085      	sub	sp, #20
     a4a:	af00      	add	r7, sp, #0
     a4c:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	795b      	ldrb	r3, [r3, #5]
     a52:	2b0f      	cmp	r3, #15
     a54:	d901      	bls.n	a5a <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
     a56:	2301      	movs	r3, #1
     a58:	e000      	b.n	a5c <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
     a5a:	2300      	movs	r3, #0
     a5c:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	791b      	ldrb	r3, [r3, #4]
     a62:	005b      	lsls	r3, r3, #1
     a64:	461a      	mov	r2, r3
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	4413      	add	r3, r2
  }
     a6a:	4618      	mov	r0, r3
     a6c:	3714      	adds	r7, #20
     a6e:	46bd      	mov	sp, r7
     a70:	f85d 7b04 	ldr.w	r7, [sp], #4
     a74:	4770      	bx	lr
     a76:	Address 0x0000000000000a76 is out of bounds.


00000a78 <sjsu::lpc40xx::Gpio::GpioRegister(int)>:
  /// @param port_index - which gpio port to get a pointer of.
  /// @return returns a pointer to a LPC_GPIO_TypeDef pointer internal to this
  /// function. The purpose for the double pointer nature is to allow test code
  /// to re-assign the lookup table contents simply by running this function and
  /// assigning the returned result to what ever block of memory you desire.
  static lpc40xx::LPC_GPIO_TypeDef ** GpioRegister(int port_index)
     a78:	b480      	push	{r7}
     a7a:	b083      	sub	sp, #12
     a7c:	af00      	add	r7, sp, #0
     a7e:	6078      	str	r0, [r7, #4]
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[] = {
        lpc40xx::LPC_GPIO0, lpc40xx::LPC_GPIO1, lpc40xx::LPC_GPIO2,
        lpc40xx::LPC_GPIO3, lpc40xx::LPC_GPIO4, lpc40xx::LPC_GPIO5,
      };
     a80:	4b12      	ldr	r3, [pc, #72]	; (acc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	f003 0301 	and.w	r3, r3, #1
     a88:	2b00      	cmp	r3, #0
     a8a:	d114      	bne.n	ab6 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x3e>
     a8c:	4a10      	ldr	r2, [pc, #64]	; (ad0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x58>)
     a8e:	4b11      	ldr	r3, [pc, #68]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     a90:	601a      	str	r2, [r3, #0]
     a92:	4a11      	ldr	r2, [pc, #68]	; (ad8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x60>)
     a94:	4b0f      	ldr	r3, [pc, #60]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     a96:	605a      	str	r2, [r3, #4]
     a98:	4a10      	ldr	r2, [pc, #64]	; (adc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x64>)
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     a9c:	609a      	str	r2, [r3, #8]
     a9e:	4a10      	ldr	r2, [pc, #64]	; (ae0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x68>)
     aa0:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     aa2:	60da      	str	r2, [r3, #12]
     aa4:	4a0f      	ldr	r2, [pc, #60]	; (ae4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x6c>)
     aa6:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     aa8:	611a      	str	r2, [r3, #16]
     aaa:	4a0f      	ldr	r2, [pc, #60]	; (ae8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x70>)
     aac:	4b09      	ldr	r3, [pc, #36]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     aae:	615a      	str	r2, [r3, #20]
     ab0:	4b06      	ldr	r3, [pc, #24]	; (acc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     ab2:	2201      	movs	r2, #1
     ab4:	601a      	str	r2, [r3, #0]
      return &port[port_index];
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	009b      	lsls	r3, r3, #2
     aba:	4a06      	ldr	r2, [pc, #24]	; (ad4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     abc:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[6];
      return &port[port_index];
    }
  }
     abe:	4618      	mov	r0, r3
     ac0:	370c      	adds	r7, #12
     ac2:	46bd      	mov	sp, r7
     ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac8:	4770      	bx	lr
     aca:	bf00      	nop
     acc:	10001164 	.word	0x10001164
     ad0:	20098000 	.word	0x20098000
     ad4:	1000114c 	.word	0x1000114c
     ad8:	20098020 	.word	0x20098020
     adc:	20098040 	.word	0x20098040
     ae0:	20098060 	.word	0x20098060
     ae4:	20098080 	.word	0x20098080
     ae8:	200980a0 	.word	0x200980a0

00000aec <sjsu::lpc40xx::Gpio::InterruptRegister(int)>:
  ///
  /// @param interrupt_index - which interrupt port you want to work with. Only
  ///        0 and 1 are valid.
  /// @return returns a pointer to a GpioInterruptRegisterMap_t object internal
  /// to this function.
  static GpioInterruptRegisterMap_t * InterruptRegister(int interrupt_index)
     aec:	b480      	push	{r7}
     aee:	b083      	sub	sp, #12
     af0:	af00      	add	r7, sp, #0
     af2:	6078      	str	r0, [r7, #4]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
        },
      };
     af4:	4b1a      	ldr	r3, [pc, #104]	; (b60 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	f003 0301 	and.w	r3, r3, #1
     afc:	2b00      	cmp	r3, #0
     afe:	d122      	bne.n	b46 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x5a>
     b00:	4b18      	ldr	r3, [pc, #96]	; (b64 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO0IntStatR),
     b02:	4a19      	ldr	r2, [pc, #100]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b04:	3204      	adds	r2, #4
      };
     b06:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO0IntStatF),
     b08:	4a17      	ldr	r2, [pc, #92]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b0a:	3208      	adds	r2, #8
      };
     b0c:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO0IntClr),
     b0e:	4a16      	ldr	r2, [pc, #88]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b10:	320c      	adds	r2, #12
      };
     b12:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO0IntEnR),
     b14:	4a14      	ldr	r2, [pc, #80]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b16:	3210      	adds	r2, #16
      };
     b18:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO0IntEnF),
     b1a:	4a13      	ldr	r2, [pc, #76]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b1c:	3214      	adds	r2, #20
      };
     b1e:	611a      	str	r2, [r3, #16]
     b20:	3314      	adds	r3, #20
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO2IntStatR),
     b22:	4a11      	ldr	r2, [pc, #68]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b24:	3224      	adds	r2, #36	; 0x24
      };
     b26:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
     b28:	4a0f      	ldr	r2, [pc, #60]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b2a:	3228      	adds	r2, #40	; 0x28
      };
     b2c:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
     b2e:	4a0e      	ldr	r2, [pc, #56]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b30:	322c      	adds	r2, #44	; 0x2c
      };
     b32:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
     b34:	4a0c      	ldr	r2, [pc, #48]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b36:	3230      	adds	r2, #48	; 0x30
      };
     b38:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
     b3a:	4a0b      	ldr	r2, [pc, #44]	; (b68 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     b3c:	3234      	adds	r2, #52	; 0x34
      };
     b3e:	611a      	str	r2, [r3, #16]
     b40:	4b07      	ldr	r3, [pc, #28]	; (b60 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     b42:	2201      	movs	r2, #1
     b44:	601a      	str	r2, [r3, #0]
      return &interrupt[interrupt_index];
     b46:	687a      	ldr	r2, [r7, #4]
     b48:	4613      	mov	r3, r2
     b4a:	009b      	lsls	r3, r3, #2
     b4c:	4413      	add	r3, r2
     b4e:	009b      	lsls	r3, r3, #2
     b50:	4a04      	ldr	r2, [pc, #16]	; (b64 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
     b52:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static GpioInterruptRegisterMap_t interrupt[kInterruptPorts];
      return &interrupt[interrupt_index];
    }
  }
     b54:	4618      	mov	r0, r3
     b56:	370c      	adds	r7, #12
     b58:	46bd      	mov	sp, r7
     b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     b5e:	4770      	bx	lr
     b60:	10001190 	.word	0x10001190
     b64:	10001168 	.word	0x10001168
     b68:	40028080 	.word	0x40028080

00000b6c <sjsu::lpc40xx::Gpio::InterruptStatus()>:

  /// @return a pointer to the interrupt status register based on the current
  /// building platform.
  static volatile uint32_t * InterruptStatus()
     b6c:	b480      	push	{r7}
     b6e:	af00      	add	r7, sp, #0
  {
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      return &lpc40xx::LPC_GPIOINT->IntStatus;
     b70:	4b02      	ldr	r3, [pc, #8]	; (b7c <sjsu::lpc40xx::Gpio::InterruptStatus()+0x10>)
    else  // Used for unit testing
    {
      static volatile uint32_t status;
      return &status;
    }
  }
     b72:	4618      	mov	r0, r3
     b74:	46bd      	mov	sp, r7
     b76:	f85d 7b04 	ldr.w	r7, [sp], #4
     b7a:	4770      	bx	lr
     b7c:	40028080 	.word	0x40028080

00000b80 <sjsu::lpc40xx::Gpio::InterruptHandler()>:

  /// The gpio interrupt handler that calls the attached interrupt callbacks.
  static void InterruptHandler()
     b80:	b580      	push	{r7, lr}
     b82:	b084      	sub	sp, #16
     b84:	af00      	add	r7, sp, #0
  {
    int triggered_port;
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      triggered_port = *InterruptStatus() >> 2;
     b86:	f7ff fff1 	bl	b6c <sjsu::lpc40xx::Gpio::InterruptStatus()>
     b8a:	4603      	mov	r3, r0
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	089b      	lsrs	r3, r3, #2
     b90:	60fb      	str	r3, [r7, #12]
    else
    {
      triggered_port = *InterruptStatus() >> 2;
    }

    auto * interrupt  = InterruptRegister(triggered_port);
     b92:	68f8      	ldr	r0, [r7, #12]
     b94:	f7ff ffaa 	bl	aec <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     b98:	60b8      	str	r0, [r7, #8]
    int status        = *interrupt->rising_status | *interrupt->falling_status;
     b9a:	68bb      	ldr	r3, [r7, #8]
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	681a      	ldr	r2, [r3, #0]
     ba0:	68bb      	ldr	r3, [r7, #8]
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	4313      	orrs	r3, r2
     ba8:	607b      	str	r3, [r7, #4]
    int triggered_pin = __builtin_ctz(status);
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	fa93 f3a3 	rbit	r3, r3
     bb0:	fab3 f383 	clz	r3, r3
     bb4:	603b      	str	r3, [r7, #0]

    handlers[triggered_port][triggered_pin]();
     bb6:	68fb      	ldr	r3, [r7, #12]
     bb8:	015a      	lsls	r2, r3, #5
     bba:	683b      	ldr	r3, [r7, #0]
     bbc:	4413      	add	r3, r2
     bbe:	011b      	lsls	r3, r3, #4
     bc0:	4a0a      	ldr	r2, [pc, #40]	; (bec <sjsu::lpc40xx::Gpio::InterruptHandler()+0x6c>)
     bc2:	4413      	add	r3, r2
     bc4:	4618      	mov	r0, r3
     bc6:	f001 faf5 	bl	21b4 <std::function<void ()>::operator()() const>
    *interrupt->clear |= (1 << triggered_pin);
     bca:	68bb      	ldr	r3, [r7, #8]
     bcc:	689b      	ldr	r3, [r3, #8]
     bce:	681a      	ldr	r2, [r3, #0]
     bd0:	2101      	movs	r1, #1
     bd2:	683b      	ldr	r3, [r7, #0]
     bd4:	fa01 f303 	lsl.w	r3, r1, r3
     bd8:	4619      	mov	r1, r3
     bda:	68bb      	ldr	r3, [r7, #8]
     bdc:	689b      	ldr	r3, [r3, #8]
     bde:	430a      	orrs	r2, r1
     be0:	601a      	str	r2, [r3, #0]
  }
     be2:	bf00      	nop
     be4:	3710      	adds	r7, #16
     be6:	46bd      	mov	sp, r7
     be8:	bd80      	pop	{r7, pc}
     bea:	bf00      	nop
     bec:	10000d4c 	.word	0x10000d4c

00000bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>:
  /// For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  ///
  /// @param port_number - port number
  /// @param pin_number - pin number
  /// @param pin - pointer to an sjsu::Pin, keep as nullptr to ignore this a
  constexpr Gpio(uint8_t port_number,
     bf0:	b580      	push	{r7, lr}
     bf2:	b084      	sub	sp, #16
     bf4:	af00      	add	r7, sp, #0
     bf6:	60f8      	str	r0, [r7, #12]
     bf8:	607b      	str	r3, [r7, #4]
     bfa:	460b      	mov	r3, r1
     bfc:	72fb      	strb	r3, [r7, #11]
     bfe:	4613      	mov	r3, r2
     c00:	72bb      	strb	r3, [r7, #10]
      : kLpc17xxPin(port_number, pin_number),
        kLpc40xxPin(port_number, pin_number),
        pin_obj_(nullptr),
        gpio_port_(nullptr),
        pin_(pin_number),
        interrupt_index_(0)
     c02:	68fb      	ldr	r3, [r7, #12]
     c04:	4618      	mov	r0, r3
     c06:	f7ff fe31 	bl	86c <sjsu::Gpio::Gpio()>
     c0a:	4a23      	ldr	r2, [pc, #140]	; (c98 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0xa8>)
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	601a      	str	r2, [r3, #0]
     c10:	68fb      	ldr	r3, [r7, #12]
     c12:	3304      	adds	r3, #4
     c14:	7aba      	ldrb	r2, [r7, #10]
     c16:	7af9      	ldrb	r1, [r7, #11]
     c18:	4618      	mov	r0, r3
     c1a:	f7ff fe37 	bl	88c <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	330c      	adds	r3, #12
     c22:	7aba      	ldrb	r2, [r7, #10]
     c24:	7af9      	ldrb	r1, [r7, #11]
     c26:	4618      	mov	r0, r3
     c28:	f7ff fc42 	bl	4b0 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>
     c2c:	68fb      	ldr	r3, [r7, #12]
     c2e:	2200      	movs	r2, #0
     c30:	615a      	str	r2, [r3, #20]
     c32:	68fb      	ldr	r3, [r7, #12]
     c34:	2200      	movs	r2, #0
     c36:	619a      	str	r2, [r3, #24]
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	7aba      	ldrb	r2, [r7, #10]
     c3c:	771a      	strb	r2, [r3, #28]
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	2200      	movs	r2, #0
     c42:	775a      	strb	r2, [r3, #29]
  {
    // Assign pin object pointer
    if (pin == nullptr)
     c44:	687b      	ldr	r3, [r7, #4]
     c46:	2b00      	cmp	r3, #0
     c48:	d105      	bne.n	c56 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x66>
    {
      if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
      {
        pin_obj_ = &kLpc40xxPin;
     c4a:	68fb      	ldr	r3, [r7, #12]
     c4c:	f103 020c 	add.w	r2, r3, #12
     c50:	68fb      	ldr	r3, [r7, #12]
     c52:	615a      	str	r2, [r3, #20]
     c54:	e002      	b.n	c5c <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x6c>
        pin_obj_ = &sjsu::GetInactive<sjsu::Pin>();
      }
    }
    else
    {
      pin_obj_ = pin;
     c56:	68fb      	ldr	r3, [r7, #12]
     c58:	687a      	ldr	r2, [r7, #4]
     c5a:	615a      	str	r2, [r3, #20]
    }

    // Assign interrupt_index_ pointer
    if (port_number == 2)
     c5c:	7afb      	ldrb	r3, [r7, #11]
     c5e:	2b02      	cmp	r3, #2
     c60:	d103      	bne.n	c6a <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x7a>
    {
      interrupt_index_ = 1;
     c62:	68fb      	ldr	r3, [r7, #12]
     c64:	2201      	movs	r2, #1
     c66:	775a      	strb	r2, [r3, #29]
     c68:	e009      	b.n	c7e <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else if (port_number == 0)
     c6a:	7afb      	ldrb	r3, [r7, #11]
     c6c:	2b00      	cmp	r3, #0
     c6e:	d103      	bne.n	c78 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x88>
    {
      interrupt_index_ = 0;
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	2200      	movs	r2, #0
     c74:	775a      	strb	r2, [r3, #29]
     c76:	e002      	b.n	c7e <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else
    {
      interrupt_index_ = kInterruptPorts;
     c78:	68fb      	ldr	r3, [r7, #12]
     c7a:	2202      	movs	r2, #2
     c7c:	775a      	strb	r2, [r3, #29]
    }

    // Assign gpio port
    gpio_port_ = *GpioRegister(port_number);
     c7e:	7afb      	ldrb	r3, [r7, #11]
     c80:	4618      	mov	r0, r3
     c82:	f7ff fef9 	bl	a78 <sjsu::lpc40xx::Gpio::GpioRegister(int)>
     c86:	4603      	mov	r3, r0
     c88:	681a      	ldr	r2, [r3, #0]
     c8a:	68fb      	ldr	r3, [r7, #12]
     c8c:	619a      	str	r2, [r3, #24]
  }
     c8e:	68fb      	ldr	r3, [r7, #12]
     c90:	4618      	mov	r0, r3
     c92:	3710      	adds	r7, #16
     c94:	46bd      	mov	sp, r7
     c96:	bd80      	pop	{r7, pc}
     c98:	00008304 	.word	0x00008304

00000c9c <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  void SetDirection(Direction direction) const override
     c9c:	b590      	push	{r4, r7, lr}
     c9e:	b085      	sub	sp, #20
     ca0:	af00      	add	r7, sp, #0
     ca2:	6078      	str	r0, [r7, #4]
     ca4:	460b      	mov	r3, r1
     ca6:	70fb      	strb	r3, [r7, #3]
  {
    /// Pin function is zero fall pins on the LPC40xx and LPC17xx.
    constexpr uint8_t kGpioFunction = 0;
     ca8:	2300      	movs	r3, #0
     caa:	73fb      	strb	r3, [r7, #15]
    pin_obj_->SetPinFunction(kGpioFunction);
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	695b      	ldr	r3, [r3, #20]
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	3304      	adds	r3, #4
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	687a      	ldr	r2, [r7, #4]
     cb8:	6952      	ldr	r2, [r2, #20]
     cba:	2100      	movs	r1, #0
     cbc:	4610      	mov	r0, r2
     cbe:	4798      	blx	r3

    if (direction == Direction::kInput)
     cc0:	78fb      	ldrb	r3, [r7, #3]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d10d      	bne.n	ce2 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x46>
    {
      gpio_port_->DIR = bit::Clear(gpio_port_->DIR, pin_);
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	699b      	ldr	r3, [r3, #24]
     cca:	681a      	ldr	r2, [r3, #0]
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	7f1b      	ldrb	r3, [r3, #28]
     cd0:	4619      	mov	r1, r3
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	699c      	ldr	r4, [r3, #24]
     cd6:	4610      	mov	r0, r2
     cd8:	f001 fa82 	bl	21e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     cdc:	4603      	mov	r3, r0
     cde:	6023      	str	r3, [r4, #0]
    }
    else
    {
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
    }
  }
     ce0:	e00c      	b.n	cfc <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x60>
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	699b      	ldr	r3, [r3, #24]
     ce6:	681a      	ldr	r2, [r3, #0]
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	7f1b      	ldrb	r3, [r3, #28]
     cec:	4619      	mov	r1, r3
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	699c      	ldr	r4, [r3, #24]
     cf2:	4610      	mov	r0, r2
     cf4:	f001 fa87 	bl	2206 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     cf8:	4603      	mov	r3, r0
     cfa:	6023      	str	r3, [r4, #0]
  }
     cfc:	bf00      	nop
     cfe:	3714      	adds	r7, #20
     d00:	46bd      	mov	sp, r7
     d02:	bd90      	pop	{r4, r7, pc}

00000d04 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  void Set(State output = kHigh) const override
     d04:	b480      	push	{r7}
     d06:	b083      	sub	sp, #12
     d08:	af00      	add	r7, sp, #0
     d0a:	6078      	str	r0, [r7, #4]
     d0c:	460b      	mov	r3, r1
     d0e:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     d10:	78fb      	ldrb	r3, [r7, #3]
     d12:	2b01      	cmp	r3, #1
     d14:	d109      	bne.n	d2a <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x26>
    {
      gpio_port_->SET = (1 << pin_);
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	7f1b      	ldrb	r3, [r3, #28]
     d1a:	461a      	mov	r2, r3
     d1c:	2301      	movs	r3, #1
     d1e:	fa03 f202 	lsl.w	r2, r3, r2
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	699b      	ldr	r3, [r3, #24]
     d26:	619a      	str	r2, [r3, #24]
    }
    else
    {
      gpio_port_->CLR = (1 << pin_);
    }
  }
     d28:	e008      	b.n	d3c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x38>
      gpio_port_->CLR = (1 << pin_);
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	7f1b      	ldrb	r3, [r3, #28]
     d2e:	461a      	mov	r2, r3
     d30:	2301      	movs	r3, #1
     d32:	fa03 f202 	lsl.w	r2, r3, r2
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	699b      	ldr	r3, [r3, #24]
     d3a:	61da      	str	r2, [r3, #28]
  }
     d3c:	bf00      	nop
     d3e:	370c      	adds	r7, #12
     d40:	46bd      	mov	sp, r7
     d42:	f85d 7b04 	ldr.w	r7, [sp], #4
     d46:	4770      	bx	lr

00000d48 <sjsu::lpc40xx::Gpio::Toggle() const>:
  void Toggle() const override
     d48:	b480      	push	{r7}
     d4a:	b083      	sub	sp, #12
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
  {
    gpio_port_->PIN ^= (1 << pin_);
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	699b      	ldr	r3, [r3, #24]
     d54:	695a      	ldr	r2, [r3, #20]
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	7f1b      	ldrb	r3, [r3, #28]
     d5a:	4619      	mov	r1, r3
     d5c:	2301      	movs	r3, #1
     d5e:	408b      	lsls	r3, r1
     d60:	4619      	mov	r1, r3
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	699b      	ldr	r3, [r3, #24]
     d66:	404a      	eors	r2, r1
     d68:	615a      	str	r2, [r3, #20]
  }
     d6a:	bf00      	nop
     d6c:	370c      	adds	r7, #12
     d6e:	46bd      	mov	sp, r7
     d70:	f85d 7b04 	ldr.w	r7, [sp], #4
     d74:	4770      	bx	lr

00000d76 <sjsu::lpc40xx::Gpio::Read() const>:
  bool Read() const override
     d76:	b580      	push	{r7, lr}
     d78:	b082      	sub	sp, #8
     d7a:	af00      	add	r7, sp, #0
     d7c:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port_->PIN, pin_);
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	699b      	ldr	r3, [r3, #24]
     d82:	695a      	ldr	r2, [r3, #20]
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	7f1b      	ldrb	r3, [r3, #28]
     d88:	4619      	mov	r1, r3
     d8a:	4610      	mov	r0, r2
     d8c:	f001 fa4d 	bl	222a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     d90:	4603      	mov	r3, r0
  }
     d92:	4618      	mov	r0, r3
     d94:	3708      	adds	r7, #8
     d96:	46bd      	mov	sp, r7
     d98:	bd80      	pop	{r7, pc}

00000d9a <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     d9a:	b480      	push	{r7}
     d9c:	b083      	sub	sp, #12
     d9e:	af00      	add	r7, sp, #0
     da0:	6078      	str	r0, [r7, #4]
  {
    return *pin_obj_;
     da2:	687b      	ldr	r3, [r7, #4]
     da4:	695b      	ldr	r3, [r3, #20]
  }
     da6:	4618      	mov	r0, r3
     da8:	370c      	adds	r7, #12
     daa:	46bd      	mov	sp, r7
     dac:	f85d 7b04 	ldr.w	r7, [sp], #4
     db0:	4770      	bx	lr

00000db2 <std::function<void ()>::~function()>:
     db2:	b580      	push	{r7, lr}
     db4:	b082      	sub	sp, #8
     db6:	af00      	add	r7, sp, #0
     db8:	6078      	str	r0, [r7, #4]
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	4618      	mov	r0, r3
     dbe:	f7ff fb05 	bl	3cc <std::_Function_base::~_Function_base()>
     dc2:	687b      	ldr	r3, [r7, #4]
     dc4:	4618      	mov	r0, r3
     dc6:	3708      	adds	r7, #8
     dc8:	46bd      	mov	sp, r7
     dca:	bd80      	pop	{r7, pc}

00000dcc <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>:
  struct RegistrationInfo_t
     dcc:	b580      	push	{r7, lr}
     dce:	b082      	sub	sp, #8
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	3304      	adds	r3, #4
     dd8:	4618      	mov	r0, r3
     dda:	f7ff ffea 	bl	db2 <std::function<void ()>::~function()>
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	4618      	mov	r0, r3
     de2:	3708      	adds	r7, #8
     de4:	46bd      	mov	sp, r7
     de6:	bd80      	pop	{r7, pc}

00000de8 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>:

  /// Assign the developer's ISR and sets the selected edge that the gpio
  /// interrupt will be triggered on.
  void AttachInterrupt(InterruptCallback callback, Edge edge) override
     de8:	b5b0      	push	{r4, r5, r7, lr}
     dea:	b08c      	sub	sp, #48	; 0x30
     dec:	af00      	add	r7, sp, #0
     dee:	60f8      	str	r0, [r7, #12]
     df0:	60b9      	str	r1, [r7, #8]
     df2:	4613      	mov	r3, r2
     df4:	71fb      	strb	r3, [r7, #7]
  {
    if (!IsAValidPort())
     df6:	68f8      	ldr	r0, [r7, #12]
     df8:	f000 f8a6 	bl	f48 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     dfc:	4603      	mov	r3, r0
     dfe:	f083 0301 	eor.w	r3, r3, #1
     e02:	b2db      	uxtb	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	d155      	bne.n	eb4 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xcc>
          .interrupt_handler        = InterruptHandler,
      });
    }
    else  // For LPC40xx and host tests
    {
      sjsu::InterruptController::GetPlatformController().Enable({
     e08:	f7ff fb04 	bl	414 <sjsu::InterruptController::GetPlatformController()>
     e0c:	4604      	mov	r4, r0
          .interrupt_request_number = lpc40xx::GPIO_IRQn,
          .interrupt_handler        = InterruptHandler,
      });
     e0e:	6823      	ldr	r3, [r4, #0]
     e10:	3304      	adds	r3, #4
     e12:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
     e14:	2326      	movs	r3, #38	; 0x26
     e16:	617b      	str	r3, [r7, #20]
     e18:	f107 0314 	add.w	r3, r7, #20
     e1c:	3304      	adds	r3, #4
     e1e:	4927      	ldr	r1, [pc, #156]	; (ebc <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd4>)
     e20:	4618      	mov	r0, r3
     e22:	f001 fa19 	bl	2258 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
     e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e2a:	62bb      	str	r3, [r7, #40]	; 0x28
     e2c:	f107 0314 	add.w	r3, r7, #20
     e30:	4619      	mov	r1, r3
     e32:	4620      	mov	r0, r4
     e34:	47a8      	blx	r5
      });
     e36:	f107 0314 	add.w	r3, r7, #20
     e3a:	4618      	mov	r0, r3
     e3c:	f7ff ffc6 	bl	dcc <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
    }

    handlers[interrupt_index_][pin_] = callback;
     e40:	68fb      	ldr	r3, [r7, #12]
     e42:	7f5b      	ldrb	r3, [r3, #29]
     e44:	4619      	mov	r1, r3
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	7f1b      	ldrb	r3, [r3, #28]
     e4a:	461a      	mov	r2, r3
     e4c:	014b      	lsls	r3, r1, #5
     e4e:	4413      	add	r3, r2
     e50:	011b      	lsls	r3, r3, #4
     e52:	4a1b      	ldr	r2, [pc, #108]	; (ec0 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd8>)
     e54:	4413      	add	r3, r2
     e56:	68b9      	ldr	r1, [r7, #8]
     e58:	4618      	mov	r0, r3
     e5a:	f001 fa27 	bl	22ac <std::function<void ()>::operator=(std::function<void ()> const&)>

    auto * interrupt = LocalInterruptRegister();
     e5e:	68f8      	ldr	r0, [r7, #12]
     e60:	f000 f896 	bl	f90 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     e64:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeRising)
     e66:	79fb      	ldrb	r3, [r7, #7]
     e68:	2b02      	cmp	r3, #2
     e6a:	d002      	beq.n	e72 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0x8a>
     e6c:	79fb      	ldrb	r3, [r7, #7]
     e6e:	2b00      	cmp	r3, #0
     e70:	d10c      	bne.n	e8c <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xa4>
    {
      *interrupt->rising_enable = bit::Set(*interrupt->rising_enable, pin_);
     e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e74:	68db      	ldr	r3, [r3, #12]
     e76:	681a      	ldr	r2, [r3, #0]
     e78:	68fb      	ldr	r3, [r7, #12]
     e7a:	7f1b      	ldrb	r3, [r3, #28]
     e7c:	4619      	mov	r1, r3
     e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e80:	68dc      	ldr	r4, [r3, #12]
     e82:	4610      	mov	r0, r2
     e84:	f001 f9bf 	bl	2206 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     e88:	4603      	mov	r3, r0
     e8a:	6023      	str	r3, [r4, #0]
    }
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeFalling)
     e8c:	79fb      	ldrb	r3, [r7, #7]
     e8e:	2b02      	cmp	r3, #2
     e90:	d002      	beq.n	e98 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xb0>
     e92:	79fb      	ldrb	r3, [r7, #7]
     e94:	2b01      	cmp	r3, #1
     e96:	d10e      	bne.n	eb6 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
    {
      *interrupt->falling_enable = bit::Set(*interrupt->falling_enable, pin_);
     e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e9a:	691b      	ldr	r3, [r3, #16]
     e9c:	681a      	ldr	r2, [r3, #0]
     e9e:	68fb      	ldr	r3, [r7, #12]
     ea0:	7f1b      	ldrb	r3, [r3, #28]
     ea2:	4619      	mov	r1, r3
     ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ea6:	691c      	ldr	r4, [r3, #16]
     ea8:	4610      	mov	r0, r2
     eaa:	f001 f9ac 	bl	2206 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     eae:	4603      	mov	r3, r0
     eb0:	6023      	str	r3, [r4, #0]
     eb2:	e000      	b.n	eb6 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
      return;
     eb4:	bf00      	nop
    }
  }
     eb6:	3730      	adds	r7, #48	; 0x30
     eb8:	46bd      	mov	sp, r7
     eba:	bdb0      	pop	{r4, r5, r7, pc}
     ebc:	00000b81 	.word	0x00000b81
     ec0:	10000d4c 	.word	0x10000d4c

00000ec4 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  /// Removes the developer's ISR and clears the selected edge of the gpio
  /// interrupt from being triggered.
  void DetachInterrupt() const override
     ec4:	b590      	push	{r4, r7, lr}
     ec6:	b085      	sub	sp, #20
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
  {
    if (!IsAValidPort())
     ecc:	6878      	ldr	r0, [r7, #4]
     ece:	f000 f83b 	bl	f48 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     ed2:	4603      	mov	r3, r0
     ed4:	f083 0301 	eor.w	r3, r3, #1
     ed8:	b2db      	uxtb	r3, r3
     eda:	2b00      	cmp	r3, #0
     edc:	d12d      	bne.n	f3a <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x76>
    {
      return;
    }

    handlers[interrupt_index_][pin_] = nullptr;
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	7f5b      	ldrb	r3, [r3, #29]
     ee2:	4619      	mov	r1, r3
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	7f1b      	ldrb	r3, [r3, #28]
     ee8:	461a      	mov	r2, r3
     eea:	014b      	lsls	r3, r1, #5
     eec:	4413      	add	r3, r2
     eee:	011b      	lsls	r3, r3, #4
     ef0:	4a14      	ldr	r2, [pc, #80]	; (f44 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x80>)
     ef2:	4413      	add	r3, r2
     ef4:	2100      	movs	r1, #0
     ef6:	4618      	mov	r0, r3
     ef8:	f001 f9f3 	bl	22e2 <std::function<void ()>::operator=(decltype(nullptr))>

    auto * interrupt           = LocalInterruptRegister();
     efc:	6878      	ldr	r0, [r7, #4]
     efe:	f000 f847 	bl	f90 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     f02:	60f8      	str	r0, [r7, #12]
    *interrupt->rising_enable  = bit::Clear(*interrupt->rising_enable, pin_);
     f04:	68fb      	ldr	r3, [r7, #12]
     f06:	68db      	ldr	r3, [r3, #12]
     f08:	681a      	ldr	r2, [r3, #0]
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	7f1b      	ldrb	r3, [r3, #28]
     f0e:	4619      	mov	r1, r3
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	68dc      	ldr	r4, [r3, #12]
     f14:	4610      	mov	r0, r2
     f16:	f001 f963 	bl	21e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     f1a:	4603      	mov	r3, r0
     f1c:	6023      	str	r3, [r4, #0]
    *interrupt->falling_enable = bit::Clear(*interrupt->falling_enable, pin_);
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	691b      	ldr	r3, [r3, #16]
     f22:	681a      	ldr	r2, [r3, #0]
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	7f1b      	ldrb	r3, [r3, #28]
     f28:	4619      	mov	r1, r3
     f2a:	68fb      	ldr	r3, [r7, #12]
     f2c:	691c      	ldr	r4, [r3, #16]
     f2e:	4610      	mov	r0, r2
     f30:	f001 f956 	bl	21e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     f34:	4603      	mov	r3, r0
     f36:	6023      	str	r3, [r4, #0]
     f38:	e000      	b.n	f3c <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x78>
      return;
     f3a:	bf00      	nop
  }
     f3c:	3714      	adds	r7, #20
     f3e:	46bd      	mov	sp, r7
     f40:	bd90      	pop	{r4, r7, pc}
     f42:	bf00      	nop
     f44:	10000d4c 	.word	0x10000d4c

00000f48 <sjsu::lpc40xx::Gpio::IsAValidPort() const>:

 private:
  /// Checks if the selected gpio port is valid for external interrupts.
  bool IsAValidPort() const
     f48:	b580      	push	{r7, lr}
     f4a:	b084      	sub	sp, #16
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = !(interrupt_index_ == kInterruptPorts);
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	7f5b      	ldrb	r3, [r3, #29]
     f54:	2b02      	cmp	r3, #2
     f56:	bf14      	ite	ne
     f58:	2301      	movne	r3, #1
     f5a:	2300      	moveq	r3, #0
     f5c:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(
     f5e:	7bfb      	ldrb	r3, [r7, #15]
     f60:	f083 0301 	eor.w	r3, r3, #1
     f64:	b2db      	uxtb	r3, r3
     f66:	2b00      	cmp	r3, #0
     f68:	d006      	beq.n	f78 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x30>
     f6a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
     f6e:	4a05      	ldr	r2, [pc, #20]	; (f84 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x3c>)
     f70:	4905      	ldr	r1, [pc, #20]	; (f88 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x40>)
     f72:	4806      	ldr	r0, [pc, #24]	; (f8c <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x44>)
     f74:	f003 fbbe 	bl	46f4 <printf>
        is_valid,
        "This gpio port cannot be used for External Interrupts. Need "
        "to use GPIOs on Port 0 or 2.");
    return is_valid;
     f78:	7bfb      	ldrb	r3, [r7, #15]
  }
     f7a:	4618      	mov	r0, r3
     f7c:	3710      	adds	r7, #16
     f7e:	46bd      	mov	sp, r7
     f80:	bd80      	pop	{r7, pc}
     f82:	bf00      	nop
     f84:	00008090 	.word	0x00008090
     f88:	000081ec 	.word	0x000081ec
     f8c:	000080c0 	.word	0x000080c0

00000f90 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>:

  GpioInterruptRegisterMap_t * LocalInterruptRegister() const
     f90:	b580      	push	{r7, lr}
     f92:	b082      	sub	sp, #8
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
  {
    return InterruptRegister(interrupt_index_);
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	7f5b      	ldrb	r3, [r3, #29]
     f9c:	4618      	mov	r0, r3
     f9e:	f7ff fda5 	bl	aec <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     fa2:	4603      	mov	r3, r0
  }
     fa4:	4618      	mov	r0, r3
     fa6:	3708      	adds	r7, #8
     fa8:	46bd      	mov	sp, r7
     faa:	bd80      	pop	{r7, pc}

00000fac <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr unit_t(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept :
     fac:	b590      	push	{r4, r7, lr}
     fae:	b085      	sub	sp, #20
     fb0:	af00      	add	r7, sp, #0
     fb2:	6078      	str	r0, [r7, #4]
     fb4:	6039      	str	r1, [r7, #0]
		nls(units::convert<UnitsRhs, Units, T>(rhs.m_value), std::true_type() /*store linear value*/)
     fb6:	687c      	ldr	r4, [r7, #4]
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	4618      	mov	r0, r3
     fbc:	f000 f822 	bl	1004 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
     fc0:	eef0 7a40 	vmov.f32	s15, s0
     fc4:	edc7 7a02 	vstr	s15, [r7, #8]
     fc8:	f107 020c 	add.w	r2, r7, #12
     fcc:	f107 0308 	add.w	r3, r7, #8
     fd0:	4619      	mov	r1, r3
     fd2:	4620      	mov	r0, r4
     fd4:	f000 f805 	bl	fe2 <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>
		}
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	4618      	mov	r0, r3
     fdc:	3714      	adds	r7, #20
     fde:	46bd      	mov	sp, r7
     fe0:	bd90      	pop	{r4, r7, pc}

00000fe2 <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     fe2:	b480      	push	{r7}
     fe4:	b085      	sub	sp, #20
     fe6:	af00      	add	r7, sp, #0
     fe8:	60f8      	str	r0, [r7, #12]
     fea:	60b9      	str	r1, [r7, #8]
     fec:	607a      	str	r2, [r7, #4]
     fee:	68bb      	ldr	r3, [r7, #8]
     ff0:	681a      	ldr	r2, [r3, #0]
     ff2:	68fb      	ldr	r3, [r7, #12]
     ff4:	601a      	str	r2, [r3, #0]
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	4618      	mov	r0, r3
     ffa:	3714      	adds	r7, #20
     ffc:	46bd      	mov	sp, r7
     ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1002:	4770      	bx	lr

00001004 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    1004:	b580      	push	{r7, lr}
    1006:	b086      	sub	sp, #24
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    100c:	6878      	ldr	r0, [r7, #4]
    100e:	f000 f807 	bl	1020 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    1012:	eef0 7a40 	vmov.f32	s15, s0
	}
    1016:	eeb0 0a67 	vmov.f32	s0, s15
    101a:	3718      	adds	r7, #24
    101c:	46bd      	mov	sp, r7
    101e:	bd80      	pop	{r7, pc}

00001020 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    1020:	b480      	push	{r7}
    1022:	b085      	sub	sp, #20
    1024:	af00      	add	r7, sp, #0
    1026:	60f8      	str	r0, [r7, #12]
    1028:	7239      	strb	r1, [r7, #8]
    102a:	713a      	strb	r2, [r7, #4]
    102c:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	edd3 7a00 	vldr	s15, [r3]
    1034:	ed9f 7a05 	vldr	s14, [pc, #20]	; 104c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    1038:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    103c:	eeb0 0a67 	vmov.f32	s0, s15
    1040:	3714      	adds	r7, #20
    1042:	46bd      	mov	sp, r7
    1044:	f85d 7b04 	ldr.w	r7, [sp], #4
    1048:	4770      	bx	lr
    104a:	bf00      	nop
    104c:	49742400 	.word	0x49742400

00001050 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    1050:	b480      	push	{r7}
    1052:	b083      	sub	sp, #12
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	681b      	ldr	r3, [r3, #0]
    105c:	ee07 3a90 	vmov	s15, r3
    1060:	eeb0 0a67 	vmov.f32	s0, s15
    1064:	370c      	adds	r7, #12
    1066:	46bd      	mov	sp, r7
    1068:	f85d 7b04 	ldr.w	r7, [sp], #4
    106c:	4770      	bx	lr
    106e:	Address 0x000000000000106e is out of bounds.


00001070 <sjsu::lpc40xx::Spi::Initialize() const>:
  explicit constexpr Spi(const Bus_t & bus) : bus_(bus) {}
  /// This METHOD MUST BE EXECUTED before any other method can be called.
  /// Powers on the peripheral, activates the SSP pins and enables the SSP
  /// peripheral.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  Status Initialize() const override
    1070:	b590      	push	{r4, r7, lr}
    1072:	b085      	sub	sp, #20
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
  {
    constexpr uint8_t kSpiFormatCode = 0b00;
    1078:	2300      	movs	r3, #0
    107a:	73fb      	strb	r3, [r7, #15]

    // Power up peripheral
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    107c:	f7ff fb7a 	bl	774 <sjsu::SystemController::GetPlatformController()>
    1080:	4603      	mov	r3, r0
        bus_.power_on_bit);
    1082:	681a      	ldr	r2, [r3, #0]
    1084:	3214      	adds	r2, #20
    1086:	6812      	ldr	r2, [r2, #0]
    1088:	6879      	ldr	r1, [r7, #4]
    108a:	6849      	ldr	r1, [r1, #4]
    108c:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    108e:	4618      	mov	r0, r3
    1090:	4790      	blx	r2
    // Enable SSP pins
    bus_.mosi.SetPinFunction(bus_.pin_function_id);
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	685b      	ldr	r3, [r3, #4]
    1096:	689b      	ldr	r3, [r3, #8]
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	3304      	adds	r3, #4
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	687a      	ldr	r2, [r7, #4]
    10a0:	6852      	ldr	r2, [r2, #4]
    10a2:	6890      	ldr	r0, [r2, #8]
    10a4:	687a      	ldr	r2, [r7, #4]
    10a6:	6852      	ldr	r2, [r2, #4]
    10a8:	7d12      	ldrb	r2, [r2, #20]
    10aa:	4611      	mov	r1, r2
    10ac:	4798      	blx	r3
    bus_.miso.SetPinFunction(bus_.pin_function_id);
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	685b      	ldr	r3, [r3, #4]
    10b2:	68db      	ldr	r3, [r3, #12]
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	3304      	adds	r3, #4
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	687a      	ldr	r2, [r7, #4]
    10bc:	6852      	ldr	r2, [r2, #4]
    10be:	68d0      	ldr	r0, [r2, #12]
    10c0:	687a      	ldr	r2, [r7, #4]
    10c2:	6852      	ldr	r2, [r2, #4]
    10c4:	7d12      	ldrb	r2, [r2, #20]
    10c6:	4611      	mov	r1, r2
    10c8:	4798      	blx	r3
    bus_.sck.SetPinFunction(bus_.pin_function_id);
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	685b      	ldr	r3, [r3, #4]
    10ce:	691b      	ldr	r3, [r3, #16]
    10d0:	681b      	ldr	r3, [r3, #0]
    10d2:	3304      	adds	r3, #4
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	6852      	ldr	r2, [r2, #4]
    10da:	6910      	ldr	r0, [r2, #16]
    10dc:	687a      	ldr	r2, [r7, #4]
    10de:	6852      	ldr	r2, [r2, #4]
    10e0:	7d12      	ldrb	r2, [r2, #20]
    10e2:	4611      	mov	r1, r2
    10e4:	4798      	blx	r3
    // Set SSP frame format to SPI
    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, kSpiFormatCode, ControlRegister0::kFrameBit);
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	685b      	ldr	r3, [r3, #4]
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 = bit::Insert(
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	685b      	ldr	r3, [r3, #4]
    10f2:	681c      	ldr	r4, [r3, #0]
    10f4:	4b1d      	ldr	r3, [pc, #116]	; (116c <sjsu::lpc40xx::Spi::Initialize() const+0xfc>)
    10f6:	781a      	ldrb	r2, [r3, #0]
    10f8:	785b      	ldrb	r3, [r3, #1]
    10fa:	021b      	lsls	r3, r3, #8
    10fc:	431a      	orrs	r2, r3
    10fe:	2300      	movs	r3, #0
    1100:	f362 030f 	bfi	r3, r2, #0, #16
    1104:	461a      	mov	r2, r3
    1106:	2100      	movs	r1, #0
    1108:	f000 ffb2 	bl	2070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    110c:	4603      	mov	r3, r0
    110e:	6023      	str	r3, [r4, #0]
    // Set SPI to master mode by clearing
    bus_.registers->CR1 =
        bit::Clear(bus_.registers->CR1, ControlRegister1::kSlaveModeBit);
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	685b      	ldr	r3, [r3, #4]
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	6858      	ldr	r0, [r3, #4]
    bus_.registers->CR1 =
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	685b      	ldr	r3, [r3, #4]
    111c:	681c      	ldr	r4, [r3, #0]
        bit::Clear(bus_.registers->CR1, ControlRegister1::kSlaveModeBit);
    111e:	4b14      	ldr	r3, [pc, #80]	; (1170 <sjsu::lpc40xx::Spi::Initialize() const+0x100>)
    1120:	781a      	ldrb	r2, [r3, #0]
    1122:	785b      	ldrb	r3, [r3, #1]
    1124:	021b      	lsls	r3, r3, #8
    1126:	431a      	orrs	r2, r3
    1128:	2300      	movs	r3, #0
    112a:	f362 030f 	bfi	r3, r2, #0, #16
    112e:	4619      	mov	r1, r3
    1130:	f001 f8f1 	bl	2316 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1134:	4603      	mov	r3, r0
    bus_.registers->CR1 =
    1136:	6063      	str	r3, [r4, #4]
    // Enable SSP
    bus_.registers->CR1 =
        bit::Set(bus_.registers->CR1, ControlRegister1::kSpiEnable);
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	685b      	ldr	r3, [r3, #4]
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	6858      	ldr	r0, [r3, #4]
    bus_.registers->CR1 =
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	685b      	ldr	r3, [r3, #4]
    1144:	681c      	ldr	r4, [r3, #0]
        bit::Set(bus_.registers->CR1, ControlRegister1::kSpiEnable);
    1146:	4b0b      	ldr	r3, [pc, #44]	; (1174 <sjsu::lpc40xx::Spi::Initialize() const+0x104>)
    1148:	781a      	ldrb	r2, [r3, #0]
    114a:	785b      	ldrb	r3, [r3, #1]
    114c:	021b      	lsls	r3, r3, #8
    114e:	431a      	orrs	r2, r3
    1150:	2300      	movs	r3, #0
    1152:	f362 030f 	bfi	r3, r2, #0, #16
    1156:	4619      	mov	r1, r3
    1158:	f001 f8ec 	bl	2334 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    115c:	4603      	mov	r3, r0
    bus_.registers->CR1 =
    115e:	6063      	str	r3, [r4, #4]
    return Status::kSuccess;
    1160:	2300      	movs	r3, #0
  }
    1162:	4618      	mov	r0, r3
    1164:	3714      	adds	r7, #20
    1166:	46bd      	mov	sp, r7
    1168:	bd90      	pop	{r4, r7, pc}
    116a:	bf00      	nop
    116c:	0000822c 	.word	0x0000822c
    1170:	00008240 	.word	0x00008240
    1174:	0000823c 	.word	0x0000823c

00001178 <sjsu::lpc40xx::Spi::IsBusBusy() const>:
  }

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsBusBusy() const
    1178:	b580      	push	{r7, lr}
    117a:	b082      	sub	sp, #8
    117c:	af00      	add	r7, sp, #0
    117e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(bus_.registers->SR, StatusRegister::kDataLineBusyBit);
    1180:	687b      	ldr	r3, [r7, #4]
    1182:	685b      	ldr	r3, [r3, #4]
    1184:	681b      	ldr	r3, [r3, #0]
    1186:	68d8      	ldr	r0, [r3, #12]
    1188:	4b07      	ldr	r3, [pc, #28]	; (11a8 <sjsu::lpc40xx::Spi::IsBusBusy() const+0x30>)
    118a:	781a      	ldrb	r2, [r3, #0]
    118c:	785b      	ldrb	r3, [r3, #1]
    118e:	021b      	lsls	r3, r3, #8
    1190:	431a      	orrs	r2, r3
    1192:	2300      	movs	r3, #0
    1194:	f362 030f 	bfi	r3, r2, #0, #16
    1198:	4619      	mov	r1, r3
    119a:	f001 f8da 	bl	2352 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    119e:	4603      	mov	r3, r0
  }
    11a0:	4618      	mov	r0, r3
    11a2:	3708      	adds	r7, #8
    11a4:	46bd      	mov	sp, r7
    11a6:	bd80      	pop	{r7, pc}
    11a8:	00008244 	.word	0x00008244

000011ac <sjsu::lpc40xx::Spi::Transfer(unsigned short) const>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) const override
    11ac:	b580      	push	{r7, lr}
    11ae:	b082      	sub	sp, #8
    11b0:	af00      	add	r7, sp, #0
    11b2:	6078      	str	r0, [r7, #4]
    11b4:	460b      	mov	r3, r1
    11b6:	807b      	strh	r3, [r7, #2]
  {
    bus_.registers->DR = data;
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	685b      	ldr	r3, [r3, #4]
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	887a      	ldrh	r2, [r7, #2]
    11c0:	609a      	str	r2, [r3, #8]
    while (IsBusBusy())
    11c2:	6878      	ldr	r0, [r7, #4]
    11c4:	f7ff ffd8 	bl	1178 <sjsu::lpc40xx::Spi::IsBusBusy() const>
    11c8:	4603      	mov	r3, r0
    11ca:	2b00      	cmp	r3, #0
    11cc:	d001      	beq.n	11d2 <sjsu::lpc40xx::Spi::Transfer(unsigned short) const+0x26>
    {
      continue;
    11ce:	bf00      	nop
    while (IsBusBusy())
    11d0:	e7f7      	b.n	11c2 <sjsu::lpc40xx::Spi::Transfer(unsigned short) const+0x16>
    }
    return static_cast<uint16_t>(bus_.registers->DR);
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	685b      	ldr	r3, [r3, #4]
    11d6:	681b      	ldr	r3, [r3, #0]
    11d8:	689b      	ldr	r3, [r3, #8]
    11da:	b29b      	uxth	r3, r3
  }
    11dc:	4618      	mov	r0, r3
    11de:	3708      	adds	r7, #8
    11e0:	46bd      	mov	sp, r7
    11e2:	bd80      	pop	{r7, pc}

000011e4 <auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)>:
constexpr auto Value(Enum enum_type_value)
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	4603      	mov	r3, r0
    11ec:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    11ee:	79fb      	ldrb	r3, [r7, #7]
}
    11f0:	4618      	mov	r0, r3
    11f2:	370c      	adds	r7, #12
    11f4:	46bd      	mov	sp, r7
    11f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    11fa:	4770      	bx	lr

000011fc <sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const>:

  /// Sets the various modes for the Peripheral
  /// @param size - number of bits per frame
  void SetDataSize(DataSize size) const override
    11fc:	b590      	push	{r4, r7, lr}
    11fe:	b085      	sub	sp, #20
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	460b      	mov	r3, r1
    1206:	70fb      	strb	r3, [r7, #3]
  {
    // NOTE: In UM10562 page 611, you will see that DSS (Data Size Select) is
    // equal to the bit transfer minus 1. So we can add 3 to our DataSize enum
    // to get the appropriate tranfer code.
    constexpr uint8_t kBitTransferCodeOffset = 3;
    1208:	2303      	movs	r3, #3
    120a:	73fb      	strb	r3, [r7, #15]
    uint8_t size_code =
        static_cast<uint8_t>(Value(size) + kBitTransferCodeOffset);
    120c:	78fb      	ldrb	r3, [r7, #3]
    120e:	4618      	mov	r0, r3
    1210:	f7ff ffe8 	bl	11e4 <auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)>
    1214:	4603      	mov	r3, r0
    1216:	3303      	adds	r3, #3
    1218:	73bb      	strb	r3, [r7, #14]

    bus_.registers->CR0 =
        bit::Insert(bus_.registers->CR0, size_code, ControlRegister0::kDataBit);
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	685b      	ldr	r3, [r3, #4]
    121e:	681b      	ldr	r3, [r3, #0]
    1220:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 =
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	685b      	ldr	r3, [r3, #4]
    1226:	681c      	ldr	r4, [r3, #0]
        bit::Insert(bus_.registers->CR0, size_code, ControlRegister0::kDataBit);
    1228:	4b08      	ldr	r3, [pc, #32]	; (124c <sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const+0x50>)
    122a:	7bb9      	ldrb	r1, [r7, #14]
    122c:	781a      	ldrb	r2, [r3, #0]
    122e:	785b      	ldrb	r3, [r3, #1]
    1230:	021b      	lsls	r3, r3, #8
    1232:	431a      	orrs	r2, r3
    1234:	2300      	movs	r3, #0
    1236:	f362 030f 	bfi	r3, r2, #0, #16
    123a:	461a      	mov	r2, r3
    123c:	f000 ff18 	bl	2070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1240:	4603      	mov	r3, r0
    bus_.registers->CR0 =
    1242:	6023      	str	r3, [r4, #0]
  }
    1244:	bf00      	nop
    1246:	3714      	adds	r7, #20
    1248:	46bd      	mov	sp, r7
    124a:	bd90      	pop	{r4, r7, pc}
    124c:	00008228 	.word	0x00008228

00001250 <unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const>:
		inline constexpr Ty to() const noexcept
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1258:	6878      	ldr	r0, [r7, #4]
    125a:	f001 f889 	bl	2370 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    125e:	4603      	mov	r3, r0
		}
    1260:	4618      	mov	r0, r3
    1262:	3708      	adds	r7, #8
    1264:	46bd      	mov	sp, r7
    1266:	bd80      	pop	{r7, pc}

00001268 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1268:	b580      	push	{r7, lr}
    126a:	ed2d 8b02 	vpush	{d8}
    126e:	b084      	sub	sp, #16
    1270:	af00      	add	r7, sp, #0
    1272:	6078      	str	r0, [r7, #4]
    1274:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	4618      	mov	r0, r3
    127a:	f7ff fee9 	bl	1050 <units::linear_scale<float>::operator()() const>
    127e:	eeb0 8a40 	vmov.f32	s16, s0
    1282:	683b      	ldr	r3, [r7, #0]
    1284:	4618      	mov	r0, r3
    1286:	f7ff fee3 	bl	1050 <units::linear_scale<float>::operator()() const>
    128a:	eef0 7a40 	vmov.f32	s15, s0
    128e:	edc7 7a03 	vstr	s15, [r7, #12]
    1292:	f107 030c 	add.w	r3, r7, #12
    1296:	4618      	mov	r0, r3
    1298:	f7ff fa4c 	bl	734 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    129c:	eeb0 7a40 	vmov.f32	s14, s0
    12a0:	eec8 7a07 	vdiv.f32	s15, s16, s14
    12a4:	f107 0308 	add.w	r3, r7, #8
    12a8:	eeb0 0a67 	vmov.f32	s0, s15
    12ac:	4618      	mov	r0, r3
    12ae:	f000 f807 	bl	12c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    12b2:	68bb      	ldr	r3, [r7, #8]
	}
    12b4:	4618      	mov	r0, r3
    12b6:	3710      	adds	r7, #16
    12b8:	46bd      	mov	sp, r7
    12ba:	ecbd 8b02 	vpop	{d8}
    12be:	bd80      	pop	{r7, pc}

000012c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    12c0:	b580      	push	{r7, lr}
    12c2:	b082      	sub	sp, #8
    12c4:	af00      	add	r7, sp, #0
    12c6:	6078      	str	r0, [r7, #4]
    12c8:	ed87 0a00 	vstr	s0, [r7]
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	463a      	mov	r2, r7
    12d0:	4611      	mov	r1, r2
    12d2:	4618      	mov	r0, r3
    12d4:	f7ff fa0d 	bl	6f2 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	4618      	mov	r0, r3
    12dc:	3708      	adds	r7, #8
    12de:	46bd      	mov	sp, r7
    12e0:	bd80      	pop	{r7, pc}
    12e2:	Address 0x00000000000012e2 is out of bounds.


000012e4 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const>:
  /// @param positive_clock_on_idle - maintain bus on clock false=low or
  ///        false=high between frames
  /// @param read_miso_on_rising - capture serial data on true=first or
  ///        1=second clock cycle
  /// @param frequency - serial clock rate
  void SetClock(units::frequency::hertz_t frequency,
    12e4:	b590      	push	{r4, r7, lr}
    12e6:	b089      	sub	sp, #36	; 0x24
    12e8:	af00      	add	r7, sp, #0
    12ea:	60f8      	str	r0, [r7, #12]
    12ec:	60b9      	str	r1, [r7, #8]
    12ee:	4611      	mov	r1, r2
    12f0:	461a      	mov	r2, r3
    12f2:	460b      	mov	r3, r1
    12f4:	71fb      	strb	r3, [r7, #7]
    12f6:	4613      	mov	r3, r2
    12f8:	71bb      	strb	r3, [r7, #6]
                bool positive_clock_on_idle = false,
                bool read_miso_on_rising    = false) const override
  {
    bus_.registers->CR0 = bit::Insert(bus_.registers->CR0,
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	685b      	ldr	r3, [r3, #4]
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	6818      	ldr	r0, [r3, #0]
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	685b      	ldr	r3, [r3, #4]
    1306:	681c      	ldr	r4, [r3, #0]
    1308:	4b2f      	ldr	r3, [pc, #188]	; (13c8 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xe4>)
    130a:	79f9      	ldrb	r1, [r7, #7]
    130c:	781a      	ldrb	r2, [r3, #0]
    130e:	785b      	ldrb	r3, [r3, #1]
    1310:	021b      	lsls	r3, r3, #8
    1312:	431a      	orrs	r2, r3
    1314:	2300      	movs	r3, #0
    1316:	f362 030f 	bfi	r3, r2, #0, #16
    131a:	461a      	mov	r2, r3
    131c:	f000 ff2a 	bl	2174 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    1320:	4603      	mov	r3, r0
    1322:	6023      	str	r3, [r4, #0]
                                      positive_clock_on_idle,
                                      ControlRegister0::kPolarityBit);

    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, read_miso_on_rising, ControlRegister0::kPhaseBit);
    1324:	68fb      	ldr	r3, [r7, #12]
    1326:	685b      	ldr	r3, [r3, #4]
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 = bit::Insert(
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	685b      	ldr	r3, [r3, #4]
    1330:	681c      	ldr	r4, [r3, #0]
    1332:	4b26      	ldr	r3, [pc, #152]	; (13cc <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xe8>)
    1334:	79b9      	ldrb	r1, [r7, #6]
    1336:	781a      	ldrb	r2, [r3, #0]
    1338:	785b      	ldrb	r3, [r3, #1]
    133a:	021b      	lsls	r3, r3, #8
    133c:	431a      	orrs	r2, r3
    133e:	2300      	movs	r3, #0
    1340:	f362 030f 	bfi	r3, r2, #0, #16
    1344:	461a      	mov	r2, r3
    1346:	f000 ff15 	bl	2174 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    134a:	4603      	mov	r3, r0
    134c:	6023      	str	r3, [r4, #0]

    auto system_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    134e:	f7ff fa11 	bl	774 <sjsu::SystemController::GetPlatformController()>
    1352:	4602      	mov	r2, r0
            bus_.power_on_bit);
    1354:	68fb      	ldr	r3, [r7, #12]
    1356:	685b      	ldr	r3, [r3, #4]
    1358:	3304      	adds	r3, #4
    135a:	4619      	mov	r1, r3
    135c:	4610      	mov	r0, r2
    135e:	f7ff fa15 	bl	78c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    1362:	4603      	mov	r3, r0
    1364:	617b      	str	r3, [r7, #20]

    uint16_t prescaler = (system_frequency / frequency).to<uint16_t>();
    1366:	f107 0208 	add.w	r2, r7, #8
    136a:	f107 0314 	add.w	r3, r7, #20
    136e:	4611      	mov	r1, r2
    1370:	4618      	mov	r0, r3
    1372:	f7ff ff79 	bl	1268 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    1376:	4603      	mov	r3, r0
    1378:	61bb      	str	r3, [r7, #24]
    137a:	f107 0318 	add.w	r3, r7, #24
    137e:	4618      	mov	r0, r3
    1380:	f7ff ff66 	bl	1250 <unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const>
    1384:	4603      	mov	r3, r0
    1386:	83fb      	strh	r3, [r7, #30]
    // Store lower half of prescalar in clock prescalar register
    bus_.registers->CPSR = prescaler & 0xFF;
    1388:	8bfa      	ldrh	r2, [r7, #30]
    138a:	68fb      	ldr	r3, [r7, #12]
    138c:	685b      	ldr	r3, [r3, #4]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	b2d2      	uxtb	r2, r2
    1392:	611a      	str	r2, [r3, #16]
    // Store upper 8 bit half of the prescalar in control register 0
    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, prescaler >> 8, ControlRegister0::kDividerBit);
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	685b      	ldr	r3, [r3, #4]
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	6818      	ldr	r0, [r3, #0]
    139c:	8bfb      	ldrh	r3, [r7, #30]
    bus_.registers->CR0 = bit::Insert(
    139e:	1219      	asrs	r1, r3, #8
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	685b      	ldr	r3, [r3, #4]
    13a4:	681c      	ldr	r4, [r3, #0]
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xec>)
    13a8:	781a      	ldrb	r2, [r3, #0]
    13aa:	785b      	ldrb	r3, [r3, #1]
    13ac:	021b      	lsls	r3, r3, #8
    13ae:	431a      	orrs	r2, r3
    13b0:	2300      	movs	r3, #0
    13b2:	f362 030f 	bfi	r3, r2, #0, #16
    13b6:	461a      	mov	r2, r3
    13b8:	f000 fff6 	bl	23a8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    13bc:	4603      	mov	r3, r0
    13be:	6023      	str	r3, [r4, #0]
  }
    13c0:	bf00      	nop
    13c2:	3724      	adds	r7, #36	; 0x24
    13c4:	46bd      	mov	sp, r7
    13c6:	bd90      	pop	{r4, r7, pc}
    13c8:	00008230 	.word	0x00008230
    13cc:	00008234 	.word	0x00008234
    13d0:	00008238 	.word	0x00008238

000013d4 <sjsu::PixelDisplay::Color_t::IsBlank()>:
      return red == 0 && green == 0 && blue == 0 && alpha == 0;
    }
    /// @returns true if the Color_t definitions is
    ///          { .red = 0, .green = 0, .blue = 0, .alpha = 0} which indicates
    ///           no color and invisible.
    bool IsBlank()
    13d4:	b480      	push	{r7}
    13d6:	b083      	sub	sp, #12
    13d8:	af00      	add	r7, sp, #0
    13da:	6078      	str	r0, [r7, #4]
    {
      return red == 0 && green == 0 && blue == 0 && alpha == 0;
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	2b00      	cmp	r3, #0
    13e2:	d10d      	bne.n	1400 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	785b      	ldrb	r3, [r3, #1]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d109      	bne.n	1400 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	789b      	ldrb	r3, [r3, #2]
    13f0:	2b00      	cmp	r3, #0
    13f2:	d105      	bne.n	1400 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	78db      	ldrb	r3, [r3, #3]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d101      	bne.n	1400 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    13fc:	2301      	movs	r3, #1
    13fe:	e000      	b.n	1402 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2e>
    1400:	2300      	movs	r3, #0
    }
    1402:	4618      	mov	r0, r3
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr

0000140e <sjsu::PixelDisplay::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
    140e:	b480      	push	{r7}
    1410:	b083      	sub	sp, #12
    1412:	af00      	add	r7, sp, #0
    1414:	6078      	str	r0, [r7, #4]
    1416:	bf00      	nop
    1418:	370c      	adds	r7, #12
    141a:	46bd      	mov	sp, r7
    141c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1420:	4770      	bx	lr

00001422 <sjsu::PixelDisplay::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
    1422:	b480      	push	{r7}
    1424:	b083      	sub	sp, #12
    1426:	af00      	add	r7, sp, #0
    1428:	6078      	str	r0, [r7, #4]
    142a:	bf00      	nop
    142c:	370c      	adds	r7, #12
    142e:	46bd      	mov	sp, r7
    1430:	f85d 7b04 	ldr.w	r7, [sp], #4
    1434:	4770      	bx	lr

00001436 <sjsu::Ssd1306::GetWidth()>:
  constexpr Ssd1306(sjsu::Spi & spi, sjsu::Gpio & cs, sjsu::Gpio & dc)
      : spi_(spi), cs_(cs), dc_(dc), bitmap_{}
  {
  }

  size_t GetWidth() override
    1436:	b480      	push	{r7}
    1438:	b083      	sub	sp, #12
    143a:	af00      	add	r7, sp, #0
    143c:	6078      	str	r0, [r7, #4]
  {
    return kWidth;
    143e:	2380      	movs	r3, #128	; 0x80
  }
    1440:	4618      	mov	r0, r3
    1442:	370c      	adds	r7, #12
    1444:	46bd      	mov	sp, r7
    1446:	f85d 7b04 	ldr.w	r7, [sp], #4
    144a:	4770      	bx	lr

0000144c <sjsu::Ssd1306::GetHeight()>:
  size_t GetHeight() override
    144c:	b480      	push	{r7}
    144e:	b083      	sub	sp, #12
    1450:	af00      	add	r7, sp, #0
    1452:	6078      	str	r0, [r7, #4]
  {
    return kHeight;
    1454:	2340      	movs	r3, #64	; 0x40
  }
    1456:	4618      	mov	r0, r3
    1458:	370c      	adds	r7, #12
    145a:	46bd      	mov	sp, r7
    145c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1460:	4770      	bx	lr

00001462 <sjsu::Ssd1306::AvailableColors()>:
  Color_t AvailableColors() override
    1462:	b480      	push	{r7}
    1464:	b085      	sub	sp, #20
    1466:	af00      	add	r7, sp, #0
    1468:	6078      	str	r0, [r7, #4]
    return Color_t{
      .red   = 0,
      .green = 0,
      .blue  = 0,
      .alpha = 1,
    };
    146a:	2300      	movs	r3, #0
    146c:	733b      	strb	r3, [r7, #12]
    146e:	2300      	movs	r3, #0
    1470:	737b      	strb	r3, [r7, #13]
    1472:	2300      	movs	r3, #0
    1474:	73bb      	strb	r3, [r7, #14]
    1476:	2301      	movs	r3, #1
    1478:	73fb      	strb	r3, [r7, #15]
    147a:	2300      	movs	r3, #0
    147c:	7b3a      	ldrb	r2, [r7, #12]
    147e:	f362 0307 	bfi	r3, r2, #0, #8
    1482:	7b7a      	ldrb	r2, [r7, #13]
    1484:	f362 230f 	bfi	r3, r2, #8, #8
    1488:	7bba      	ldrb	r2, [r7, #14]
    148a:	f362 4317 	bfi	r3, r2, #16, #8
    148e:	7bfa      	ldrb	r2, [r7, #15]
    1490:	f362 631f 	bfi	r3, r2, #24, #8
  }
    1494:	4618      	mov	r0, r3
    1496:	3714      	adds	r7, #20
    1498:	46bd      	mov	sp, r7
    149a:	f85d 7b04 	ldr.w	r7, [sp], #4
    149e:	4770      	bx	lr

000014a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
    14a0:	b580      	push	{r7, lr}
    14a2:	b088      	sub	sp, #32
    14a4:	af02      	add	r7, sp, #8
    14a6:	60f8      	str	r0, [r7, #12]
    14a8:	60b9      	str	r1, [r7, #8]
    14aa:	607a      	str	r2, [r7, #4]
    14ac:	603b      	str	r3, [r7, #0]
  {
    dc_.Set(static_cast<sjsu::Gpio::State>(transaction));
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	68db      	ldr	r3, [r3, #12]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	3304      	adds	r3, #4
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	68fa      	ldr	r2, [r7, #12]
    14ba:	68d2      	ldr	r2, [r2, #12]
    14bc:	6879      	ldr	r1, [r7, #4]
    14be:	b2c9      	uxtb	r1, r1
    14c0:	4610      	mov	r0, r2
    14c2:	4798      	blx	r3
    cs_.Set(sjsu::Gpio::State::kLow);
    14c4:	68fb      	ldr	r3, [r7, #12]
    14c6:	689b      	ldr	r3, [r3, #8]
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	3304      	adds	r3, #4
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	68fa      	ldr	r2, [r7, #12]
    14d0:	6892      	ldr	r2, [r2, #8]
    14d2:	2100      	movs	r1, #0
    14d4:	4610      	mov	r0, r2
    14d6:	4798      	blx	r3
    for (size_t i = 0; i < size; i++)
    14d8:	2300      	movs	r3, #0
    14da:	617b      	str	r3, [r7, #20]
    14dc:	697a      	ldr	r2, [r7, #20]
    14de:	683b      	ldr	r3, [r7, #0]
    14e0:	429a      	cmp	r2, r3
    14e2:	d222      	bcs.n	152a <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x8a>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
    14e4:	683a      	ldr	r2, [r7, #0]
    14e6:	697b      	ldr	r3, [r7, #20]
    14e8:	1ad3      	subs	r3, r2, r3
    14ea:	3b01      	subs	r3, #1
    14ec:	00db      	lsls	r3, r3, #3
    14ee:	68ba      	ldr	r2, [r7, #8]
    14f0:	fa22 f303 	lsr.w	r3, r2, r3
    14f4:	74fb      	strb	r3, [r7, #19]
      if (transaction == Transaction::kCommand)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d107      	bne.n	150c <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x6c>
      {
        LOG_DEBUG("send = 0x%X", send);
    14fc:	7cfb      	ldrb	r3, [r7, #19]
    14fe:	9300      	str	r3, [sp, #0]
    1500:	233f      	movs	r3, #63	; 0x3f
    1502:	4a11      	ldr	r2, [pc, #68]	; (1548 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xa8>)
    1504:	4911      	ldr	r1, [pc, #68]	; (154c <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xac>)
    1506:	4812      	ldr	r0, [pc, #72]	; (1550 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xb0>)
    1508:	f003 f8f4 	bl	46f4 <printf>
      }
      spi_.Transfer(send);
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	685b      	ldr	r3, [r3, #4]
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	3304      	adds	r3, #4
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	68fa      	ldr	r2, [r7, #12]
    1518:	6852      	ldr	r2, [r2, #4]
    151a:	7cf9      	ldrb	r1, [r7, #19]
    151c:	b289      	uxth	r1, r1
    151e:	4610      	mov	r0, r2
    1520:	4798      	blx	r3
    for (size_t i = 0; i < size; i++)
    1522:	697b      	ldr	r3, [r7, #20]
    1524:	3301      	adds	r3, #1
    1526:	617b      	str	r3, [r7, #20]
    1528:	e7d8      	b.n	14dc <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x3c>
    }
    cs_.Set(sjsu::Gpio::State::kHigh);
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	689b      	ldr	r3, [r3, #8]
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	3304      	adds	r3, #4
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	68fa      	ldr	r2, [r7, #12]
    1536:	6892      	ldr	r2, [r2, #8]
    1538:	2101      	movs	r1, #1
    153a:	4610      	mov	r0, r2
    153c:	4798      	blx	r3
  }
    153e:	bf00      	nop
    1540:	3718      	adds	r7, #24
    1542:	46bd      	mov	sp, r7
    1544:	bd80      	pop	{r7, pc}
    1546:	bf00      	nop
    1548:	00008158 	.word	0x00008158
    154c:	00008290 	.word	0x00008290
    1550:	000081a0 	.word	0x000081a0

00001554 <sjsu::Ssd1306::Initialize()>:

  void Initialize() override
    1554:	b5b0      	push	{r4, r5, r7, lr}
    1556:	b084      	sub	sp, #16
    1558:	af00      	add	r7, sp, #0
    155a:	6078      	str	r0, [r7, #4]
  {
    cs_.SetDirection(sjsu::Gpio::Direction::kOutput);
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	689b      	ldr	r3, [r3, #8]
    1560:	681b      	ldr	r3, [r3, #0]
    1562:	681b      	ldr	r3, [r3, #0]
    1564:	687a      	ldr	r2, [r7, #4]
    1566:	6892      	ldr	r2, [r2, #8]
    1568:	2101      	movs	r1, #1
    156a:	4610      	mov	r0, r2
    156c:	4798      	blx	r3
    dc_.SetDirection(sjsu::Gpio::Direction::kOutput);
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	68db      	ldr	r3, [r3, #12]
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	681b      	ldr	r3, [r3, #0]
    1576:	687a      	ldr	r2, [r7, #4]
    1578:	68d2      	ldr	r2, [r2, #12]
    157a:	2101      	movs	r1, #1
    157c:	4610      	mov	r0, r2
    157e:	4798      	blx	r3
    cs_.Set(sjsu::Gpio::State::kHigh);
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	689b      	ldr	r3, [r3, #8]
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	3304      	adds	r3, #4
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	687a      	ldr	r2, [r7, #4]
    158c:	6892      	ldr	r2, [r2, #8]
    158e:	2101      	movs	r1, #1
    1590:	4610      	mov	r0, r2
    1592:	4798      	blx	r3
    dc_.Set(sjsu::Gpio::State::kHigh);
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	68db      	ldr	r3, [r3, #12]
    1598:	681b      	ldr	r3, [r3, #0]
    159a:	3304      	adds	r3, #4
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	687a      	ldr	r2, [r7, #4]
    15a0:	68d2      	ldr	r2, [r2, #12]
    15a2:	2101      	movs	r1, #1
    15a4:	4610      	mov	r0, r2
    15a6:	4798      	blx	r3

    spi_.Initialize();
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	685b      	ldr	r3, [r3, #4]
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	687a      	ldr	r2, [r7, #4]
    15b2:	6852      	ldr	r2, [r2, #4]
    15b4:	4610      	mov	r0, r2
    15b6:	4798      	blx	r3
    spi_.SetDataSize(sjsu::Spi::DataSize::kEight);
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	685b      	ldr	r3, [r3, #4]
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	3308      	adds	r3, #8
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	687a      	ldr	r2, [r7, #4]
    15c4:	6852      	ldr	r2, [r2, #4]
    15c6:	2104      	movs	r1, #4
    15c8:	4610      	mov	r0, r2
    15ca:	4798      	blx	r3
    spi_.SetClock(2_MHz);
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	685b      	ldr	r3, [r3, #4]
    15d0:	681b      	ldr	r3, [r3, #0]
    15d2:	330c      	adds	r3, #12
    15d4:	681c      	ldr	r4, [r3, #0]
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	685d      	ldr	r5, [r3, #4]
    15da:	f04f 0002 	mov.w	r0, #2
    15de:	f04f 0100 	mov.w	r1, #0
    15e2:	f7ff f85f 	bl	6a4 <units::literals::operator"" _MHz(unsigned long long)>
    15e6:	4603      	mov	r3, r0
    15e8:	60fb      	str	r3, [r7, #12]
    15ea:	f107 020c 	add.w	r2, r7, #12
    15ee:	f107 0308 	add.w	r3, r7, #8
    15f2:	4611      	mov	r1, r2
    15f4:	4618      	mov	r0, r3
    15f6:	f7ff fcd9 	bl	fac <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    15fa:	2300      	movs	r3, #0
    15fc:	2200      	movs	r2, #0
    15fe:	68b9      	ldr	r1, [r7, #8]
    1600:	4628      	mov	r0, r5
    1602:	47a0      	blx	r4

    Clear();
    1604:	6878      	ldr	r0, [r7, #4]
    1606:	f000 f895 	bl	1734 <sjsu::Ssd1306::Clear()>
    InitializationPanel();
    160a:	6878      	ldr	r0, [r7, #4]
    160c:	f000 f804 	bl	1618 <sjsu::Ssd1306::InitializationPanel()>
  }
    1610:	bf00      	nop
    1612:	3710      	adds	r7, #16
    1614:	46bd      	mov	sp, r7
    1616:	bdb0      	pop	{r4, r5, r7, pc}

00001618 <sjsu::Ssd1306::InitializationPanel()>:

  void InitializationPanel()
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
    1620:	2301      	movs	r3, #1
    1622:	2200      	movs	r2, #0
    1624:	21ae      	movs	r1, #174	; 0xae
    1626:	6878      	ldr	r0, [r7, #4]
    1628:	f7ff ff3a 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
    162c:	2302      	movs	r3, #2
    162e:	2200      	movs	r2, #0
    1630:	f24d 5180 	movw	r1, #54656	; 0xd580
    1634:	6878      	ldr	r0, [r7, #4]
    1636:	f7ff ff33 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
    163a:	2302      	movs	r3, #2
    163c:	2200      	movs	r2, #0
    163e:	f64a 013f 	movw	r1, #43071	; 0xa83f
    1642:	6878      	ldr	r0, [r7, #4]
    1644:	f7ff ff2c 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
    1648:	2302      	movs	r3, #2
    164a:	2200      	movs	r2, #0
    164c:	f44f 4153 	mov.w	r1, #54016	; 0xd300
    1650:	6878      	ldr	r0, [r7, #4]
    1652:	f7ff ff25 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
    1656:	2301      	movs	r3, #1
    1658:	2200      	movs	r2, #0
    165a:	2140      	movs	r1, #64	; 0x40
    165c:	6878      	ldr	r0, [r7, #4]
    165e:	f7ff ff1f 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
    1662:	2302      	movs	r3, #2
    1664:	2200      	movs	r2, #0
    1666:	f648 5114 	movw	r1, #36116	; 0x8d14
    166a:	6878      	ldr	r0, [r7, #4]
    166c:	f7ff ff18 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
    1670:	2301      	movs	r3, #1
    1672:	2200      	movs	r2, #0
    1674:	21a1      	movs	r1, #161	; 0xa1
    1676:	6878      	ldr	r0, [r7, #4]
    1678:	f7ff ff12 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
    167c:	2301      	movs	r3, #1
    167e:	2200      	movs	r2, #0
    1680:	21c8      	movs	r1, #200	; 0xc8
    1682:	6878      	ldr	r0, [r7, #4]
    1684:	f7ff ff0c 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
    1688:	2302      	movs	r3, #2
    168a:	2200      	movs	r2, #0
    168c:	f64d 2112 	movw	r1, #55826	; 0xda12
    1690:	6878      	ldr	r0, [r7, #4]
    1692:	f7ff ff05 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
    1696:	2302      	movs	r3, #2
    1698:	2200      	movs	r2, #0
    169a:	f248 11cf 	movw	r1, #33231	; 0x81cf
    169e:	6878      	ldr	r0, [r7, #4]
    16a0:	f7ff fefe 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
    16a4:	2302      	movs	r3, #2
    16a6:	2200      	movs	r2, #0
    16a8:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
    16ac:	6878      	ldr	r0, [r7, #4]
    16ae:	f7ff fef7 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
    16b2:	2302      	movs	r3, #2
    16b4:	2200      	movs	r2, #0
    16b6:	f64d 3140 	movw	r1, #56128	; 0xdb40
    16ba:	6878      	ldr	r0, [r7, #4]
    16bc:	f7ff fef0 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
    16c0:	6878      	ldr	r0, [r7, #4]
    16c2:	f000 f817 	bl	16f4 <sjsu::Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
    16c6:	2301      	movs	r3, #1
    16c8:	2200      	movs	r2, #0
    16ca:	21a4      	movs	r1, #164	; 0xa4
    16cc:	6878      	ldr	r0, [r7, #4]
    16ce:	f7ff fee7 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
    16d2:	2301      	movs	r3, #1
    16d4:	2200      	movs	r2, #0
    16d6:	21a6      	movs	r1, #166	; 0xa6
    16d8:	6878      	ldr	r0, [r7, #4]
    16da:	f7ff fee1 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
    16de:	2301      	movs	r3, #1
    16e0:	2200      	movs	r2, #0
    16e2:	21af      	movs	r1, #175	; 0xaf
    16e4:	6878      	ldr	r0, [r7, #4]
    16e6:	f7ff fedb 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
  }
    16ea:	bf00      	nop
    16ec:	3708      	adds	r7, #8
    16ee:	46bd      	mov	sp, r7
    16f0:	bd80      	pop	{r7, pc}
    16f2:	Address 0x00000000000016f2 is out of bounds.


000016f4 <sjsu::Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
    16f4:	b580      	push	{r7, lr}
    16f6:	b082      	sub	sp, #8
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
    16fc:	2302      	movs	r3, #2
    16fe:	2200      	movs	r2, #0
    1700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1704:	6878      	ldr	r0, [r7, #4]
    1706:	f7ff fecb 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
    170a:	2303      	movs	r3, #3
    170c:	2200      	movs	r2, #0
    170e:	4907      	ldr	r1, [pc, #28]	; (172c <sjsu::Ssd1306::SetHorizontalAddressMode()+0x38>)
    1710:	6878      	ldr	r0, [r7, #4]
    1712:	f7ff fec5 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
    1716:	2303      	movs	r3, #3
    1718:	2200      	movs	r2, #0
    171a:	4905      	ldr	r1, [pc, #20]	; (1730 <sjsu::Ssd1306::SetHorizontalAddressMode()+0x3c>)
    171c:	6878      	ldr	r0, [r7, #4]
    171e:	f7ff febf 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
  }
    1722:	bf00      	nop
    1724:	3708      	adds	r7, #8
    1726:	46bd      	mov	sp, r7
    1728:	bd80      	pop	{r7, pc}
    172a:	bf00      	nop
    172c:	0021007f 	.word	0x0021007f
    1730:	00220007 	.word	0x00220007

00001734 <sjsu::Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() override
    1734:	b580      	push	{r7, lr}
    1736:	b082      	sub	sp, #8
    1738:	af00      	add	r7, sp, #0
    173a:	6078      	str	r0, [r7, #4]
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	3310      	adds	r3, #16
    1740:	f240 62c1 	movw	r2, #1729	; 0x6c1
    1744:	2100      	movs	r1, #0
    1746:	4618      	mov	r0, r3
    1748:	f006 fbf8 	bl	7f3c <memset>
  }
    174c:	bf00      	nop
    174e:	3708      	adds	r7, #8
    1750:	46bd      	mov	sp, r7
    1752:	bd80      	pop	{r7, pc}

00001754 <sjsu::Ssd1306::DrawPixel(long, long, sjsu::PixelDisplay::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) override
    1754:	b580      	push	{r7, lr}
    1756:	b08c      	sub	sp, #48	; 0x30
    1758:	af00      	add	r7, sp, #0
    175a:	60f8      	str	r0, [r7, #12]
    175c:	60b9      	str	r1, [r7, #8]
    175e:	607a      	str	r2, [r7, #4]
    1760:	603b      	str	r3, [r7, #0]
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	f003 0307 	and.w	r3, r3, #7
    1768:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
    176a:	687b      	ldr	r3, [r7, #4]
    176c:	10db      	asrs	r3, r3, #3
    176e:	62bb      	str	r3, [r7, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
    1770:	2201      	movs	r2, #1
    1772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1774:	fa02 f303 	lsl.w	r3, r2, r3
    1778:	43db      	mvns	r3, r3
    177a:	627b      	str	r3, [r7, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = !color.IsBlank();
    177c:	463b      	mov	r3, r7
    177e:	4618      	mov	r0, r3
    1780:	f7ff fe28 	bl	13d4 <sjsu::PixelDisplay::Color_t::IsBlank()>
    1784:	4603      	mov	r3, r0
    1786:	f083 0301 	eor.w	r3, r3, #1
    178a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
    178e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1794:	fa02 f303 	lsl.w	r3, r2, r3
    1798:	61fb      	str	r3, [r7, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
    179a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    179c:	4613      	mov	r3, r2
    179e:	015b      	lsls	r3, r3, #5
    17a0:	4413      	add	r3, r2
    17a2:	009b      	lsls	r3, r3, #2
    17a4:	4413      	add	r3, r2
    17a6:	68ba      	ldr	r2, [r7, #8]
    17a8:	4413      	add	r3, r2
    17aa:	3310      	adds	r3, #16
    17ac:	68fa      	ldr	r2, [r7, #12]
    17ae:	4413      	add	r3, r2
    17b0:	61bb      	str	r3, [r7, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
    17b2:	69bb      	ldr	r3, [r7, #24]
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	461a      	mov	r2, r3
    17b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17ba:	4013      	ands	r3, r2
    17bc:	69fa      	ldr	r2, [r7, #28]
    17be:	4313      	orrs	r3, r2
    17c0:	617b      	str	r3, [r7, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
    17c2:	697b      	ldr	r3, [r7, #20]
    17c4:	b2da      	uxtb	r2, r3
    17c6:	69bb      	ldr	r3, [r7, #24]
    17c8:	701a      	strb	r2, [r3, #0]
  }
    17ca:	bf00      	nop
    17cc:	3730      	adds	r7, #48	; 0x30
    17ce:	46bd      	mov	sp, r7
    17d0:	bd80      	pop	{r7, pc}

000017d2 <sjsu::Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() override
    17d2:	b580      	push	{r7, lr}
    17d4:	b084      	sub	sp, #16
    17d6:	af00      	add	r7, sp, #0
    17d8:	6078      	str	r0, [r7, #4]
  {
    SetHorizontalAddressMode();
    17da:	6878      	ldr	r0, [r7, #4]
    17dc:	f7ff ff8a 	bl	16f4 <sjsu::Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
    17e0:	2300      	movs	r3, #0
    17e2:	60fb      	str	r3, [r7, #12]
    17e4:	68fb      	ldr	r3, [r7, #12]
    17e6:	2b07      	cmp	r3, #7
    17e8:	d81e      	bhi.n	1828 <sjsu::Ssd1306::Update()+0x56>
    {
      for (size_t column = 0; column < kColumns; column++)
    17ea:	2300      	movs	r3, #0
    17ec:	60bb      	str	r3, [r7, #8]
    17ee:	68bb      	ldr	r3, [r7, #8]
    17f0:	2b7f      	cmp	r3, #127	; 0x7f
    17f2:	d815      	bhi.n	1820 <sjsu::Ssd1306::Update()+0x4e>
      {
        Write(bitmap_[row][column], Transaction::kData);
    17f4:	6879      	ldr	r1, [r7, #4]
    17f6:	68fa      	ldr	r2, [r7, #12]
    17f8:	4613      	mov	r3, r2
    17fa:	015b      	lsls	r3, r3, #5
    17fc:	4413      	add	r3, r2
    17fe:	009b      	lsls	r3, r3, #2
    1800:	4413      	add	r3, r2
    1802:	18ca      	adds	r2, r1, r3
    1804:	68bb      	ldr	r3, [r7, #8]
    1806:	4413      	add	r3, r2
    1808:	3310      	adds	r3, #16
    180a:	781b      	ldrb	r3, [r3, #0]
    180c:	4619      	mov	r1, r3
    180e:	2301      	movs	r3, #1
    1810:	2201      	movs	r2, #1
    1812:	6878      	ldr	r0, [r7, #4]
    1814:	f7ff fe44 	bl	14a0 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
    1818:	68bb      	ldr	r3, [r7, #8]
    181a:	3301      	adds	r3, #1
    181c:	60bb      	str	r3, [r7, #8]
    181e:	e7e6      	b.n	17ee <sjsu::Ssd1306::Update()+0x1c>
    for (size_t row = 0; row < kRows; row++)
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	3301      	adds	r3, #1
    1824:	60fb      	str	r3, [r7, #12]
    1826:	e7dd      	b.n	17e4 <sjsu::Ssd1306::Update()+0x12>
      }
    }
  }
    1828:	bf00      	nop
    182a:	3710      	adds	r7, #16
    182c:	46bd      	mov	sp, r7
    182e:	bd80      	pop	{r7, pc}

00001830 <sjsu::PixelDisplay::Color_t::Color_t()>:
  struct Color_t
    1830:	b480      	push	{r7}
    1832:	b083      	sub	sp, #12
    1834:	af00      	add	r7, sp, #0
    1836:	6078      	str	r0, [r7, #4]
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	2200      	movs	r2, #0
    183c:	701a      	strb	r2, [r3, #0]
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	2200      	movs	r2, #0
    1842:	705a      	strb	r2, [r3, #1]
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	2200      	movs	r2, #0
    1848:	709a      	strb	r2, [r3, #2]
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	2200      	movs	r2, #0
    184e:	70da      	strb	r2, [r3, #3]
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	4618      	mov	r0, r3
    1854:	370c      	adds	r7, #12
    1856:	46bd      	mov	sp, r7
    1858:	f85d 7b04 	ldr.w	r7, [sp], #4
    185c:	4770      	bx	lr

0000185e <sjsu::Graphics::Graphics(sjsu::PixelDisplay&)>:
{
 public:
  /// Constructor for a graphics object.
  ///
  /// @param display - reference to a pixel display
  explicit Graphics(PixelDisplay & display)
    185e:	b590      	push	{r4, r7, lr}
    1860:	b083      	sub	sp, #12
    1862:	af00      	add	r7, sp, #0
    1864:	6078      	str	r0, [r7, #4]
    1866:	6039      	str	r1, [r7, #0]
      : display_(display), color_(), width_(0), height_(0)
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	683a      	ldr	r2, [r7, #0]
    186c:	601a      	str	r2, [r3, #0]
    186e:	687b      	ldr	r3, [r7, #4]
    1870:	2200      	movs	r2, #0
    1872:	605a      	str	r2, [r3, #4]
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	3304      	adds	r3, #4
    1878:	4618      	mov	r0, r3
    187a:	f7ff ffd9 	bl	1830 <sjsu::PixelDisplay::Color_t::Color_t()>
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	2200      	movs	r2, #0
    1882:	609a      	str	r2, [r3, #8]
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	2200      	movs	r2, #0
    1888:	60da      	str	r2, [r3, #12]
  {
    width_  = display.GetWidth();
    188a:	683b      	ldr	r3, [r7, #0]
    188c:	681b      	ldr	r3, [r3, #0]
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	6838      	ldr	r0, [r7, #0]
    1892:	4798      	blx	r3
    1894:	4602      	mov	r2, r0
    1896:	687b      	ldr	r3, [r7, #4]
    1898:	609a      	str	r2, [r3, #8]
    height_ = display.GetHeight();
    189a:	683b      	ldr	r3, [r7, #0]
    189c:	681b      	ldr	r3, [r3, #0]
    189e:	3304      	adds	r3, #4
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	6838      	ldr	r0, [r7, #0]
    18a4:	4798      	blx	r3
    18a6:	4602      	mov	r2, r0
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	60da      	str	r2, [r3, #12]
    color_  = display.AvailableColors();
    18ac:	683b      	ldr	r3, [r7, #0]
    18ae:	681b      	ldr	r3, [r3, #0]
    18b0:	3308      	adds	r3, #8
    18b2:	681b      	ldr	r3, [r3, #0]
    18b4:	687c      	ldr	r4, [r7, #4]
    18b6:	6838      	ldr	r0, [r7, #0]
    18b8:	4798      	blx	r3
    18ba:	4603      	mov	r3, r0
    18bc:	6063      	str	r3, [r4, #4]
  }
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	4618      	mov	r0, r3
    18c2:	370c      	adds	r7, #12
    18c4:	46bd      	mov	sp, r7
    18c6:	bd90      	pop	{r4, r7, pc}

000018c8 <sjsu::Graphics::Initialize()>:

  /// Initialize display hardware.
  void Initialize()
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
  {
    display_.Initialize();
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	330c      	adds	r3, #12
    18d8:	681b      	ldr	r3, [r3, #0]
    18da:	687a      	ldr	r2, [r7, #4]
    18dc:	6812      	ldr	r2, [r2, #0]
    18de:	4610      	mov	r0, r2
    18e0:	4798      	blx	r3
  }
    18e2:	bf00      	nop
    18e4:	3708      	adds	r7, #8
    18e6:	46bd      	mov	sp, r7
    18e8:	bd80      	pop	{r7, pc}

000018ea <sjsu::Graphics::Update()>:

  /// Update the display.
  void Update()
    18ea:	b580      	push	{r7, lr}
    18ec:	b082      	sub	sp, #8
    18ee:	af00      	add	r7, sp, #0
    18f0:	6078      	str	r0, [r7, #4]
  {
    display_.Update();
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	681b      	ldr	r3, [r3, #0]
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	3320      	adds	r3, #32
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	687a      	ldr	r2, [r7, #4]
    18fe:	6812      	ldr	r2, [r2, #0]
    1900:	4610      	mov	r0, r2
    1902:	4798      	blx	r3
  }
    1904:	bf00      	nop
    1906:	3708      	adds	r7, #8
    1908:	46bd      	mov	sp, r7
    190a:	bd80      	pop	{r7, pc}

0000190c <sjsu::Graphics::Clear()>:
  {
    display_.Disable();
  }

  /// Clears the display.
  void Clear()
    190c:	b580      	push	{r7, lr}
    190e:	b082      	sub	sp, #8
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
  {
    display_.Clear();
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	3318      	adds	r3, #24
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	687a      	ldr	r2, [r7, #4]
    1920:	6812      	ldr	r2, [r2, #0]
    1922:	4610      	mov	r0, r2
    1924:	4798      	blx	r3
  }
    1926:	bf00      	nop
    1928:	3708      	adds	r7, #8
    192a:	46bd      	mov	sp, r7
    192c:	bd80      	pop	{r7, pc}
    192e:	Address 0x000000000000192e is out of bounds.


00001930 <sjsu::Graphics::DrawCharacter(long, long, char)>:
  /// Draw a character on the display.
  ///
  /// @param x0 - X coordinate to start printing to the screen
  /// @param y0 - Y coordinate to start printing to the screen
  /// @param letter - The character to write to the screen
  void DrawCharacter(int32_t x0, int32_t y0, char letter)
    1930:	b580      	push	{r7, lr}
    1932:	b088      	sub	sp, #32
    1934:	af00      	add	r7, sp, #0
    1936:	60f8      	str	r0, [r7, #12]
    1938:	60b9      	str	r1, [r7, #8]
    193a:	607a      	str	r2, [r7, #4]
    193c:	70fb      	strb	r3, [r7, #3]
  {
    int32_t letter_position = int32_t{ letter };
    193e:	78fb      	ldrb	r3, [r7, #3]
    1940:	617b      	str	r3, [r7, #20]

    PixelDisplay::Color_t foreground = color_;
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	685b      	ldr	r3, [r3, #4]
    1946:	613b      	str	r3, [r7, #16]

    for (int32_t y = 0; y < 8; y++)
    1948:	2300      	movs	r3, #0
    194a:	61fb      	str	r3, [r7, #28]
    194c:	69fb      	ldr	r3, [r7, #28]
    194e:	2b07      	cmp	r3, #7
    1950:	dc26      	bgt.n	19a0 <sjsu::Graphics::DrawCharacter(long, long, char)+0x70>
    {
      for (int32_t x = 0; x < 8; x++)
    1952:	2300      	movs	r3, #0
    1954:	61bb      	str	r3, [r7, #24]
    1956:	69bb      	ldr	r3, [r7, #24]
    1958:	2b07      	cmp	r3, #7
    195a:	dc1d      	bgt.n	1998 <sjsu::Graphics::DrawCharacter(long, long, char)+0x68>
      {
        if (font8x8_basic[letter_position][y] & (1 << x))
    195c:	4a14      	ldr	r2, [pc, #80]	; (19b0 <sjsu::Graphics::DrawCharacter(long, long, char)+0x80>)
    195e:	697b      	ldr	r3, [r7, #20]
    1960:	00db      	lsls	r3, r3, #3
    1962:	441a      	add	r2, r3
    1964:	69fb      	ldr	r3, [r7, #28]
    1966:	4413      	add	r3, r2
    1968:	781b      	ldrb	r3, [r3, #0]
    196a:	461a      	mov	r2, r3
    196c:	69bb      	ldr	r3, [r7, #24]
    196e:	fa42 f303 	asr.w	r3, r2, r3
    1972:	f003 0301 	and.w	r3, r3, #1
    1976:	2b00      	cmp	r3, #0
    1978:	d00a      	beq.n	1990 <sjsu::Graphics::DrawCharacter(long, long, char)+0x60>
        {
          DrawPixel(x0 + x, y0 + y);
    197a:	68ba      	ldr	r2, [r7, #8]
    197c:	69bb      	ldr	r3, [r7, #24]
    197e:	4413      	add	r3, r2
    1980:	4619      	mov	r1, r3
    1982:	687a      	ldr	r2, [r7, #4]
    1984:	69fb      	ldr	r3, [r7, #28]
    1986:	4413      	add	r3, r2
    1988:	461a      	mov	r2, r3
    198a:	68f8      	ldr	r0, [r7, #12]
    198c:	f000 f812 	bl	19b4 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)>
      for (int32_t x = 0; x < 8; x++)
    1990:	69bb      	ldr	r3, [r7, #24]
    1992:	3301      	adds	r3, #1
    1994:	61bb      	str	r3, [r7, #24]
    1996:	e7de      	b.n	1956 <sjsu::Graphics::DrawCharacter(long, long, char)+0x26>
    for (int32_t y = 0; y < 8; y++)
    1998:	69fb      	ldr	r3, [r7, #28]
    199a:	3301      	adds	r3, #1
    199c:	61fb      	str	r3, [r7, #28]
    199e:	e7d5      	b.n	194c <sjsu::Graphics::DrawCharacter(long, long, char)+0x1c>
        }
      }
    }
    color_ = foreground;
    19a0:	68fb      	ldr	r3, [r7, #12]
    19a2:	693a      	ldr	r2, [r7, #16]
    19a4:	605a      	str	r2, [r3, #4]
  }
    19a6:	bf00      	nop
    19a8:	3720      	adds	r7, #32
    19aa:	46bd      	mov	sp, r7
    19ac:	bd80      	pop	{r7, pc}
    19ae:	bf00      	nop
    19b0:	10000134 	.word	0x10000134

000019b4 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)>:

  /// Put a pixel on a specific position.
  ///
  /// @param x - x coordinate to place the coordinate.
  /// @param y - y coordinate to place the coordinate.
  void DrawPixel(uint32_t x, uint32_t y)
    19b4:	b590      	push	{r4, r7, lr}
    19b6:	b085      	sub	sp, #20
    19b8:	af00      	add	r7, sp, #0
    19ba:	60f8      	str	r0, [r7, #12]
    19bc:	60b9      	str	r1, [r7, #8]
    19be:	607a      	str	r2, [r7, #4]
  {
    // Pixels outside of the bounds of the screen will not be drawn.
    if (x <= width_ && y <= height_)
    19c0:	68fb      	ldr	r3, [r7, #12]
    19c2:	689b      	ldr	r3, [r3, #8]
    19c4:	68ba      	ldr	r2, [r7, #8]
    19c6:	429a      	cmp	r2, r3
    19c8:	d810      	bhi.n	19ec <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)+0x38>
    19ca:	68fb      	ldr	r3, [r7, #12]
    19cc:	68db      	ldr	r3, [r3, #12]
    19ce:	687a      	ldr	r2, [r7, #4]
    19d0:	429a      	cmp	r2, r3
    19d2:	d80b      	bhi.n	19ec <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)+0x38>
    {
      display_.DrawPixel(x, y, color_);
    19d4:	68fb      	ldr	r3, [r7, #12]
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	331c      	adds	r3, #28
    19dc:	681c      	ldr	r4, [r3, #0]
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	6818      	ldr	r0, [r3, #0]
    19e2:	68b9      	ldr	r1, [r7, #8]
    19e4:	687a      	ldr	r2, [r7, #4]
    19e6:	68fb      	ldr	r3, [r7, #12]
    19e8:	685b      	ldr	r3, [r3, #4]
    19ea:	47a0      	blx	r4
    }
  }
    19ec:	bf00      	nop
    19ee:	3714      	adds	r7, #20
    19f0:	46bd      	mov	sp, r7
    19f2:	bd90      	pop	{r4, r7, pc}

000019f4 <sjsu::GraphicalTerminal::Initialize()>:
        graphics_(graphics),
        cache_(cache->buffer)
  {
  }

  void Initialize()
    19f4:	b580      	push	{r7, lr}
    19f6:	b082      	sub	sp, #8
    19f8:	af00      	add	r7, sp, #0
    19fa:	6078      	str	r0, [r7, #4]
  {
    graphics_->Initialize();
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	695b      	ldr	r3, [r3, #20]
    1a00:	4618      	mov	r0, r3
    1a02:	f7ff ff61 	bl	18c8 <sjsu::Graphics::Initialize()>
    graphics_->Clear();
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	695b      	ldr	r3, [r3, #20]
    1a0a:	4618      	mov	r0, r3
    1a0c:	f7ff ff7e 	bl	190c <sjsu::Graphics::Clear()>
    graphics_->Update();
    1a10:	687b      	ldr	r3, [r7, #4]
    1a12:	695b      	ldr	r3, [r3, #20]
    1a14:	4618      	mov	r0, r3
    1a16:	f7ff ff68 	bl	18ea <sjsu::Graphics::Update()>
  }
    1a1a:	bf00      	nop
    1a1c:	3708      	adds	r7, #8
    1a1e:	46bd      	mov	sp, r7
    1a20:	bd80      	pop	{r7, pc}

00001a22 <sjsu::GraphicalTerminal::printf(char const*, ...)>:

  int printf(const char * format, ...)  // NOLINT
    1a22:	b40e      	push	{r1, r2, r3}
    1a24:	b590      	push	{r4, r7, lr}
    1a26:	b0c6      	sub	sp, #280	; 0x118
    1a28:	af00      	add	r7, sp, #0
    1a2a:	1d3b      	adds	r3, r7, #4
    1a2c:	6018      	str	r0, [r3, #0]
  {
    char buffer[256];

    va_list args;
    va_start(args, format);
    1a2e:	f507 7294 	add.w	r2, r7, #296	; 0x128
    1a32:	f107 0308 	add.w	r3, r7, #8
    1a36:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-nonliteral"
    uint32_t characters = vsnprintf(buffer, sizeof(buffer), format, args);
    1a38:	f107 0308 	add.w	r3, r7, #8
    1a3c:	f107 000c 	add.w	r0, r7, #12
    1a40:	681b      	ldr	r3, [r3, #0]
    1a42:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    1a46:	f44f 7180 	mov.w	r1, #256	; 0x100
    1a4a:	f002 fe75 	bl	4738 <vsnprintf>
    1a4e:	4603      	mov	r3, r0
    1a50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
#pragma GCC diagnostic pop
    va_end(args);

    uint32_t pos = 0;
    1a54:	2300      	movs	r3, #0
    1a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    for (; pos < characters; pos++)
    1a5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    1a5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    1a62:	429a      	cmp	r2, r3
    1a64:	d253      	bcs.n	1b0e <sjsu::GraphicalTerminal::printf(char const*, ...)+0xec>
    {
      char character = buffer[pos];
    1a66:	f107 020c 	add.w	r2, r7, #12
    1a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    1a6e:	4413      	add	r3, r2
    1a70:	781b      	ldrb	r3, [r3, #0]
    1a72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      switch (character)
    1a76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
    1a7a:	2b0a      	cmp	r3, #10
    1a7c:	d10b      	bne.n	1a96 <sjsu::GraphicalTerminal::printf(char const*, ...)+0x74>
      {
        case '\n':
          column_ = 0;
    1a7e:	1d3b      	adds	r3, r7, #4
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	2200      	movs	r2, #0
    1a84:	605a      	str	r2, [r3, #4]
          row_++;
    1a86:	1d3b      	adds	r3, r7, #4
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	1c5a      	adds	r2, r3, #1
    1a8e:	1d3b      	adds	r3, r7, #4
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	601a      	str	r2, [r3, #0]
          break;
    1a94:	e035      	b.n	1b02 <sjsu::GraphicalTerminal::printf(char const*, ...)+0xe0>
        default:
          GetChar((row_ + row_start_) % max_rows_, column_) = character;
    1a96:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
    1a9a:	1d3b      	adds	r3, r7, #4
    1a9c:	681b      	ldr	r3, [r3, #0]
    1a9e:	681a      	ldr	r2, [r3, #0]
    1aa0:	1d3b      	adds	r3, r7, #4
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	689b      	ldr	r3, [r3, #8]
    1aa6:	4413      	add	r3, r2
    1aa8:	1d3a      	adds	r2, r7, #4
    1aaa:	6812      	ldr	r2, [r2, #0]
    1aac:	68d2      	ldr	r2, [r2, #12]
    1aae:	fbb3 f1f2 	udiv	r1, r3, r2
    1ab2:	fb02 f201 	mul.w	r2, r2, r1
    1ab6:	1a99      	subs	r1, r3, r2
    1ab8:	1d3b      	adds	r3, r7, #4
    1aba:	681b      	ldr	r3, [r3, #0]
    1abc:	685a      	ldr	r2, [r3, #4]
    1abe:	1d3b      	adds	r3, r7, #4
    1ac0:	6818      	ldr	r0, [r3, #0]
    1ac2:	f000 f8cb 	bl	1c5c <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1ac6:	4603      	mov	r3, r0
    1ac8:	4622      	mov	r2, r4
    1aca:	701a      	strb	r2, [r3, #0]
          column_++;
    1acc:	1d3b      	adds	r3, r7, #4
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	685b      	ldr	r3, [r3, #4]
    1ad2:	1c5a      	adds	r2, r3, #1
    1ad4:	1d3b      	adds	r3, r7, #4
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	605a      	str	r2, [r3, #4]
          if (column_ >= max_columns_)
    1ada:	1d3b      	adds	r3, r7, #4
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	685a      	ldr	r2, [r3, #4]
    1ae0:	1d3b      	adds	r3, r7, #4
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	691b      	ldr	r3, [r3, #16]
    1ae6:	429a      	cmp	r2, r3
    1ae8:	d30a      	bcc.n	1b00 <sjsu::GraphicalTerminal::printf(char const*, ...)+0xde>
          {
            column_ = 0;
    1aea:	1d3b      	adds	r3, r7, #4
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	2200      	movs	r2, #0
    1af0:	605a      	str	r2, [r3, #4]
            row_++;
    1af2:	1d3b      	adds	r3, r7, #4
    1af4:	681b      	ldr	r3, [r3, #0]
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	1c5a      	adds	r2, r3, #1
    1afa:	1d3b      	adds	r3, r7, #4
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	601a      	str	r2, [r3, #0]
          }
          break;
    1b00:	bf00      	nop
    for (; pos < characters; pos++)
    1b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    1b06:	3301      	adds	r3, #1
    1b08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    1b0c:	e7a5      	b.n	1a5a <sjsu::GraphicalTerminal::printf(char const*, ...)+0x38>
      }
    }
    Update();
    1b0e:	1d3b      	adds	r3, r7, #4
    1b10:	6818      	ldr	r0, [r3, #0]
    1b12:	f000 f83c 	bl	1b8e <sjsu::GraphicalTerminal::Update()>
    if (row_ >= max_rows_)
    1b16:	1d3b      	adds	r3, r7, #4
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	681a      	ldr	r2, [r3, #0]
    1b1c:	1d3b      	adds	r3, r7, #4
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	68db      	ldr	r3, [r3, #12]
    1b22:	429a      	cmp	r2, r3
    1b24:	d329      	bcc.n	1b7a <sjsu::GraphicalTerminal::printf(char const*, ...)+0x158>
    {
      row_start_ = (row_start_ + 1) % max_rows_;
    1b26:	1d3b      	adds	r3, r7, #4
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	689b      	ldr	r3, [r3, #8]
    1b2c:	3301      	adds	r3, #1
    1b2e:	1d3a      	adds	r2, r7, #4
    1b30:	6812      	ldr	r2, [r2, #0]
    1b32:	68d2      	ldr	r2, [r2, #12]
    1b34:	fbb3 f1f2 	udiv	r1, r3, r2
    1b38:	fb02 f201 	mul.w	r2, r2, r1
    1b3c:	1a9a      	subs	r2, r3, r2
    1b3e:	1d3b      	adds	r3, r7, #4
    1b40:	681b      	ldr	r3, [r3, #0]
    1b42:	609a      	str	r2, [r3, #8]
      row_       = max_rows_ - 1;
    1b44:	1d3b      	adds	r3, r7, #4
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	68db      	ldr	r3, [r3, #12]
    1b4a:	1e5a      	subs	r2, r3, #1
    1b4c:	1d3b      	adds	r3, r7, #4
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	601a      	str	r2, [r3, #0]
      ClearRow((row_ + row_start_) % max_rows_);
    1b52:	1d3b      	adds	r3, r7, #4
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	681a      	ldr	r2, [r3, #0]
    1b58:	1d3b      	adds	r3, r7, #4
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	689b      	ldr	r3, [r3, #8]
    1b5e:	4413      	add	r3, r2
    1b60:	1d3a      	adds	r2, r7, #4
    1b62:	6812      	ldr	r2, [r2, #0]
    1b64:	68d2      	ldr	r2, [r2, #12]
    1b66:	fbb3 f1f2 	udiv	r1, r3, r2
    1b6a:	fb02 f201 	mul.w	r2, r2, r1
    1b6e:	1a9a      	subs	r2, r3, r2
    1b70:	1d3b      	adds	r3, r7, #4
    1b72:	4611      	mov	r1, r2
    1b74:	6818      	ldr	r0, [r3, #0]
    1b76:	f000 f854 	bl	1c22 <sjsu::GraphicalTerminal::ClearRow(unsigned long)>
    }
    return pos;
    1b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  }
    1b7e:	4618      	mov	r0, r3
    1b80:	f507 778c 	add.w	r7, r7, #280	; 0x118
    1b84:	46bd      	mov	sp, r7
    1b86:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    1b8a:	b003      	add	sp, #12
    1b8c:	4770      	bx	lr

00001b8e <sjsu::GraphicalTerminal::Update()>:
  {
    column_ = 0;
    return *this;
  }

  GraphicalTerminal & Update()
    1b8e:	b590      	push	{r4, r7, lr}
    1b90:	b087      	sub	sp, #28
    1b92:	af00      	add	r7, sp, #0
    1b94:	6078      	str	r0, [r7, #4]
  {
    graphics_->Clear();
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	695b      	ldr	r3, [r3, #20]
    1b9a:	4618      	mov	r0, r3
    1b9c:	f7ff feb6 	bl	190c <sjsu::Graphics::Clear()>
    for (int32_t i = 0; i < static_cast<int32_t>(max_rows_); i++)
    1ba0:	2300      	movs	r3, #0
    1ba2:	617b      	str	r3, [r7, #20]
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	68db      	ldr	r3, [r3, #12]
    1ba8:	461a      	mov	r2, r3
    1baa:	697b      	ldr	r3, [r7, #20]
    1bac:	4293      	cmp	r3, r2
    1bae:	da2e      	bge.n	1c0e <sjsu::GraphicalTerminal::Update()+0x80>
    {
      for (int32_t j = 0; j < static_cast<int32_t>(max_columns_); j++)
    1bb0:	2300      	movs	r3, #0
    1bb2:	613b      	str	r3, [r7, #16]
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	691b      	ldr	r3, [r3, #16]
    1bb8:	461a      	mov	r2, r3
    1bba:	693b      	ldr	r3, [r7, #16]
    1bbc:	4293      	cmp	r3, r2
    1bbe:	da22      	bge.n	1c06 <sjsu::GraphicalTerminal::Update()+0x78>
      {
        int32_t x = j * kCharacterWidth;
    1bc0:	693b      	ldr	r3, [r7, #16]
    1bc2:	00db      	lsls	r3, r3, #3
    1bc4:	60fb      	str	r3, [r7, #12]
        int32_t y = i * kCharacterHeight;
    1bc6:	697b      	ldr	r3, [r7, #20]
    1bc8:	00db      	lsls	r3, r3, #3
    1bca:	60bb      	str	r3, [r7, #8]
        graphics_->DrawCharacter(
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	695c      	ldr	r4, [r3, #20]
            x, y, GetChar(((i + row_start_) % max_rows_), j));
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	689a      	ldr	r2, [r3, #8]
    1bd4:	697b      	ldr	r3, [r7, #20]
    1bd6:	4413      	add	r3, r2
    1bd8:	687a      	ldr	r2, [r7, #4]
    1bda:	68d2      	ldr	r2, [r2, #12]
    1bdc:	fbb3 f1f2 	udiv	r1, r3, r2
    1be0:	fb02 f201 	mul.w	r2, r2, r1
    1be4:	1a9b      	subs	r3, r3, r2
    1be6:	693a      	ldr	r2, [r7, #16]
    1be8:	4619      	mov	r1, r3
    1bea:	6878      	ldr	r0, [r7, #4]
    1bec:	f000 f836 	bl	1c5c <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1bf0:	4603      	mov	r3, r0
        graphics_->DrawCharacter(
    1bf2:	781b      	ldrb	r3, [r3, #0]
    1bf4:	68ba      	ldr	r2, [r7, #8]
    1bf6:	68f9      	ldr	r1, [r7, #12]
    1bf8:	4620      	mov	r0, r4
    1bfa:	f7ff fe99 	bl	1930 <sjsu::Graphics::DrawCharacter(long, long, char)>
      for (int32_t j = 0; j < static_cast<int32_t>(max_columns_); j++)
    1bfe:	693b      	ldr	r3, [r7, #16]
    1c00:	3301      	adds	r3, #1
    1c02:	613b      	str	r3, [r7, #16]
    1c04:	e7d6      	b.n	1bb4 <sjsu::GraphicalTerminal::Update()+0x26>
    for (int32_t i = 0; i < static_cast<int32_t>(max_rows_); i++)
    1c06:	697b      	ldr	r3, [r7, #20]
    1c08:	3301      	adds	r3, #1
    1c0a:	617b      	str	r3, [r7, #20]
    1c0c:	e7ca      	b.n	1ba4 <sjsu::GraphicalTerminal::Update()+0x16>
      }
    }
    graphics_->Update();
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	695b      	ldr	r3, [r3, #20]
    1c12:	4618      	mov	r0, r3
    1c14:	f7ff fe69 	bl	18ea <sjsu::Graphics::Update()>
    return *this;
    1c18:	687b      	ldr	r3, [r7, #4]
  }
    1c1a:	4618      	mov	r0, r3
    1c1c:	371c      	adds	r7, #28
    1c1e:	46bd      	mov	sp, r7
    1c20:	bd90      	pop	{r4, r7, pc}

00001c22 <sjsu::GraphicalTerminal::ClearRow(unsigned long)>:

  GraphicalTerminal & ClearRow(uint32_t row_location)
    1c22:	b580      	push	{r7, lr}
    1c24:	b084      	sub	sp, #16
    1c26:	af00      	add	r7, sp, #0
    1c28:	6078      	str	r0, [r7, #4]
    1c2a:	6039      	str	r1, [r7, #0]
  {
    for (uint32_t i = 0; i < max_columns_; i++)
    1c2c:	2300      	movs	r3, #0
    1c2e:	60fb      	str	r3, [r7, #12]
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	691b      	ldr	r3, [r3, #16]
    1c34:	68fa      	ldr	r2, [r7, #12]
    1c36:	429a      	cmp	r2, r3
    1c38:	d20b      	bcs.n	1c52 <sjsu::GraphicalTerminal::ClearRow(unsigned long)+0x30>
    {
      GetChar(row_location, i) = ' ';
    1c3a:	68fa      	ldr	r2, [r7, #12]
    1c3c:	6839      	ldr	r1, [r7, #0]
    1c3e:	6878      	ldr	r0, [r7, #4]
    1c40:	f000 f80c 	bl	1c5c <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1c44:	4603      	mov	r3, r0
    1c46:	2220      	movs	r2, #32
    1c48:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < max_columns_; i++)
    1c4a:	68fb      	ldr	r3, [r7, #12]
    1c4c:	3301      	adds	r3, #1
    1c4e:	60fb      	str	r3, [r7, #12]
    1c50:	e7ee      	b.n	1c30 <sjsu::GraphicalTerminal::ClearRow(unsigned long)+0xe>
    }
    return *this;
    1c52:	687b      	ldr	r3, [r7, #4]
  }
    1c54:	4618      	mov	r0, r3
    1c56:	3710      	adds	r7, #16
    1c58:	46bd      	mov	sp, r7
    1c5a:	bd80      	pop	{r7, pc}

00001c5c <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>:
    graphics_->Update();
    return *this;
  }

 private:
  char & GetChar(uint32_t row, uint32_t column)
    1c5c:	b480      	push	{r7}
    1c5e:	b085      	sub	sp, #20
    1c60:	af00      	add	r7, sp, #0
    1c62:	60f8      	str	r0, [r7, #12]
    1c64:	60b9      	str	r1, [r7, #8]
    1c66:	607a      	str	r2, [r7, #4]
  {
    return cache_[(row * max_columns_) + column];
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	699a      	ldr	r2, [r3, #24]
    1c6c:	68fb      	ldr	r3, [r7, #12]
    1c6e:	691b      	ldr	r3, [r3, #16]
    1c70:	68b9      	ldr	r1, [r7, #8]
    1c72:	fb01 f103 	mul.w	r1, r1, r3
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	440b      	add	r3, r1
    1c7a:	4413      	add	r3, r2
  }
    1c7c:	4618      	mov	r0, r3
    1c7e:	3714      	adds	r7, #20
    1c80:	46bd      	mov	sp, r7
    1c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c86:	4770      	bx	lr

00001c88 <sjsu::Button::Button(sjsu::Gpio const&)>:
/// using a sjsu::Gpio object.
class Button
{
 public:
  /// Button Constructor
  constexpr explicit Button(const sjsu::Gpio & button)
    1c88:	b480      	push	{r7}
    1c8a:	b083      	sub	sp, #12
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	6078      	str	r0, [r7, #4]
    1c90:	6039      	str	r1, [r7, #0]
      : button_(button), was_pressed_(false), was_released_(false)
    1c92:	4a09      	ldr	r2, [pc, #36]	; (1cb8 <sjsu::Button::Button(sjsu::Gpio const&)+0x30>)
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	601a      	str	r2, [r3, #0]
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	683a      	ldr	r2, [r7, #0]
    1c9c:	605a      	str	r2, [r3, #4]
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	2200      	movs	r2, #0
    1ca2:	721a      	strb	r2, [r3, #8]
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	2200      	movs	r2, #0
    1ca8:	725a      	strb	r2, [r3, #9]
  {
  }
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	4618      	mov	r0, r3
    1cae:	370c      	adds	r7, #12
    1cb0:	46bd      	mov	sp, r7
    1cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb6:	4770      	bx	lr
    1cb8:	000082a4 	.word	0x000082a4

00001cbc <sjsu::Button::Initialize()>:
  /// Initialize the Gpio for use as a button. Must be called before calling
  /// anything else.
  virtual void Initialize()
    1cbc:	b580      	push	{r7, lr}
    1cbe:	b082      	sub	sp, #8
    1cc0:	af00      	add	r7, sp, #0
    1cc2:	6078      	str	r0, [r7, #4]
  {
    button_.SetDirection(sjsu::Gpio::Direction::kInput);
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	685b      	ldr	r3, [r3, #4]
    1cc8:	681b      	ldr	r3, [r3, #0]
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	687a      	ldr	r2, [r7, #4]
    1cce:	6852      	ldr	r2, [r2, #4]
    1cd0:	2100      	movs	r1, #0
    1cd2:	4610      	mov	r0, r2
    1cd4:	4798      	blx	r3
    button_.GetPin().PullDown();
    1cd6:	687b      	ldr	r3, [r7, #4]
    1cd8:	685b      	ldr	r3, [r3, #4]
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	3310      	adds	r3, #16
    1cde:	681b      	ldr	r3, [r3, #0]
    1ce0:	687a      	ldr	r2, [r7, #4]
    1ce2:	6852      	ldr	r2, [r2, #4]
    1ce4:	4610      	mov	r0, r2
    1ce6:	4798      	blx	r3
    1ce8:	4603      	mov	r3, r0
    1cea:	4618      	mov	r0, r3
    1cec:	f7fe fbb8 	bl	460 <sjsu::Pin::PullDown() const>
  }
    1cf0:	bf00      	nop
    1cf2:	3708      	adds	r7, #8
    1cf4:	46bd      	mov	sp, r7
    1cf6:	bd80      	pop	{r7, pc}

00001cf8 <sjsu::Button::Released()>:
  /// Usage:
  /// In order for this to work, the Released() method needs to be called
  /// periodically to check that the state of the pin has changed. If it is not
  /// called fast enough, it may miss a transition of the signal from HIGH to
  /// LOW.
  virtual bool Released()
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b084      	sub	sp, #16
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	6078      	str	r0, [r7, #4]
  {
    bool result = false;
    1d00:	2300      	movs	r3, #0
    1d02:	73fb      	strb	r3, [r7, #15]
    if (button_.Read() && !was_pressed_)
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	685b      	ldr	r3, [r3, #4]
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	330c      	adds	r3, #12
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	687a      	ldr	r2, [r7, #4]
    1d10:	6852      	ldr	r2, [r2, #4]
    1d12:	4610      	mov	r0, r2
    1d14:	4798      	blx	r3
    1d16:	4603      	mov	r3, r0
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d008      	beq.n	1d2e <sjsu::Button::Released()+0x36>
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	7a1b      	ldrb	r3, [r3, #8]
    1d20:	f083 0301 	eor.w	r3, r3, #1
    1d24:	b2db      	uxtb	r3, r3
    1d26:	2b00      	cmp	r3, #0
    1d28:	d001      	beq.n	1d2e <sjsu::Button::Released()+0x36>
    1d2a:	2301      	movs	r3, #1
    1d2c:	e000      	b.n	1d30 <sjsu::Button::Released()+0x38>
    1d2e:	2300      	movs	r3, #0
    1d30:	2b00      	cmp	r3, #0
    1d32:	d003      	beq.n	1d3c <sjsu::Button::Released()+0x44>
    {
      was_pressed_ = true;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	2201      	movs	r2, #1
    1d38:	721a      	strb	r2, [r3, #8]
    1d3a:	e01c      	b.n	1d76 <sjsu::Button::Released()+0x7e>
    }
    else if (!button_.Read() && was_pressed_)
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	685b      	ldr	r3, [r3, #4]
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	330c      	adds	r3, #12
    1d44:	681b      	ldr	r3, [r3, #0]
    1d46:	687a      	ldr	r2, [r7, #4]
    1d48:	6852      	ldr	r2, [r2, #4]
    1d4a:	4610      	mov	r0, r2
    1d4c:	4798      	blx	r3
    1d4e:	4603      	mov	r3, r0
    1d50:	f083 0301 	eor.w	r3, r3, #1
    1d54:	b2db      	uxtb	r3, r3
    1d56:	2b00      	cmp	r3, #0
    1d58:	d005      	beq.n	1d66 <sjsu::Button::Released()+0x6e>
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	7a1b      	ldrb	r3, [r3, #8]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d001      	beq.n	1d66 <sjsu::Button::Released()+0x6e>
    1d62:	2301      	movs	r3, #1
    1d64:	e000      	b.n	1d68 <sjsu::Button::Released()+0x70>
    1d66:	2300      	movs	r3, #0
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d004      	beq.n	1d76 <sjsu::Button::Released()+0x7e>
    {
      result       = true;
    1d6c:	2301      	movs	r3, #1
    1d6e:	73fb      	strb	r3, [r7, #15]
      was_pressed_ = false;
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	2200      	movs	r2, #0
    1d74:	721a      	strb	r2, [r3, #8]
    }
    return result;
    1d76:	7bfb      	ldrb	r3, [r7, #15]
  }
    1d78:	4618      	mov	r0, r3
    1d7a:	3710      	adds	r7, #16
    1d7c:	46bd      	mov	sp, r7
    1d7e:	bd80      	pop	{r7, pc}

00001d80 <sjsu::Button::Pressed()>:
  /// Same documentation as Released() but for the Pressed() state.
  virtual bool Pressed()
    1d80:	b580      	push	{r7, lr}
    1d82:	b084      	sub	sp, #16
    1d84:	af00      	add	r7, sp, #0
    1d86:	6078      	str	r0, [r7, #4]
  {
    bool result = false;
    1d88:	2300      	movs	r3, #0
    1d8a:	73fb      	strb	r3, [r7, #15]
    if (!button_.Read() && !was_released_)
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	685b      	ldr	r3, [r3, #4]
    1d90:	681b      	ldr	r3, [r3, #0]
    1d92:	330c      	adds	r3, #12
    1d94:	681b      	ldr	r3, [r3, #0]
    1d96:	687a      	ldr	r2, [r7, #4]
    1d98:	6852      	ldr	r2, [r2, #4]
    1d9a:	4610      	mov	r0, r2
    1d9c:	4798      	blx	r3
    1d9e:	4603      	mov	r3, r0
    1da0:	f083 0301 	eor.w	r3, r3, #1
    1da4:	b2db      	uxtb	r3, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	d008      	beq.n	1dbc <sjsu::Button::Pressed()+0x3c>
    1daa:	687b      	ldr	r3, [r7, #4]
    1dac:	7a5b      	ldrb	r3, [r3, #9]
    1dae:	f083 0301 	eor.w	r3, r3, #1
    1db2:	b2db      	uxtb	r3, r3
    1db4:	2b00      	cmp	r3, #0
    1db6:	d001      	beq.n	1dbc <sjsu::Button::Pressed()+0x3c>
    1db8:	2301      	movs	r3, #1
    1dba:	e000      	b.n	1dbe <sjsu::Button::Pressed()+0x3e>
    1dbc:	2300      	movs	r3, #0
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d003      	beq.n	1dca <sjsu::Button::Pressed()+0x4a>
    {
      was_released_ = true;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	2201      	movs	r2, #1
    1dc6:	725a      	strb	r2, [r3, #9]
    1dc8:	e019      	b.n	1dfe <sjsu::Button::Pressed()+0x7e>
    }
    else if (button_.Read() && was_released_)
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	685b      	ldr	r3, [r3, #4]
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	330c      	adds	r3, #12
    1dd2:	681b      	ldr	r3, [r3, #0]
    1dd4:	687a      	ldr	r2, [r7, #4]
    1dd6:	6852      	ldr	r2, [r2, #4]
    1dd8:	4610      	mov	r0, r2
    1dda:	4798      	blx	r3
    1ddc:	4603      	mov	r3, r0
    1dde:	2b00      	cmp	r3, #0
    1de0:	d005      	beq.n	1dee <sjsu::Button::Pressed()+0x6e>
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	7a5b      	ldrb	r3, [r3, #9]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d001      	beq.n	1dee <sjsu::Button::Pressed()+0x6e>
    1dea:	2301      	movs	r3, #1
    1dec:	e000      	b.n	1df0 <sjsu::Button::Pressed()+0x70>
    1dee:	2300      	movs	r3, #0
    1df0:	2b00      	cmp	r3, #0
    1df2:	d004      	beq.n	1dfe <sjsu::Button::Pressed()+0x7e>
    {
      result        = true;
    1df4:	2301      	movs	r3, #1
    1df6:	73fb      	strb	r3, [r7, #15]
      was_released_ = false;
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	2200      	movs	r2, #0
    1dfc:	725a      	strb	r2, [r3, #9]
    }
    return result;
    1dfe:	7bfb      	ldrb	r3, [r7, #15]
  }
    1e00:	4618      	mov	r0, r3
    1e02:	3710      	adds	r7, #16
    1e04:	46bd      	mov	sp, r7
    1e06:	bd80      	pop	{r7, pc}

00001e08 <sjsu::Button::ResetState()>:
  /// Resets the internal state of the button controller.
  virtual void ResetState()
    1e08:	b480      	push	{r7}
    1e0a:	b083      	sub	sp, #12
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	6078      	str	r0, [r7, #4]
  {
    was_pressed_  = false;
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	2200      	movs	r2, #0
    1e14:	721a      	strb	r2, [r3, #8]
    was_released_ = false;
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	2200      	movs	r2, #0
    1e1a:	725a      	strb	r2, [r3, #9]
  }
    1e1c:	bf00      	nop
    1e1e:	370c      	adds	r7, #12
    1e20:	46bd      	mov	sp, r7
    1e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e26:	4770      	bx	lr

00001e28 <sjsu::Button::GetGpio()>:
  /// @returns a reference to the internal sjsu::Gpio object.
  virtual const sjsu::Gpio & GetGpio()
    1e28:	b480      	push	{r7}
    1e2a:	b083      	sub	sp, #12
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	6078      	str	r0, [r7, #4]
  {
    return button_;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	685b      	ldr	r3, [r3, #4]
  }
    1e34:	4618      	mov	r0, r3
    1e36:	370c      	adds	r7, #12
    1e38:	46bd      	mov	sp, r7
    1e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e3e:	4770      	bx	lr

00001e40 <main>:
#include "L3_Application/graphical_terminal.hpp"
#include "L2_HAL/switches/button.hpp"
#include "utility/log.hpp"
#include "utility/time.hpp"
int main()
{
    1e40:	b580      	push	{r7, lr}
    1e42:	b0d8      	sub	sp, #352	; 0x160
    1e44:	af00      	add	r7, sp, #0
  inline static sjsu::lpc40xx::Gpio led2 = sjsu::lpc40xx::Gpio(1, 24);
  inline static sjsu::lpc40xx::Gpio led3 = sjsu::lpc40xx::Gpio(1, 18);

  [[gnu::always_inline]] inline static sjsu::Graphics & Oled()
  {
    static sjsu::lpc40xx::Gpio oled_cs = sjsu::lpc40xx::Gpio(1, 22);
    1e46:	4b7f      	ldr	r3, [pc, #508]	; (2044 <main+0x204>)
    1e48:	681b      	ldr	r3, [r3, #0]
    1e4a:	f003 0301 	and.w	r3, r3, #1
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d108      	bne.n	1e64 <main+0x24>
    1e52:	2300      	movs	r3, #0
    1e54:	2216      	movs	r2, #22
    1e56:	2101      	movs	r1, #1
    1e58:	487b      	ldr	r0, [pc, #492]	; (2048 <main+0x208>)
    1e5a:	f7fe fec9 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1e5e:	4b79      	ldr	r3, [pc, #484]	; (2044 <main+0x204>)
    1e60:	2201      	movs	r2, #1
    1e62:	601a      	str	r2, [r3, #0]
    static sjsu::lpc40xx::Gpio oled_dc = sjsu::lpc40xx::Gpio(1, 25);
    1e64:	4b79      	ldr	r3, [pc, #484]	; (204c <main+0x20c>)
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	f003 0301 	and.w	r3, r3, #1
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d108      	bne.n	1e82 <main+0x42>
    1e70:	2300      	movs	r3, #0
    1e72:	2219      	movs	r2, #25
    1e74:	2101      	movs	r1, #1
    1e76:	4876      	ldr	r0, [pc, #472]	; (2050 <main+0x210>)
    1e78:	f7fe feba 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1e7c:	4b73      	ldr	r3, [pc, #460]	; (204c <main+0x20c>)
    1e7e:	2201      	movs	r2, #1
    1e80:	601a      	str	r2, [r3, #0]
    static sjsu::Ssd1306 oled_display(spi1, oled_cs, oled_dc);
    static sjsu::Graphics oled(oled_display);
    1e82:	4b74      	ldr	r3, [pc, #464]	; (2054 <main+0x214>)
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	f003 0301 	and.w	r3, r3, #1
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d106      	bne.n	1e9c <main+0x5c>
    1e8e:	4972      	ldr	r1, [pc, #456]	; (2058 <main+0x218>)
    1e90:	4872      	ldr	r0, [pc, #456]	; (205c <main+0x21c>)
    1e92:	f7ff fce4 	bl	185e <sjsu::Graphics::Graphics(sjsu::PixelDisplay&)>
    1e96:	4b6f      	ldr	r3, [pc, #444]	; (2054 <main+0x214>)
    1e98:	2201      	movs	r2, #1
    1e9a:	601a      	str	r2, [r3, #0]
    return oled;
    1e9c:	4b6f      	ldr	r3, [pc, #444]	; (205c <main+0x21c>)
// OLED INITIALIZATION
  sjsu::Graphics & oled_graphics = sjtwo::Oled();
    1e9e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  sjsu::TerminalCache_t<
    sjsu::Ssd1306::kHeight / sjsu::GraphicalTerminal::kCharacterHeight,
    sjsu::Ssd1306::kWidth / sjsu::GraphicalTerminal::kCharacterWidth>
    cache;
    1ea2:	2300      	movs	r3, #0
    1ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    1ea8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    1eac:	227c      	movs	r2, #124	; 0x7c
    1eae:	2100      	movs	r1, #0
    1eb0:	4618      	mov	r0, r3
    1eb2:	f006 f843 	bl	7f3c <memset>
  sjsu::GraphicalTerminal oled_terminal(&oled_graphics, &cache);
    1eb6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
    1eba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    1ebe:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
    1ec2:	4618      	mov	r0, r3
    1ec4:	f000 fa82 	bl	23cc <sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)>

  oled_terminal.Initialize();
    1ec8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    1ecc:	4618      	mov	r0, r3
    1ece:	f7ff fd91 	bl	19f4 <sjsu::GraphicalTerminal::Initialize()>
// OLED INITIALIZATION END

// BUTTON INITIALIZATION
  sjsu::lpc40xx::Gpio button_gpio0(1, 19);
    1ed2:	f107 0090 	add.w	r0, r7, #144	; 0x90
    1ed6:	2300      	movs	r3, #0
    1ed8:	2213      	movs	r2, #19
    1eda:	2101      	movs	r1, #1
    1edc:	f7fe fe88 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::lpc40xx::Gpio button_gpio1(1, 15);
    1ee0:	f107 0070 	add.w	r0, r7, #112	; 0x70
    1ee4:	2300      	movs	r3, #0
    1ee6:	220f      	movs	r2, #15
    1ee8:	2101      	movs	r1, #1
    1eea:	f7fe fe81 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::lpc40xx::Gpio button_gpio2(0, 30);
    1eee:	f107 0050 	add.w	r0, r7, #80	; 0x50
    1ef2:	2300      	movs	r3, #0
    1ef4:	221e      	movs	r2, #30
    1ef6:	2100      	movs	r1, #0
    1ef8:	f7fe fe7a 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  sjsu::lpc40xx::Gpio button_gpio3(0, 29);
    1efc:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1f00:	2300      	movs	r3, #0
    1f02:	221d      	movs	r2, #29
    1f04:	2100      	movs	r1, #0
    1f06:	f7fe fe73 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>

  sjsu::Button button0(button_gpio0);
    1f0a:	f107 0290 	add.w	r2, r7, #144	; 0x90
    1f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1f12:	4611      	mov	r1, r2
    1f14:	4618      	mov	r0, r3
    1f16:	f7ff feb7 	bl	1c88 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjsu::Button button1(button_gpio1);
    1f1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
    1f1e:	f107 0318 	add.w	r3, r7, #24
    1f22:	4611      	mov	r1, r2
    1f24:	4618      	mov	r0, r3
    1f26:	f7ff feaf 	bl	1c88 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjsu::Button button2(button_gpio2);
    1f2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1f2e:	f107 030c 	add.w	r3, r7, #12
    1f32:	4611      	mov	r1, r2
    1f34:	4618      	mov	r0, r3
    1f36:	f7ff fea7 	bl	1c88 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjsu::Button button3(button_gpio3);
    1f3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1f3e:	463b      	mov	r3, r7
    1f40:	4611      	mov	r1, r2
    1f42:	4618      	mov	r0, r3
    1f44:	f7ff fea0 	bl	1c88 <sjsu::Button::Button(sjsu::Gpio const&)>
  sjtwo::led1.SetAsOutput();
  sjtwo::led2.SetAsOutput();
  sjtwo::led3.SetAsOutput();
  */

  button0.Initialize();
    1f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1f4c:	4618      	mov	r0, r3
    1f4e:	f7ff feb5 	bl	1cbc <sjsu::Button::Initialize()>
  button1.Initialize();
    1f52:	f107 0318 	add.w	r3, r7, #24
    1f56:	4618      	mov	r0, r3
    1f58:	f7ff feb0 	bl	1cbc <sjsu::Button::Initialize()>
  button2.Initialize();
    1f5c:	f107 030c 	add.w	r3, r7, #12
    1f60:	4618      	mov	r0, r3
    1f62:	f7ff feab 	bl	1cbc <sjsu::Button::Initialize()>
  button3.Initialize();
    1f66:	463b      	mov	r3, r7
    1f68:	4618      	mov	r0, r3
    1f6a:	f7ff fea7 	bl	1cbc <sjsu::Button::Initialize()>
      oled_terminal.printf("Button 3 pressed");
  }
  */
  //Number 3

  int b0 = 0;
    1f6e:	2300      	movs	r3, #0
    1f70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  int b1 = 0;
    1f74:	2300      	movs	r3, #0
    1f76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  int b2 = 0;
    1f7a:	2300      	movs	r3, #0
    1f7c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  int total;

  while (1) {
    if (button1.Pressed() == 1) {//LSB, SWB1
    1f80:	f107 0318 	add.w	r3, r7, #24
    1f84:	4618      	mov	r0, r3
    1f86:	f7ff fefb 	bl	1d80 <sjsu::Button::Pressed()>
    1f8a:	4603      	mov	r3, r0
    1f8c:	2b01      	cmp	r3, #1
    1f8e:	bf0c      	ite	eq
    1f90:	2301      	moveq	r3, #1
    1f92:	2300      	movne	r3, #0
    1f94:	b2db      	uxtb	r3, r3
    1f96:	2b00      	cmp	r3, #0
    1f98:	d005      	beq.n	1fa6 <main+0x166>
      b0 = 1;
    1f9a:	2301      	movs	r3, #1
    1f9c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      sjtwo::led1.SetAsOutput();
    1fa0:	482f      	ldr	r0, [pc, #188]	; (2060 <main+0x220>)
    1fa2:	f7fe fb51 	bl	648 <sjsu::Gpio::SetAsOutput() const>
    }
    if (button2.Pressed() == 1) {//SWB2
    1fa6:	f107 030c 	add.w	r3, r7, #12
    1faa:	4618      	mov	r0, r3
    1fac:	f7ff fee8 	bl	1d80 <sjsu::Button::Pressed()>
    1fb0:	4603      	mov	r3, r0
    1fb2:	2b01      	cmp	r3, #1
    1fb4:	bf0c      	ite	eq
    1fb6:	2301      	moveq	r3, #1
    1fb8:	2300      	movne	r3, #0
    1fba:	b2db      	uxtb	r3, r3
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d005      	beq.n	1fcc <main+0x18c>
      b1 = 1;
    1fc0:	2301      	movs	r3, #1
    1fc2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      sjtwo::led2.SetAsOutput(); 
    1fc6:	4827      	ldr	r0, [pc, #156]	; (2064 <main+0x224>)
    1fc8:	f7fe fb3e 	bl	648 <sjsu::Gpio::SetAsOutput() const>
    }
    if (button3.Pressed() == 1) {//MSB, SWB3
    1fcc:	463b      	mov	r3, r7
    1fce:	4618      	mov	r0, r3
    1fd0:	f7ff fed6 	bl	1d80 <sjsu::Button::Pressed()>
    1fd4:	4603      	mov	r3, r0
    1fd6:	2b01      	cmp	r3, #1
    1fd8:	bf0c      	ite	eq
    1fda:	2301      	moveq	r3, #1
    1fdc:	2300      	movne	r3, #0
    1fde:	b2db      	uxtb	r3, r3
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d005      	beq.n	1ff0 <main+0x1b0>
      b2 = 1;
    1fe4:	2301      	movs	r3, #1
    1fe6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      sjtwo::led3.SetAsOutput();
    1fea:	481f      	ldr	r0, [pc, #124]	; (2068 <main+0x228>)
    1fec:	f7fe fb2c 	bl	648 <sjsu::Gpio::SetAsOutput() const>
    }
    if (button0.Pressed() == 1) //Exit, SWB0
    1ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1ff4:	4618      	mov	r0, r3
    1ff6:	f7ff fec3 	bl	1d80 <sjsu::Button::Pressed()>
    1ffa:	4603      	mov	r3, r0
    1ffc:	2b01      	cmp	r3, #1
    1ffe:	bf0c      	ite	eq
    2000:	2301      	moveq	r3, #1
    2002:	2300      	movne	r3, #0
    2004:	b2db      	uxtb	r3, r3
    2006:	2b00      	cmp	r3, #0
    2008:	d100      	bne.n	200c <main+0x1cc>
    if (button1.Pressed() == 1) {//LSB, SWB1
    200a:	e7b9      	b.n	1f80 <main+0x140>
      break;
    200c:	bf00      	nop
  }
  total = (b2*4) + (b1*2) + b0;
    200e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2012:	005a      	lsls	r2, r3, #1
    2014:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
    2018:	4413      	add	r3, r2
    201a:	005b      	lsls	r3, r3, #1
    201c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
    2020:	4413      	add	r3, r2
    2022:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  oled_terminal.printf("Decimal: %d", total);
    2026:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    202a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    202e:	490f      	ldr	r1, [pc, #60]	; (206c <main+0x22c>)
    2030:	4618      	mov	r0, r3
    2032:	f7ff fcf6 	bl	1a22 <sjsu::GraphicalTerminal::printf(char const*, ...)>
  
 
  return (0);
    2036:	2300      	movs	r3, #0
    2038:	4618      	mov	r0, r3
    203a:	f507 77b0 	add.w	r7, r7, #352	; 0x160
    203e:	46bd      	mov	sp, r7
    2040:	bd80      	pop	{r7, pc}
    2042:	bf00      	nop
    2044:	10001238 	.word	0x10001238
    2048:	10001218 	.word	0x10001218
    204c:	1000125c 	.word	0x1000125c
    2050:	1000123c 	.word	0x1000123c
    2054:	10001270 	.word	0x10001270
    2058:	1000053c 	.word	0x1000053c
    205c:	10001260 	.word	0x10001260
    2060:	100011b8 	.word	0x100011b8
    2064:	100011d8 	.word	0x100011d8
    2068:	100011f8 	.word	0x100011f8
    206c:	000081e0 	.word	0x000081e0

00002070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2070:	b580      	push	{r7, lr}
    2072:	b084      	sub	sp, #16
    2074:	af00      	add	r7, sp, #0
    2076:	60f8      	str	r0, [r7, #12]
    2078:	460b      	mov	r3, r1
    207a:	80ba      	strh	r2, [r7, #4]
    207c:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    207e:	793b      	ldrb	r3, [r7, #4]
    2080:	461a      	mov	r2, r3
    2082:	797b      	ldrb	r3, [r7, #5]
    2084:	7af9      	ldrb	r1, [r7, #11]
    2086:	68f8      	ldr	r0, [r7, #12]
    2088:	f000 f9c2 	bl	2410 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    208c:	4603      	mov	r3, r0
}
    208e:	4618      	mov	r0, r3
    2090:	3710      	adds	r7, #16
    2092:	46bd      	mov	sp, r7
    2094:	bd80      	pop	{r7, pc}

00002096 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    2096:	b580      	push	{r7, lr}
    2098:	b084      	sub	sp, #16
    209a:	af00      	add	r7, sp, #0
    209c:	6078      	str	r0, [r7, #4]
    209e:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	4618      	mov	r0, r3
    20a4:	f7fe ffd4 	bl	1050 <units::linear_scale<float>::operator()() const>
    20a8:	eef0 6a40 	vmov.f32	s13, s0
    20ac:	683b      	ldr	r3, [r7, #0]
    20ae:	ee07 3a90 	vmov	s15, r3
    20b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    20ba:	f107 030c 	add.w	r3, r7, #12
    20be:	eeb0 0a47 	vmov.f32	s0, s14
    20c2:	4618      	mov	r0, r3
    20c4:	f7fe fb25 	bl	712 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    20c8:	68fb      	ldr	r3, [r7, #12]
	}
    20ca:	4618      	mov	r0, r3
    20cc:	3710      	adds	r7, #16
    20ce:	46bd      	mov	sp, r7
    20d0:	bd80      	pop	{r7, pc}

000020d2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>:
    operator""us(long double __usecs)
    { return chrono::duration<long double, micro>{__usecs}; }

    template <char... _Digits>
      constexpr chrono::microseconds
      operator""us()
    20d2:	b580      	push	{r7, lr}
    20d4:	b082      	sub	sp, #8
    20d6:	af00      	add	r7, sp, #0
    20d8:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	4618      	mov	r0, r3
    20de:	f000 f9c4 	bl	246a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>
    20e2:	bf00      	nop
    20e4:	6878      	ldr	r0, [r7, #4]
    20e6:	3708      	adds	r7, #8
    20e8:	46bd      	mov	sp, r7
    20ea:	bd80      	pop	{r7, pc}

000020ec <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    20ec:	b580      	push	{r7, lr}
    20ee:	b084      	sub	sp, #16
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
    20f4:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    20f6:	f107 0308 	add.w	r3, r7, #8
    20fa:	6839      	ldr	r1, [r7, #0]
    20fc:	4618      	mov	r0, r3
    20fe:	f000 f9c8 	bl	2492 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    2102:	f107 0308 	add.w	r3, r7, #8
    2106:	4618      	mov	r0, r3
    2108:	f7fe faac 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    210c:	4602      	mov	r2, r0
    210e:	460b      	mov	r3, r1
    2110:	6879      	ldr	r1, [r7, #4]
    2112:	e9c1 2300 	strd	r2, r3, [r1]
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	4618      	mov	r0, r3
    211a:	3710      	adds	r7, #16
    211c:	46bd      	mov	sp, r7
    211e:	bd80      	pop	{r7, pc}

00002120 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
    2120:	b590      	push	{r4, r7, lr}
    2122:	b083      	sub	sp, #12
    2124:	af00      	add	r7, sp, #0
    2126:	6078      	str	r0, [r7, #4]
    2128:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	4618      	mov	r0, r3
    212e:	f7fe f93f 	bl	3b0 <std::_Function_base::_Function_base()>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
    2132:	683b      	ldr	r3, [r7, #0]
    2134:	4618      	mov	r0, r3
    2136:	f000 f9bb 	bl	24b0 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    213a:	4603      	mov	r3, r0
    213c:	2b00      	cmp	r3, #0
    213e:	d00f      	beq.n	2160 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2140:	687c      	ldr	r4, [r7, #4]
    2142:	463b      	mov	r3, r7
    2144:	4618      	mov	r0, r3
    2146:	f000 f9c3 	bl	24d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    214a:	4603      	mov	r3, r0
    214c:	4619      	mov	r1, r3
    214e:	4620      	mov	r0, r4
    2150:	f000 f9c9 	bl	24e6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	4a05      	ldr	r2, [pc, #20]	; (216c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x4c>)
    2158:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	4a04      	ldr	r2, [pc, #16]	; (2170 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x50>)
    215e:	609a      	str	r2, [r3, #8]
	  }
      }
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	4618      	mov	r0, r3
    2164:	370c      	adds	r7, #12
    2166:	46bd      	mov	sp, r7
    2168:	bd90      	pop	{r4, r7, pc}
    216a:	bf00      	nop
    216c:	0000250b 	.word	0x0000250b
    2170:	0000252f 	.word	0x0000252f

00002174 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    2174:	b580      	push	{r7, lr}
    2176:	b084      	sub	sp, #16
    2178:	af00      	add	r7, sp, #0
    217a:	60f8      	str	r0, [r7, #12]
    217c:	460b      	mov	r3, r1
    217e:	80ba      	strh	r2, [r7, #4]
    2180:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    2182:	793b      	ldrb	r3, [r7, #4]
    2184:	461a      	mov	r2, r3
    2186:	797b      	ldrb	r3, [r7, #5]
    2188:	7af9      	ldrb	r1, [r7, #11]
    218a:	68f8      	ldr	r0, [r7, #12]
    218c:	f000 f9fa 	bl	2584 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    2190:	4603      	mov	r3, r0
}
    2192:	4618      	mov	r0, r3
    2194:	3710      	adds	r7, #16
    2196:	46bd      	mov	sp, r7
    2198:	bd80      	pop	{r7, pc}

0000219a <std::function<void ()>::function()>:
      function() noexcept
    219a:	b580      	push	{r7, lr}
    219c:	b082      	sub	sp, #8
    219e:	af00      	add	r7, sp, #0
    21a0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	4618      	mov	r0, r3
    21a6:	f7fe f903 	bl	3b0 <std::_Function_base::_Function_base()>
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	4618      	mov	r0, r3
    21ae:	3708      	adds	r7, #8
    21b0:	46bd      	mov	sp, r7
    21b2:	bd80      	pop	{r7, pc}

000021b4 <std::function<void ()>::operator()() const>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    21b4:	b580      	push	{r7, lr}
    21b6:	b082      	sub	sp, #8
    21b8:	af00      	add	r7, sp, #0
    21ba:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	4618      	mov	r0, r3
    21c0:	f7fe f917 	bl	3f2 <std::_Function_base::_M_empty() const>
    21c4:	4603      	mov	r3, r0
    21c6:	2b00      	cmp	r3, #0
    21c8:	d001      	beq.n	21ce <std::function<void ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    21ca:	f004 fbdd 	bl	6988 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	68db      	ldr	r3, [r3, #12]
    21d2:	687a      	ldr	r2, [r7, #4]
    21d4:	4610      	mov	r0, r2
    21d6:	4798      	blx	r3
    21d8:	bf00      	nop
    }
    21da:	3708      	adds	r7, #8
    21dc:	46bd      	mov	sp, r7
    21de:	bd80      	pop	{r7, pc}

000021e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    21e0:	b480      	push	{r7}
    21e2:	b083      	sub	sp, #12
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
    21e8:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    21ea:	2201      	movs	r2, #1
    21ec:	683b      	ldr	r3, [r7, #0]
    21ee:	fa02 f303 	lsl.w	r3, r2, r3
    21f2:	43db      	mvns	r3, r3
    21f4:	461a      	mov	r2, r3
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	4013      	ands	r3, r2
}
    21fa:	4618      	mov	r0, r3
    21fc:	370c      	adds	r7, #12
    21fe:	46bd      	mov	sp, r7
    2200:	f85d 7b04 	ldr.w	r7, [sp], #4
    2204:	4770      	bx	lr

00002206 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    2206:	b480      	push	{r7}
    2208:	b083      	sub	sp, #12
    220a:	af00      	add	r7, sp, #0
    220c:	6078      	str	r0, [r7, #4]
    220e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    2210:	2201      	movs	r2, #1
    2212:	683b      	ldr	r3, [r7, #0]
    2214:	fa02 f303 	lsl.w	r3, r2, r3
    2218:	461a      	mov	r2, r3
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	4313      	orrs	r3, r2
}
    221e:	4618      	mov	r0, r3
    2220:	370c      	adds	r7, #12
    2222:	46bd      	mov	sp, r7
    2224:	f85d 7b04 	ldr.w	r7, [sp], #4
    2228:	4770      	bx	lr

0000222a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    222a:	b480      	push	{r7}
    222c:	b083      	sub	sp, #12
    222e:	af00      	add	r7, sp, #0
    2230:	6078      	str	r0, [r7, #4]
    2232:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    2234:	2201      	movs	r2, #1
    2236:	683b      	ldr	r3, [r7, #0]
    2238:	fa02 f303 	lsl.w	r3, r2, r3
    223c:	461a      	mov	r2, r3
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	4013      	ands	r3, r2
    2242:	2b00      	cmp	r3, #0
    2244:	bf14      	ite	ne
    2246:	2301      	movne	r3, #1
    2248:	2300      	moveq	r3, #0
    224a:	b2db      	uxtb	r3, r3
}
    224c:	4618      	mov	r0, r3
    224e:	370c      	adds	r7, #12
    2250:	46bd      	mov	sp, r7
    2252:	f85d 7b04 	ldr.w	r7, [sp], #4
    2256:	4770      	bx	lr

00002258 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    2258:	b590      	push	{r4, r7, lr}
    225a:	b083      	sub	sp, #12
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
    2260:	6039      	str	r1, [r7, #0]
      : _Function_base()
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	4618      	mov	r0, r3
    2266:	f7fe f8a3 	bl	3b0 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    226a:	683b      	ldr	r3, [r7, #0]
    226c:	4618      	mov	r0, r3
    226e:	f000 f9b6 	bl	25de <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    2272:	4603      	mov	r3, r0
    2274:	2b00      	cmp	r3, #0
    2276:	d00f      	beq.n	2298 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2278:	687c      	ldr	r4, [r7, #4]
    227a:	463b      	mov	r3, r7
    227c:	4618      	mov	r0, r3
    227e:	f000 f9be 	bl	25fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2282:	4603      	mov	r3, r0
    2284:	4619      	mov	r1, r3
    2286:	4620      	mov	r0, r4
    2288:	f000 f9c4 	bl	2614 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    228c:	687b      	ldr	r3, [r7, #4]
    228e:	4a05      	ldr	r2, [pc, #20]	; (22a4 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x4c>)
    2290:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	4a04      	ldr	r2, [pc, #16]	; (22a8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x50>)
    2296:	609a      	str	r2, [r3, #8]
      }
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	4618      	mov	r0, r3
    229c:	370c      	adds	r7, #12
    229e:	46bd      	mov	sp, r7
    22a0:	bd90      	pop	{r4, r7, pc}
    22a2:	bf00      	nop
    22a4:	00002639 	.word	0x00002639
    22a8:	00002655 	.word	0x00002655

000022ac <std::function<void ()>::operator=(std::function<void ()> const&)>:
      operator=(const function& __x)
    22ac:	b580      	push	{r7, lr}
    22ae:	b086      	sub	sp, #24
    22b0:	af00      	add	r7, sp, #0
    22b2:	6078      	str	r0, [r7, #4]
    22b4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    22b6:	f107 0308 	add.w	r3, r7, #8
    22ba:	6839      	ldr	r1, [r7, #0]
    22bc:	4618      	mov	r0, r3
    22be:	f000 f9f4 	bl	26aa <std::function<void ()>::function(std::function<void ()> const&)>
    22c2:	f107 0308 	add.w	r3, r7, #8
    22c6:	6879      	ldr	r1, [r7, #4]
    22c8:	4618      	mov	r0, r3
    22ca:	f000 fa10 	bl	26ee <std::function<void ()>::swap(std::function<void ()>&)>
    22ce:	f107 0308 	add.w	r3, r7, #8
    22d2:	4618      	mov	r0, r3
    22d4:	f7fe fd6d 	bl	db2 <std::function<void ()>::~function()>
	return *this;
    22d8:	687b      	ldr	r3, [r7, #4]
      }
    22da:	4618      	mov	r0, r3
    22dc:	3718      	adds	r7, #24
    22de:	46bd      	mov	sp, r7
    22e0:	bd80      	pop	{r7, pc}

000022e2 <std::function<void ()>::operator=(decltype(nullptr))>:
      operator=(nullptr_t) noexcept
    22e2:	b580      	push	{r7, lr}
    22e4:	b082      	sub	sp, #8
    22e6:	af00      	add	r7, sp, #0
    22e8:	6078      	str	r0, [r7, #4]
    22ea:	6039      	str	r1, [r7, #0]
	if (_M_manager)
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	689b      	ldr	r3, [r3, #8]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d00b      	beq.n	230c <std::function<void ()>::operator=(decltype(nullptr))+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	689b      	ldr	r3, [r3, #8]
    22f8:	6878      	ldr	r0, [r7, #4]
    22fa:	6879      	ldr	r1, [r7, #4]
    22fc:	2203      	movs	r2, #3
    22fe:	4798      	blx	r3
	    _M_manager = nullptr;
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	2200      	movs	r2, #0
    2304:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	2200      	movs	r2, #0
    230a:	60da      	str	r2, [r3, #12]
	return *this;
    230c:	687b      	ldr	r3, [r7, #4]
      }
    230e:	4618      	mov	r0, r3
    2310:	3708      	adds	r7, #8
    2312:	46bd      	mov	sp, r7
    2314:	bd80      	pop	{r7, pc}

00002316 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
  return Set(target, bitmask.position);
}
/// Operates the same way as the Set(T target, Mask bitmask) function except it
/// clears the bit.
template <typename T>
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    2316:	b580      	push	{r7, lr}
    2318:	b082      	sub	sp, #8
    231a:	af00      	add	r7, sp, #0
    231c:	6078      	str	r0, [r7, #4]
    231e:	8039      	strh	r1, [r7, #0]
{
  return Clear(target, bitmask.position);
    2320:	783b      	ldrb	r3, [r7, #0]
    2322:	4619      	mov	r1, r3
    2324:	6878      	ldr	r0, [r7, #4]
    2326:	f7ff ff5b 	bl	21e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    232a:	4603      	mov	r3, r0
}
    232c:	4618      	mov	r0, r3
    232e:	3708      	adds	r7, #8
    2330:	46bd      	mov	sp, r7
    2332:	bd80      	pop	{r7, pc}

00002334 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    2334:	b580      	push	{r7, lr}
    2336:	b082      	sub	sp, #8
    2338:	af00      	add	r7, sp, #0
    233a:	6078      	str	r0, [r7, #4]
    233c:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    233e:	783b      	ldrb	r3, [r7, #0]
    2340:	4619      	mov	r1, r3
    2342:	6878      	ldr	r0, [r7, #4]
    2344:	f7ff ff5f 	bl	2206 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2348:	4603      	mov	r3, r0
}
    234a:	4618      	mov	r0, r3
    234c:	3708      	adds	r7, #8
    234e:	46bd      	mov	sp, r7
    2350:	bd80      	pop	{r7, pc}

00002352 <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// example, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    2352:	b580      	push	{r7, lr}
    2354:	b082      	sub	sp, #8
    2356:	af00      	add	r7, sp, #0
    2358:	6078      	str	r0, [r7, #4]
    235a:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    235c:	783b      	ldrb	r3, [r7, #0]
    235e:	4619      	mov	r1, r3
    2360:	6878      	ldr	r0, [r7, #4]
    2362:	f7ff ff62 	bl	222a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    2366:	4603      	mov	r3, r0
}
    2368:	4618      	mov	r0, r3
    236a:	3708      	adds	r7, #8
    236c:	46bd      	mov	sp, r7
    236e:	bd80      	pop	{r7, pc}

00002370 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr operator Ty() const noexcept
    2370:	b580      	push	{r7, lr}
    2372:	b084      	sub	sp, #16
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	4618      	mov	r0, r3
    237c:	f7fe fe68 	bl	1050 <units::linear_scale<float>::operator()() const>
    2380:	eef0 7a40 	vmov.f32	s15, s0
    2384:	edc7 7a03 	vstr	s15, [r7, #12]
    2388:	f107 030c 	add.w	r3, r7, #12
    238c:	4618      	mov	r0, r3
    238e:	f000 f9cf 	bl	2730 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2392:	eef0 7a40 	vmov.f32	s15, s0
    2396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    239a:	ee17 3a90 	vmov	r3, s15
    239e:	b29b      	uxth	r3, r3
		}
    23a0:	4618      	mov	r0, r3
    23a2:	3710      	adds	r7, #16
    23a4:	46bd      	mov	sp, r7
    23a6:	bd80      	pop	{r7, pc}

000023a8 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    23a8:	b580      	push	{r7, lr}
    23aa:	b084      	sub	sp, #16
    23ac:	af00      	add	r7, sp, #0
    23ae:	60f8      	str	r0, [r7, #12]
    23b0:	60b9      	str	r1, [r7, #8]
    23b2:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    23b4:	793b      	ldrb	r3, [r7, #4]
    23b6:	461a      	mov	r2, r3
    23b8:	797b      	ldrb	r3, [r7, #5]
    23ba:	68b9      	ldr	r1, [r7, #8]
    23bc:	68f8      	ldr	r0, [r7, #12]
    23be:	f000 f9c5 	bl	274c <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    23c2:	4603      	mov	r3, r0
}
    23c4:	4618      	mov	r0, r3
    23c6:	3710      	adds	r7, #16
    23c8:	46bd      	mov	sp, r7
    23ca:	bd80      	pop	{r7, pc}

000023cc <sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)>:
  explicit GraphicalTerminal(Graphics * graphics,
    23cc:	b480      	push	{r7}
    23ce:	b085      	sub	sp, #20
    23d0:	af00      	add	r7, sp, #0
    23d2:	60f8      	str	r0, [r7, #12]
    23d4:	60b9      	str	r1, [r7, #8]
    23d6:	607a      	str	r2, [r7, #4]
        cache_(cache->buffer)
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	2200      	movs	r2, #0
    23dc:	601a      	str	r2, [r3, #0]
    23de:	68fb      	ldr	r3, [r7, #12]
    23e0:	2200      	movs	r2, #0
    23e2:	605a      	str	r2, [r3, #4]
    23e4:	68fb      	ldr	r3, [r7, #12]
    23e6:	2200      	movs	r2, #0
    23e8:	609a      	str	r2, [r3, #8]
    23ea:	68fb      	ldr	r3, [r7, #12]
    23ec:	2208      	movs	r2, #8
    23ee:	60da      	str	r2, [r3, #12]
    23f0:	68fb      	ldr	r3, [r7, #12]
    23f2:	2210      	movs	r2, #16
    23f4:	611a      	str	r2, [r3, #16]
    23f6:	68fb      	ldr	r3, [r7, #12]
    23f8:	68ba      	ldr	r2, [r7, #8]
    23fa:	615a      	str	r2, [r3, #20]
    23fc:	687a      	ldr	r2, [r7, #4]
    23fe:	68fb      	ldr	r3, [r7, #12]
    2400:	619a      	str	r2, [r3, #24]
  }
    2402:	68fb      	ldr	r3, [r7, #12]
    2404:	4618      	mov	r0, r3
    2406:	3714      	adds	r7, #20
    2408:	46bd      	mov	sp, r7
    240a:	f85d 7b04 	ldr.w	r7, [sp], #4
    240e:	4770      	bx	lr

00002410 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2410:	b480      	push	{r7}
    2412:	b089      	sub	sp, #36	; 0x24
    2414:	af00      	add	r7, sp, #0
    2416:	60f8      	str	r0, [r7, #12]
    2418:	607a      	str	r2, [r7, #4]
    241a:	603b      	str	r3, [r7, #0]
    241c:	460b      	mov	r3, r1
    241e:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2424:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2426:	2320      	movs	r3, #32
    2428:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    242a:	683b      	ldr	r3, [r7, #0]
    242c:	f1c3 0320 	rsb	r3, r3, #32
    2430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2434:	fa22 f303 	lsr.w	r3, r2, r3
    2438:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    243a:	697a      	ldr	r2, [r7, #20]
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	fa02 f303 	lsl.w	r3, r2, r3
    2442:	43db      	mvns	r3, r3
    2444:	68fa      	ldr	r2, [r7, #12]
    2446:	4013      	ands	r3, r2
    2448:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    244a:	7afa      	ldrb	r2, [r7, #11]
    244c:	697b      	ldr	r3, [r7, #20]
    244e:	401a      	ands	r2, r3
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	fa02 f303 	lsl.w	r3, r2, r3
    2456:	68fa      	ldr	r2, [r7, #12]
    2458:	4313      	orrs	r3, r2
    245a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    245c:	68fb      	ldr	r3, [r7, #12]
}
    245e:	4618      	mov	r0, r3
    2460:	3724      	adds	r7, #36	; 0x24
    2462:	46bd      	mov	sp, r7
    2464:	f85d 7b04 	ldr.w	r7, [sp], #4
    2468:	4770      	bx	lr

0000246a <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    246a:	b580      	push	{r7, lr}
    246c:	b084      	sub	sp, #16
    246e:	af00      	add	r7, sp, #0
    2470:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    2472:	f04f 0201 	mov.w	r2, #1
    2476:	f04f 0300 	mov.w	r3, #0
    247a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    247e:	f107 0308 	add.w	r3, r7, #8
    2482:	4619      	mov	r1, r3
    2484:	6878      	ldr	r0, [r7, #4]
    2486:	f000 f98d 	bl	27a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    248a:	6878      	ldr	r0, [r7, #4]
    248c:	3710      	adds	r7, #16
    248e:	46bd      	mov	sp, r7
    2490:	bd80      	pop	{r7, pc}

00002492 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    2492:	b580      	push	{r7, lr}
    2494:	b082      	sub	sp, #8
    2496:	af00      	add	r7, sp, #0
    2498:	6078      	str	r0, [r7, #4]
    249a:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	6839      	ldr	r1, [r7, #0]
    24a0:	4618      	mov	r0, r3
    24a2:	f000 f99f 	bl	27e4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    24a6:	bf00      	nop
      }
    24a8:	6878      	ldr	r0, [r7, #4]
    24aa:	3708      	adds	r7, #8
    24ac:	46bd      	mov	sp, r7
    24ae:	bd80      	pop	{r7, pc}

000024b0 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    24b0:	b480      	push	{r7}
    24b2:	b083      	sub	sp, #12
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	2b00      	cmp	r3, #0
    24bc:	bf14      	ite	ne
    24be:	2301      	movne	r3, #1
    24c0:	2300      	moveq	r3, #0
    24c2:	b2db      	uxtb	r3, r3
    24c4:	4618      	mov	r0, r3
    24c6:	370c      	adds	r7, #12
    24c8:	46bd      	mov	sp, r7
    24ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ce:	4770      	bx	lr

000024d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    24d0:	b480      	push	{r7}
    24d2:	b083      	sub	sp, #12
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	4618      	mov	r0, r3
    24dc:	370c      	adds	r7, #12
    24de:	46bd      	mov	sp, r7
    24e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e4:	4770      	bx	lr

000024e6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    24e6:	b590      	push	{r4, r7, lr}
    24e8:	b085      	sub	sp, #20
    24ea:	af00      	add	r7, sp, #0
    24ec:	6078      	str	r0, [r7, #4]
    24ee:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    24f0:	6838      	ldr	r0, [r7, #0]
    24f2:	f7ff ffed 	bl	24d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    24f6:	4603      	mov	r3, r0
    24f8:	4622      	mov	r2, r4
    24fa:	4619      	mov	r1, r3
    24fc:	6878      	ldr	r0, [r7, #4]
    24fe:	f000 f9ab 	bl	2858 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>
    2502:	bf00      	nop
    2504:	3714      	adds	r7, #20
    2506:	46bd      	mov	sp, r7
    2508:	bd90      	pop	{r4, r7, pc}

0000250a <std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    250a:	b580      	push	{r7, lr}
    250c:	b082      	sub	sp, #8
    250e:	af00      	add	r7, sp, #0
    2510:	6078      	str	r0, [r7, #4]
    2512:	6039      	str	r1, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
    2514:	6838      	ldr	r0, [r7, #0]
    2516:	f000 f9b8 	bl	288a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    251a:	4603      	mov	r3, r0
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	687a      	ldr	r2, [r7, #4]
    2520:	4610      	mov	r0, r2
    2522:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
    2524:	bf00      	nop
      }
    2526:	6878      	ldr	r0, [r7, #4]
    2528:	3708      	adds	r7, #8
    252a:	46bd      	mov	sp, r7
    252c:	bd80      	pop	{r7, pc}

0000252e <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    252e:	b5b0      	push	{r4, r5, r7, lr}
    2530:	b086      	sub	sp, #24
    2532:	af00      	add	r7, sp, #0
    2534:	60f8      	str	r0, [r7, #12]
    2536:	60b9      	str	r1, [r7, #8]
    2538:	4613      	mov	r3, r2
    253a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    253c:	79fb      	ldrb	r3, [r7, #7]
    253e:	2b03      	cmp	r3, #3
    2540:	d016      	beq.n	2570 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2542:	2b03      	cmp	r3, #3
    2544:	dc19      	bgt.n	257a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    2546:	2b01      	cmp	r3, #1
    2548:	d002      	beq.n	2550 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    254a:	2b02      	cmp	r3, #2
    254c:	d00a      	beq.n	2564 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    254e:	e014      	b.n	257a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    2550:	68b8      	ldr	r0, [r7, #8]
    2552:	f000 f99a 	bl	288a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    2556:	4604      	mov	r4, r0
    2558:	68f8      	ldr	r0, [r7, #12]
    255a:	f000 f9a6 	bl	28aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>
    255e:	4603      	mov	r3, r0
    2560:	601c      	str	r4, [r3, #0]
	      break;
    2562:	e00a      	b.n	257a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    2564:	462a      	mov	r2, r5
    2566:	68b9      	ldr	r1, [r7, #8]
    2568:	68f8      	ldr	r0, [r7, #12]
    256a:	f000 f9aa 	bl	28c2 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    256e:	e004      	b.n	257a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    2570:	4621      	mov	r1, r4
    2572:	68f8      	ldr	r0, [r7, #12]
    2574:	f000 f9be 	bl	28f4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    2578:	bf00      	nop
	  return false;
    257a:	2300      	movs	r3, #0
	}
    257c:	4618      	mov	r0, r3
    257e:	3718      	adds	r7, #24
    2580:	46bd      	mov	sp, r7
    2582:	bdb0      	pop	{r4, r5, r7, pc}

00002584 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2584:	b480      	push	{r7}
    2586:	b089      	sub	sp, #36	; 0x24
    2588:	af00      	add	r7, sp, #0
    258a:	60f8      	str	r0, [r7, #12]
    258c:	607a      	str	r2, [r7, #4]
    258e:	603b      	str	r3, [r7, #0]
    2590:	460b      	mov	r3, r1
    2592:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2598:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    259a:	2320      	movs	r3, #32
    259c:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	f1c3 0320 	rsb	r3, r3, #32
    25a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    25a8:	fa22 f303 	lsr.w	r3, r2, r3
    25ac:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    25ae:	697a      	ldr	r2, [r7, #20]
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	fa02 f303 	lsl.w	r3, r2, r3
    25b6:	43db      	mvns	r3, r3
    25b8:	68fa      	ldr	r2, [r7, #12]
    25ba:	4013      	ands	r3, r2
    25bc:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    25be:	7afa      	ldrb	r2, [r7, #11]
    25c0:	697b      	ldr	r3, [r7, #20]
    25c2:	401a      	ands	r2, r3
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	fa02 f303 	lsl.w	r3, r2, r3
    25ca:	68fa      	ldr	r2, [r7, #12]
    25cc:	4313      	orrs	r3, r2
    25ce:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    25d0:	68fb      	ldr	r3, [r7, #12]
}
    25d2:	4618      	mov	r0, r3
    25d4:	3724      	adds	r7, #36	; 0x24
    25d6:	46bd      	mov	sp, r7
    25d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25dc:	4770      	bx	lr

000025de <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    25de:	b480      	push	{r7}
    25e0:	b083      	sub	sp, #12
    25e2:	af00      	add	r7, sp, #0
    25e4:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    25e6:	687b      	ldr	r3, [r7, #4]
    25e8:	2b00      	cmp	r3, #0
    25ea:	bf14      	ite	ne
    25ec:	2301      	movne	r3, #1
    25ee:	2300      	moveq	r3, #0
    25f0:	b2db      	uxtb	r3, r3
    25f2:	4618      	mov	r0, r3
    25f4:	370c      	adds	r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25fc:	4770      	bx	lr

000025fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
    move(_Tp&& __t) noexcept
    25fe:	b480      	push	{r7}
    2600:	b083      	sub	sp, #12
    2602:	af00      	add	r7, sp, #0
    2604:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	4618      	mov	r0, r3
    260a:	370c      	adds	r7, #12
    260c:	46bd      	mov	sp, r7
    260e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2612:	4770      	bx	lr

00002614 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    2614:	b590      	push	{r4, r7, lr}
    2616:	b085      	sub	sp, #20
    2618:	af00      	add	r7, sp, #0
    261a:	6078      	str	r0, [r7, #4]
    261c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    261e:	6838      	ldr	r0, [r7, #0]
    2620:	f7ff ffed 	bl	25fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2624:	4603      	mov	r3, r0
    2626:	4622      	mov	r2, r4
    2628:	4619      	mov	r1, r3
    262a:	6878      	ldr	r0, [r7, #4]
    262c:	f000 f9ca 	bl	29c4 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    2630:	bf00      	nop
    2632:	3714      	adds	r7, #20
    2634:	46bd      	mov	sp, r7
    2636:	bd90      	pop	{r4, r7, pc}

00002638 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    2638:	b580      	push	{r7, lr}
    263a:	b082      	sub	sp, #8
    263c:	af00      	add	r7, sp, #0
    263e:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
    2640:	6878      	ldr	r0, [r7, #4]
    2642:	f000 f9d8 	bl	29f6 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    2646:	4603      	mov	r3, r0
    2648:	681b      	ldr	r3, [r3, #0]
    264a:	4798      	blx	r3
      }
    264c:	bf00      	nop
    264e:	3708      	adds	r7, #8
    2650:	46bd      	mov	sp, r7
    2652:	bd80      	pop	{r7, pc}

00002654 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2654:	b5b0      	push	{r4, r5, r7, lr}
    2656:	b086      	sub	sp, #24
    2658:	af00      	add	r7, sp, #0
    265a:	60f8      	str	r0, [r7, #12]
    265c:	60b9      	str	r1, [r7, #8]
    265e:	4613      	mov	r3, r2
    2660:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    2662:	79fb      	ldrb	r3, [r7, #7]
    2664:	2b03      	cmp	r3, #3
    2666:	d016      	beq.n	2696 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2668:	2b03      	cmp	r3, #3
    266a:	dc19      	bgt.n	26a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    266c:	2b01      	cmp	r3, #1
    266e:	d002      	beq.n	2676 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    2670:	2b02      	cmp	r3, #2
    2672:	d00a      	beq.n	268a <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    2674:	e014      	b.n	26a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    2676:	68b8      	ldr	r0, [r7, #8]
    2678:	f000 f9bd 	bl	29f6 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    267c:	4604      	mov	r4, r0
    267e:	68f8      	ldr	r0, [r7, #12]
    2680:	f000 f9c9 	bl	2a16 <void (**&std::_Any_data::_M_access<void (**)()>())()>
    2684:	4603      	mov	r3, r0
    2686:	601c      	str	r4, [r3, #0]
	      break;
    2688:	e00a      	b.n	26a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    268a:	462a      	mov	r2, r5
    268c:	68b9      	ldr	r1, [r7, #8]
    268e:	68f8      	ldr	r0, [r7, #12]
    2690:	f000 f9cd 	bl	2a2e <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    2694:	e004      	b.n	26a0 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    2696:	4621      	mov	r1, r4
    2698:	68f8      	ldr	r0, [r7, #12]
    269a:	f000 f9e1 	bl	2a60 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    269e:	bf00      	nop
	  return false;
    26a0:	2300      	movs	r3, #0
	}
    26a2:	4618      	mov	r0, r3
    26a4:	3718      	adds	r7, #24
    26a6:	46bd      	mov	sp, r7
    26a8:	bdb0      	pop	{r4, r5, r7, pc}

000026aa <std::function<void ()>::function(std::function<void ()> const&)>:
    function<_Res(_ArgTypes...)>::
    26aa:	b580      	push	{r7, lr}
    26ac:	b082      	sub	sp, #8
    26ae:	af00      	add	r7, sp, #0
    26b0:	6078      	str	r0, [r7, #4]
    26b2:	6039      	str	r1, [r7, #0]
    : _Function_base()
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	4618      	mov	r0, r3
    26b8:	f7fd fe7a 	bl	3b0 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    26bc:	6838      	ldr	r0, [r7, #0]
    26be:	f000 f9db 	bl	2a78 <std::function<void ()>::operator bool() const>
    26c2:	4603      	mov	r3, r0
    26c4:	2b00      	cmp	r3, #0
    26c6:	d00d      	beq.n	26e4 <std::function<void ()>::function(std::function<void ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    26c8:	683b      	ldr	r3, [r7, #0]
    26ca:	689b      	ldr	r3, [r3, #8]
    26cc:	6878      	ldr	r0, [r7, #4]
    26ce:	6839      	ldr	r1, [r7, #0]
    26d0:	2202      	movs	r2, #2
    26d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    26d4:	683b      	ldr	r3, [r7, #0]
    26d6:	68da      	ldr	r2, [r3, #12]
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    26dc:	683b      	ldr	r3, [r7, #0]
    26de:	689a      	ldr	r2, [r3, #8]
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	609a      	str	r2, [r3, #8]
    }
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	4618      	mov	r0, r3
    26e8:	3708      	adds	r7, #8
    26ea:	46bd      	mov	sp, r7
    26ec:	bd80      	pop	{r7, pc}

000026ee <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    26ee:	b580      	push	{r7, lr}
    26f0:	b082      	sub	sp, #8
    26f2:	af00      	add	r7, sp, #0
    26f4:	6078      	str	r0, [r7, #4]
    26f6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	683a      	ldr	r2, [r7, #0]
    26fc:	4611      	mov	r1, r2
    26fe:	4618      	mov	r0, r3
    2700:	f000 f90f 	bl	2922 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	f103 0208 	add.w	r2, r3, #8
    270a:	683b      	ldr	r3, [r7, #0]
    270c:	3308      	adds	r3, #8
    270e:	4619      	mov	r1, r3
    2710:	4610      	mov	r0, r2
    2712:	f000 f938 	bl	2986 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	f103 020c 	add.w	r2, r3, #12
    271c:	683b      	ldr	r3, [r7, #0]
    271e:	330c      	adds	r3, #12
    2720:	4619      	mov	r1, r3
    2722:	4610      	mov	r0, r2
    2724:	f000 f9c3 	bl	2aae <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    2728:	bf00      	nop
    272a:	3708      	adds	r7, #8
    272c:	46bd      	mov	sp, r7
    272e:	bd80      	pop	{r7, pc}

00002730 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2730:	b580      	push	{r7, lr}
    2732:	b086      	sub	sp, #24
    2734:	af00      	add	r7, sp, #0
    2736:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2738:	6878      	ldr	r0, [r7, #4]
    273a:	f000 f9d7 	bl	2aec <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    273e:	eef0 7a40 	vmov.f32	s15, s0
	}
    2742:	eeb0 0a67 	vmov.f32	s0, s15
    2746:	3718      	adds	r7, #24
    2748:	46bd      	mov	sp, r7
    274a:	bd80      	pop	{r7, pc}

0000274c <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    274c:	b480      	push	{r7}
    274e:	b089      	sub	sp, #36	; 0x24
    2750:	af00      	add	r7, sp, #0
    2752:	60f8      	str	r0, [r7, #12]
    2754:	60b9      	str	r1, [r7, #8]
    2756:	607a      	str	r2, [r7, #4]
    2758:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    275e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2760:	2320      	movs	r3, #32
    2762:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2764:	683b      	ldr	r3, [r7, #0]
    2766:	f1c3 0320 	rsb	r3, r3, #32
    276a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    276e:	fa22 f303 	lsr.w	r3, r2, r3
    2772:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2774:	697a      	ldr	r2, [r7, #20]
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	fa02 f303 	lsl.w	r3, r2, r3
    277c:	43db      	mvns	r3, r3
    277e:	68fa      	ldr	r2, [r7, #12]
    2780:	4013      	ands	r3, r2
    2782:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    2784:	68ba      	ldr	r2, [r7, #8]
    2786:	697b      	ldr	r3, [r7, #20]
    2788:	401a      	ands	r2, r3
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	fa02 f303 	lsl.w	r3, r2, r3
    2790:	68fa      	ldr	r2, [r7, #12]
    2792:	4313      	orrs	r3, r2
    2794:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    2796:	68fb      	ldr	r3, [r7, #12]
}
    2798:	4618      	mov	r0, r3
    279a:	3724      	adds	r7, #36	; 0x24
    279c:	46bd      	mov	sp, r7
    279e:	f85d 7b04 	ldr.w	r7, [sp], #4
    27a2:	4770      	bx	lr

000027a4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    27a4:	b480      	push	{r7}
    27a6:	b083      	sub	sp, #12
    27a8:	af00      	add	r7, sp, #0
    27aa:	6078      	str	r0, [r7, #4]
    27ac:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    27ae:	683b      	ldr	r3, [r7, #0]
    27b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    27b4:	6879      	ldr	r1, [r7, #4]
    27b6:	e9c1 2300 	strd	r2, r3, [r1]
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	4618      	mov	r0, r3
    27be:	370c      	adds	r7, #12
    27c0:	46bd      	mov	sp, r7
    27c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c6:	4770      	bx	lr

000027c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    27c8:	b480      	push	{r7}
    27ca:	b083      	sub	sp, #12
    27cc:	af00      	add	r7, sp, #0
    27ce:	6078      	str	r0, [r7, #4]
	{ return __r; }
    27d0:	687b      	ldr	r3, [r7, #4]
    27d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    27d6:	4610      	mov	r0, r2
    27d8:	4619      	mov	r1, r3
    27da:	370c      	adds	r7, #12
    27dc:	46bd      	mov	sp, r7
    27de:	f85d 7b04 	ldr.w	r7, [sp], #4
    27e2:	4770      	bx	lr

000027e4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    27e4:	b5b0      	push	{r4, r5, r7, lr}
    27e6:	b084      	sub	sp, #16
    27e8:	af00      	add	r7, sp, #0
    27ea:	6078      	str	r0, [r7, #4]
    27ec:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    27ee:	6838      	ldr	r0, [r7, #0]
    27f0:	f7ff ffea 	bl	27c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    27f4:	4602      	mov	r2, r0
    27f6:	460b      	mov	r3, r1
    27f8:	f04f 0400 	mov.w	r4, #0
    27fc:	f04f 0500 	mov.w	r5, #0
    2800:	015d      	lsls	r5, r3, #5
    2802:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    2806:	0154      	lsls	r4, r2, #5
    2808:	4622      	mov	r2, r4
    280a:	462b      	mov	r3, r5
    280c:	1a12      	subs	r2, r2, r0
    280e:	eb63 0301 	sbc.w	r3, r3, r1
    2812:	f04f 0400 	mov.w	r4, #0
    2816:	f04f 0500 	mov.w	r5, #0
    281a:	009d      	lsls	r5, r3, #2
    281c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    2820:	0094      	lsls	r4, r2, #2
    2822:	4622      	mov	r2, r4
    2824:	462b      	mov	r3, r5
    2826:	1812      	adds	r2, r2, r0
    2828:	eb41 0303 	adc.w	r3, r1, r3
    282c:	f04f 0000 	mov.w	r0, #0
    2830:	f04f 0100 	mov.w	r1, #0
    2834:	00d9      	lsls	r1, r3, #3
    2836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
    283a:	00d0      	lsls	r0, r2, #3
    283c:	4602      	mov	r2, r0
    283e:	460b      	mov	r3, r1
    2840:	e9c7 2302 	strd	r2, r3, [r7, #8]
    2844:	f107 0308 	add.w	r3, r7, #8
    2848:	4619      	mov	r1, r3
    284a:	6878      	ldr	r0, [r7, #4]
    284c:	f7fd ff18 	bl	680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    2850:	6878      	ldr	r0, [r7, #4]
    2852:	3710      	adds	r7, #16
    2854:	46bd      	mov	sp, r7
    2856:	bdb0      	pop	{r4, r5, r7, pc}

00002858 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2858:	b590      	push	{r4, r7, lr}
    285a:	b085      	sub	sp, #20
    285c:	af00      	add	r7, sp, #0
    285e:	60f8      	str	r0, [r7, #12]
    2860:	60b9      	str	r1, [r7, #8]
    2862:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2864:	68b8      	ldr	r0, [r7, #8]
    2866:	f7ff fe33 	bl	24d0 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    286a:	4603      	mov	r3, r0
    286c:	681c      	ldr	r4, [r3, #0]
    286e:	68f8      	ldr	r0, [r7, #12]
    2870:	f7fd fd88 	bl	384 <std::_Any_data::_M_access()>
    2874:	4603      	mov	r3, r0
    2876:	4619      	mov	r1, r3
    2878:	2004      	movs	r0, #4
    287a:	f7fd fd77 	bl	36c <operator new(unsigned int, void*)>
    287e:	4603      	mov	r3, r0
    2880:	601c      	str	r4, [r3, #0]
    2882:	bf00      	nop
    2884:	3714      	adds	r7, #20
    2886:	46bd      	mov	sp, r7
    2888:	bd90      	pop	{r4, r7, pc}

0000288a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    288a:	b580      	push	{r7, lr}
    288c:	b084      	sub	sp, #16
    288e:	af00      	add	r7, sp, #0
    2890:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2892:	6878      	ldr	r0, [r7, #4]
    2894:	f000 f93c 	bl	2b10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2898:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    289a:	68f8      	ldr	r0, [r7, #12]
    289c:	f000 f944 	bl	2b28 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>
    28a0:	4603      	mov	r3, r0
	}
    28a2:	4618      	mov	r0, r3
    28a4:	3710      	adds	r7, #16
    28a6:	46bd      	mov	sp, r7
    28a8:	bd80      	pop	{r7, pc}

000028aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>:
      _M_access()
    28aa:	b580      	push	{r7, lr}
    28ac:	b082      	sub	sp, #8
    28ae:	af00      	add	r7, sp, #0
    28b0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    28b2:	6878      	ldr	r0, [r7, #4]
    28b4:	f7fd fd66 	bl	384 <std::_Any_data::_M_access()>
    28b8:	4603      	mov	r3, r0
    28ba:	4618      	mov	r0, r3
    28bc:	3708      	adds	r7, #8
    28be:	46bd      	mov	sp, r7
    28c0:	bd80      	pop	{r7, pc}

000028c2 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    28c2:	b590      	push	{r4, r7, lr}
    28c4:	b085      	sub	sp, #20
    28c6:	af00      	add	r7, sp, #0
    28c8:	60f8      	str	r0, [r7, #12]
    28ca:	60b9      	str	r1, [r7, #8]
    28cc:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    28ce:	68b8      	ldr	r0, [r7, #8]
    28d0:	f000 f91e 	bl	2b10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    28d4:	4603      	mov	r3, r0
    28d6:	681c      	ldr	r4, [r3, #0]
    28d8:	68f8      	ldr	r0, [r7, #12]
    28da:	f7fd fd53 	bl	384 <std::_Any_data::_M_access()>
    28de:	4603      	mov	r3, r0
    28e0:	4619      	mov	r1, r3
    28e2:	2004      	movs	r0, #4
    28e4:	f7fd fd42 	bl	36c <operator new(unsigned int, void*)>
    28e8:	4603      	mov	r3, r0
    28ea:	601c      	str	r4, [r3, #0]
	}
    28ec:	bf00      	nop
    28ee:	3714      	adds	r7, #20
    28f0:	46bd      	mov	sp, r7
    28f2:	bd90      	pop	{r4, r7, pc}

000028f4 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    28f4:	b580      	push	{r7, lr}
    28f6:	b082      	sub	sp, #8
    28f8:	af00      	add	r7, sp, #0
    28fa:	6078      	str	r0, [r7, #4]
    28fc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    28fe:	6878      	ldr	r0, [r7, #4]
    2900:	f000 f91d 	bl	2b3e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>
	}
    2904:	bf00      	nop
    2906:	3708      	adds	r7, #8
    2908:	46bd      	mov	sp, r7
    290a:	bd80      	pop	{r7, pc}

0000290c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    290c:	b480      	push	{r7}
    290e:	b083      	sub	sp, #12
    2910:	af00      	add	r7, sp, #0
    2912:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	4618      	mov	r0, r3
    2918:	370c      	adds	r7, #12
    291a:	46bd      	mov	sp, r7
    291c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2920:	4770      	bx	lr

00002922 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    2922:	b580      	push	{r7, lr}
    2924:	b084      	sub	sp, #16
    2926:	af00      	add	r7, sp, #0
    2928:	6078      	str	r0, [r7, #4]
    292a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    292c:	6878      	ldr	r0, [r7, #4]
    292e:	f7ff ffed 	bl	290c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2932:	4602      	mov	r2, r0
    2934:	f107 0308 	add.w	r3, r7, #8
    2938:	e892 0003 	ldmia.w	r2, {r0, r1}
    293c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2940:	6838      	ldr	r0, [r7, #0]
    2942:	f7ff ffe3 	bl	290c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2946:	4602      	mov	r2, r0
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	e892 0003 	ldmia.w	r2, {r0, r1}
    294e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2952:	f107 0308 	add.w	r3, r7, #8
    2956:	4618      	mov	r0, r3
    2958:	f7ff ffd8 	bl	290c <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    295c:	4602      	mov	r2, r0
    295e:	683b      	ldr	r3, [r7, #0]
    2960:	e892 0003 	ldmia.w	r2, {r0, r1}
    2964:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    2968:	bf00      	nop
    296a:	3710      	adds	r7, #16
    296c:	46bd      	mov	sp, r7
    296e:	bd80      	pop	{r7, pc}

00002970 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    2970:	b480      	push	{r7}
    2972:	b083      	sub	sp, #12
    2974:	af00      	add	r7, sp, #0
    2976:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	4618      	mov	r0, r3
    297c:	370c      	adds	r7, #12
    297e:	46bd      	mov	sp, r7
    2980:	f85d 7b04 	ldr.w	r7, [sp], #4
    2984:	4770      	bx	lr

00002986 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    2986:	b580      	push	{r7, lr}
    2988:	b084      	sub	sp, #16
    298a:	af00      	add	r7, sp, #0
    298c:	6078      	str	r0, [r7, #4]
    298e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2990:	6878      	ldr	r0, [r7, #4]
    2992:	f7ff ffed 	bl	2970 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2996:	4603      	mov	r3, r0
    2998:	681b      	ldr	r3, [r3, #0]
    299a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    299c:	6838      	ldr	r0, [r7, #0]
    299e:	f7ff ffe7 	bl	2970 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    29a2:	4603      	mov	r3, r0
    29a4:	681a      	ldr	r2, [r3, #0]
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    29aa:	f107 030c 	add.w	r3, r7, #12
    29ae:	4618      	mov	r0, r3
    29b0:	f7ff ffde 	bl	2970 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    29b4:	4603      	mov	r3, r0
    29b6:	681a      	ldr	r2, [r3, #0]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	601a      	str	r2, [r3, #0]
    }
    29bc:	bf00      	nop
    29be:	3710      	adds	r7, #16
    29c0:	46bd      	mov	sp, r7
    29c2:	bd80      	pop	{r7, pc}

000029c4 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    29c4:	b590      	push	{r4, r7, lr}
    29c6:	b085      	sub	sp, #20
    29c8:	af00      	add	r7, sp, #0
    29ca:	60f8      	str	r0, [r7, #12]
    29cc:	60b9      	str	r1, [r7, #8]
    29ce:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    29d0:	68b8      	ldr	r0, [r7, #8]
    29d2:	f7ff fe14 	bl	25fe <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    29d6:	4603      	mov	r3, r0
    29d8:	681c      	ldr	r4, [r3, #0]
    29da:	68f8      	ldr	r0, [r7, #12]
    29dc:	f7fd fcd2 	bl	384 <std::_Any_data::_M_access()>
    29e0:	4603      	mov	r3, r0
    29e2:	4619      	mov	r1, r3
    29e4:	2004      	movs	r0, #4
    29e6:	f7fd fcc1 	bl	36c <operator new(unsigned int, void*)>
    29ea:	4603      	mov	r3, r0
    29ec:	601c      	str	r4, [r3, #0]
    29ee:	bf00      	nop
    29f0:	3714      	adds	r7, #20
    29f2:	46bd      	mov	sp, r7
    29f4:	bd90      	pop	{r4, r7, pc}

000029f6 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    29f6:	b580      	push	{r7, lr}
    29f8:	b084      	sub	sp, #16
    29fa:	af00      	add	r7, sp, #0
    29fc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    29fe:	6878      	ldr	r0, [r7, #4]
    2a00:	f000 f8a9 	bl	2b56 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2a04:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2a06:	68f8      	ldr	r0, [r7, #12]
    2a08:	f000 f8b1 	bl	2b6e <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    2a0c:	4603      	mov	r3, r0
	}
    2a0e:	4618      	mov	r0, r3
    2a10:	3710      	adds	r7, #16
    2a12:	46bd      	mov	sp, r7
    2a14:	bd80      	pop	{r7, pc}

00002a16 <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    2a16:	b580      	push	{r7, lr}
    2a18:	b082      	sub	sp, #8
    2a1a:	af00      	add	r7, sp, #0
    2a1c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2a1e:	6878      	ldr	r0, [r7, #4]
    2a20:	f7fd fcb0 	bl	384 <std::_Any_data::_M_access()>
    2a24:	4603      	mov	r3, r0
    2a26:	4618      	mov	r0, r3
    2a28:	3708      	adds	r7, #8
    2a2a:	46bd      	mov	sp, r7
    2a2c:	bd80      	pop	{r7, pc}

00002a2e <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2a2e:	b590      	push	{r4, r7, lr}
    2a30:	b085      	sub	sp, #20
    2a32:	af00      	add	r7, sp, #0
    2a34:	60f8      	str	r0, [r7, #12]
    2a36:	60b9      	str	r1, [r7, #8]
    2a38:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2a3a:	68b8      	ldr	r0, [r7, #8]
    2a3c:	f000 f88b 	bl	2b56 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2a40:	4603      	mov	r3, r0
    2a42:	681c      	ldr	r4, [r3, #0]
    2a44:	68f8      	ldr	r0, [r7, #12]
    2a46:	f7fd fc9d 	bl	384 <std::_Any_data::_M_access()>
    2a4a:	4603      	mov	r3, r0
    2a4c:	4619      	mov	r1, r3
    2a4e:	2004      	movs	r0, #4
    2a50:	f7fd fc8c 	bl	36c <operator new(unsigned int, void*)>
    2a54:	4603      	mov	r3, r0
    2a56:	601c      	str	r4, [r3, #0]
	}
    2a58:	bf00      	nop
    2a5a:	3714      	adds	r7, #20
    2a5c:	46bd      	mov	sp, r7
    2a5e:	bd90      	pop	{r4, r7, pc}

00002a60 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2a60:	b580      	push	{r7, lr}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
    2a66:	6078      	str	r0, [r7, #4]
    2a68:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2a6a:	6878      	ldr	r0, [r7, #4]
    2a6c:	f000 f88a 	bl	2b84 <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    2a70:	bf00      	nop
    2a72:	3708      	adds	r7, #8
    2a74:	46bd      	mov	sp, r7
    2a76:	bd80      	pop	{r7, pc}

00002a78 <std::function<void ()>::operator bool() const>:
      explicit operator bool() const noexcept
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	4618      	mov	r0, r3
    2a84:	f7fd fcb5 	bl	3f2 <std::_Function_base::_M_empty() const>
    2a88:	4603      	mov	r3, r0
    2a8a:	f083 0301 	eor.w	r3, r3, #1
    2a8e:	b2db      	uxtb	r3, r3
    2a90:	4618      	mov	r0, r3
    2a92:	3708      	adds	r7, #8
    2a94:	46bd      	mov	sp, r7
    2a96:	bd80      	pop	{r7, pc}

00002a98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    2a98:	b480      	push	{r7}
    2a9a:	b083      	sub	sp, #12
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	4618      	mov	r0, r3
    2aa4:	370c      	adds	r7, #12
    2aa6:	46bd      	mov	sp, r7
    2aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aac:	4770      	bx	lr

00002aae <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    2aae:	b580      	push	{r7, lr}
    2ab0:	b084      	sub	sp, #16
    2ab2:	af00      	add	r7, sp, #0
    2ab4:	6078      	str	r0, [r7, #4]
    2ab6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2ab8:	6878      	ldr	r0, [r7, #4]
    2aba:	f7ff ffed 	bl	2a98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2abe:	4603      	mov	r3, r0
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    2ac4:	6838      	ldr	r0, [r7, #0]
    2ac6:	f7ff ffe7 	bl	2a98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2aca:	4603      	mov	r3, r0
    2acc:	681a      	ldr	r2, [r3, #0]
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2ad2:	f107 030c 	add.w	r3, r7, #12
    2ad6:	4618      	mov	r0, r3
    2ad8:	f7ff ffde 	bl	2a98 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2adc:	4603      	mov	r3, r0
    2ade:	681a      	ldr	r2, [r3, #0]
    2ae0:	683b      	ldr	r3, [r7, #0]
    2ae2:	601a      	str	r2, [r3, #0]
    }
    2ae4:	bf00      	nop
    2ae6:	3710      	adds	r7, #16
    2ae8:	46bd      	mov	sp, r7
    2aea:	bd80      	pop	{r7, pc}

00002aec <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2aec:	b480      	push	{r7}
    2aee:	b085      	sub	sp, #20
    2af0:	af00      	add	r7, sp, #0
    2af2:	60f8      	str	r0, [r7, #12]
    2af4:	7239      	strb	r1, [r7, #8]
    2af6:	713a      	strb	r2, [r7, #4]
    2af8:	703b      	strb	r3, [r7, #0]
			return value;
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	681b      	ldr	r3, [r3, #0]
    2afe:	ee07 3a90 	vmov	s15, r3
		}
    2b02:	eeb0 0a67 	vmov.f32	s0, s15
    2b06:	3714      	adds	r7, #20
    2b08:	46bd      	mov	sp, r7
    2b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b0e:	4770      	bx	lr

00002b10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>:
      _M_access() const
    2b10:	b580      	push	{r7, lr}
    2b12:	b082      	sub	sp, #8
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2b18:	6878      	ldr	r0, [r7, #4]
    2b1a:	f7fd fc3e 	bl	39a <std::_Any_data::_M_access() const>
    2b1e:	4603      	mov	r3, r0
    2b20:	4618      	mov	r0, r3
    2b22:	3708      	adds	r7, #8
    2b24:	46bd      	mov	sp, r7
    2b26:	bd80      	pop	{r7, pc}

00002b28 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2b28:	b480      	push	{r7}
    2b2a:	b083      	sub	sp, #12
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	4618      	mov	r0, r3
    2b34:	370c      	adds	r7, #12
    2b36:	46bd      	mov	sp, r7
    2b38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b3c:	4770      	bx	lr

00002b3e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>:
      _M_access()
    2b3e:	b580      	push	{r7, lr}
    2b40:	b082      	sub	sp, #8
    2b42:	af00      	add	r7, sp, #0
    2b44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2b46:	6878      	ldr	r0, [r7, #4]
    2b48:	f7fd fc1c 	bl	384 <std::_Any_data::_M_access()>
    2b4c:	4603      	mov	r3, r0
    2b4e:	4618      	mov	r0, r3
    2b50:	3708      	adds	r7, #8
    2b52:	46bd      	mov	sp, r7
    2b54:	bd80      	pop	{r7, pc}

00002b56 <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    2b56:	b580      	push	{r7, lr}
    2b58:	b082      	sub	sp, #8
    2b5a:	af00      	add	r7, sp, #0
    2b5c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2b5e:	6878      	ldr	r0, [r7, #4]
    2b60:	f7fd fc1b 	bl	39a <std::_Any_data::_M_access() const>
    2b64:	4603      	mov	r3, r0
    2b66:	4618      	mov	r0, r3
    2b68:	3708      	adds	r7, #8
    2b6a:	46bd      	mov	sp, r7
    2b6c:	bd80      	pop	{r7, pc}

00002b6e <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2b6e:	b480      	push	{r7}
    2b70:	b083      	sub	sp, #12
    2b72:	af00      	add	r7, sp, #0
    2b74:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	4618      	mov	r0, r3
    2b7a:	370c      	adds	r7, #12
    2b7c:	46bd      	mov	sp, r7
    2b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b82:	4770      	bx	lr

00002b84 <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    2b84:	b580      	push	{r7, lr}
    2b86:	b082      	sub	sp, #8
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2b8c:	6878      	ldr	r0, [r7, #4]
    2b8e:	f7fd fbf9 	bl	384 <std::_Any_data::_M_access()>
    2b92:	4603      	mov	r3, r0
    2b94:	4618      	mov	r0, r3
    2b96:	3708      	adds	r7, #8
    2b98:	46bd      	mov	sp, r7
    2b9a:	bd80      	pop	{r7, pc}

00002b9c <__tcf_0>:
  inline static InterruptCallback handlers[kInterruptPorts][kPinCount];
    2b9c:	b590      	push	{r4, r7, lr}
    2b9e:	b083      	sub	sp, #12
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    2ba4:	4c05      	ldr	r4, [pc, #20]	; (2bbc <__tcf_0+0x20>)
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <__tcf_0+0x24>)
    2ba8:	429c      	cmp	r4, r3
    2baa:	d004      	beq.n	2bb6 <__tcf_0+0x1a>
    2bac:	3c10      	subs	r4, #16
    2bae:	4620      	mov	r0, r4
    2bb0:	f7fe f8ff 	bl	db2 <std::function<void ()>::~function()>
    2bb4:	e7f7      	b.n	2ba6 <__tcf_0+0xa>
    2bb6:	370c      	adds	r7, #12
    2bb8:	46bd      	mov	sp, r7
    2bba:	bd90      	pop	{r4, r7, pc}
    2bbc:	1000114c 	.word	0x1000114c
    2bc0:	10000d4c 	.word	0x10000d4c

00002bc4 <__static_initialization_and_destruction_0(int, int)>:
    2bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bc8:	b082      	sub	sp, #8
    2bca:	af00      	add	r7, sp, #0
    2bcc:	6078      	str	r0, [r7, #4]
    2bce:	6039      	str	r1, [r7, #0]
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	2b01      	cmp	r3, #1
    2bd4:	f040 80fc 	bne.w	2dd0 <__static_initialization_and_destruction_0(int, int)+0x20c>
    2bd8:	683b      	ldr	r3, [r7, #0]
    2bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2bde:	4293      	cmp	r3, r2
    2be0:	f040 80f6 	bne.w	2dd0 <__static_initialization_and_destruction_0(int, int)+0x20c>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    2be4:	4b7d      	ldr	r3, [pc, #500]	; (2ddc <__static_initialization_and_destruction_0(int, int)+0x218>)
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	f003 0301 	and.w	r3, r3, #1
    2bec:	2b00      	cmp	r3, #0
    2bee:	d105      	bne.n	2bfc <__static_initialization_and_destruction_0(int, int)+0x38>
    2bf0:	4b7a      	ldr	r3, [pc, #488]	; (2ddc <__static_initialization_and_destruction_0(int, int)+0x218>)
    2bf2:	2201      	movs	r2, #1
    2bf4:	601a      	str	r2, [r3, #0]
    2bf6:	4a7a      	ldr	r2, [pc, #488]	; (2de0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2bf8:	4b7a      	ldr	r3, [pc, #488]	; (2de4 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2bfa:	601a      	str	r2, [r3, #0]

/// Global Uptime function, preset to DefaultUptime() for testing purposes.
/// In general, this function is overwritten by
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    2bfc:	4b7a      	ldr	r3, [pc, #488]	; (2de8 <__static_initialization_and_destruction_0(int, int)+0x224>)
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	f003 0301 	and.w	r3, r3, #1
    2c04:	2b00      	cmp	r3, #0
    2c06:	d10b      	bne.n	2c20 <__static_initialization_and_destruction_0(int, int)+0x5c>
    2c08:	4b77      	ldr	r3, [pc, #476]	; (2de8 <__static_initialization_and_destruction_0(int, int)+0x224>)
    2c0a:	2201      	movs	r2, #1
    2c0c:	601a      	str	r2, [r3, #0]
    2c0e:	4977      	ldr	r1, [pc, #476]	; (2dec <__static_initialization_and_destruction_0(int, int)+0x228>)
    2c10:	4877      	ldr	r0, [pc, #476]	; (2df0 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2c12:	f7ff fa85 	bl	2120 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2c16:	4a77      	ldr	r2, [pc, #476]	; (2df4 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2c18:	4977      	ldr	r1, [pc, #476]	; (2df8 <__static_initialization_and_destruction_0(int, int)+0x234>)
    2c1a:	4875      	ldr	r0, [pc, #468]	; (2df0 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2c1c:	f003 feac 	bl	6978 <__aeabi_atexit>
  inline static volatile PinTable_t * function_map =
    2c20:	4b76      	ldr	r3, [pc, #472]	; (2dfc <__static_initialization_and_destruction_0(int, int)+0x238>)
    2c22:	681b      	ldr	r3, [r3, #0]
    2c24:	f003 0301 	and.w	r3, r3, #1
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d106      	bne.n	2c3a <__static_initialization_and_destruction_0(int, int)+0x76>
    2c2c:	4b73      	ldr	r3, [pc, #460]	; (2dfc <__static_initialization_and_destruction_0(int, int)+0x238>)
    2c2e:	2201      	movs	r2, #1
    2c30:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    2c32:	4b6b      	ldr	r3, [pc, #428]	; (2de0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2c34:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    2c36:	4b72      	ldr	r3, [pc, #456]	; (2e00 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    2c38:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    2c3a:	4b72      	ldr	r3, [pc, #456]	; (2e04 <__static_initialization_and_destruction_0(int, int)+0x240>)
    2c3c:	681b      	ldr	r3, [r3, #0]
    2c3e:	f003 0301 	and.w	r3, r3, #1
    2c42:	2b00      	cmp	r3, #0
    2c44:	d106      	bne.n	2c54 <__static_initialization_and_destruction_0(int, int)+0x90>
    2c46:	4b6f      	ldr	r3, [pc, #444]	; (2e04 <__static_initialization_and_destruction_0(int, int)+0x240>)
    2c48:	2201      	movs	r2, #1
    2c4a:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    2c4c:	4b64      	ldr	r3, [pc, #400]	; (2de0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2c4e:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    2c50:	4a6d      	ldr	r2, [pc, #436]	; (2e08 <__static_initialization_and_destruction_0(int, int)+0x244>)
    2c52:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    2c54:	4b6d      	ldr	r3, [pc, #436]	; (2e0c <__static_initialization_and_destruction_0(int, int)+0x248>)
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	f003 0301 	and.w	r3, r3, #1
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d106      	bne.n	2c6e <__static_initialization_and_destruction_0(int, int)+0xaa>
    2c60:	4b6a      	ldr	r3, [pc, #424]	; (2e0c <__static_initialization_and_destruction_0(int, int)+0x248>)
    2c62:	2201      	movs	r2, #1
    2c64:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    2c66:	4b5e      	ldr	r3, [pc, #376]	; (2de0 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2c68:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    2c6a:	4a69      	ldr	r2, [pc, #420]	; (2e10 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    2c6c:	6013      	str	r3, [r2, #0]
    2c6e:	4b69      	ldr	r3, [pc, #420]	; (2e14 <__static_initialization_and_destruction_0(int, int)+0x250>)
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	f003 0301 	and.w	r3, r3, #1
    2c76:	2b00      	cmp	r3, #0
    2c78:	d11a      	bne.n	2cb0 <__static_initialization_and_destruction_0(int, int)+0xec>
    2c7a:	4b66      	ldr	r3, [pc, #408]	; (2e14 <__static_initialization_and_destruction_0(int, int)+0x250>)
    2c7c:	2201      	movs	r2, #1
    2c7e:	601a      	str	r2, [r3, #0]
    2c80:	4b65      	ldr	r3, [pc, #404]	; (2e18 <__static_initialization_and_destruction_0(int, int)+0x254>)
    2c82:	2401      	movs	r4, #1
    2c84:	4698      	mov	r8, r3
    2c86:	2c00      	cmp	r4, #0
    2c88:	db0d      	blt.n	2ca6 <__static_initialization_and_destruction_0(int, int)+0xe2>
    2c8a:	4646      	mov	r6, r8
    2c8c:	251f      	movs	r5, #31
    2c8e:	2d00      	cmp	r5, #0
    2c90:	db05      	blt.n	2c9e <__static_initialization_and_destruction_0(int, int)+0xda>
    2c92:	4630      	mov	r0, r6
    2c94:	f7ff fa81 	bl	219a <std::function<void ()>::function()>
    2c98:	3610      	adds	r6, #16
    2c9a:	3d01      	subs	r5, #1
    2c9c:	e7f7      	b.n	2c8e <__static_initialization_and_destruction_0(int, int)+0xca>
    2c9e:	f508 7800 	add.w	r8, r8, #512	; 0x200
    2ca2:	3c01      	subs	r4, #1
    2ca4:	e7ef      	b.n	2c86 <__static_initialization_and_destruction_0(int, int)+0xc2>
    2ca6:	4a53      	ldr	r2, [pc, #332]	; (2df4 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2ca8:	495c      	ldr	r1, [pc, #368]	; (2e1c <__static_initialization_and_destruction_0(int, int)+0x258>)
    2caa:	2000      	movs	r0, #0
    2cac:	f003 fe64 	bl	6978 <__aeabi_atexit>
  {
    static constexpr bit::Mask kDivider = bit::CreateMaskFromRange(0, 4);
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    2cb0:	4b5b      	ldr	r3, [pc, #364]	; (2e20 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	f003 0301 	and.w	r3, r3, #1
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d105      	bne.n	2cc8 <__static_initialization_and_destruction_0(int, int)+0x104>
    2cbc:	4b58      	ldr	r3, [pc, #352]	; (2e20 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    2cbe:	2201      	movs	r2, #1
    2cc0:	601a      	str	r2, [r3, #0]
    2cc2:	4a58      	ldr	r2, [pc, #352]	; (2e24 <__static_initialization_and_destruction_0(int, int)+0x260>)
    2cc4:	4b58      	ldr	r3, [pc, #352]	; (2e28 <__static_initialization_and_destruction_0(int, int)+0x264>)
    2cc6:	601a      	str	r2, [r3, #0]
    inline static Transaction_t transaction_i2c2;

   public:
    // UM10562: Chapter 7: LPC408x/407x I/O configuration page 133
    /// Definition for I2C bus 0 for LPC40xx.
    inline static const Bus_t kI2c0 = {
    2cc8:	4b58      	ldr	r3, [pc, #352]	; (2e2c <__static_initialization_and_destruction_0(int, int)+0x268>)
    2cca:	681b      	ldr	r3, [r3, #0]
    2ccc:	f003 0301 	and.w	r3, r3, #1
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d105      	bne.n	2ce0 <__static_initialization_and_destruction_0(int, int)+0x11c>
    2cd4:	4b55      	ldr	r3, [pc, #340]	; (2e2c <__static_initialization_and_destruction_0(int, int)+0x268>)
    2cd6:	2201      	movs	r2, #1
    2cd8:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C0_IRQn,
      .transaction     = transaction_i2c0,
      .sda_pin         = kI2c0SdaPin,
      .scl_pin         = kI2c0SclPin,
      .pin_function_id = 0b010,
    };
    2cda:	4a55      	ldr	r2, [pc, #340]	; (2e30 <__static_initialization_and_destruction_0(int, int)+0x26c>)
    2cdc:	4b55      	ldr	r3, [pc, #340]	; (2e34 <__static_initialization_and_destruction_0(int, int)+0x270>)
    2cde:	601a      	str	r2, [r3, #0]

    /// Definition for I2C bus 1 for LPC40xx.
    inline static const Bus_t kI2c1 = {
    2ce0:	4b55      	ldr	r3, [pc, #340]	; (2e38 <__static_initialization_and_destruction_0(int, int)+0x274>)
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	f003 0301 	and.w	r3, r3, #1
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d105      	bne.n	2cf8 <__static_initialization_and_destruction_0(int, int)+0x134>
    2cec:	4b52      	ldr	r3, [pc, #328]	; (2e38 <__static_initialization_and_destruction_0(int, int)+0x274>)
    2cee:	2201      	movs	r2, #1
    2cf0:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C1_IRQn,
      .transaction     = transaction_i2c1,
      .sda_pin         = kI2c1SdaPin,
      .scl_pin         = kI2c1SclPin,
      .pin_function_id = 0b011,
    };
    2cf2:	4a52      	ldr	r2, [pc, #328]	; (2e3c <__static_initialization_and_destruction_0(int, int)+0x278>)
    2cf4:	4b52      	ldr	r3, [pc, #328]	; (2e40 <__static_initialization_and_destruction_0(int, int)+0x27c>)
    2cf6:	601a      	str	r2, [r3, #0]

    /// Definition for I2C bus 2 for LPC40xx.
    inline static const Bus_t kI2c2 = {
    2cf8:	4b52      	ldr	r3, [pc, #328]	; (2e44 <__static_initialization_and_destruction_0(int, int)+0x280>)
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	f003 0301 	and.w	r3, r3, #1
    2d00:	2b00      	cmp	r3, #0
    2d02:	d105      	bne.n	2d10 <__static_initialization_and_destruction_0(int, int)+0x14c>
    2d04:	4b4f      	ldr	r3, [pc, #316]	; (2e44 <__static_initialization_and_destruction_0(int, int)+0x280>)
    2d06:	2201      	movs	r2, #1
    2d08:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C2_IRQn,
      .transaction     = transaction_i2c2,
      .sda_pin         = kI2c2SdaPin,
      .scl_pin         = kI2c2SclPin,
      .pin_function_id = 0b010,
    };
    2d0a:	4a4f      	ldr	r2, [pc, #316]	; (2e48 <__static_initialization_and_destruction_0(int, int)+0x284>)
    2d0c:	4b4f      	ldr	r3, [pc, #316]	; (2e4c <__static_initialization_and_destruction_0(int, int)+0x288>)
    2d0e:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi0 = {
    2d10:	4b4f      	ldr	r3, [pc, #316]	; (2e50 <__static_initialization_and_destruction_0(int, int)+0x28c>)
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	f003 0301 	and.w	r3, r3, #1
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d105      	bne.n	2d28 <__static_initialization_and_destruction_0(int, int)+0x164>
    2d1c:	4b4c      	ldr	r3, [pc, #304]	; (2e50 <__static_initialization_and_destruction_0(int, int)+0x28c>)
    2d1e:	2201      	movs	r2, #1
    2d20:	601a      	str	r2, [r3, #0]
    };
    2d22:	4a4c      	ldr	r2, [pc, #304]	; (2e54 <__static_initialization_and_destruction_0(int, int)+0x290>)
    2d24:	4b4c      	ldr	r3, [pc, #304]	; (2e58 <__static_initialization_and_destruction_0(int, int)+0x294>)
    2d26:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi1 = {
    2d28:	4b4c      	ldr	r3, [pc, #304]	; (2e5c <__static_initialization_and_destruction_0(int, int)+0x298>)
    2d2a:	681b      	ldr	r3, [r3, #0]
    2d2c:	f003 0301 	and.w	r3, r3, #1
    2d30:	2b00      	cmp	r3, #0
    2d32:	d105      	bne.n	2d40 <__static_initialization_and_destruction_0(int, int)+0x17c>
    2d34:	4b49      	ldr	r3, [pc, #292]	; (2e5c <__static_initialization_and_destruction_0(int, int)+0x298>)
    2d36:	2201      	movs	r2, #1
    2d38:	601a      	str	r2, [r3, #0]
    };
    2d3a:	4a49      	ldr	r2, [pc, #292]	; (2e60 <__static_initialization_and_destruction_0(int, int)+0x29c>)
    2d3c:	4b49      	ldr	r3, [pc, #292]	; (2e64 <__static_initialization_and_destruction_0(int, int)+0x2a0>)
    2d3e:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi2 = {
    2d40:	4b49      	ldr	r3, [pc, #292]	; (2e68 <__static_initialization_and_destruction_0(int, int)+0x2a4>)
    2d42:	681b      	ldr	r3, [r3, #0]
    2d44:	f003 0301 	and.w	r3, r3, #1
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d105      	bne.n	2d58 <__static_initialization_and_destruction_0(int, int)+0x194>
    2d4c:	4b46      	ldr	r3, [pc, #280]	; (2e68 <__static_initialization_and_destruction_0(int, int)+0x2a4>)
    2d4e:	2201      	movs	r2, #1
    2d50:	601a      	str	r2, [r3, #0]
    };
    2d52:	4a46      	ldr	r2, [pc, #280]	; (2e6c <__static_initialization_and_destruction_0(int, int)+0x2a8>)
    2d54:	4b46      	ldr	r3, [pc, #280]	; (2e70 <__static_initialization_and_destruction_0(int, int)+0x2ac>)
    2d56:	601a      	str	r2, [r3, #0]
  inline static sjsu::lpc40xx::Gpio led0 = sjsu::lpc40xx::Gpio(2, 3);
    2d58:	4b46      	ldr	r3, [pc, #280]	; (2e74 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	f003 0301 	and.w	r3, r3, #1
    2d60:	2b00      	cmp	r3, #0
    2d62:	d108      	bne.n	2d76 <__static_initialization_and_destruction_0(int, int)+0x1b2>
    2d64:	4b43      	ldr	r3, [pc, #268]	; (2e74 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
    2d66:	2201      	movs	r2, #1
    2d68:	601a      	str	r2, [r3, #0]
    2d6a:	2300      	movs	r3, #0
    2d6c:	2203      	movs	r2, #3
    2d6e:	2102      	movs	r1, #2
    2d70:	4841      	ldr	r0, [pc, #260]	; (2e78 <__static_initialization_and_destruction_0(int, int)+0x2b4>)
    2d72:	f7fd ff3d 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led1 = sjsu::lpc40xx::Gpio(1, 26);
    2d76:	4b41      	ldr	r3, [pc, #260]	; (2e7c <__static_initialization_and_destruction_0(int, int)+0x2b8>)
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	f003 0301 	and.w	r3, r3, #1
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d108      	bne.n	2d94 <__static_initialization_and_destruction_0(int, int)+0x1d0>
    2d82:	4b3e      	ldr	r3, [pc, #248]	; (2e7c <__static_initialization_and_destruction_0(int, int)+0x2b8>)
    2d84:	2201      	movs	r2, #1
    2d86:	601a      	str	r2, [r3, #0]
    2d88:	2300      	movs	r3, #0
    2d8a:	221a      	movs	r2, #26
    2d8c:	2101      	movs	r1, #1
    2d8e:	483c      	ldr	r0, [pc, #240]	; (2e80 <__static_initialization_and_destruction_0(int, int)+0x2bc>)
    2d90:	f7fd ff2e 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led2 = sjsu::lpc40xx::Gpio(1, 24);
    2d94:	4b3b      	ldr	r3, [pc, #236]	; (2e84 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    2d96:	681b      	ldr	r3, [r3, #0]
    2d98:	f003 0301 	and.w	r3, r3, #1
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d108      	bne.n	2db2 <__static_initialization_and_destruction_0(int, int)+0x1ee>
    2da0:	4b38      	ldr	r3, [pc, #224]	; (2e84 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    2da2:	2201      	movs	r2, #1
    2da4:	601a      	str	r2, [r3, #0]
    2da6:	2300      	movs	r3, #0
    2da8:	2218      	movs	r2, #24
    2daa:	2101      	movs	r1, #1
    2dac:	4836      	ldr	r0, [pc, #216]	; (2e88 <__static_initialization_and_destruction_0(int, int)+0x2c4>)
    2dae:	f7fd ff1f 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led3 = sjsu::lpc40xx::Gpio(1, 18);
    2db2:	4b36      	ldr	r3, [pc, #216]	; (2e8c <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    2db4:	681b      	ldr	r3, [r3, #0]
    2db6:	f003 0301 	and.w	r3, r3, #1
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d108      	bne.n	2dd0 <__static_initialization_and_destruction_0(int, int)+0x20c>
    2dbe:	4b33      	ldr	r3, [pc, #204]	; (2e8c <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    2dc0:	2201      	movs	r2, #1
    2dc2:	601a      	str	r2, [r3, #0]
    2dc4:	2300      	movs	r3, #0
    2dc6:	2212      	movs	r2, #18
    2dc8:	2101      	movs	r1, #1
    2dca:	4831      	ldr	r0, [pc, #196]	; (2e90 <__static_initialization_and_destruction_0(int, int)+0x2cc>)
    2dcc:	f7fd ff10 	bl	bf0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    2dd0:	bf00      	nop
    2dd2:	3708      	adds	r7, #8
    2dd4:	46bd      	mov	sp, r7
    2dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dda:	bf00      	nop
    2ddc:	10001274 	.word	0x10001274
    2de0:	4002c000 	.word	0x4002c000
    2de4:	10000d20 	.word	0x10000d20
    2de8:	10001278 	.word	0x10001278
    2dec:	00000809 	.word	0x00000809
    2df0:	10000d30 	.word	0x10000d30
    2df4:	10000000 	.word	0x10000000
    2df8:	00000851 	.word	0x00000851
    2dfc:	1000127c 	.word	0x1000127c
    2e00:	10000d40 	.word	0x10000d40
    2e04:	10001280 	.word	0x10001280
    2e08:	10000d44 	.word	0x10000d44
    2e0c:	10001284 	.word	0x10001284
    2e10:	10000d48 	.word	0x10000d48
    2e14:	10001288 	.word	0x10001288
    2e18:	10000d4c 	.word	0x10000d4c
    2e1c:	00002b9d 	.word	0x00002b9d
    2e20:	1000128c 	.word	0x1000128c
    2e24:	400fc000 	.word	0x400fc000
    2e28:	10001194 	.word	0x10001194
    2e2c:	10001290 	.word	0x10001290
    2e30:	4001c000 	.word	0x4001c000
    2e34:	10000098 	.word	0x10000098
    2e38:	10001294 	.word	0x10001294
    2e3c:	4005c000 	.word	0x4005c000
    2e40:	100000b4 	.word	0x100000b4
    2e44:	10001298 	.word	0x10001298
    2e48:	400a0000 	.word	0x400a0000
    2e4c:	100000d0 	.word	0x100000d0
    2e50:	1000129c 	.word	0x1000129c
    2e54:	40088000 	.word	0x40088000
    2e58:	100000ec 	.word	0x100000ec
    2e5c:	100012a0 	.word	0x100012a0
    2e60:	40030000 	.word	0x40030000
    2e64:	10000104 	.word	0x10000104
    2e68:	100012a4 	.word	0x100012a4
    2e6c:	400ac000 	.word	0x400ac000
    2e70:	1000011c 	.word	0x1000011c
    2e74:	100012a8 	.word	0x100012a8
    2e78:	10001198 	.word	0x10001198
    2e7c:	100012ac 	.word	0x100012ac
    2e80:	100011b8 	.word	0x100011b8
    2e84:	100012b0 	.word	0x100012b0
    2e88:	100011d8 	.word	0x100011d8
    2e8c:	100012b4 	.word	0x100012b4
    2e90:	100011f8 	.word	0x100011f8

00002e94 <_GLOBAL__sub_I_main>:
    2e94:	b580      	push	{r7, lr}
    2e96:	af00      	add	r7, sp, #0
    2e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2e9c:	2001      	movs	r0, #1
    2e9e:	f7ff fe91 	bl	2bc4 <__static_initialization_and_destruction_0(int, int)>
    2ea2:	bd80      	pop	{r7, pc}

00002ea4 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    2ea4:	b580      	push	{r7, lr}
    2ea6:	b086      	sub	sp, #24
    2ea8:	af02      	add	r7, sp, #8
    2eaa:	6078      	str	r0, [r7, #4]
    2eac:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    2eae:	683a      	ldr	r2, [r7, #0]
    2eb0:	f107 030c 	add.w	r3, r7, #12
    2eb4:	9300      	str	r3, [sp, #0]
    2eb6:	2300      	movs	r3, #0
    2eb8:	2100      	movs	r1, #0
    2eba:	6878      	ldr	r0, [r7, #4]
    2ebc:	f004 fa64 	bl	7388 <_Unwind_VRS_Get>
      return val;
    2ec0:	68fb      	ldr	r3, [r7, #12]
    }
    2ec2:	4618      	mov	r0, r3
    2ec4:	3710      	adds	r7, #16
    2ec6:	46bd      	mov	sp, r7
    2ec8:	bd80      	pop	{r7, pc}
    2eca:	Address 0x0000000000002eca is out of bounds.


00002ecc <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b084      	sub	sp, #16
    2ed0:	af00      	add	r7, sp, #0
    2ed2:	6078      	str	r0, [r7, #4]
    2ed4:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    2eda:	210f      	movs	r1, #15
    2edc:	6878      	ldr	r0, [r7, #4]
    2ede:	f7ff ffe1 	bl	2ea4 <_Unwind_GetGR>
    2ee2:	4603      	mov	r3, r0
    2ee4:	f023 0301 	bic.w	r3, r3, #1
    2ee8:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    2eea:	68fb      	ldr	r3, [r7, #12]
    2eec:	6819      	ldr	r1, [r3, #0]
         address - config::kBacktraceAddressOffset);
    2eee:	68bb      	ldr	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    2ef0:	3b04      	subs	r3, #4
    2ef2:	461a      	mov	r2, r3
    2ef4:	4806      	ldr	r0, [pc, #24]	; (2f10 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    2ef6:	f001 fbfd 	bl	46f4 <printf>
  (*depth)++;
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	681b      	ldr	r3, [r3, #0]
    2efe:	1c5a      	adds	r2, r3, #1
    2f00:	68fb      	ldr	r3, [r7, #12]
    2f02:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    2f04:	2300      	movs	r3, #0
}
    2f06:	4618      	mov	r0, r3
    2f08:	3710      	adds	r7, #16
    2f0a:	46bd      	mov	sp, r7
    2f0c:	bd80      	pop	{r7, pc}
    2f0e:	bf00      	nop
    2f10:	00008398 	.word	0x00008398

00002f14 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    2f14:	b580      	push	{r7, lr}
    2f16:	b084      	sub	sp, #16
    2f18:	af00      	add	r7, sp, #0
    2f1a:	6078      	str	r0, [r7, #4]
    2f1c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    2f1e:	683b      	ldr	r3, [r7, #0]
    2f20:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    2f22:	210f      	movs	r1, #15
    2f24:	6878      	ldr	r0, [r7, #4]
    2f26:	f7ff ffbd 	bl	2ea4 <_Unwind_GetGR>
    2f2a:	4603      	mov	r3, r0
    2f2c:	f023 0301 	bic.w	r3, r3, #1
    2f30:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    2f32:	68bb      	ldr	r3, [r7, #8]
    2f34:	3b04      	subs	r3, #4
    2f36:	4619      	mov	r1, r3
    2f38:	4806      	ldr	r0, [pc, #24]	; (2f54 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    2f3a:	f001 fbdb 	bl	46f4 <printf>
  (*depth)++;
    2f3e:	68fb      	ldr	r3, [r7, #12]
    2f40:	681b      	ldr	r3, [r3, #0]
    2f42:	1c5a      	adds	r2, r3, #1
    2f44:	68fb      	ldr	r3, [r7, #12]
    2f46:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    2f48:	2300      	movs	r3, #0
}
    2f4a:	4618      	mov	r0, r3
    2f4c:	3710      	adds	r7, #16
    2f4e:	46bd      	mov	sp, r7
    2f50:	bd80      	pop	{r7, pc}
    2f52:	bf00      	nop
    2f54:	000083a8 	.word	0x000083a8

00002f58 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	b084      	sub	sp, #16
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	4603      	mov	r3, r0
    2f60:	6039      	str	r1, [r7, #0]
    2f62:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    2f64:	2300      	movs	r3, #0
    2f66:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    2f68:	f107 030c 	add.w	r3, r7, #12
    2f6c:	4619      	mov	r1, r3
    2f6e:	4817      	ldr	r0, [pc, #92]	; (2fcc <sjsu::debug::PrintBacktrace(bool, void*)+0x74>)
    2f70:	f004 fde8 	bl	7b44 <_Unwind_Backtrace>
    if (final_address)
    2f74:	683b      	ldr	r3, [r7, #0]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d005      	beq.n	2f86 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    2f7a:	68fb      	ldr	r3, [r7, #12]
    2f7c:	683a      	ldr	r2, [r7, #0]
    2f7e:	4619      	mov	r1, r3
    2f80:	4813      	ldr	r0, [pc, #76]	; (2fd0 <sjsu::debug::PrintBacktrace(bool, void*)+0x78>)
    2f82:	f001 fbb7 	bl	46f4 <printf>
    }

    if (show_make_command)
    2f86:	79fb      	ldrb	r3, [r7, #7]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d01b      	beq.n	2fc4 <sjsu::debug::PrintBacktrace(bool, void*)+0x6c>
    {
      printf("\nRun: the following command in your project directory");
    2f8c:	4811      	ldr	r0, [pc, #68]	; (2fd4 <sjsu::debug::PrintBacktrace(bool, void*)+0x7c>)
    2f8e:	f001 fbb1 	bl	46f4 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    2f92:	4811      	ldr	r0, [pc, #68]	; (2fd8 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    2f94:	f001 fbae 	bl	46f4 <printf>
      printf("make stacktrace TRACES=\"");
    2f98:	4810      	ldr	r0, [pc, #64]	; (2fdc <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    2f9a:	f001 fbab 	bl	46f4 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    2f9e:	f107 030c 	add.w	r3, r7, #12
    2fa2:	4619      	mov	r1, r3
    2fa4:	480e      	ldr	r0, [pc, #56]	; (2fe0 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    2fa6:	f004 fdcd 	bl	7b44 <_Unwind_Backtrace>
      if (final_address)
    2faa:	683b      	ldr	r3, [r7, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d003      	beq.n	2fb8 <sjsu::debug::PrintBacktrace(bool, void*)+0x60>
      {
        printf("0x%p ", final_address);
    2fb0:	6839      	ldr	r1, [r7, #0]
    2fb2:	480c      	ldr	r0, [pc, #48]	; (2fe4 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    2fb4:	f001 fb9e 	bl	46f4 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    2fb8:	480b      	ldr	r0, [pc, #44]	; (2fe8 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    2fba:	f001 fb9b 	bl	46f4 <printf>
      printf(
    2fbe:	480b      	ldr	r0, [pc, #44]	; (2fec <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    2fc0:	f000 fa3a 	bl	3438 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    2fc4:	bf00      	nop
    2fc6:	3710      	adds	r7, #16
    2fc8:	46bd      	mov	sp, r7
    2fca:	bd80      	pop	{r7, pc}
    2fcc:	00002ecd 	.word	0x00002ecd
    2fd0:	000083b0 	.word	0x000083b0
    2fd4:	000083bc 	.word	0x000083bc
    2fd8:	000083f4 	.word	0x000083f4
    2fdc:	00008400 	.word	0x00008400
    2fe0:	00002f15 	.word	0x00002f15
    2fe4:	0000841c 	.word	0x0000841c
    2fe8:	00008424 	.word	0x00008424
    2fec:	0000842c 	.word	0x0000842c

00002ff0 <sjsu::Halt()>:
{
  Wait(delay_time);
}
/// Halt system by putting it into infinite loop
inline void Halt()
{
    2ff0:	b480      	push	{r7}
    2ff2:	af00      	add	r7, sp, #0
  while (true)
  {
    continue;
    2ff4:	bf00      	nop
  while (true)
    2ff6:	e7fd      	b.n	2ff4 <sjsu::Halt()+0x4>

00002ff8 <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return static_cast<uint8_t>(config::kTaskSchedulerSize + 1);
};
}  // namespace rtos
}  // namespace sjsu
    2ff8:	b580      	push	{r7, lr}
    2ffa:	b082      	sub	sp, #8
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	6078      	str	r0, [r7, #4]
    3000:	6039      	str	r1, [r7, #0]
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	2b01      	cmp	r3, #1
    3006:	d116      	bne.n	3036 <__static_initialization_and_destruction_0(int, int)+0x3e>
    3008:	683b      	ldr	r3, [r7, #0]
    300a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    300e:	4293      	cmp	r3, r2
    3010:	d111      	bne.n	3036 <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    3012:	4b0b      	ldr	r3, [pc, #44]	; (3040 <__static_initialization_and_destruction_0(int, int)+0x48>)
    3014:	681b      	ldr	r3, [r3, #0]
    3016:	f003 0301 	and.w	r3, r3, #1
    301a:	2b00      	cmp	r3, #0
    301c:	d10b      	bne.n	3036 <__static_initialization_and_destruction_0(int, int)+0x3e>
    301e:	4b08      	ldr	r3, [pc, #32]	; (3040 <__static_initialization_and_destruction_0(int, int)+0x48>)
    3020:	2201      	movs	r2, #1
    3022:	601a      	str	r2, [r3, #0]
    3024:	4907      	ldr	r1, [pc, #28]	; (3044 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    3026:	4808      	ldr	r0, [pc, #32]	; (3048 <__static_initialization_and_destruction_0(int, int)+0x50>)
    3028:	f7ff f87a 	bl	2120 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    302c:	4a07      	ldr	r2, [pc, #28]	; (304c <__static_initialization_and_destruction_0(int, int)+0x54>)
    302e:	4908      	ldr	r1, [pc, #32]	; (3050 <__static_initialization_and_destruction_0(int, int)+0x58>)
    3030:	4805      	ldr	r0, [pc, #20]	; (3048 <__static_initialization_and_destruction_0(int, int)+0x50>)
    3032:	f003 fca1 	bl	6978 <__aeabi_atexit>
    3036:	bf00      	nop
    3038:	3708      	adds	r7, #8
    303a:	46bd      	mov	sp, r7
    303c:	bd80      	pop	{r7, pc}
    303e:	bf00      	nop
    3040:	10001278 	.word	0x10001278
    3044:	00000809 	.word	0x00000809
    3048:	10000d30 	.word	0x10000d30
    304c:	10000000 	.word	0x10000000
    3050:	00000851 	.word	0x00000851

00003054 <_GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv>:
    3054:	b580      	push	{r7, lr}
    3056:	af00      	add	r7, sp, #0
    3058:	f64f 71ff 	movw	r1, #65535	; 0xffff
    305c:	2001      	movs	r0, #1
    305e:	f7ff ffcb 	bl	2ff8 <__static_initialization_and_destruction_0(int, int)>
    3062:	bd80      	pop	{r7, pc}

00003064 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    3064:	b480      	push	{r7}
    3066:	b087      	sub	sp, #28
    3068:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    306a:	2300      	movs	r3, #0
    306c:	617b      	str	r3, [r7, #20]
    306e:	697a      	ldr	r2, [r7, #20]
    3070:	4613      	mov	r3, r2
    3072:	005b      	lsls	r3, r3, #1
    3074:	4413      	add	r3, r2
    3076:	009b      	lsls	r3, r3, #2
    3078:	4a1f      	ldr	r2, [pc, #124]	; (30f8 <sjsu::InitializeDataSection()+0x94>)
    307a:	4413      	add	r3, r2
    307c:	4a1f      	ldr	r2, [pc, #124]	; (30fc <sjsu::InitializeDataSection()+0x98>)
    307e:	4293      	cmp	r3, r2
    3080:	d233      	bcs.n	30ea <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    3082:	491d      	ldr	r1, [pc, #116]	; (30f8 <sjsu::InitializeDataSection()+0x94>)
    3084:	697a      	ldr	r2, [r7, #20]
    3086:	4613      	mov	r3, r2
    3088:	005b      	lsls	r3, r3, #1
    308a:	4413      	add	r3, r2
    308c:	009b      	lsls	r3, r3, #2
    308e:	440b      	add	r3, r1
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    3094:	4918      	ldr	r1, [pc, #96]	; (30f8 <sjsu::InitializeDataSection()+0x94>)
    3096:	697a      	ldr	r2, [r7, #20]
    3098:	4613      	mov	r3, r2
    309a:	005b      	lsls	r3, r3, #1
    309c:	4413      	add	r3, r2
    309e:	009b      	lsls	r3, r3, #2
    30a0:	440b      	add	r3, r1
    30a2:	685b      	ldr	r3, [r3, #4]
    30a4:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    30a6:	4914      	ldr	r1, [pc, #80]	; (30f8 <sjsu::InitializeDataSection()+0x94>)
    30a8:	697a      	ldr	r2, [r7, #20]
    30aa:	4613      	mov	r3, r2
    30ac:	005b      	lsls	r3, r3, #1
    30ae:	4413      	add	r3, r2
    30b0:	009b      	lsls	r3, r3, #2
    30b2:	440b      	add	r3, r1
    30b4:	3308      	adds	r3, #8
    30b6:	681b      	ldr	r3, [r3, #0]
    30b8:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    30ba:	2300      	movs	r3, #0
    30bc:	613b      	str	r3, [r7, #16]
    30be:	693a      	ldr	r2, [r7, #16]
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	429a      	cmp	r2, r3
    30c4:	d20d      	bcs.n	30e2 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    30c6:	693b      	ldr	r3, [r7, #16]
    30c8:	009b      	lsls	r3, r3, #2
    30ca:	68fa      	ldr	r2, [r7, #12]
    30cc:	441a      	add	r2, r3
    30ce:	693b      	ldr	r3, [r7, #16]
    30d0:	009b      	lsls	r3, r3, #2
    30d2:	68b9      	ldr	r1, [r7, #8]
    30d4:	440b      	add	r3, r1
    30d6:	6812      	ldr	r2, [r2, #0]
    30d8:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    30da:	693b      	ldr	r3, [r7, #16]
    30dc:	3301      	adds	r3, #1
    30de:	613b      	str	r3, [r7, #16]
    30e0:	e7ed      	b.n	30be <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    30e2:	697b      	ldr	r3, [r7, #20]
    30e4:	3301      	adds	r3, #1
    30e6:	617b      	str	r3, [r7, #20]
    30e8:	e7c1      	b.n	306e <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    30ea:	bf00      	nop
    30ec:	371c      	adds	r7, #28
    30ee:	46bd      	mov	sp, r7
    30f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30f4:	4770      	bx	lr
    30f6:	bf00      	nop
    30f8:	000000e4 	.word	0x000000e4
    30fc:	000000fc 	.word	0x000000fc

00003100 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    3100:	b480      	push	{r7}
    3102:	b085      	sub	sp, #20
    3104:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    3106:	2300      	movs	r3, #0
    3108:	60fb      	str	r3, [r7, #12]
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	00db      	lsls	r3, r3, #3
    310e:	4a15      	ldr	r2, [pc, #84]	; (3164 <sjsu::InitializeBssSection()+0x64>)
    3110:	4413      	add	r3, r2
    3112:	4a15      	ldr	r2, [pc, #84]	; (3168 <sjsu::InitializeBssSection()+0x68>)
    3114:	4293      	cmp	r3, r2
    3116:	d21e      	bcs.n	3156 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    3118:	4a12      	ldr	r2, [pc, #72]	; (3164 <sjsu::InitializeBssSection()+0x64>)
    311a:	68fb      	ldr	r3, [r7, #12]
    311c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3120:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    3122:	4a10      	ldr	r2, [pc, #64]	; (3164 <sjsu::InitializeBssSection()+0x64>)
    3124:	68fb      	ldr	r3, [r7, #12]
    3126:	00db      	lsls	r3, r3, #3
    3128:	4413      	add	r3, r2
    312a:	685b      	ldr	r3, [r3, #4]
    312c:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    312e:	2300      	movs	r3, #0
    3130:	60bb      	str	r3, [r7, #8]
    3132:	68ba      	ldr	r2, [r7, #8]
    3134:	683b      	ldr	r3, [r7, #0]
    3136:	429a      	cmp	r2, r3
    3138:	d209      	bcs.n	314e <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    313a:	68bb      	ldr	r3, [r7, #8]
    313c:	009b      	lsls	r3, r3, #2
    313e:	687a      	ldr	r2, [r7, #4]
    3140:	4413      	add	r3, r2
    3142:	2200      	movs	r2, #0
    3144:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    3146:	68bb      	ldr	r3, [r7, #8]
    3148:	3301      	adds	r3, #1
    314a:	60bb      	str	r3, [r7, #8]
    314c:	e7f1      	b.n	3132 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	3301      	adds	r3, #1
    3152:	60fb      	str	r3, [r7, #12]
    3154:	e7d9      	b.n	310a <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    3156:	bf00      	nop
    3158:	3714      	adds	r7, #20
    315a:	46bd      	mov	sp, r7
    315c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3160:	4770      	bx	lr
    3162:	bf00      	nop
    3164:	000000fc 	.word	0x000000fc
    3168:	0000010c 	.word	0x0000010c

0000316c <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    316c:	b580      	push	{r7, lr}
    316e:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    3170:	f7ff ff78 	bl	3064 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    3174:	f7ff ffc4 	bl	3100 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    3178:	f004 feae 	bl	7ed8 <__libc_init_array>
}
    317c:	bf00      	nop
    317e:	bd80      	pop	{r7, pc}

00003180 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    3180:	b580      	push	{r7, lr}
    3182:	b08c      	sub	sp, #48	; 0x30
    3184:	af02      	add	r7, sp, #8
    3186:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	685b      	ldr	r3, [r3, #4]
    3192:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	689b      	ldr	r3, [r3, #8]
    3198:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    319a:	687b      	ldr	r3, [r7, #4]
    319c:	68db      	ldr	r3, [r3, #12]
    319e:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    31a0:	687b      	ldr	r3, [r7, #4]
    31a2:	691b      	ldr	r3, [r3, #16]
    31a4:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	695b      	ldr	r3, [r3, #20]
    31aa:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	699b      	ldr	r3, [r3, #24]
    31b0:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	69db      	ldr	r3, [r3, #28]
    31b6:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    31b8:	480f      	ldr	r0, [pc, #60]	; (31f8 <GetRegistersFromStack+0x78>)
    31ba:	f001 fa9b 	bl	46f4 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    31be:	6a79      	ldr	r1, [r7, #36]	; 0x24
    31c0:	6a3a      	ldr	r2, [r7, #32]
    31c2:	69f8      	ldr	r0, [r7, #28]
    31c4:	69bb      	ldr	r3, [r7, #24]
    31c6:	9300      	str	r3, [sp, #0]
    31c8:	4603      	mov	r3, r0
    31ca:	480c      	ldr	r0, [pc, #48]	; (31fc <GetRegistersFromStack+0x7c>)
    31cc:	f001 fa92 	bl	46f4 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    31d0:	6979      	ldr	r1, [r7, #20]
    31d2:	693a      	ldr	r2, [r7, #16]
    31d4:	68f8      	ldr	r0, [r7, #12]
    31d6:	68bb      	ldr	r3, [r7, #8]
    31d8:	9300      	str	r3, [sp, #0]
    31da:	4603      	mov	r3, r0
    31dc:	4808      	ldr	r0, [pc, #32]	; (3200 <GetRegistersFromStack+0x80>)
    31de:	f001 fa89 	bl	46f4 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    31e2:	68fb      	ldr	r3, [r7, #12]
    31e4:	4619      	mov	r1, r3
    31e6:	2001      	movs	r0, #1
    31e8:	f7ff feb6 	bl	2f58 <sjsu::debug::PrintBacktrace(bool, void*)>
    // When the following line is hit, the variables contain the register values
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
    31ec:	f7ff ff00 	bl	2ff0 <sjsu::Halt()>
  }
    31f0:	bf00      	nop
    31f2:	3728      	adds	r7, #40	; 0x28
    31f4:	46bd      	mov	sp, r7
    31f6:	bd80      	pop	{r7, pc}
    31f8:	00008b3c 	.word	0x00008b3c
    31fc:	00008b68 	.word	0x00008b68
    3200:	00008b9c 	.word	0x00008b9c

00003204 <ArmHardFaultHandler>:

  void ArmHardFaultHandler(void)
  {
    3204:	b480      	push	{r7}
    3206:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    3208:	f01e 0f04 	tst.w	lr, #4
    320c:	bf0c      	ite	eq
    320e:	f3ef 8008 	mrseq	r0, MSP
    3212:	f3ef 8009 	mrsne	r0, PSP
    3216:	6981      	ldr	r1, [r0, #24]
    3218:	4a00      	ldr	r2, [pc, #0]	; (321c <handler2_address_const>)
    321a:	4710      	bx	r2

0000321c <handler2_address_const>:
    321c:	00003181 	.word	0x00003181
    }
  }
    3220:	bf00      	nop
    3222:	46bd      	mov	sp, r7
    3224:	f85d 7b04 	ldr.w	r7, [sp], #4
    3228:	4770      	bx	lr
    322a:	Address 0x000000000000322a is out of bounds.


0000322c <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    322c:	b580      	push	{r7, lr}
    322e:	b084      	sub	sp, #16
    3230:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    3232:	4b1a      	ldr	r3, [pc, #104]	; (329c <ArmResetHandler+0x70>)
    3234:	60fb      	str	r3, [r7, #12]
    3236:	68fb      	ldr	r3, [r7, #12]
    3238:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    323a:	683b      	ldr	r3, [r7, #0]
    323c:	f383 8809 	msr	PSP, r3
}
    3240:	bf00      	nop
    3242:	68fb      	ldr	r3, [r7, #12]
    3244:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	f383 8808 	msr	MSP, r3
}
    324c:	bf00      	nop
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    324e:	f7ff ff8d 	bl	316c <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    3252:	4b13      	ldr	r3, [pc, #76]	; (32a0 <ArmResetHandler+0x74>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	f003 0301 	and.w	r3, r3, #1
    325a:	2b00      	cmp	r3, #0
    325c:	bf14      	ite	ne
    325e:	2301      	movne	r3, #1
    3260:	2300      	moveq	r3, #0
    3262:	b2db      	uxtb	r3, r3
    3264:	2b00      	cmp	r3, #0
    3266:	d001      	beq.n	326c <ArmResetHandler+0x40>
      {
          trace_initialize();  // Enable debug tracing
    3268:	f001 fa7c 	bl	4764 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    326c:	f002 fd44 	bl	5cf8 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    3270:	f7fe fde6 	bl	1e40 <main>
    3274:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    3276:	68bb      	ldr	r3, [r7, #8]
    3278:	2b00      	cmp	r3, #0
    327a:	db04      	blt.n	3286 <ArmResetHandler+0x5a>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    327c:	68b9      	ldr	r1, [r7, #8]
    327e:	4809      	ldr	r0, [pc, #36]	; (32a4 <ArmResetHandler+0x78>)
    3280:	f001 fa38 	bl	46f4 <printf>
    3284:	e003      	b.n	328e <ArmResetHandler+0x62>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    3286:	68b9      	ldr	r1, [r7, #8]
    3288:	4807      	ldr	r0, [pc, #28]	; (32a8 <ArmResetHandler+0x7c>)
    328a:	f001 fa33 	bl	46f4 <printf>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    sjsu::Halt();
    328e:	f7ff feaf 	bl	2ff0 <sjsu::Halt()>
  }
    3292:	bf00      	nop
    3294:	3710      	adds	r7, #16
    3296:	46bd      	mov	sp, r7
    3298:	bd80      	pop	{r7, pc}
    329a:	bf00      	nop
    329c:	10010000 	.word	0x10010000
    32a0:	e000edf0 	.word	0xe000edf0
    32a4:	00008bd4 	.word	0x00008bd4
    32a8:	00008c08 	.word	0x00008c08

000032ac <__static_initialization_and_destruction_0(int, int)>:

}  // extern "C"
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
    32b4:	6039      	str	r1, [r7, #0]
    32b6:	687b      	ldr	r3, [r7, #4]
    32b8:	2b01      	cmp	r3, #1
    32ba:	d116      	bne.n	32ea <__static_initialization_and_destruction_0(int, int)+0x3e>
    32bc:	683b      	ldr	r3, [r7, #0]
    32be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    32c2:	4293      	cmp	r3, r2
    32c4:	d111      	bne.n	32ea <__static_initialization_and_destruction_0(int, int)+0x3e>
    32c6:	4b0b      	ldr	r3, [pc, #44]	; (32f4 <__static_initialization_and_destruction_0(int, int)+0x48>)
    32c8:	681b      	ldr	r3, [r3, #0]
    32ca:	f003 0301 	and.w	r3, r3, #1
    32ce:	2b00      	cmp	r3, #0
    32d0:	d10b      	bne.n	32ea <__static_initialization_and_destruction_0(int, int)+0x3e>
    32d2:	4b08      	ldr	r3, [pc, #32]	; (32f4 <__static_initialization_and_destruction_0(int, int)+0x48>)
    32d4:	2201      	movs	r2, #1
    32d6:	601a      	str	r2, [r3, #0]
    32d8:	4907      	ldr	r1, [pc, #28]	; (32f8 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    32da:	4808      	ldr	r0, [pc, #32]	; (32fc <__static_initialization_and_destruction_0(int, int)+0x50>)
    32dc:	f7fe ff20 	bl	2120 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    32e0:	4a07      	ldr	r2, [pc, #28]	; (3300 <__static_initialization_and_destruction_0(int, int)+0x54>)
    32e2:	4908      	ldr	r1, [pc, #32]	; (3304 <__static_initialization_and_destruction_0(int, int)+0x58>)
    32e4:	4805      	ldr	r0, [pc, #20]	; (32fc <__static_initialization_and_destruction_0(int, int)+0x50>)
    32e6:	f003 fb47 	bl	6978 <__aeabi_atexit>
    32ea:	bf00      	nop
    32ec:	3708      	adds	r7, #8
    32ee:	46bd      	mov	sp, r7
    32f0:	bd80      	pop	{r7, pc}
    32f2:	bf00      	nop
    32f4:	10001278 	.word	0x10001278
    32f8:	00000809 	.word	0x00000809
    32fc:	10000d30 	.word	0x10000d30
    3300:	10000000 	.word	0x10000000
    3304:	00000851 	.word	0x00000851

00003308 <_GLOBAL__sub_I_GetRegistersFromStack>:
    3308:	b580      	push	{r7, lr}
    330a:	af00      	add	r7, sp, #0
    330c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3310:	2001      	movs	r0, #1
    3312:	f7ff ffcb 	bl	32ac <__static_initialization_and_destruction_0(int, int)>
    3316:	bd80      	pop	{r7, pc}

00003318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3318:	b580      	push	{r7, lr}
    331a:	b084      	sub	sp, #16
    331c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    331e:	4b28      	ldr	r3, [pc, #160]	; (33c0 <vTaskSwitchContext+0xa8>)
    3320:	681b      	ldr	r3, [r3, #0]
    3322:	2b00      	cmp	r3, #0
    3324:	d003      	beq.n	332e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3326:	4b27      	ldr	r3, [pc, #156]	; (33c4 <vTaskSwitchContext+0xac>)
    3328:	2201      	movs	r2, #1
    332a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    332c:	e043      	b.n	33b6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    332e:	4b25      	ldr	r3, [pc, #148]	; (33c4 <vTaskSwitchContext+0xac>)
    3330:	2200      	movs	r2, #0
    3332:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    3334:	f002 fcd6 	bl	5ce4 <ThreadRuntimeCounter>
    3338:	4603      	mov	r3, r0
    333a:	4a23      	ldr	r2, [pc, #140]	; (33c8 <vTaskSwitchContext+0xb0>)
    333c:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    333e:	4b22      	ldr	r3, [pc, #136]	; (33c8 <vTaskSwitchContext+0xb0>)
    3340:	681a      	ldr	r2, [r3, #0]
    3342:	4b22      	ldr	r3, [pc, #136]	; (33cc <vTaskSwitchContext+0xb4>)
    3344:	681b      	ldr	r3, [r3, #0]
    3346:	429a      	cmp	r2, r3
    3348:	d909      	bls.n	335e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    334a:	4b21      	ldr	r3, [pc, #132]	; (33d0 <vTaskSwitchContext+0xb8>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	6d59      	ldr	r1, [r3, #84]	; 0x54
    3350:	4a1d      	ldr	r2, [pc, #116]	; (33c8 <vTaskSwitchContext+0xb0>)
    3352:	6810      	ldr	r0, [r2, #0]
    3354:	4a1d      	ldr	r2, [pc, #116]	; (33cc <vTaskSwitchContext+0xb4>)
    3356:	6812      	ldr	r2, [r2, #0]
    3358:	1a82      	subs	r2, r0, r2
    335a:	440a      	add	r2, r1
    335c:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    335e:	4b1a      	ldr	r3, [pc, #104]	; (33c8 <vTaskSwitchContext+0xb0>)
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	4a1a      	ldr	r2, [pc, #104]	; (33cc <vTaskSwitchContext+0xb4>)
    3364:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3366:	4b1b      	ldr	r3, [pc, #108]	; (33d4 <vTaskSwitchContext+0xbc>)
    3368:	681b      	ldr	r3, [r3, #0]
    336a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	fab3 f383 	clz	r3, r3
    3372:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    3374:	78fb      	ldrb	r3, [r7, #3]
    3376:	f1c3 031f 	rsb	r3, r3, #31
    337a:	60fb      	str	r3, [r7, #12]
    337c:	68fa      	ldr	r2, [r7, #12]
    337e:	4613      	mov	r3, r2
    3380:	009b      	lsls	r3, r3, #2
    3382:	4413      	add	r3, r2
    3384:	009b      	lsls	r3, r3, #2
    3386:	4a14      	ldr	r2, [pc, #80]	; (33d8 <vTaskSwitchContext+0xc0>)
    3388:	4413      	add	r3, r2
    338a:	60bb      	str	r3, [r7, #8]
    338c:	68bb      	ldr	r3, [r7, #8]
    338e:	685b      	ldr	r3, [r3, #4]
    3390:	685a      	ldr	r2, [r3, #4]
    3392:	68bb      	ldr	r3, [r7, #8]
    3394:	605a      	str	r2, [r3, #4]
    3396:	68bb      	ldr	r3, [r7, #8]
    3398:	685a      	ldr	r2, [r3, #4]
    339a:	68bb      	ldr	r3, [r7, #8]
    339c:	3308      	adds	r3, #8
    339e:	429a      	cmp	r2, r3
    33a0:	d104      	bne.n	33ac <vTaskSwitchContext+0x94>
    33a2:	68bb      	ldr	r3, [r7, #8]
    33a4:	685b      	ldr	r3, [r3, #4]
    33a6:	685a      	ldr	r2, [r3, #4]
    33a8:	68bb      	ldr	r3, [r7, #8]
    33aa:	605a      	str	r2, [r3, #4]
    33ac:	68bb      	ldr	r3, [r7, #8]
    33ae:	685b      	ldr	r3, [r3, #4]
    33b0:	68db      	ldr	r3, [r3, #12]
    33b2:	4a07      	ldr	r2, [pc, #28]	; (33d0 <vTaskSwitchContext+0xb8>)
    33b4:	6013      	str	r3, [r2, #0]
}
    33b6:	bf00      	nop
    33b8:	3710      	adds	r7, #16
    33ba:	46bd      	mov	sp, r7
    33bc:	bd80      	pop	{r7, pc}
    33be:	bf00      	nop
    33c0:	10001328 	.word	0x10001328
    33c4:	10001324 	.word	0x10001324
    33c8:	10001330 	.word	0x10001330
    33cc:	1000132c 	.word	0x1000132c
    33d0:	100012b8 	.word	0x100012b8
    33d4:	10001320 	.word	0x10001320
    33d8:	100012bc 	.word	0x100012bc

000033dc <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    33dc:	b480      	push	{r7}
    33de:	af00      	add	r7, sp, #0
    return 1;
    33e0:	2301      	movs	r3, #1
  }
    33e2:	4618      	mov	r0, r3
    33e4:	46bd      	mov	sp, r7
    33e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ea:	4770      	bx	lr

000033ec <_kill>:

  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    33ec:	b480      	push	{r7}
    33ee:	b083      	sub	sp, #12
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	6039      	str	r1, [r7, #0]
    return -1;
    33f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    33fa:	4618      	mov	r0, r3
    33fc:	370c      	adds	r7, #12
    33fe:	46bd      	mov	sp, r7
    3400:	f85d 7b04 	ldr.w	r7, [sp], #4
    3404:	4770      	bx	lr
    3406:	Address 0x0000000000003406 is out of bounds.


00003408 <_write>:
    return previous_heap_position;
  }

  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    3408:	b580      	push	{r7, lr}
    340a:	b084      	sub	sp, #16
    340c:	af00      	add	r7, sp, #0
    340e:	60f8      	str	r0, [r7, #12]
    3410:	60b9      	str	r1, [r7, #8]
    3412:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	4619      	mov	r1, r3
    3418:	68b8      	ldr	r0, [r7, #8]
    341a:	f001 f9aa 	bl	4772 <trace_write>
    return sjsu::newlib::out(ptr, length);
    341e:	4b05      	ldr	r3, [pc, #20]	; (3434 <_write+0x2c>)
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	687a      	ldr	r2, [r7, #4]
    3424:	4611      	mov	r1, r2
    3426:	68b8      	ldr	r0, [r7, #8]
    3428:	4798      	blx	r3
    342a:	4603      	mov	r3, r0
  }
    342c:	4618      	mov	r0, r3
    342e:	3710      	adds	r7, #16
    3430:	46bd      	mov	sp, r7
    3432:	bd80      	pop	{r7, pc}
    3434:	10000c10 	.word	0x10000c10

00003438 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    3438:	b580      	push	{r7, lr}
    343a:	b084      	sub	sp, #16
    343c:	af00      	add	r7, sp, #0
    343e:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    3440:	6878      	ldr	r0, [r7, #4]
    3442:	f004 fdc7 	bl	7fd4 <strlen>
    3446:	4603      	mov	r3, r0
    3448:	60fb      	str	r3, [r7, #12]
    int result        = 0;
    344a:	2300      	movs	r3, #0
    344c:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    344e:	68fa      	ldr	r2, [r7, #12]
    3450:	6879      	ldr	r1, [r7, #4]
    3452:	2000      	movs	r0, #0
    3454:	f7ff ffd8 	bl	3408 <_write>
    3458:	4602      	mov	r2, r0
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	4413      	add	r3, r2
    345e:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    3460:	2201      	movs	r2, #1
    3462:	4906      	ldr	r1, [pc, #24]	; (347c <puts+0x44>)
    3464:	2000      	movs	r0, #0
    3466:	f7ff ffcf 	bl	3408 <_write>
    346a:	4602      	mov	r2, r0
    346c:	68bb      	ldr	r3, [r7, #8]
    346e:	4413      	add	r3, r2
    3470:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    3472:	68bb      	ldr	r3, [r7, #8]
  }
    3474:	4618      	mov	r0, r3
    3476:	3710      	adds	r7, #16
    3478:	46bd      	mov	sp, r7
    347a:	bd80      	pop	{r7, pc}
    347c:	00008c3c 	.word	0x00008c3c

00003480 <_exit>:

  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    3480:	b480      	push	{r7}
    3482:	b083      	sub	sp, #12
    3484:	af00      	add	r7, sp, #0
    3486:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    3488:	bf00      	nop
    while (1)
    348a:	e7fd      	b.n	3488 <_exit+0x8>

0000348c <_out_buffer(char, void*, unsigned int, unsigned int)>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    348c:	b480      	push	{r7}
    348e:	b085      	sub	sp, #20
    3490:	af00      	add	r7, sp, #0
    3492:	60b9      	str	r1, [r7, #8]
    3494:	607a      	str	r2, [r7, #4]
    3496:	603b      	str	r3, [r7, #0]
    3498:	4603      	mov	r3, r0
    349a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
    349c:	687a      	ldr	r2, [r7, #4]
    349e:	683b      	ldr	r3, [r7, #0]
    34a0:	429a      	cmp	r2, r3
    34a2:	d204      	bcs.n	34ae <_out_buffer(char, void*, unsigned int, unsigned int)+0x22>
    ((char*)buffer)[idx] = character;
    34a4:	68ba      	ldr	r2, [r7, #8]
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	4413      	add	r3, r2
    34aa:	7bfa      	ldrb	r2, [r7, #15]
    34ac:	701a      	strb	r2, [r3, #0]
  }
}
    34ae:	bf00      	nop
    34b0:	3714      	adds	r7, #20
    34b2:	46bd      	mov	sp, r7
    34b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    34b8:	4770      	bx	lr

000034ba <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    34ba:	b580      	push	{r7, lr}
    34bc:	b088      	sub	sp, #32
    34be:	af00      	add	r7, sp, #0
    34c0:	60b9      	str	r1, [r7, #8]
    34c2:	607a      	str	r2, [r7, #4]
    34c4:	603b      	str	r3, [r7, #0]
    34c6:	4603      	mov	r3, r0
    34c8:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    34ca:	23fe      	movs	r3, #254	; 0xfe
    34cc:	61fb      	str	r3, [r7, #28]
  size_t proper_index = idx % (string_limit);
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	69fa      	ldr	r2, [r7, #28]
    34d2:	fbb3 f2f2 	udiv	r2, r3, r2
    34d6:	69f9      	ldr	r1, [r7, #28]
    34d8:	fb01 f202 	mul.w	r2, r1, r2
    34dc:	1a9b      	subs	r3, r3, r2
    34de:	61bb      	str	r3, [r7, #24]
  ((char*)buffer)[proper_index] = character;
    34e0:	68ba      	ldr	r2, [r7, #8]
    34e2:	69bb      	ldr	r3, [r7, #24]
    34e4:	4413      	add	r3, r2
    34e6:	7bfa      	ldrb	r2, [r7, #15]
    34e8:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    34ea:	7bfb      	ldrb	r3, [r7, #15]
    34ec:	2b00      	cmp	r3, #0
    34ee:	d106      	bne.n	34fe <_out_chunk(char, void*, unsigned int, unsigned int)+0x44>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    34f0:	69bb      	ldr	r3, [r7, #24]
    34f2:	461a      	mov	r2, r3
    34f4:	68b9      	ldr	r1, [r7, #8]
    34f6:	2001      	movs	r0, #1
    34f8:	f7ff ff86 	bl	3408 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    34fc:	e012      	b.n	3524 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
  } else if (proper_index + 1 == string_limit) {
    34fe:	69bb      	ldr	r3, [r7, #24]
    3500:	3301      	adds	r3, #1
    3502:	69fa      	ldr	r2, [r7, #28]
    3504:	429a      	cmp	r2, r3
    3506:	d10d      	bne.n	3524 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
    size_t last_character = string_limit + 1;
    3508:	69fb      	ldr	r3, [r7, #28]
    350a:	3301      	adds	r3, #1
    350c:	617b      	str	r3, [r7, #20]
    ((char*)buffer)[last_character] = '\0';
    350e:	68ba      	ldr	r2, [r7, #8]
    3510:	697b      	ldr	r3, [r7, #20]
    3512:	4413      	add	r3, r2
    3514:	2200      	movs	r2, #0
    3516:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    3518:	697b      	ldr	r3, [r7, #20]
    351a:	461a      	mov	r2, r3
    351c:	68b9      	ldr	r1, [r7, #8]
    351e:	2001      	movs	r0, #1
    3520:	f7ff ff72 	bl	3408 <_write>
}
    3524:	bf00      	nop
    3526:	3720      	adds	r7, #32
    3528:	46bd      	mov	sp, r7
    352a:	bd80      	pop	{r7, pc}

0000352c <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    352c:	b480      	push	{r7}
    352e:	b085      	sub	sp, #20
    3530:	af00      	add	r7, sp, #0
    3532:	60b9      	str	r1, [r7, #8]
    3534:	607a      	str	r2, [r7, #4]
    3536:	603b      	str	r3, [r7, #0]
    3538:	4603      	mov	r3, r0
    353a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    353c:	bf00      	nop
    353e:	3714      	adds	r7, #20
    3540:	46bd      	mov	sp, r7
    3542:	f85d 7b04 	ldr.w	r7, [sp], #4
    3546:	4770      	bx	lr

00003548 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    3548:	b480      	push	{r7}
    354a:	b085      	sub	sp, #20
    354c:	af00      	add	r7, sp, #0
    354e:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    3550:	687b      	ldr	r3, [r7, #4]
    3552:	60fb      	str	r3, [r7, #12]
    3554:	68fb      	ldr	r3, [r7, #12]
    3556:	781b      	ldrb	r3, [r3, #0]
    3558:	2b00      	cmp	r3, #0
    355a:	d003      	beq.n	3564 <_strlen(char const*)+0x1c>
    355c:	68fb      	ldr	r3, [r7, #12]
    355e:	3301      	adds	r3, #1
    3560:	60fb      	str	r3, [r7, #12]
    3562:	e7f7      	b.n	3554 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    3564:	68fa      	ldr	r2, [r7, #12]
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	1ad3      	subs	r3, r2, r3
}
    356a:	4618      	mov	r0, r3
    356c:	3714      	adds	r7, #20
    356e:	46bd      	mov	sp, r7
    3570:	f85d 7b04 	ldr.w	r7, [sp], #4
    3574:	4770      	bx	lr

00003576 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    3576:	b480      	push	{r7}
    3578:	b083      	sub	sp, #12
    357a:	af00      	add	r7, sp, #0
    357c:	4603      	mov	r3, r0
    357e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    3580:	79fb      	ldrb	r3, [r7, #7]
    3582:	2b2f      	cmp	r3, #47	; 0x2f
    3584:	d904      	bls.n	3590 <_is_digit(char)+0x1a>
    3586:	79fb      	ldrb	r3, [r7, #7]
    3588:	2b39      	cmp	r3, #57	; 0x39
    358a:	d801      	bhi.n	3590 <_is_digit(char)+0x1a>
    358c:	2301      	movs	r3, #1
    358e:	e000      	b.n	3592 <_is_digit(char)+0x1c>
    3590:	2300      	movs	r3, #0
}
    3592:	4618      	mov	r0, r3
    3594:	370c      	adds	r7, #12
    3596:	46bd      	mov	sp, r7
    3598:	f85d 7b04 	ldr.w	r7, [sp], #4
    359c:	4770      	bx	lr

0000359e <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    359e:	b580      	push	{r7, lr}
    35a0:	b084      	sub	sp, #16
    35a2:	af00      	add	r7, sp, #0
    35a4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    35a6:	2300      	movs	r3, #0
    35a8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	781b      	ldrb	r3, [r3, #0]
    35b0:	4618      	mov	r0, r3
    35b2:	f7ff ffe0 	bl	3576 <_is_digit(char)>
    35b6:	4603      	mov	r3, r0
    35b8:	2b00      	cmp	r3, #0
    35ba:	d00f      	beq.n	35dc <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    35bc:	68fa      	ldr	r2, [r7, #12]
    35be:	4613      	mov	r3, r2
    35c0:	009b      	lsls	r3, r3, #2
    35c2:	4413      	add	r3, r2
    35c4:	005b      	lsls	r3, r3, #1
    35c6:	4618      	mov	r0, r3
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	681b      	ldr	r3, [r3, #0]
    35cc:	1c59      	adds	r1, r3, #1
    35ce:	687a      	ldr	r2, [r7, #4]
    35d0:	6011      	str	r1, [r2, #0]
    35d2:	781b      	ldrb	r3, [r3, #0]
    35d4:	4403      	add	r3, r0
    35d6:	3b30      	subs	r3, #48	; 0x30
    35d8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    35da:	e7e6      	b.n	35aa <_atoi(char const**)+0xc>
  }
  return i;
    35dc:	68fb      	ldr	r3, [r7, #12]
}
    35de:	4618      	mov	r0, r3
    35e0:	3710      	adds	r7, #16
    35e2:	46bd      	mov	sp, r7
    35e4:	bd80      	pop	{r7, pc}

000035e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    35e6:	b590      	push	{r4, r7, lr}
    35e8:	b089      	sub	sp, #36	; 0x24
    35ea:	af00      	add	r7, sp, #0
    35ec:	60f8      	str	r0, [r7, #12]
    35ee:	60b9      	str	r1, [r7, #8]
    35f0:	607a      	str	r2, [r7, #4]
    35f2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    35f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35fa:	f003 0302 	and.w	r3, r3, #2
    35fe:	2b00      	cmp	r3, #0
    3600:	d10e      	bne.n	3620 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3606:	429a      	cmp	r2, r3
    3608:	d20a      	bcs.n	3620 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    360c:	2b1f      	cmp	r3, #31
    360e:	d807      	bhi.n	3620 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    3610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3612:	1c5a      	adds	r2, r3, #1
    3614:	637a      	str	r2, [r7, #52]	; 0x34
    3616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3618:	4413      	add	r3, r2
    361a:	2230      	movs	r2, #48	; 0x30
    361c:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    361e:	e7eb      	b.n	35f8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3622:	f003 0302 	and.w	r3, r3, #2
    3626:	2b00      	cmp	r3, #0
    3628:	d113      	bne.n	3652 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    362c:	f003 0301 	and.w	r3, r3, #1
    3630:	2b00      	cmp	r3, #0
    3632:	d00e      	beq.n	3652 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3638:	429a      	cmp	r2, r3
    363a:	d20a      	bcs.n	3652 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    363e:	2b1f      	cmp	r3, #31
    3640:	d807      	bhi.n	3652 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3644:	1c5a      	adds	r2, r3, #1
    3646:	637a      	str	r2, [r7, #52]	; 0x34
    3648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    364a:	4413      	add	r3, r2
    364c:	2230      	movs	r2, #48	; 0x30
    364e:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3650:	e7e6      	b.n	3620 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3654:	f003 0310 	and.w	r3, r3, #16
    3658:	2b00      	cmp	r3, #0
    365a:	d058      	beq.n	370e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3662:	2b00      	cmp	r3, #0
    3664:	d116      	bne.n	3694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3668:	2b00      	cmp	r3, #0
    366a:	d013      	beq.n	3694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    366c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    366e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3670:	429a      	cmp	r2, r3
    3672:	d003      	beq.n	367c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    3674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3678:	429a      	cmp	r2, r3
    367a:	d10b      	bne.n	3694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    367e:	3b01      	subs	r3, #1
    3680:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    3682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3684:	2b00      	cmp	r3, #0
    3686:	d005      	beq.n	3694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    368a:	2b10      	cmp	r3, #16
    368c:	d102      	bne.n	3694 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3690:	3b01      	subs	r3, #1
    3692:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3696:	2b10      	cmp	r3, #16
    3698:	d10f      	bne.n	36ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    369a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    369c:	f003 0320 	and.w	r3, r3, #32
    36a0:	2b00      	cmp	r3, #0
    36a2:	d10a      	bne.n	36ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    36a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36a6:	2b1f      	cmp	r3, #31
    36a8:	d807      	bhi.n	36ba <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    36aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ac:	1c5a      	adds	r2, r3, #1
    36ae:	637a      	str	r2, [r7, #52]	; 0x34
    36b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36b2:	4413      	add	r3, r2
    36b4:	2278      	movs	r2, #120	; 0x78
    36b6:	701a      	strb	r2, [r3, #0]
    36b8:	e01f      	b.n	36fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    36ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36bc:	2b10      	cmp	r3, #16
    36be:	d10f      	bne.n	36e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    36c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    36c2:	f003 0320 	and.w	r3, r3, #32
    36c6:	2b00      	cmp	r3, #0
    36c8:	d00a      	beq.n	36e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    36ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36cc:	2b1f      	cmp	r3, #31
    36ce:	d807      	bhi.n	36e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    36d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36d2:	1c5a      	adds	r2, r3, #1
    36d4:	637a      	str	r2, [r7, #52]	; 0x34
    36d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36d8:	4413      	add	r3, r2
    36da:	2258      	movs	r2, #88	; 0x58
    36dc:	701a      	strb	r2, [r3, #0]
    36de:	e00c      	b.n	36fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    36e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36e2:	2b02      	cmp	r3, #2
    36e4:	d109      	bne.n	36fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    36e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36e8:	2b1f      	cmp	r3, #31
    36ea:	d806      	bhi.n	36fa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    36ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36ee:	1c5a      	adds	r2, r3, #1
    36f0:	637a      	str	r2, [r7, #52]	; 0x34
    36f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36f4:	4413      	add	r3, r2
    36f6:	2262      	movs	r2, #98	; 0x62
    36f8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    36fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36fc:	2b1f      	cmp	r3, #31
    36fe:	d806      	bhi.n	370e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    3700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3702:	1c5a      	adds	r2, r3, #1
    3704:	637a      	str	r2, [r7, #52]	; 0x34
    3706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3708:	4413      	add	r3, r2
    370a:	2230      	movs	r2, #48	; 0x30
    370c:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3710:	2b00      	cmp	r3, #0
    3712:	d014      	beq.n	373e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3718:	429a      	cmp	r2, r3
    371a:	d110      	bne.n	373e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    371c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3720:	2b00      	cmp	r3, #0
    3722:	d109      	bne.n	3738 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3726:	f003 0304 	and.w	r3, r3, #4
    372a:	2b00      	cmp	r3, #0
    372c:	d104      	bne.n	3738 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3730:	f003 0308 	and.w	r3, r3, #8
    3734:	2b00      	cmp	r3, #0
    3736:	d002      	beq.n	373e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    3738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    373a:	3b01      	subs	r3, #1
    373c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3740:	2b1f      	cmp	r3, #31
    3742:	d824      	bhi.n	378e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    3744:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3748:	2b00      	cmp	r3, #0
    374a:	d007      	beq.n	375c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    374e:	1c5a      	adds	r2, r3, #1
    3750:	637a      	str	r2, [r7, #52]	; 0x34
    3752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3754:	4413      	add	r3, r2
    3756:	222d      	movs	r2, #45	; 0x2d
    3758:	701a      	strb	r2, [r3, #0]
    375a:	e018      	b.n	378e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    375e:	f003 0304 	and.w	r3, r3, #4
    3762:	2b00      	cmp	r3, #0
    3764:	d007      	beq.n	3776 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3768:	1c5a      	adds	r2, r3, #1
    376a:	637a      	str	r2, [r7, #52]	; 0x34
    376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    376e:	4413      	add	r3, r2
    3770:	222b      	movs	r2, #43	; 0x2b
    3772:	701a      	strb	r2, [r3, #0]
    3774:	e00b      	b.n	378e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    3776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3778:	f003 0308 	and.w	r3, r3, #8
    377c:	2b00      	cmp	r3, #0
    377e:	d006      	beq.n	378e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    3780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3782:	1c5a      	adds	r2, r3, #1
    3784:	637a      	str	r2, [r7, #52]	; 0x34
    3786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3788:	4413      	add	r3, r2
    378a:	2220      	movs	r2, #32
    378c:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3790:	f003 0302 	and.w	r3, r3, #2
    3794:	2b00      	cmp	r3, #0
    3796:	d116      	bne.n	37c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    3798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    379a:	f003 0301 	and.w	r3, r3, #1
    379e:	2b00      	cmp	r3, #0
    37a0:	d111      	bne.n	37c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    37a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37a4:	61fb      	str	r3, [r7, #28]
    37a6:	69fa      	ldr	r2, [r7, #28]
    37a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    37aa:	429a      	cmp	r2, r3
    37ac:	d20b      	bcs.n	37c6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    37ae:	68fc      	ldr	r4, [r7, #12]
    37b0:	687a      	ldr	r2, [r7, #4]
    37b2:	1c53      	adds	r3, r2, #1
    37b4:	607b      	str	r3, [r7, #4]
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	68b9      	ldr	r1, [r7, #8]
    37ba:	2020      	movs	r0, #32
    37bc:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    37be:	69fb      	ldr	r3, [r7, #28]
    37c0:	3301      	adds	r3, #1
    37c2:	61fb      	str	r3, [r7, #28]
    37c4:	e7ef      	b.n	37a6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    37c6:	2300      	movs	r3, #0
    37c8:	61bb      	str	r3, [r7, #24]
    37ca:	69ba      	ldr	r2, [r7, #24]
    37cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37ce:	429a      	cmp	r2, r3
    37d0:	d211      	bcs.n	37f6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    37d2:	68fc      	ldr	r4, [r7, #12]
    37d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    37d6:	69bb      	ldr	r3, [r7, #24]
    37d8:	1ad3      	subs	r3, r2, r3
    37da:	3b01      	subs	r3, #1
    37dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    37de:	4413      	add	r3, r2
    37e0:	7818      	ldrb	r0, [r3, #0]
    37e2:	687a      	ldr	r2, [r7, #4]
    37e4:	1c53      	adds	r3, r2, #1
    37e6:	607b      	str	r3, [r7, #4]
    37e8:	683b      	ldr	r3, [r7, #0]
    37ea:	68b9      	ldr	r1, [r7, #8]
    37ec:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    37ee:	69bb      	ldr	r3, [r7, #24]
    37f0:	3301      	adds	r3, #1
    37f2:	61bb      	str	r3, [r7, #24]
    37f4:	e7e9      	b.n	37ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    37f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    37f8:	f003 0302 	and.w	r3, r3, #2
    37fc:	2b00      	cmp	r3, #0
    37fe:	d00e      	beq.n	381e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    3800:	687a      	ldr	r2, [r7, #4]
    3802:	697b      	ldr	r3, [r7, #20]
    3804:	1ad3      	subs	r3, r2, r3
    3806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3808:	429a      	cmp	r2, r3
    380a:	d908      	bls.n	381e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    380c:	68fc      	ldr	r4, [r7, #12]
    380e:	687a      	ldr	r2, [r7, #4]
    3810:	1c53      	adds	r3, r2, #1
    3812:	607b      	str	r3, [r7, #4]
    3814:	683b      	ldr	r3, [r7, #0]
    3816:	68b9      	ldr	r1, [r7, #8]
    3818:	2020      	movs	r0, #32
    381a:	47a0      	blx	r4
    while (idx - start_idx < width) {
    381c:	e7f0      	b.n	3800 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    381e:	687b      	ldr	r3, [r7, #4]
}
    3820:	4618      	mov	r0, r3
    3822:	3724      	adds	r7, #36	; 0x24
    3824:	46bd      	mov	sp, r7
    3826:	bd90      	pop	{r4, r7, pc}

00003828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3828:	b580      	push	{r7, lr}
    382a:	b096      	sub	sp, #88	; 0x58
    382c:	af08      	add	r7, sp, #32
    382e:	60f8      	str	r0, [r7, #12]
    3830:	60b9      	str	r1, [r7, #8]
    3832:	607a      	str	r2, [r7, #4]
    3834:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3836:	2300      	movs	r3, #0
    3838:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    383a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    383c:	2b00      	cmp	r3, #0
    383e:	d103      	bne.n	3848 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    3840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3842:	f023 0310 	bic.w	r3, r3, #16
    3846:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    384a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    384e:	2b00      	cmp	r3, #0
    3850:	d002      	beq.n	3858 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    3852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3854:	2b00      	cmp	r3, #0
    3856:	d034      	beq.n	38c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    3858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    385a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    385c:	fbb3 f2f2 	udiv	r2, r3, r2
    3860:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3862:	fb01 f202 	mul.w	r2, r1, r2
    3866:	1a9b      	subs	r3, r3, r2
    3868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    386c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3870:	2b09      	cmp	r3, #9
    3872:	d804      	bhi.n	387e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    3874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3878:	3330      	adds	r3, #48	; 0x30
    387a:	b2da      	uxtb	r2, r3
    387c:	e00d      	b.n	389a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3880:	f003 0320 	and.w	r3, r3, #32
    3884:	2b00      	cmp	r3, #0
    3886:	d001      	beq.n	388c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    3888:	2241      	movs	r2, #65	; 0x41
    388a:	e000      	b.n	388e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    388c:	2261      	movs	r2, #97	; 0x61
    388e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3892:	4413      	add	r3, r2
    3894:	b2db      	uxtb	r3, r3
    3896:	3b0a      	subs	r3, #10
    3898:	b2da      	uxtb	r2, r3
    389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    389c:	1c59      	adds	r1, r3, #1
    389e:	6379      	str	r1, [r7, #52]	; 0x34
    38a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
    38a4:	440b      	add	r3, r1
    38a6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    38aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    38ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    38ae:	fbb2 f3f3 	udiv	r3, r2, r3
    38b2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    38b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    38b6:	2b00      	cmp	r3, #0
    38b8:	d003      	beq.n	38c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    38ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38bc:	2b1f      	cmp	r3, #31
    38be:	d800      	bhi.n	38c2 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    38c0:	e7ca      	b.n	3858 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    38c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    38c4:	9306      	str	r3, [sp, #24]
    38c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38c8:	9305      	str	r3, [sp, #20]
    38ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    38cc:	9304      	str	r3, [sp, #16]
    38ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    38d0:	9303      	str	r3, [sp, #12]
    38d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    38d6:	9302      	str	r3, [sp, #8]
    38d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38da:	9301      	str	r3, [sp, #4]
    38dc:	f107 0310 	add.w	r3, r7, #16
    38e0:	9300      	str	r3, [sp, #0]
    38e2:	683b      	ldr	r3, [r7, #0]
    38e4:	687a      	ldr	r2, [r7, #4]
    38e6:	68b9      	ldr	r1, [r7, #8]
    38e8:	68f8      	ldr	r0, [r7, #12]
    38ea:	f7ff fe7c 	bl	35e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    38ee:	4603      	mov	r3, r0
}
    38f0:	4618      	mov	r0, r3
    38f2:	3738      	adds	r7, #56	; 0x38
    38f4:	46bd      	mov	sp, r7
    38f6:	bd80      	pop	{r7, pc}

000038f8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    38f8:	b580      	push	{r7, lr}
    38fa:	b096      	sub	sp, #88	; 0x58
    38fc:	af08      	add	r7, sp, #32
    38fe:	60f8      	str	r0, [r7, #12]
    3900:	60b9      	str	r1, [r7, #8]
    3902:	607a      	str	r2, [r7, #4]
    3904:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3906:	2300      	movs	r3, #0
    3908:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    390a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    390e:	4313      	orrs	r3, r2
    3910:	d103      	bne.n	391a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3914:	f023 0310 	bic.w	r3, r3, #16
    3918:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    391a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3920:	2b00      	cmp	r3, #0
    3922:	d003      	beq.n	392c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    3924:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3928:	4313      	orrs	r3, r2
    392a:	d039      	beq.n	39a0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
      const char digit = (char)(value % base);
    392c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    3934:	f003 f9ec 	bl	6d10 <__aeabi_uldivmod>
    3938:	4613      	mov	r3, r2
    393a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    393e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3942:	2b09      	cmp	r3, #9
    3944:	d804      	bhi.n	3950 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x58>
    3946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    394a:	3330      	adds	r3, #48	; 0x30
    394c:	b2da      	uxtb	r2, r3
    394e:	e00d      	b.n	396c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
    3950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3952:	f003 0320 	and.w	r3, r3, #32
    3956:	2b00      	cmp	r3, #0
    3958:	d001      	beq.n	395e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x66>
    395a:	2241      	movs	r2, #65	; 0x41
    395c:	e000      	b.n	3960 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    395e:	2261      	movs	r2, #97	; 0x61
    3960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3964:	4413      	add	r3, r2
    3966:	b2db      	uxtb	r3, r3
    3968:	3b0a      	subs	r3, #10
    396a:	b2da      	uxtb	r2, r3
    396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    396e:	1c59      	adds	r1, r3, #1
    3970:	6379      	str	r1, [r7, #52]	; 0x34
    3972:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3976:	440b      	add	r3, r1
    3978:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    397c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    3980:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3984:	f003 f9c4 	bl	6d10 <__aeabi_uldivmod>
    3988:	4602      	mov	r2, r0
    398a:	460b      	mov	r3, r1
    398c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3990:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3994:	4313      	orrs	r3, r2
    3996:	d003      	beq.n	39a0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    3998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    399a:	2b1f      	cmp	r3, #31
    399c:	d800      	bhi.n	39a0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
    399e:	e7c5      	b.n	392c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    39a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    39a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    39a4:	9206      	str	r2, [sp, #24]
    39a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    39a8:	9205      	str	r2, [sp, #20]
    39aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
    39ac:	9204      	str	r2, [sp, #16]
    39ae:	9303      	str	r3, [sp, #12]
    39b0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    39b4:	9302      	str	r3, [sp, #8]
    39b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39b8:	9301      	str	r3, [sp, #4]
    39ba:	f107 0310 	add.w	r3, r7, #16
    39be:	9300      	str	r3, [sp, #0]
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	687a      	ldr	r2, [r7, #4]
    39c4:	68b9      	ldr	r1, [r7, #8]
    39c6:	68f8      	ldr	r0, [r7, #12]
    39c8:	f7ff fe0d 	bl	35e6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    39cc:	4603      	mov	r3, r0
}
    39ce:	4618      	mov	r0, r3
    39d0:	3738      	adds	r7, #56	; 0x38
    39d2:	46bd      	mov	sp, r7
    39d4:	bd80      	pop	{r7, pc}
    39d6:	Address 0x00000000000039d6 is out of bounds.


000039d8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    39d8:	b590      	push	{r4, r7, lr}
    39da:	b09b      	sub	sp, #108	; 0x6c
    39dc:	af00      	add	r7, sp, #0
    39de:	6178      	str	r0, [r7, #20]
    39e0:	6139      	str	r1, [r7, #16]
    39e2:	60fa      	str	r2, [r7, #12]
    39e4:	60bb      	str	r3, [r7, #8]
    39e6:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    39ee:	e9d7 0100 	ldrd	r0, r1, [r7]
    39f2:	f002 ffdf 	bl	69b4 <__aeabi_d2f>
    39f6:	4603      	mov	r3, r0
    39f8:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    39fa:	2300      	movs	r3, #0
    39fc:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    39fe:	f04f 0300 	mov.w	r3, #0
    3a02:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3a04:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    3a08:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    3a0a:	2300      	movs	r3, #0
    3a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3a10:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a1c:	d50a      	bpl.n	3a34 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3a1e:	2301      	movs	r3, #1
    3a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3a24:	ed9f 7aab 	vldr	s14, [pc, #684]	; 3cd4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    3a28:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
    3a30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d101      	bne.n	3a44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3a40:	2306      	movs	r3, #6
    3a42:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a46:	2b1f      	cmp	r3, #31
    3a48:	d80f      	bhi.n	3a6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    3a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3a4c:	2b09      	cmp	r3, #9
    3a4e:	d90c      	bls.n	3a6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3a52:	1c5a      	adds	r2, r3, #1
    3a54:	663a      	str	r2, [r7, #96]	; 0x60
    3a56:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3a5a:	4413      	add	r3, r2
    3a5c:	2230      	movs	r2, #48	; 0x30
    3a5e:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3a64:	3b01      	subs	r3, #1
    3a66:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3a68:	e7ec      	b.n	3a44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    3a6a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3a72:	ee17 3a90 	vmov	r3, s15
    3a76:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    3a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3a7a:	ee07 3a90 	vmov	s15, r3
    3a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3a82:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3a86:	ee37 7a67 	vsub.f32	s14, s14, s15
    3a8a:	4a93      	ldr	r2, [pc, #588]	; (3cd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3a8e:	009b      	lsls	r3, r3, #2
    3a90:	4413      	add	r3, r2
    3a92:	edd3 7a00 	vldr	s15, [r3]
    3a96:	ee67 7a27 	vmul.f32	s15, s14, s15
    3a9a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    3a9e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3aa6:	ee17 3a90 	vmov	r3, s15
    3aaa:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    3aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3aae:	ee07 3a90 	vmov	s15, r3
    3ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3ab6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    3aba:	ee77 7a67 	vsub.f32	s15, s14, s15
    3abe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    3ac2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3ac6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3aca:	eef4 7ac7 	vcmpe.f32	s15, s14
    3ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ad2:	dd18      	ble.n	3b06 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ad6:	3301      	adds	r3, #1
    3ad8:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    3ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3adc:	ee07 3a90 	vmov	s15, r3
    3ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3ae4:	4a7c      	ldr	r2, [pc, #496]	; (3cd8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3ae8:	009b      	lsls	r3, r3, #2
    3aea:	4413      	add	r3, r2
    3aec:	edd3 7a00 	vldr	s15, [r3]
    3af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3af8:	db19      	blt.n	3b2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    3afa:	2300      	movs	r3, #0
    3afc:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b00:	3301      	adds	r3, #1
    3b02:	65bb      	str	r3, [r7, #88]	; 0x58
    3b04:	e013      	b.n	3b2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3b06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3b0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3b0e:	eef4 7a47 	vcmp.f32	s15, s14
    3b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b16:	d10a      	bne.n	3b2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    3b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d004      	beq.n	3b28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b20:	f003 0301 	and.w	r3, r3, #1
    3b24:	2b00      	cmp	r3, #0
    3b26:	d002      	beq.n	3b2e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    3b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b2a:	3301      	adds	r3, #1
    3b2c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3b2e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3b32:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3cdc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    3b36:	eef4 7ac7 	vcmpe.f32	s15, s14
    3b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b3e:	dd01      	ble.n	3b44 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3b40:	2300      	movs	r3, #0
    3b42:	e166      	b.n	3e12 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3b46:	2b00      	cmp	r3, #0
    3b48:	d129      	bne.n	3b9e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    3b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b4c:	ee07 3a90 	vmov	s15, r3
    3b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b54:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3b58:	ee77 7a67 	vsub.f32	s15, s14, s15
    3b5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3b60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3b64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3b68:	eef4 7ac7 	vcmpe.f32	s15, s14
    3b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b70:	dd03      	ble.n	3b7a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    3b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b74:	3301      	adds	r3, #1
    3b76:	65bb      	str	r3, [r7, #88]	; 0x58
    3b78:	e062      	b.n	3c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    3b7a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3b7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3b82:	eef4 7a47 	vcmp.f32	s15, s14
    3b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b8a:	d159      	bne.n	3c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    3b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b8e:	f003 0301 	and.w	r3, r3, #1
    3b92:	2b00      	cmp	r3, #0
    3b94:	d054      	beq.n	3c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    3b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b98:	3301      	adds	r3, #1
    3b9a:	65bb      	str	r3, [r7, #88]	; 0x58
    3b9c:	e050      	b.n	3c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    3b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3ba0:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ba4:	2b1f      	cmp	r3, #31
    3ba6:	d828      	bhi.n	3bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    3ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3baa:	3b01      	subs	r3, #1
    3bac:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    3bae:	6d79      	ldr	r1, [r7, #84]	; 0x54
    3bb0:	4b4b      	ldr	r3, [pc, #300]	; (3ce0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3bb2:	fba3 2301 	umull	r2, r3, r3, r1
    3bb6:	08da      	lsrs	r2, r3, #3
    3bb8:	4613      	mov	r3, r2
    3bba:	009b      	lsls	r3, r3, #2
    3bbc:	4413      	add	r3, r2
    3bbe:	005b      	lsls	r3, r3, #1
    3bc0:	1aca      	subs	r2, r1, r3
    3bc2:	b2d3      	uxtb	r3, r2
    3bc4:	3330      	adds	r3, #48	; 0x30
    3bc6:	b2d9      	uxtb	r1, r3
    3bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3bca:	1c5a      	adds	r2, r3, #1
    3bcc:	663a      	str	r2, [r7, #96]	; 0x60
    3bce:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3bd2:	4413      	add	r3, r2
    3bd4:	460a      	mov	r2, r1
    3bd6:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    3bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3bdc:	4a40      	ldr	r2, [pc, #256]	; (3ce0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3bde:	fba2 2303 	umull	r2, r3, r2, r3
    3be2:	08db      	lsrs	r3, r3, #3
    3be4:	657b      	str	r3, [r7, #84]	; 0x54
    3be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3be8:	2b00      	cmp	r3, #0
    3bea:	bf0c      	ite	eq
    3bec:	2301      	moveq	r3, #1
    3bee:	2300      	movne	r3, #0
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d100      	bne.n	3bf8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3bf6:	e7d4      	b.n	3ba2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    3bf8:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3bfc:	2b1f      	cmp	r3, #31
    3bfe:	d806      	bhi.n	3c0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3c02:	1e5a      	subs	r2, r3, #1
    3c04:	653a      	str	r2, [r7, #80]	; 0x50
    3c06:	2b00      	cmp	r3, #0
    3c08:	d001      	beq.n	3c0e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3c0a:	2301      	movs	r3, #1
    3c0c:	e000      	b.n	3c10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3c0e:	2300      	movs	r3, #0
    3c10:	2b00      	cmp	r3, #0
    3c12:	d009      	beq.n	3c28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    3c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c16:	1c5a      	adds	r2, r3, #1
    3c18:	663a      	str	r2, [r7, #96]	; 0x60
    3c1a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3c1e:	4413      	add	r3, r2
    3c20:	2230      	movs	r2, #48	; 0x30
    3c22:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3c26:	e7e8      	b.n	3bfa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c2a:	2b1f      	cmp	r3, #31
    3c2c:	d808      	bhi.n	3c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    3c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c30:	1c5a      	adds	r2, r3, #1
    3c32:	663a      	str	r2, [r7, #96]	; 0x60
    3c34:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3c38:	4413      	add	r3, r2
    3c3a:	222e      	movs	r2, #46	; 0x2e
    3c3c:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c42:	2b1f      	cmp	r3, #31
    3c44:	d829      	bhi.n	3c9a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    3c46:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3c48:	4b26      	ldr	r3, [pc, #152]	; (3ce4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3c4a:	fb83 1302 	smull	r1, r3, r3, r2
    3c4e:	1099      	asrs	r1, r3, #2
    3c50:	17d3      	asrs	r3, r2, #31
    3c52:	1ac9      	subs	r1, r1, r3
    3c54:	460b      	mov	r3, r1
    3c56:	009b      	lsls	r3, r3, #2
    3c58:	440b      	add	r3, r1
    3c5a:	005b      	lsls	r3, r3, #1
    3c5c:	1ad1      	subs	r1, r2, r3
    3c5e:	b2cb      	uxtb	r3, r1
    3c60:	3330      	adds	r3, #48	; 0x30
    3c62:	b2d9      	uxtb	r1, r3
    3c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3c66:	1c5a      	adds	r2, r3, #1
    3c68:	663a      	str	r2, [r7, #96]	; 0x60
    3c6a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3c6e:	4413      	add	r3, r2
    3c70:	460a      	mov	r2, r1
    3c72:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    3c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3c78:	4a1a      	ldr	r2, [pc, #104]	; (3ce4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3c7a:	fb82 1203 	smull	r1, r2, r2, r3
    3c7e:	1092      	asrs	r2, r2, #2
    3c80:	17db      	asrs	r3, r3, #31
    3c82:	1ad3      	subs	r3, r2, r3
    3c84:	65bb      	str	r3, [r7, #88]	; 0x58
    3c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3c88:	2b00      	cmp	r3, #0
    3c8a:	bf0c      	ite	eq
    3c8c:	2301      	moveq	r3, #1
    3c8e:	2300      	movne	r3, #0
    3c90:	b2db      	uxtb	r3, r3
    3c92:	2b00      	cmp	r3, #0
    3c94:	d100      	bne.n	3c98 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3c96:	e7d3      	b.n	3c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    3c98:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3c9e:	f003 0302 	and.w	r3, r3, #2
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d120      	bne.n	3ce8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3ca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3caa:	f003 0301 	and.w	r3, r3, #1
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d01a      	beq.n	3ce8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3cb6:	429a      	cmp	r2, r3
    3cb8:	d216      	bcs.n	3ce8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    3cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3cbc:	2b1f      	cmp	r3, #31
    3cbe:	d813      	bhi.n	3ce8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    3cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3cc2:	1c5a      	adds	r2, r3, #1
    3cc4:	663a      	str	r2, [r7, #96]	; 0x60
    3cc6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3cca:	4413      	add	r3, r2
    3ccc:	2230      	movs	r2, #48	; 0x30
    3cce:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3cd2:	e7e2      	b.n	3c9a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    3cd4:	00000000 	.word	0x00000000
    3cd8:	00008c40 	.word	0x00008c40
    3cdc:	4f000000 	.word	0x4f000000
    3ce0:	cccccccd 	.word	0xcccccccd
    3ce4:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3cec:	429a      	cmp	r2, r3
    3cee:	d112      	bne.n	3d16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d10b      	bne.n	3d10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3cfc:	f003 0304 	and.w	r3, r3, #4
    3d00:	2b00      	cmp	r3, #0
    3d02:	d105      	bne.n	3d10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3d08:	f003 0308 	and.w	r3, r3, #8
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d002      	beq.n	3d16 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    3d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d12:	3b01      	subs	r3, #1
    3d14:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d18:	2b1f      	cmp	r3, #31
    3d1a:	d82c      	bhi.n	3d76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    3d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3d20:	2b00      	cmp	r3, #0
    3d22:	d009      	beq.n	3d38 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    3d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d26:	1c5a      	adds	r2, r3, #1
    3d28:	663a      	str	r2, [r7, #96]	; 0x60
    3d2a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3d2e:	4413      	add	r3, r2
    3d30:	222d      	movs	r2, #45	; 0x2d
    3d32:	f803 2c50 	strb.w	r2, [r3, #-80]
    3d36:	e01e      	b.n	3d76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    3d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3d3c:	f003 0304 	and.w	r3, r3, #4
    3d40:	2b00      	cmp	r3, #0
    3d42:	d009      	beq.n	3d58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d46:	1c5a      	adds	r2, r3, #1
    3d48:	663a      	str	r2, [r7, #96]	; 0x60
    3d4a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3d4e:	4413      	add	r3, r2
    3d50:	222b      	movs	r2, #43	; 0x2b
    3d52:	f803 2c50 	strb.w	r2, [r3, #-80]
    3d56:	e00e      	b.n	3d76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    3d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3d5c:	f003 0308 	and.w	r3, r3, #8
    3d60:	2b00      	cmp	r3, #0
    3d62:	d008      	beq.n	3d76 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    3d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d66:	1c5a      	adds	r2, r3, #1
    3d68:	663a      	str	r2, [r7, #96]	; 0x60
    3d6a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3d6e:	4413      	add	r3, r2
    3d70:	2220      	movs	r2, #32
    3d72:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3d7a:	f003 0302 	and.w	r3, r3, #2
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d117      	bne.n	3db2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    3d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3d86:	f003 0301 	and.w	r3, r3, #1
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	d111      	bne.n	3db2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    3d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d90:	64fb      	str	r3, [r7, #76]	; 0x4c
    3d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3d96:	429a      	cmp	r2, r3
    3d98:	d20b      	bcs.n	3db2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    3d9a:	697c      	ldr	r4, [r7, #20]
    3d9c:	68fa      	ldr	r2, [r7, #12]
    3d9e:	1c53      	adds	r3, r2, #1
    3da0:	60fb      	str	r3, [r7, #12]
    3da2:	68bb      	ldr	r3, [r7, #8]
    3da4:	6939      	ldr	r1, [r7, #16]
    3da6:	2020      	movs	r0, #32
    3da8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    3daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3dac:	3301      	adds	r3, #1
    3dae:	64fb      	str	r3, [r7, #76]	; 0x4c
    3db0:	e7ef      	b.n	3d92 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3db2:	2300      	movs	r3, #0
    3db4:	64bb      	str	r3, [r7, #72]	; 0x48
    3db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3dba:	429a      	cmp	r2, r3
    3dbc:	d213      	bcs.n	3de6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3dbe:	697c      	ldr	r4, [r7, #20]
    3dc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3dc4:	1ad3      	subs	r3, r2, r3
    3dc6:	3b01      	subs	r3, #1
    3dc8:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3dcc:	4413      	add	r3, r2
    3dce:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    3dd2:	68fa      	ldr	r2, [r7, #12]
    3dd4:	1c53      	adds	r3, r2, #1
    3dd6:	60fb      	str	r3, [r7, #12]
    3dd8:	68bb      	ldr	r3, [r7, #8]
    3dda:	6939      	ldr	r1, [r7, #16]
    3ddc:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3de0:	3301      	adds	r3, #1
    3de2:	64bb      	str	r3, [r7, #72]	; 0x48
    3de4:	e7e7      	b.n	3db6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3dea:	f003 0302 	and.w	r3, r3, #2
    3dee:	2b00      	cmp	r3, #0
    3df0:	d00e      	beq.n	3e10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    3df2:	68fa      	ldr	r2, [r7, #12]
    3df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3df6:	1ad3      	subs	r3, r2, r3
    3df8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    3dfa:	429a      	cmp	r2, r3
    3dfc:	d908      	bls.n	3e10 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    3dfe:	697c      	ldr	r4, [r7, #20]
    3e00:	68fa      	ldr	r2, [r7, #12]
    3e02:	1c53      	adds	r3, r2, #1
    3e04:	60fb      	str	r3, [r7, #12]
    3e06:	68bb      	ldr	r3, [r7, #8]
    3e08:	6939      	ldr	r1, [r7, #16]
    3e0a:	2020      	movs	r0, #32
    3e0c:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3e0e:	e7f0      	b.n	3df2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    3e10:	68fb      	ldr	r3, [r7, #12]
}
    3e12:	4618      	mov	r0, r3
    3e14:	376c      	adds	r7, #108	; 0x6c
    3e16:	46bd      	mov	sp, r7
    3e18:	bd90      	pop	{r4, r7, pc}
    3e1a:	bf00      	nop

00003e1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3e1c:	b5b0      	push	{r4, r5, r7, lr}
    3e1e:	b0a0      	sub	sp, #128	; 0x80
    3e20:	af0a      	add	r7, sp, #40	; 0x28
    3e22:	60f8      	str	r0, [r7, #12]
    3e24:	60b9      	str	r1, [r7, #8]
    3e26:	607a      	str	r2, [r7, #4]
    3e28:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    3e2a:	2300      	movs	r3, #0
    3e2c:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    3e2e:	68bb      	ldr	r3, [r7, #8]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d101      	bne.n	3e38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    3e34:	4ba2      	ldr	r3, [pc, #648]	; (40c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    3e36:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    3e38:	683b      	ldr	r3, [r7, #0]
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	f000 8446 	beq.w	46ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    3e42:	683b      	ldr	r3, [r7, #0]
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	2b25      	cmp	r3, #37	; 0x25
    3e48:	d00d      	beq.n	3e66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    3e4a:	68fc      	ldr	r4, [r7, #12]
    3e4c:	683b      	ldr	r3, [r7, #0]
    3e4e:	7818      	ldrb	r0, [r3, #0]
    3e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e52:	1c53      	adds	r3, r2, #1
    3e54:	647b      	str	r3, [r7, #68]	; 0x44
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	68b9      	ldr	r1, [r7, #8]
    3e5a:	47a0      	blx	r4
      format++;
    3e5c:	683b      	ldr	r3, [r7, #0]
    3e5e:	3301      	adds	r3, #1
    3e60:	603b      	str	r3, [r7, #0]
      continue;
    3e62:	f000 bc32 	b.w	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
    }
    else {
      // yes, evaluate it
      format++;
    3e66:	683b      	ldr	r3, [r7, #0]
    3e68:	3301      	adds	r3, #1
    3e6a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    3e6c:	2300      	movs	r3, #0
    3e6e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    3e70:	683b      	ldr	r3, [r7, #0]
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	3b20      	subs	r3, #32
    3e76:	2b10      	cmp	r3, #16
    3e78:	d856      	bhi.n	3f28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    3e7a:	a201      	add	r2, pc, #4	; (adr r2, 3e80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    3e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3e80:	00003f01 	.word	0x00003f01
    3e84:	00003f29 	.word	0x00003f29
    3e88:	00003f29 	.word	0x00003f29
    3e8c:	00003f15 	.word	0x00003f15
    3e90:	00003f29 	.word	0x00003f29
    3e94:	00003f29 	.word	0x00003f29
    3e98:	00003f29 	.word	0x00003f29
    3e9c:	00003f29 	.word	0x00003f29
    3ea0:	00003f29 	.word	0x00003f29
    3ea4:	00003f29 	.word	0x00003f29
    3ea8:	00003f29 	.word	0x00003f29
    3eac:	00003eed 	.word	0x00003eed
    3eb0:	00003f29 	.word	0x00003f29
    3eb4:	00003ed9 	.word	0x00003ed9
    3eb8:	00003f29 	.word	0x00003f29
    3ebc:	00003f29 	.word	0x00003f29
    3ec0:	00003ec5 	.word	0x00003ec5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ec6:	f043 0301 	orr.w	r3, r3, #1
    3eca:	657b      	str	r3, [r7, #84]	; 0x54
    3ecc:	683b      	ldr	r3, [r7, #0]
    3ece:	3301      	adds	r3, #1
    3ed0:	603b      	str	r3, [r7, #0]
    3ed2:	2301      	movs	r3, #1
    3ed4:	64bb      	str	r3, [r7, #72]	; 0x48
    3ed6:	e02a      	b.n	3f2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    3ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eda:	f043 0302 	orr.w	r3, r3, #2
    3ede:	657b      	str	r3, [r7, #84]	; 0x54
    3ee0:	683b      	ldr	r3, [r7, #0]
    3ee2:	3301      	adds	r3, #1
    3ee4:	603b      	str	r3, [r7, #0]
    3ee6:	2301      	movs	r3, #1
    3ee8:	64bb      	str	r3, [r7, #72]	; 0x48
    3eea:	e020      	b.n	3f2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eee:	f043 0304 	orr.w	r3, r3, #4
    3ef2:	657b      	str	r3, [r7, #84]	; 0x54
    3ef4:	683b      	ldr	r3, [r7, #0]
    3ef6:	3301      	adds	r3, #1
    3ef8:	603b      	str	r3, [r7, #0]
    3efa:	2301      	movs	r3, #1
    3efc:	64bb      	str	r3, [r7, #72]	; 0x48
    3efe:	e016      	b.n	3f2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f02:	f043 0308 	orr.w	r3, r3, #8
    3f06:	657b      	str	r3, [r7, #84]	; 0x54
    3f08:	683b      	ldr	r3, [r7, #0]
    3f0a:	3301      	adds	r3, #1
    3f0c:	603b      	str	r3, [r7, #0]
    3f0e:	2301      	movs	r3, #1
    3f10:	64bb      	str	r3, [r7, #72]	; 0x48
    3f12:	e00c      	b.n	3f2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f16:	f043 0310 	orr.w	r3, r3, #16
    3f1a:	657b      	str	r3, [r7, #84]	; 0x54
    3f1c:	683b      	ldr	r3, [r7, #0]
    3f1e:	3301      	adds	r3, #1
    3f20:	603b      	str	r3, [r7, #0]
    3f22:	2301      	movs	r3, #1
    3f24:	64bb      	str	r3, [r7, #72]	; 0x48
    3f26:	e002      	b.n	3f2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    3f28:	2300      	movs	r3, #0
    3f2a:	64bb      	str	r3, [r7, #72]	; 0x48
    3f2c:	bf00      	nop
      }
    } while (n);
    3f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3f30:	2b00      	cmp	r3, #0
    3f32:	d000      	beq.n	3f36 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    3f34:	e79c      	b.n	3e70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    3f36:	2300      	movs	r3, #0
    3f38:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    3f3a:	683b      	ldr	r3, [r7, #0]
    3f3c:	781b      	ldrb	r3, [r3, #0]
    3f3e:	4618      	mov	r0, r3
    3f40:	f7ff fb19 	bl	3576 <_is_digit(char)>
    3f44:	4603      	mov	r3, r0
    3f46:	2b00      	cmp	r3, #0
    3f48:	d005      	beq.n	3f56 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    3f4a:	463b      	mov	r3, r7
    3f4c:	4618      	mov	r0, r3
    3f4e:	f7ff fb26 	bl	359e <_atoi(char const**)>
    3f52:	6538      	str	r0, [r7, #80]	; 0x50
    3f54:	e018      	b.n	3f88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    3f56:	683b      	ldr	r3, [r7, #0]
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	2b2a      	cmp	r3, #42	; 0x2a
    3f5c:	d114      	bne.n	3f88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    3f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3f60:	1d1a      	adds	r2, r3, #4
    3f62:	66ba      	str	r2, [r7, #104]	; 0x68
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    3f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	da07      	bge.n	3f7e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    3f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f70:	f043 0302 	orr.w	r3, r3, #2
    3f74:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    3f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f78:	425b      	negs	r3, r3
    3f7a:	653b      	str	r3, [r7, #80]	; 0x50
    3f7c:	e001      	b.n	3f82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    3f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f80:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    3f82:	683b      	ldr	r3, [r7, #0]
    3f84:	3301      	adds	r3, #1
    3f86:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    3f88:	2300      	movs	r3, #0
    3f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    3f8c:	683b      	ldr	r3, [r7, #0]
    3f8e:	781b      	ldrb	r3, [r3, #0]
    3f90:	2b2e      	cmp	r3, #46	; 0x2e
    3f92:	d124      	bne.n	3fde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    3f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3f9a:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    3f9c:	683b      	ldr	r3, [r7, #0]
    3f9e:	3301      	adds	r3, #1
    3fa0:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    3fa2:	683b      	ldr	r3, [r7, #0]
    3fa4:	781b      	ldrb	r3, [r3, #0]
    3fa6:	4618      	mov	r0, r3
    3fa8:	f7ff fae5 	bl	3576 <_is_digit(char)>
    3fac:	4603      	mov	r3, r0
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d005      	beq.n	3fbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    3fb2:	463b      	mov	r3, r7
    3fb4:	4618      	mov	r0, r3
    3fb6:	f7ff faf2 	bl	359e <_atoi(char const**)>
    3fba:	64f8      	str	r0, [r7, #76]	; 0x4c
    3fbc:	e00f      	b.n	3fde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    3fbe:	683b      	ldr	r3, [r7, #0]
    3fc0:	781b      	ldrb	r3, [r3, #0]
    3fc2:	2b2a      	cmp	r3, #42	; 0x2a
    3fc4:	d10b      	bne.n	3fde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    3fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3fc8:	1d1a      	adds	r2, r3, #4
    3fca:	66ba      	str	r2, [r7, #104]	; 0x68
    3fcc:	681b      	ldr	r3, [r3, #0]
    3fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    3fd8:	683b      	ldr	r3, [r7, #0]
    3fda:	3301      	adds	r3, #1
    3fdc:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    3fde:	683b      	ldr	r3, [r7, #0]
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	3b68      	subs	r3, #104	; 0x68
    3fe4:	2b12      	cmp	r3, #18
    3fe6:	d867      	bhi.n	40b8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    3fe8:	a201      	add	r2, pc, #4	; (adr r2, 3ff0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    3fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3fee:	bf00      	nop
    3ff0:	00004063 	.word	0x00004063
    3ff4:	000040b9 	.word	0x000040b9
    3ff8:	00004099 	.word	0x00004099
    3ffc:	000040b9 	.word	0x000040b9
    4000:	0000403d 	.word	0x0000403d
    4004:	000040b9 	.word	0x000040b9
    4008:	000040b9 	.word	0x000040b9
    400c:	000040b9 	.word	0x000040b9
    4010:	000040b9 	.word	0x000040b9
    4014:	000040b9 	.word	0x000040b9
    4018:	000040b9 	.word	0x000040b9
    401c:	000040b9 	.word	0x000040b9
    4020:	00004089 	.word	0x00004089
    4024:	000040b9 	.word	0x000040b9
    4028:	000040b9 	.word	0x000040b9
    402c:	000040b9 	.word	0x000040b9
    4030:	000040b9 	.word	0x000040b9
    4034:	000040b9 	.word	0x000040b9
    4038:	000040a9 	.word	0x000040a9
      case 'l' :
        flags |= FLAGS_LONG;
    403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    403e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4042:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4044:	683b      	ldr	r3, [r7, #0]
    4046:	3301      	adds	r3, #1
    4048:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    404a:	683b      	ldr	r3, [r7, #0]
    404c:	781b      	ldrb	r3, [r3, #0]
    404e:	2b6c      	cmp	r3, #108	; 0x6c
    4050:	d134      	bne.n	40bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    4052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4058:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    405a:	683b      	ldr	r3, [r7, #0]
    405c:	3301      	adds	r3, #1
    405e:	603b      	str	r3, [r7, #0]
        }
        break;
    4060:	e02c      	b.n	40bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    4062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4068:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    406a:	683b      	ldr	r3, [r7, #0]
    406c:	3301      	adds	r3, #1
    406e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    4070:	683b      	ldr	r3, [r7, #0]
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	2b68      	cmp	r3, #104	; 0x68
    4076:	d125      	bne.n	40c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    4078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    407a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    407e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4080:	683b      	ldr	r3, [r7, #0]
    4082:	3301      	adds	r3, #1
    4084:	603b      	str	r3, [r7, #0]
        }
        break;
    4086:	e01d      	b.n	40c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    408e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4090:	683b      	ldr	r3, [r7, #0]
    4092:	3301      	adds	r3, #1
    4094:	603b      	str	r3, [r7, #0]
        break;
    4096:	e016      	b.n	40c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    4098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    409a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    409e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    40a0:	683b      	ldr	r3, [r7, #0]
    40a2:	3301      	adds	r3, #1
    40a4:	603b      	str	r3, [r7, #0]
        break;
    40a6:	e00e      	b.n	40c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    40a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    40ae:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    40b0:	683b      	ldr	r3, [r7, #0]
    40b2:	3301      	adds	r3, #1
    40b4:	603b      	str	r3, [r7, #0]
        break;
    40b6:	e006      	b.n	40c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    40b8:	bf00      	nop
    40ba:	e004      	b.n	40c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    40bc:	bf00      	nop
    40be:	e002      	b.n	40c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    40c0:	0000352d 	.word	0x0000352d
        break;
    40c4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    40c6:	683b      	ldr	r3, [r7, #0]
    40c8:	781b      	ldrb	r3, [r3, #0]
    40ca:	3b25      	subs	r3, #37	; 0x25
    40cc:	2b53      	cmp	r3, #83	; 0x53
    40ce:	f200 82ef 	bhi.w	46b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x894>
    40d2:	a201      	add	r2, pc, #4	; (adr r2, 40d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    40d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    40d8:	00004699 	.word	0x00004699
    40dc:	000046b1 	.word	0x000046b1
    40e0:	000046b1 	.word	0x000046b1
    40e4:	000046b1 	.word	0x000046b1
    40e8:	000046b1 	.word	0x000046b1
    40ec:	000046b1 	.word	0x000046b1
    40f0:	000046b1 	.word	0x000046b1
    40f4:	000046b1 	.word	0x000046b1
    40f8:	000046b1 	.word	0x000046b1
    40fc:	000046b1 	.word	0x000046b1
    4100:	000046b1 	.word	0x000046b1
    4104:	000046b1 	.word	0x000046b1
    4108:	000046b1 	.word	0x000046b1
    410c:	000046b1 	.word	0x000046b1
    4110:	000046b1 	.word	0x000046b1
    4114:	000046b1 	.word	0x000046b1
    4118:	000046b1 	.word	0x000046b1
    411c:	000046b1 	.word	0x000046b1
    4120:	000046b1 	.word	0x000046b1
    4124:	000046b1 	.word	0x000046b1
    4128:	000046b1 	.word	0x000046b1
    412c:	000046b1 	.word	0x000046b1
    4130:	000046b1 	.word	0x000046b1
    4134:	000046b1 	.word	0x000046b1
    4138:	000046b1 	.word	0x000046b1
    413c:	000046b1 	.word	0x000046b1
    4140:	000046b1 	.word	0x000046b1
    4144:	000046b1 	.word	0x000046b1
    4148:	000046b1 	.word	0x000046b1
    414c:	000046b1 	.word	0x000046b1
    4150:	000046b1 	.word	0x000046b1
    4154:	000046b1 	.word	0x000046b1
    4158:	000046b1 	.word	0x000046b1
    415c:	000044b7 	.word	0x000044b7
    4160:	000046b1 	.word	0x000046b1
    4164:	000046b1 	.word	0x000046b1
    4168:	000046b1 	.word	0x000046b1
    416c:	000046b1 	.word	0x000046b1
    4170:	000046b1 	.word	0x000046b1
    4174:	000046b1 	.word	0x000046b1
    4178:	000046b1 	.word	0x000046b1
    417c:	000046b1 	.word	0x000046b1
    4180:	000046b1 	.word	0x000046b1
    4184:	000046b1 	.word	0x000046b1
    4188:	000046b1 	.word	0x000046b1
    418c:	000046b1 	.word	0x000046b1
    4190:	000046b1 	.word	0x000046b1
    4194:	000046b1 	.word	0x000046b1
    4198:	000046b1 	.word	0x000046b1
    419c:	000046b1 	.word	0x000046b1
    41a0:	000046b1 	.word	0x000046b1
    41a4:	00004229 	.word	0x00004229
    41a8:	000046b1 	.word	0x000046b1
    41ac:	000046b1 	.word	0x000046b1
    41b0:	000046b1 	.word	0x000046b1
    41b4:	000046b1 	.word	0x000046b1
    41b8:	000046b1 	.word	0x000046b1
    41bc:	000046b1 	.word	0x000046b1
    41c0:	000046b1 	.word	0x000046b1
    41c4:	000046b1 	.word	0x000046b1
    41c8:	000046b1 	.word	0x000046b1
    41cc:	00004229 	.word	0x00004229
    41d0:	000044f3 	.word	0x000044f3
    41d4:	00004229 	.word	0x00004229
    41d8:	000046b1 	.word	0x000046b1
    41dc:	000044b7 	.word	0x000044b7
    41e0:	000046b1 	.word	0x000046b1
    41e4:	000046b1 	.word	0x000046b1
    41e8:	00004229 	.word	0x00004229
    41ec:	000046b1 	.word	0x000046b1
    41f0:	000046b1 	.word	0x000046b1
    41f4:	000046b1 	.word	0x000046b1
    41f8:	000046b1 	.word	0x000046b1
    41fc:	000046b1 	.word	0x000046b1
    4200:	00004229 	.word	0x00004229
    4204:	00004651 	.word	0x00004651
    4208:	000046b1 	.word	0x000046b1
    420c:	000046b1 	.word	0x000046b1
    4210:	0000457b 	.word	0x0000457b
    4214:	000046b1 	.word	0x000046b1
    4218:	00004229 	.word	0x00004229
    421c:	000046b1 	.word	0x000046b1
    4220:	000046b1 	.word	0x000046b1
    4224:	00004229 	.word	0x00004229
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    4228:	683b      	ldr	r3, [r7, #0]
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	2b78      	cmp	r3, #120	; 0x78
    422e:	d003      	beq.n	4238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    4230:	683b      	ldr	r3, [r7, #0]
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	2b58      	cmp	r3, #88	; 0x58
    4236:	d102      	bne.n	423e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    4238:	2310      	movs	r3, #16
    423a:	643b      	str	r3, [r7, #64]	; 0x40
    423c:	e013      	b.n	4266 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    423e:	683b      	ldr	r3, [r7, #0]
    4240:	781b      	ldrb	r3, [r3, #0]
    4242:	2b6f      	cmp	r3, #111	; 0x6f
    4244:	d102      	bne.n	424c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    4246:	2308      	movs	r3, #8
    4248:	643b      	str	r3, [r7, #64]	; 0x40
    424a:	e00c      	b.n	4266 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    424c:	683b      	ldr	r3, [r7, #0]
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	2b62      	cmp	r3, #98	; 0x62
    4252:	d102      	bne.n	425a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    4254:	2302      	movs	r3, #2
    4256:	643b      	str	r3, [r7, #64]	; 0x40
    4258:	e005      	b.n	4266 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    425a:	230a      	movs	r3, #10
    425c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4260:	f023 0310 	bic.w	r3, r3, #16
    4264:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    4266:	683b      	ldr	r3, [r7, #0]
    4268:	781b      	ldrb	r3, [r3, #0]
    426a:	2b58      	cmp	r3, #88	; 0x58
    426c:	d103      	bne.n	4276 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4270:	f043 0320 	orr.w	r3, r3, #32
    4274:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    4276:	683b      	ldr	r3, [r7, #0]
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	2b69      	cmp	r3, #105	; 0x69
    427c:	d007      	beq.n	428e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	2b64      	cmp	r3, #100	; 0x64
    4284:	d003      	beq.n	428e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    4286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4288:	f023 030c 	bic.w	r3, r3, #12
    428c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4294:	2b00      	cmp	r3, #0
    4296:	d003      	beq.n	42a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    4298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    429a:	f023 0301 	bic.w	r3, r3, #1
    429e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    42a0:	683b      	ldr	r3, [r7, #0]
    42a2:	781b      	ldrb	r3, [r3, #0]
    42a4:	2b69      	cmp	r3, #105	; 0x69
    42a6:	d004      	beq.n	42b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	781b      	ldrb	r3, [r3, #0]
    42ac:	2b64      	cmp	r3, #100	; 0x64
    42ae:	f040 808e 	bne.w	43ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    42b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    42b8:	2b00      	cmp	r3, #0
    42ba:	d02f      	beq.n	431c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x500>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    42bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    42be:	3307      	adds	r3, #7
    42c0:	f023 0307 	bic.w	r3, r3, #7
    42c4:	f103 0208 	add.w	r2, r3, #8
    42c8:	66ba      	str	r2, [r7, #104]	; 0x68
    42ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    42ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    42d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    42d6:	2a00      	cmp	r2, #0
    42d8:	f173 0100 	sbcs.w	r1, r3, #0
    42dc:	da02      	bge.n	42e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    42de:	4252      	negs	r2, r2
    42e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    42e4:	4610      	mov	r0, r2
    42e6:	4619      	mov	r1, r3
    42e8:	697b      	ldr	r3, [r7, #20]
    42ea:	0fdb      	lsrs	r3, r3, #31
    42ec:	b2dc      	uxtb	r4, r3
    42ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42f0:	461a      	mov	r2, r3
    42f2:	f04f 0300 	mov.w	r3, #0
    42f6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    42f8:	9508      	str	r5, [sp, #32]
    42fa:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    42fc:	9507      	str	r5, [sp, #28]
    42fe:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    4300:	9506      	str	r5, [sp, #24]
    4302:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4306:	9402      	str	r4, [sp, #8]
    4308:	e9cd 0100 	strd	r0, r1, [sp]
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4310:	68b9      	ldr	r1, [r7, #8]
    4312:	68f8      	ldr	r0, [r7, #12]
    4314:	f7ff faf0 	bl	38f8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4318:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    431a:	e0c8      	b.n	44ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          else if (flags & FLAGS_LONG) {
    431c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4322:	2b00      	cmp	r3, #0
    4324:	d01e      	beq.n	4364 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x548>
            const long value = va_arg(va, long);
    4326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4328:	1d1a      	adds	r2, r3, #4
    432a:	66ba      	str	r2, [r7, #104]	; 0x68
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4330:	69fb      	ldr	r3, [r7, #28]
    4332:	2b00      	cmp	r3, #0
    4334:	bfb8      	it	lt
    4336:	425b      	neglt	r3, r3
    4338:	4619      	mov	r1, r3
    433a:	69fb      	ldr	r3, [r7, #28]
    433c:	0fdb      	lsrs	r3, r3, #31
    433e:	b2db      	uxtb	r3, r3
    4340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4342:	9205      	str	r2, [sp, #20]
    4344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4346:	9204      	str	r2, [sp, #16]
    4348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    434a:	9203      	str	r2, [sp, #12]
    434c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    434e:	9202      	str	r2, [sp, #8]
    4350:	9301      	str	r3, [sp, #4]
    4352:	9100      	str	r1, [sp, #0]
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4358:	68b9      	ldr	r1, [r7, #8]
    435a:	68f8      	ldr	r0, [r7, #12]
    435c:	f7ff fa64 	bl	3828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4360:	6478      	str	r0, [r7, #68]	; 0x44
          }
    4362:	e0a4      	b.n	44ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    4364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4366:	f003 0340 	and.w	r3, r3, #64	; 0x40
    436a:	2b00      	cmp	r3, #0
    436c:	d005      	beq.n	437a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55e>
    436e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4370:	1d1a      	adds	r2, r3, #4
    4372:	66ba      	str	r2, [r7, #104]	; 0x68
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	b2db      	uxtb	r3, r3
    4378:	e00e      	b.n	4398 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4380:	2b00      	cmp	r3, #0
    4382:	d005      	beq.n	4390 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x574>
    4384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4386:	1d1a      	adds	r2, r3, #4
    4388:	66ba      	str	r2, [r7, #104]	; 0x68
    438a:	681b      	ldr	r3, [r3, #0]
    438c:	b21b      	sxth	r3, r3
    438e:	e003      	b.n	4398 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    4390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4392:	1d1a      	adds	r2, r3, #4
    4394:	66ba      	str	r2, [r7, #104]	; 0x68
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    439a:	6a3b      	ldr	r3, [r7, #32]
    439c:	2b00      	cmp	r3, #0
    439e:	bfb8      	it	lt
    43a0:	425b      	neglt	r3, r3
    43a2:	4619      	mov	r1, r3
    43a4:	6a3b      	ldr	r3, [r7, #32]
    43a6:	0fdb      	lsrs	r3, r3, #31
    43a8:	b2db      	uxtb	r3, r3
    43aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    43ac:	9205      	str	r2, [sp, #20]
    43ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    43b0:	9204      	str	r2, [sp, #16]
    43b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    43b4:	9203      	str	r2, [sp, #12]
    43b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    43b8:	9202      	str	r2, [sp, #8]
    43ba:	9301      	str	r3, [sp, #4]
    43bc:	9100      	str	r1, [sp, #0]
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    43c2:	68b9      	ldr	r1, [r7, #8]
    43c4:	68f8      	ldr	r0, [r7, #12]
    43c6:	f7ff fa2f 	bl	3828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    43ca:	6478      	str	r0, [r7, #68]	; 0x44
          }
    43cc:	e06f      	b.n	44ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    43ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    43d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    43d4:	2b00      	cmp	r3, #0
    43d6:	d020      	beq.n	441a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    43d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    43da:	3307      	adds	r3, #7
    43dc:	f023 0307 	bic.w	r3, r3, #7
    43e0:	f103 0208 	add.w	r2, r3, #8
    43e4:	66ba      	str	r2, [r7, #104]	; 0x68
    43e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    43ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
    43ec:	4608      	mov	r0, r1
    43ee:	f04f 0100 	mov.w	r1, #0
    43f2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    43f4:	9408      	str	r4, [sp, #32]
    43f6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    43f8:	9407      	str	r4, [sp, #28]
    43fa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    43fc:	9406      	str	r4, [sp, #24]
    43fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4402:	2100      	movs	r1, #0
    4404:	9102      	str	r1, [sp, #8]
    4406:	e9cd 2300 	strd	r2, r3, [sp]
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    440e:	68b9      	ldr	r1, [r7, #8]
    4410:	68f8      	ldr	r0, [r7, #12]
    4412:	f7ff fa71 	bl	38f8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    4416:	6478      	str	r0, [r7, #68]	; 0x44
    4418:	e049      	b.n	44ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
#endif
          }
          else if (flags & FLAGS_LONG) {
    441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4420:	2b00      	cmp	r3, #0
    4422:	d016      	beq.n	4452 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x636>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    4424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4426:	1d1a      	adds	r2, r3, #4
    4428:	66ba      	str	r2, [r7, #104]	; 0x68
    442a:	681b      	ldr	r3, [r3, #0]
    442c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    442e:	9205      	str	r2, [sp, #20]
    4430:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4432:	9204      	str	r2, [sp, #16]
    4434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4436:	9203      	str	r2, [sp, #12]
    4438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    443a:	9202      	str	r2, [sp, #8]
    443c:	2200      	movs	r2, #0
    443e:	9201      	str	r2, [sp, #4]
    4440:	9300      	str	r3, [sp, #0]
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4446:	68b9      	ldr	r1, [r7, #8]
    4448:	68f8      	ldr	r0, [r7, #12]
    444a:	f7ff f9ed 	bl	3828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    444e:	6478      	str	r0, [r7, #68]	; 0x44
    4450:	e02d      	b.n	44ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    4452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4454:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4458:	2b00      	cmp	r3, #0
    445a:	d005      	beq.n	4468 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64c>
    445c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    445e:	1d1a      	adds	r2, r3, #4
    4460:	66ba      	str	r2, [r7, #104]	; 0x68
    4462:	681b      	ldr	r3, [r3, #0]
    4464:	b2db      	uxtb	r3, r3
    4466:	e00e      	b.n	4486 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    4468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    446e:	2b00      	cmp	r3, #0
    4470:	d005      	beq.n	447e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x662>
    4472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4474:	1d1a      	adds	r2, r3, #4
    4476:	66ba      	str	r2, [r7, #104]	; 0x68
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	b29b      	uxth	r3, r3
    447c:	e003      	b.n	4486 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    447e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4480:	1d1a      	adds	r2, r3, #4
    4482:	66ba      	str	r2, [r7, #104]	; 0x68
    4484:	681b      	ldr	r3, [r3, #0]
    4486:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    448a:	9305      	str	r3, [sp, #20]
    448c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    448e:	9304      	str	r3, [sp, #16]
    4490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4492:	9303      	str	r3, [sp, #12]
    4494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4496:	9302      	str	r3, [sp, #8]
    4498:	2300      	movs	r3, #0
    449a:	9301      	str	r3, [sp, #4]
    449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    449e:	9300      	str	r3, [sp, #0]
    44a0:	687b      	ldr	r3, [r7, #4]
    44a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44a4:	68b9      	ldr	r1, [r7, #8]
    44a6:	68f8      	ldr	r0, [r7, #12]
    44a8:	f7ff f9be 	bl	3828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    44ac:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    44ae:	683b      	ldr	r3, [r7, #0]
    44b0:	3301      	adds	r3, #1
    44b2:	603b      	str	r3, [r7, #0]
        break;
    44b4:	e109      	b.n	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    44b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    44b8:	3307      	adds	r3, #7
    44ba:	f023 0307 	bic.w	r3, r3, #7
    44be:	f103 0208 	add.w	r2, r3, #8
    44c2:	66ba      	str	r2, [r7, #104]	; 0x68
    44c4:	ed93 7b00 	vldr	d7, [r3]
    44c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    44ca:	9302      	str	r3, [sp, #8]
    44cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    44ce:	9301      	str	r3, [sp, #4]
    44d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    44d2:	9300      	str	r3, [sp, #0]
    44d4:	eeb0 0a47 	vmov.f32	s0, s14
    44d8:	eef0 0a67 	vmov.f32	s1, s15
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44e0:	68b9      	ldr	r1, [r7, #8]
    44e2:	68f8      	ldr	r0, [r7, #12]
    44e4:	f7ff fa78 	bl	39d8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    44e8:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    44ea:	683b      	ldr	r3, [r7, #0]
    44ec:	3301      	adds	r3, #1
    44ee:	603b      	str	r3, [r7, #0]
        break;
    44f0:	e0eb      	b.n	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    44f2:	2301      	movs	r3, #1
    44f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    44f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    44f8:	f003 0302 	and.w	r3, r3, #2
    44fc:	2b00      	cmp	r3, #0
    44fe:	d113      	bne.n	4528 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
          while (l++ < width) {
    4500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4502:	1c5a      	adds	r2, r3, #1
    4504:	63fa      	str	r2, [r7, #60]	; 0x3c
    4506:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4508:	429a      	cmp	r2, r3
    450a:	bf8c      	ite	hi
    450c:	2301      	movhi	r3, #1
    450e:	2300      	movls	r3, #0
    4510:	b2db      	uxtb	r3, r3
    4512:	2b00      	cmp	r3, #0
    4514:	d008      	beq.n	4528 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
            out(' ', buffer, idx++, maxlen);
    4516:	68fc      	ldr	r4, [r7, #12]
    4518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    451a:	1c53      	adds	r3, r2, #1
    451c:	647b      	str	r3, [r7, #68]	; 0x44
    451e:	687b      	ldr	r3, [r7, #4]
    4520:	68b9      	ldr	r1, [r7, #8]
    4522:	2020      	movs	r0, #32
    4524:	47a0      	blx	r4
          while (l++ < width) {
    4526:	e7eb      	b.n	4500 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4528:	68fc      	ldr	r4, [r7, #12]
    452a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    452c:	1d1a      	adds	r2, r3, #4
    452e:	66ba      	str	r2, [r7, #104]	; 0x68
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	b2d8      	uxtb	r0, r3
    4534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4536:	1c53      	adds	r3, r2, #1
    4538:	647b      	str	r3, [r7, #68]	; 0x44
    453a:	687b      	ldr	r3, [r7, #4]
    453c:	68b9      	ldr	r1, [r7, #8]
    453e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    4540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4542:	f003 0302 	and.w	r3, r3, #2
    4546:	2b00      	cmp	r3, #0
    4548:	d013      	beq.n	4572 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
          while (l++ < width) {
    454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    454c:	1c5a      	adds	r2, r3, #1
    454e:	63fa      	str	r2, [r7, #60]	; 0x3c
    4550:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4552:	429a      	cmp	r2, r3
    4554:	bf8c      	ite	hi
    4556:	2301      	movhi	r3, #1
    4558:	2300      	movls	r3, #0
    455a:	b2db      	uxtb	r3, r3
    455c:	2b00      	cmp	r3, #0
    455e:	d008      	beq.n	4572 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
            out(' ', buffer, idx++, maxlen);
    4560:	68fc      	ldr	r4, [r7, #12]
    4562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4564:	1c53      	adds	r3, r2, #1
    4566:	647b      	str	r3, [r7, #68]	; 0x44
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	68b9      	ldr	r1, [r7, #8]
    456c:	2020      	movs	r0, #32
    456e:	47a0      	blx	r4
          while (l++ < width) {
    4570:	e7eb      	b.n	454a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72e>
          }
        }
        format++;
    4572:	683b      	ldr	r3, [r7, #0]
    4574:	3301      	adds	r3, #1
    4576:	603b      	str	r3, [r7, #0]
        break;
    4578:	e0a7      	b.n	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    457a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    457c:	1d1a      	adds	r2, r3, #4
    457e:	66ba      	str	r2, [r7, #104]	; 0x68
    4580:	681b      	ldr	r3, [r3, #0]
    4582:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    4584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4586:	f7fe ffdf 	bl	3548 <_strlen(char const*)>
    458a:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    458c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4592:	2b00      	cmp	r3, #0
    4594:	d007      	beq.n	45a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x78a>
          l = (l < precision ? l : precision);
    4596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    459a:	429a      	cmp	r2, r3
    459c:	d201      	bcs.n	45a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45a0:	e000      	b.n	45a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
    45a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    45a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    45a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    45a8:	f003 0302 	and.w	r3, r3, #2
    45ac:	2b00      	cmp	r3, #0
    45ae:	d113      	bne.n	45d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
          while (l++ < width) {
    45b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45b2:	1c5a      	adds	r2, r3, #1
    45b4:	637a      	str	r2, [r7, #52]	; 0x34
    45b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    45b8:	429a      	cmp	r2, r3
    45ba:	bf8c      	ite	hi
    45bc:	2301      	movhi	r3, #1
    45be:	2300      	movls	r3, #0
    45c0:	b2db      	uxtb	r3, r3
    45c2:	2b00      	cmp	r3, #0
    45c4:	d008      	beq.n	45d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
            out(' ', buffer, idx++, maxlen);
    45c6:	68fc      	ldr	r4, [r7, #12]
    45c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    45ca:	1c53      	adds	r3, r2, #1
    45cc:	647b      	str	r3, [r7, #68]	; 0x44
    45ce:	687b      	ldr	r3, [r7, #4]
    45d0:	68b9      	ldr	r1, [r7, #8]
    45d2:	2020      	movs	r0, #32
    45d4:	47a0      	blx	r4
          while (l++ < width) {
    45d6:	e7eb      	b.n	45b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    45d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    45da:	781b      	ldrb	r3, [r3, #0]
    45dc:	2b00      	cmp	r3, #0
    45de:	d00b      	beq.n	45f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    45e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    45e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    45e6:	2b00      	cmp	r3, #0
    45e8:	d004      	beq.n	45f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d8>
    45ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    45ec:	1e5a      	subs	r2, r3, #1
    45ee:	64fa      	str	r2, [r7, #76]	; 0x4c
    45f0:	2b00      	cmp	r3, #0
    45f2:	d001      	beq.n	45f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    45f4:	2301      	movs	r3, #1
    45f6:	e000      	b.n	45fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7de>
    45f8:	2300      	movs	r3, #0
    45fa:	2b00      	cmp	r3, #0
    45fc:	d00b      	beq.n	4616 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7fa>
          out(*(p++), buffer, idx++, maxlen);
    45fe:	68fc      	ldr	r4, [r7, #12]
    4600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4602:	1c5a      	adds	r2, r3, #1
    4604:	63ba      	str	r2, [r7, #56]	; 0x38
    4606:	7818      	ldrb	r0, [r3, #0]
    4608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    460a:	1c53      	adds	r3, r2, #1
    460c:	647b      	str	r3, [r7, #68]	; 0x44
    460e:	687b      	ldr	r3, [r7, #4]
    4610:	68b9      	ldr	r1, [r7, #8]
    4612:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4614:	e7e0      	b.n	45d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    4616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4618:	f003 0302 	and.w	r3, r3, #2
    461c:	2b00      	cmp	r3, #0
    461e:	d013      	beq.n	4648 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
          while (l++ < width) {
    4620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4622:	1c5a      	adds	r2, r3, #1
    4624:	637a      	str	r2, [r7, #52]	; 0x34
    4626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4628:	429a      	cmp	r2, r3
    462a:	bf8c      	ite	hi
    462c:	2301      	movhi	r3, #1
    462e:	2300      	movls	r3, #0
    4630:	b2db      	uxtb	r3, r3
    4632:	2b00      	cmp	r3, #0
    4634:	d008      	beq.n	4648 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
            out(' ', buffer, idx++, maxlen);
    4636:	68fc      	ldr	r4, [r7, #12]
    4638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    463a:	1c53      	adds	r3, r2, #1
    463c:	647b      	str	r3, [r7, #68]	; 0x44
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	68b9      	ldr	r1, [r7, #8]
    4642:	2020      	movs	r0, #32
    4644:	47a0      	blx	r4
          while (l++ < width) {
    4646:	e7eb      	b.n	4620 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x804>
          }
        }
        format++;
    4648:	683b      	ldr	r3, [r7, #0]
    464a:	3301      	adds	r3, #1
    464c:	603b      	str	r3, [r7, #0]
        break;
    464e:	e03c      	b.n	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4650:	2308      	movs	r3, #8
    4652:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4656:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    465a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    465c:	2300      	movs	r3, #0
    465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4664:	1d1a      	adds	r2, r3, #4
    4666:	66ba      	str	r2, [r7, #104]	; 0x68
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	461a      	mov	r2, r3
    466c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    466e:	9305      	str	r3, [sp, #20]
    4670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4672:	9304      	str	r3, [sp, #16]
    4674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4676:	9303      	str	r3, [sp, #12]
    4678:	2310      	movs	r3, #16
    467a:	9302      	str	r3, [sp, #8]
    467c:	2300      	movs	r3, #0
    467e:	9301      	str	r3, [sp, #4]
    4680:	9200      	str	r2, [sp, #0]
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4686:	68b9      	ldr	r1, [r7, #8]
    4688:	68f8      	ldr	r0, [r7, #12]
    468a:	f7ff f8cd 	bl	3828 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    468e:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    4690:	683b      	ldr	r3, [r7, #0]
    4692:	3301      	adds	r3, #1
    4694:	603b      	str	r3, [r7, #0]
        break;
    4696:	e018      	b.n	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    4698:	68fc      	ldr	r4, [r7, #12]
    469a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    469c:	1c53      	adds	r3, r2, #1
    469e:	647b      	str	r3, [r7, #68]	; 0x44
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	68b9      	ldr	r1, [r7, #8]
    46a4:	2025      	movs	r0, #37	; 0x25
    46a6:	47a0      	blx	r4
        format++;
    46a8:	683b      	ldr	r3, [r7, #0]
    46aa:	3301      	adds	r3, #1
    46ac:	603b      	str	r3, [r7, #0]
        break;
    46ae:	e00c      	b.n	46ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>

      default :
        out(*format, buffer, idx++, maxlen);
    46b0:	68fc      	ldr	r4, [r7, #12]
    46b2:	683b      	ldr	r3, [r7, #0]
    46b4:	7818      	ldrb	r0, [r3, #0]
    46b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46b8:	1c53      	adds	r3, r2, #1
    46ba:	647b      	str	r3, [r7, #68]	; 0x44
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	68b9      	ldr	r1, [r7, #8]
    46c0:	47a0      	blx	r4
        format++;
    46c2:	683b      	ldr	r3, [r7, #0]
    46c4:	3301      	adds	r3, #1
    46c6:	603b      	str	r3, [r7, #0]
        break;
    46c8:	bf00      	nop
  while (*format)
    46ca:	f7ff bbb5 	b.w	3e38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    46ce:	68fc      	ldr	r4, [r7, #12]
    46d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	429a      	cmp	r2, r3
    46d6:	d302      	bcc.n	46de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c2>
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	1e5a      	subs	r2, r3, #1
    46dc:	e000      	b.n	46e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c4>
    46de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46e0:	687b      	ldr	r3, [r7, #4]
    46e2:	68b9      	ldr	r1, [r7, #8]
    46e4:	2000      	movs	r0, #0
    46e6:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    46e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    46ea:	4618      	mov	r0, r3
    46ec:	3758      	adds	r7, #88	; 0x58
    46ee:	46bd      	mov	sp, r7
    46f0:	bdb0      	pop	{r4, r5, r7, pc}
    46f2:	bf00      	nop

000046f4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    46f4:	b40f      	push	{r0, r1, r2, r3}
    46f6:	b580      	push	{r7, lr}
    46f8:	b0c4      	sub	sp, #272	; 0x110
    46fa:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    46fc:	f507 738a 	add.w	r3, r7, #276	; 0x114
    4700:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    4704:	4639      	mov	r1, r7
    4706:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    470a:	9300      	str	r3, [sp, #0]
    470c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    4710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4714:	4807      	ldr	r0, [pc, #28]	; (4734 <printf+0x40>)
    4716:	f7ff fb81 	bl	3e1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    471a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    471e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    4722:	4618      	mov	r0, r3
    4724:	f507 7784 	add.w	r7, r7, #264	; 0x108
    4728:	46bd      	mov	sp, r7
    472a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    472e:	b004      	add	sp, #16
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	000034bb 	.word	0x000034bb

00004738 <vsnprintf>:
  return ret;
}


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
    4738:	b580      	push	{r7, lr}
    473a:	b086      	sub	sp, #24
    473c:	af02      	add	r7, sp, #8
    473e:	60f8      	str	r0, [r7, #12]
    4740:	60b9      	str	r1, [r7, #8]
    4742:	607a      	str	r2, [r7, #4]
    4744:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    4746:	683b      	ldr	r3, [r7, #0]
    4748:	9300      	str	r3, [sp, #0]
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	68ba      	ldr	r2, [r7, #8]
    474e:	68f9      	ldr	r1, [r7, #12]
    4750:	4803      	ldr	r0, [pc, #12]	; (4760 <vsnprintf+0x28>)
    4752:	f7ff fb63 	bl	3e1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4756:	4603      	mov	r3, r0
}
    4758:	4618      	mov	r0, r3
    475a:	3710      	adds	r7, #16
    475c:	46bd      	mov	sp, r7
    475e:	bd80      	pop	{r7, pc}
    4760:	0000348d 	.word	0x0000348d

00004764 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    4764:	b480      	push	{r7}
    4766:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    4768:	bf00      	nop
    476a:	46bd      	mov	sp, r7
    476c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4770:	4770      	bx	lr

00004772 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    4772:	b580      	push	{r7, lr}
    4774:	b082      	sub	sp, #8
    4776:	af00      	add	r7, sp, #0
    4778:	6078      	str	r0, [r7, #4]
    477a:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    477c:	6839      	ldr	r1, [r7, #0]
    477e:	6878      	ldr	r0, [r7, #4]
    4780:	f000 f806 	bl	4790 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    4784:	4603      	mov	r3, r0
    4786:	bf00      	nop
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    4788:	4618      	mov	r0, r3
    478a:	3708      	adds	r7, #8
    478c:	46bd      	mov	sp, r7
    478e:	bd80      	pop	{r7, pc}

00004790 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    4790:	b5b0      	push	{r4, r5, r7, lr}
    4792:	b08c      	sub	sp, #48	; 0x30
    4794:	af00      	add	r7, sp, #0
    4796:	6078      	str	r0, [r7, #4]
    4798:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    479a:	4b2c      	ldr	r3, [pc, #176]	; (484c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xbc>)
    479c:	681b      	ldr	r3, [r3, #0]
    479e:	f003 0301 	and.w	r3, r3, #1
    47a2:	2b00      	cmp	r3, #0
    47a4:	bf0c      	ite	eq
    47a6:	2301      	moveq	r3, #1
    47a8:	2300      	movne	r3, #0
    47aa:	b2db      	uxtb	r3, r3
    47ac:	2b00      	cmp	r3, #0
    47ae:	d001      	beq.n	47b4 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    47b0:	683b      	ldr	r3, [r7, #0]
    47b2:	e047      	b.n	4844 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    47b4:	4b26      	ldr	r3, [pc, #152]	; (4850 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    47b6:	681b      	ldr	r3, [r3, #0]
    47b8:	2b00      	cmp	r3, #0
    47ba:	d11d      	bne.n	47f8 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    47bc:	4b25      	ldr	r3, [pc, #148]	; (4854 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    47be:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    47c0:	2304      	movs	r3, #4
    47c2:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    47c4:	2303      	movs	r3, #3
    47c6:	613b      	str	r3, [r7, #16]
    47c8:	2301      	movs	r3, #1
    47ca:	62bb      	str	r3, [r7, #40]	; 0x28
    47cc:	f107 0308 	add.w	r3, r7, #8
    47d0:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    47d2:	6abc      	ldr	r4, [r7, #40]	; 0x28
    47d4:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    47d6:	4620      	mov	r0, r4
    47d8:	4629      	mov	r1, r5
    47da:	beab      	bkpt	0x00ab
    47dc:	4604      	mov	r4, r0
    47de:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    47e0:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    47e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    47e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    47ea:	d102      	bne.n	47f2 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    47ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47f0:	e028      	b.n	4844 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

      handle = ret;
    47f2:	4a17      	ldr	r2, [pc, #92]	; (4850 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    47f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47f6:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    47f8:	4b15      	ldr	r3, [pc, #84]	; (4850 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    47fa:	681b      	ldr	r3, [r3, #0]
    47fc:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    47fe:	687b      	ldr	r3, [r7, #4]
    4800:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    4802:	683b      	ldr	r3, [r7, #0]
    4804:	613b      	str	r3, [r7, #16]
    4806:	2305      	movs	r3, #5
    4808:	61fb      	str	r3, [r7, #28]
    480a:	f107 0308 	add.w	r3, r7, #8
    480e:	61bb      	str	r3, [r7, #24]
  );
    4810:	69fc      	ldr	r4, [r7, #28]
    4812:	69bd      	ldr	r5, [r7, #24]
    4814:	4620      	mov	r0, r4
    4816:	4629      	mov	r1, r5
    4818:	beab      	bkpt	0x00ab
    481a:	4604      	mov	r4, r0
    481c:	617c      	str	r4, [r7, #20]
  return value;
    481e:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    4820:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    4822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4828:	d102      	bne.n	4830 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    482e:	e009      	b.n	4844 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    4830:	683b      	ldr	r3, [r7, #0]
    4832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4834:	429a      	cmp	r2, r3
    4836:	d102      	bne.n	483e <_trace_write_semihosting_stdout(char const*, unsigned int)+0xae>
    return -1;
    4838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    483c:	e002      	b.n	4844 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    483e:	683a      	ldr	r2, [r7, #0]
    4840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4842:	1ad3      	subs	r3, r2, r3
}
    4844:	4618      	mov	r0, r3
    4846:	3730      	adds	r7, #48	; 0x30
    4848:	46bd      	mov	sp, r7
    484a:	bdb0      	pop	{r4, r5, r7, pc}
    484c:	e000edf0 	.word	0xe000edf0
    4850:	10001334 	.word	0x10001334
    4854:	00008c68 	.word	0x00008c68

00004858 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    4858:	b480      	push	{r7}
    485a:	b083      	sub	sp, #12
    485c:	af00      	add	r7, sp, #0
    485e:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    4860:	4b0c      	ldr	r3, [pc, #48]	; (4894 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4862:	681b      	ldr	r3, [r3, #0]
    4864:	68da      	ldr	r2, [r3, #12]
    4866:	4b0b      	ldr	r3, [pc, #44]	; (4894 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    486e:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    4870:	4b09      	ldr	r3, [pc, #36]	; (4898 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4872:	681b      	ldr	r3, [r3, #0]
    4874:	2200      	movs	r2, #0
    4876:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    4878:	4b07      	ldr	r3, [pc, #28]	; (4898 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	681a      	ldr	r2, [r3, #0]
    487e:	4b06      	ldr	r3, [pc, #24]	; (4898 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4880:	681b      	ldr	r3, [r3, #0]
    4882:	f042 0201 	orr.w	r2, r2, #1
    4886:	601a      	str	r2, [r3, #0]
  }
    4888:	bf00      	nop
    488a:	370c      	adds	r7, #12
    488c:	46bd      	mov	sp, r7
    488e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4892:	4770      	bx	lr
    4894:	10000c1c 	.word	0x10000c1c
    4898:	10000c18 	.word	0x10000c18

0000489c <sjsu::cortex::DwtCounter::GetCount()>:

  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    489c:	b480      	push	{r7}
    489e:	b083      	sub	sp, #12
    48a0:	af00      	add	r7, sp, #0
    48a2:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    48a4:	4b04      	ldr	r3, [pc, #16]	; (48b8 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	685b      	ldr	r3, [r3, #4]
  }
    48aa:	4618      	mov	r0, r3
    48ac:	370c      	adds	r7, #12
    48ae:	46bd      	mov	sp, r7
    48b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	10000c18 	.word	0x10000c18

000048bc <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    48bc:	b480      	push	{r7}
    48be:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    48c0:	f8df 001c 	ldr.w	r0, [pc, #28]	; 48e0 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    48c4:	6801      	ldr	r1, [r0, #0]
    48c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    48ca:	6001      	str	r1, [r0, #0]
    48cc:	f3bf 8f4f 	dsb	sy
    48d0:	f3bf 8f6f 	isb	sy
  }
}
    48d4:	bf00      	nop
    48d6:	46bd      	mov	sp, r7
    48d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48dc:	4770      	bx	lr
    48de:	0000      	.short	0x0000
    48e0:	e000ed88 	.word	0xe000ed88

000048e4 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>:
  static void SetPlatformController(InterruptController * interrupt_controller)
    48e4:	b480      	push	{r7}
    48e6:	b083      	sub	sp, #12
    48e8:	af00      	add	r7, sp, #0
    48ea:	6078      	str	r0, [r7, #4]
    platform_interrupt_controller = interrupt_controller;
    48ec:	4a04      	ldr	r2, [pc, #16]	; (4900 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)+0x1c>)
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	6013      	str	r3, [r2, #0]
  }
    48f2:	bf00      	nop
    48f4:	370c      	adds	r7, #12
    48f6:	46bd      	mov	sp, r7
    48f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48fc:	4770      	bx	lr
    48fe:	bf00      	nop
    4900:	10000d1c 	.word	0x10000d1c

00004904 <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    4904:	b580      	push	{r7, lr}
    4906:	b084      	sub	sp, #16
    4908:	af00      	add	r7, sp, #0
    490a:	e9c7 0100 	strd	r0, r1, [r7]
    490e:	e9d7 0100 	ldrd	r0, r1, [r7]
    4912:	f002 f967 	bl	6be4 <__aeabi_ul2f>
    4916:	4602      	mov	r2, r0
    4918:	f107 030c 	add.w	r3, r7, #12
    491c:	ee00 2a10 	vmov	s0, r2
    4920:	4618      	mov	r0, r3
    4922:	f7fb fef6 	bl	712 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4926:	68fb      	ldr	r3, [r7, #12]
    4928:	4618      	mov	r0, r3
    492a:	3710      	adds	r7, #16
    492c:	46bd      	mov	sp, r7
    492e:	bd80      	pop	{r7, pc}

00004930 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4930:	b580      	push	{r7, lr}
    4932:	b086      	sub	sp, #24
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4938:	6878      	ldr	r0, [r7, #4]
    493a:	f000 f807 	bl	494c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    493e:	eef0 7a40 	vmov.f32	s15, s0
	}
    4942:	eeb0 0a67 	vmov.f32	s0, s15
    4946:	3718      	adds	r7, #24
    4948:	46bd      	mov	sp, r7
    494a:	bd80      	pop	{r7, pc}

0000494c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    494c:	b480      	push	{r7}
    494e:	b085      	sub	sp, #20
    4950:	af00      	add	r7, sp, #0
    4952:	60f8      	str	r0, [r7, #12]
    4954:	7239      	strb	r1, [r7, #8]
    4956:	713a      	strb	r2, [r7, #4]
    4958:	703b      	strb	r3, [r7, #0]
			return value;
    495a:	68fb      	ldr	r3, [r7, #12]
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	ee07 3a90 	vmov	s15, r3
		}
    4962:	eeb0 0a67 	vmov.f32	s0, s15
    4966:	3714      	adds	r7, #20
    4968:	46bd      	mov	sp, r7
    496a:	f85d 7b04 	ldr.w	r7, [sp], #4
    496e:	4770      	bx	lr

00004970 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4970:	b580      	push	{r7, lr}
    4972:	b086      	sub	sp, #24
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4978:	6878      	ldr	r0, [r7, #4]
    497a:	f000 f807 	bl	498c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    497e:	eef0 7a40 	vmov.f32	s15, s0
	}
    4982:	eeb0 0a67 	vmov.f32	s0, s15
    4986:	3718      	adds	r7, #24
    4988:	46bd      	mov	sp, r7
    498a:	bd80      	pop	{r7, pc}

0000498c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    498c:	b480      	push	{r7}
    498e:	b085      	sub	sp, #20
    4990:	af00      	add	r7, sp, #0
    4992:	60f8      	str	r0, [r7, #12]
    4994:	7239      	strb	r1, [r7, #8]
    4996:	713a      	strb	r2, [r7, #4]
    4998:	703b      	strb	r3, [r7, #0]
			return value;
    499a:	68fb      	ldr	r3, [r7, #12]
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	ee07 3a90 	vmov	s15, r3
		}
    49a2:	eeb0 0a67 	vmov.f32	s0, s15
    49a6:	3714      	adds	r7, #20
    49a8:	46bd      	mov	sp, r7
    49aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ae:	4770      	bx	lr

000049b0 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    49b0:	b580      	push	{r7, lr}
    49b2:	ed2d 8b02 	vpush	{d8}
    49b6:	b082      	sub	sp, #8
    49b8:	af00      	add	r7, sp, #0
    49ba:	6078      	str	r0, [r7, #4]
    49bc:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    49be:	687b      	ldr	r3, [r7, #4]
    49c0:	ed93 8a00 	vldr	s16, [r3]
    49c4:	683b      	ldr	r3, [r7, #0]
    49c6:	4618      	mov	r0, r3
    49c8:	f7ff ffd2 	bl	4970 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    49cc:	eef0 7a40 	vmov.f32	s15, s0
    49d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
    49d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    49d8:	bf94      	ite	ls
    49da:	2301      	movls	r3, #1
    49dc:	2300      	movhi	r3, #0
    49de:	b2db      	uxtb	r3, r3
		}
    49e0:	4618      	mov	r0, r3
    49e2:	3708      	adds	r7, #8
    49e4:	46bd      	mov	sp, r7
    49e6:	ecbd 8b02 	vpop	{d8}
    49ea:	bd80      	pop	{r7, pc}

000049ec <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>:
{
    49ec:	b580      	push	{r7, lr}
    49ee:	b082      	sub	sp, #8
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    49f4:	6879      	ldr	r1, [r7, #4]
    49f6:	4803      	ldr	r0, [pc, #12]	; (4a04 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)+0x18>)
    49f8:	f001 f9f0 	bl	5ddc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
}
    49fc:	bf00      	nop
    49fe:	3708      	adds	r7, #8
    4a00:	46bd      	mov	sp, r7
    4a02:	bd80      	pop	{r7, pc}
    4a04:	10000d30 	.word	0x10000d30

00004a08 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>:
  static void SetPlatformController(SystemController * system_controller)
    4a08:	b480      	push	{r7}
    4a0a:	b083      	sub	sp, #12
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
    platform_system_controller = system_controller;
    4a10:	4a04      	ldr	r2, [pc, #16]	; (4a24 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)+0x1c>)
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	6013      	str	r3, [r2, #0]
  }
    4a16:	bf00      	nop
    4a18:	370c      	adds	r7, #12
    4a1a:	46bd      	mov	sp, r7
    4a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a20:	4770      	bx	lr
    4a22:	bf00      	nop
    4a24:	10000d24 	.word	0x10000d24

00004a28 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }

  /// System timer interrupt handler.
  static void SystemTimerHandler()
    4a28:	b580      	push	{r7, lr}
    4a2a:	b084      	sub	sp, #16
    4a2c:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    millisecond_count += 1ms;
    4a2e:	f107 0308 	add.w	r3, r7, #8
    4a32:	4618      	mov	r0, r3
    4a34:	f001 fa2b 	bl	5e8e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    4a38:	f107 0208 	add.w	r2, r7, #8
    4a3c:	463b      	mov	r3, r7
    4a3e:	4611      	mov	r1, r2
    4a40:	4618      	mov	r0, r3
    4a42:	f001 fa31 	bl	5ea8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    4a46:	463b      	mov	r3, r7
    4a48:	4619      	mov	r1, r3
    4a4a:	4808      	ldr	r0, [pc, #32]	; (4a6c <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4a4c:	f7fb fec6 	bl	7dc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    if (callback)
    4a50:	4807      	ldr	r0, [pc, #28]	; (4a70 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4a52:	f7fe f811 	bl	2a78 <std::function<void ()>::operator bool() const>
    4a56:	4603      	mov	r3, r0
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d002      	beq.n	4a62 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x3a>
    {
      callback();
    4a5c:	4804      	ldr	r0, [pc, #16]	; (4a70 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4a5e:	f7fd fba9 	bl	21b4 <std::function<void ()>::operator()() const>
    }
  }
    4a62:	bf00      	nop
    4a64:	3710      	adds	r7, #16
    4a66:	46bd      	mov	sp, r7
    4a68:	bd80      	pop	{r7, pc}
    4a6a:	bf00      	nop
    4a6c:	10001348 	.word	0x10001348
    4a70:	10001338 	.word	0x10001338

00004a74 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
    4a74:	b580      	push	{r7, lr}
    4a76:	b084      	sub	sp, #16
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	60b9      	str	r1, [r7, #8]
    4a7e:	607a      	str	r2, [r7, #4]
      { return __d * __s; }
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	68ba      	ldr	r2, [r7, #8]
    4a84:	6879      	ldr	r1, [r7, #4]
    4a86:	4618      	mov	r0, r3
    4a88:	f000 f805 	bl	4a96 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4a8c:	bf00      	nop
    4a8e:	68f8      	ldr	r0, [r7, #12]
    4a90:	3710      	adds	r7, #16
    4a92:	46bd      	mov	sp, r7
    4a94:	bd80      	pop	{r7, pc}

00004a96 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4a96:	b5b0      	push	{r4, r5, r7, lr}
    4a98:	b088      	sub	sp, #32
    4a9a:	af00      	add	r7, sp, #0
    4a9c:	60f8      	str	r0, [r7, #12]
    4a9e:	60b9      	str	r1, [r7, #8]
    4aa0:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() * __s);
    4aa2:	68bb      	ldr	r3, [r7, #8]
    4aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4aa8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4aac:	f107 0318 	add.w	r3, r7, #24
    4ab0:	4618      	mov	r0, r3
    4ab2:	f7fb fdd7 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	461a      	mov	r2, r3
    4abc:	f04f 0300 	mov.w	r3, #0
    4ac0:	fb02 f501 	mul.w	r5, r2, r1
    4ac4:	fb00 f403 	mul.w	r4, r0, r3
    4ac8:	442c      	add	r4, r5
    4aca:	fba0 2302 	umull	r2, r3, r0, r2
    4ace:	18e1      	adds	r1, r4, r3
    4ad0:	460b      	mov	r3, r1
    4ad2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4ad6:	f107 0310 	add.w	r3, r7, #16
    4ada:	4619      	mov	r1, r3
    4adc:	68f8      	ldr	r0, [r7, #12]
    4ade:	f7fb fdcf 	bl	680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4ae2:	68f8      	ldr	r0, [r7, #12]
    4ae4:	3720      	adds	r7, #32
    4ae6:	46bd      	mov	sp, r7
    4ae8:	bdb0      	pop	{r4, r5, r7, pc}

00004aea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4aea:	b580      	push	{r7, lr}
    4aec:	b088      	sub	sp, #32
    4aee:	af00      	add	r7, sp, #0
    4af0:	60f8      	str	r0, [r7, #12]
    4af2:	60b9      	str	r1, [r7, #8]
    4af4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() / __s);
    4af6:	68bb      	ldr	r3, [r7, #8]
    4af8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4afc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4b00:	f107 0318 	add.w	r3, r7, #24
    4b04:	4618      	mov	r0, r3
    4b06:	f7fb fdad 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    4b0a:	687b      	ldr	r3, [r7, #4]
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	461a      	mov	r2, r3
    4b10:	f04f 0300 	mov.w	r3, #0
    4b14:	f002 f8ac 	bl	6c70 <__aeabi_ldivmod>
    4b18:	4602      	mov	r2, r0
    4b1a:	460b      	mov	r3, r1
    4b1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4b20:	f107 0310 	add.w	r3, r7, #16
    4b24:	4619      	mov	r1, r3
    4b26:	68f8      	ldr	r0, [r7, #12]
    4b28:	f7fb fdaa 	bl	680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4b2c:	68f8      	ldr	r0, [r7, #12]
    4b2e:	3720      	adds	r7, #32
    4b30:	46bd      	mov	sp, r7
    4b32:	bd80      	pop	{r7, pc}

00004b34 <sjsu::cortex::SystemTimer::GetCount()>:

  /// @return returns the current system_timer counter value.
  static std::chrono::nanoseconds GetCount()
    4b34:	b580      	push	{r7, lr}
    4b36:	b08c      	sub	sp, #48	; 0x30
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
  {
    // Capture all count variables at this instant.
    uint32_t high_speed_ticks = dwt_counter.GetCount();
    4b3c:	4816      	ldr	r0, [pc, #88]	; (4b98 <sjsu::cortex::SystemTimer::GetCount()+0x64>)
    4b3e:	f7ff fead 	bl	489c <sjsu::cortex::DwtCounter::GetCount()>
    4b42:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto current_millis_count = millisecond_count;
    4b44:	4b15      	ldr	r3, [pc, #84]	; (4b9c <sjsu::cortex::SystemTimer::GetCount()+0x68>)
    4b46:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b4a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Get rid of the portion of the dwt tick count that is above 1ms.
    // We only want the information about the ticks that is below 1ms, since we
    // get the 1ms count from the SysTick timer interrupt.
    uint32_t sub_millis_ticks = (high_speed_ticks % ticks_per_millisecond);
    4b4e:	4b14      	ldr	r3, [pc, #80]	; (4ba0 <sjsu::cortex::SystemTimer::GetCount()+0x6c>)
    4b50:	681a      	ldr	r2, [r3, #0]
    4b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b54:	fbb3 f1f2 	udiv	r1, r3, r2
    4b58:	fb02 f201 	mul.w	r2, r2, r1
    4b5c:	1a9b      	subs	r3, r3, r2
    4b5e:	61fb      	str	r3, [r7, #28]
    // Perform the conversion from ticks to nanoseconds
    auto nanoseconds_unscaled = (sub_millis_ticks * nanoseconds_per_tick);
    4b60:	f107 0310 	add.w	r3, r7, #16
    4b64:	f107 011c 	add.w	r1, r7, #28
    4b68:	4a0e      	ldr	r2, [pc, #56]	; (4ba4 <sjsu::cortex::SystemTimer::GetCount()+0x70>)
    4b6a:	4618      	mov	r0, r3
    4b6c:	f7ff ff82 	bl	4a74 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    // Nanoseconds per tick is actually scaled up by the kFixedPointScaling
    // factor, meaning it needs to be divided by that value to get the correct
    // nanosecond_uptime.
    auto nanoseconds_uptime_scaled = nanoseconds_unscaled / kFixedPointScaling;
    4b70:	f107 0308 	add.w	r3, r7, #8
    4b74:	f107 0110 	add.w	r1, r7, #16
    4b78:	4a0b      	ldr	r2, [pc, #44]	; (4ba8 <sjsu::cortex::SystemTimer::GetCount()+0x74>)
    4b7a:	4618      	mov	r0, r3
    4b7c:	f7ff ffb5 	bl	4aea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>

    // Result is simply the uptime milliseconds (represented in nanoseconds) +
    // the added nanoseconds
    return current_millis_count + nanoseconds_uptime_scaled;
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	f107 0208 	add.w	r2, r7, #8
    4b86:	f107 0120 	add.w	r1, r7, #32
    4b8a:	4618      	mov	r0, r3
    4b8c:	f001 f941 	bl	5e12 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  }
    4b90:	6878      	ldr	r0, [r7, #4]
    4b92:	3730      	adds	r7, #48	; 0x30
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}
    4b98:	10001350 	.word	0x10001350
    4b9c:	10001348 	.word	0x10001348
    4ba0:	10000c30 	.word	0x10000c30
    4ba4:	10000c28 	.word	0x10000c28
    4ba8:	000093b4 	.word	0x000093b4

00004bac <sjsu::cortex::SystemTimer::Initialize() const>:
  /// Constructor for ARM Cortex M system timer.
  ///
  /// @param priority - the interrupt priority of
  explicit constexpr SystemTimer(uint8_t priority = -1) : priority_(priority) {}

  void Initialize() const override
    4bac:	b590      	push	{r4, r7, lr}
    4bae:	b08b      	sub	sp, #44	; 0x2c
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	60f8      	str	r0, [r7, #12]
  {
    dwt_counter.Initialize();
    4bb4:	481c      	ldr	r0, [pc, #112]	; (4c28 <sjsu::cortex::SystemTimer::Initialize() const+0x7c>)
    4bb6:	f7ff fe4f 	bl	4858 <sjsu::cortex::DwtCounter::Initialize()>

    auto system_frequency = SystemController::GetPlatformController()
    4bba:	f7fb fddb 	bl	774 <sjsu::SystemController::GetPlatformController()>
    4bbe:	4603      	mov	r3, r0
                                .GetSystemFrequency()
    4bc0:	681a      	ldr	r2, [r3, #0]
    4bc2:	320c      	adds	r2, #12
    4bc4:	6812      	ldr	r2, [r2, #0]
    4bc6:	4618      	mov	r0, r3
    4bc8:	4790      	blx	r2
    4bca:	4603      	mov	r3, r0
    4bcc:	617b      	str	r3, [r7, #20]
                                .to<uint32_t>();
    4bce:	f107 0314 	add.w	r3, r7, #20
    4bd2:	4618      	mov	r0, r3
    4bd4:	f001 f982 	bl	5edc <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4bd8:	4603      	mov	r3, r0
    4bda:	613b      	str	r3, [r7, #16]

    ticks_per_millisecond = system_frequency / 1000 /* ms/s */;
    4bdc:	693b      	ldr	r3, [r7, #16]
    4bde:	4a13      	ldr	r2, [pc, #76]	; (4c2c <sjsu::cortex::SystemTimer::Initialize() const+0x80>)
    4be0:	fba2 2303 	umull	r2, r3, r2, r3
    4be4:	099b      	lsrs	r3, r3, #6
    4be6:	4a12      	ldr	r2, [pc, #72]	; (4c30 <sjsu::cortex::SystemTimer::Initialize() const+0x84>)
    4be8:	6013      	str	r3, [r2, #0]
    nanoseconds_per_tick =
        (kFixedPointScaling * 1'000'000'000ns) / system_frequency;
    4bea:	f107 0320 	add.w	r3, r7, #32
    4bee:	4618      	mov	r0, r3
    4bf0:	f001 f980 	bl	5ef4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    4bf4:	f107 0318 	add.w	r3, r7, #24
    4bf8:	f107 0220 	add.w	r2, r7, #32
    4bfc:	490d      	ldr	r1, [pc, #52]	; (4c34 <sjsu::cortex::SystemTimer::Initialize() const+0x88>)
    4bfe:	4618      	mov	r0, r3
    4c00:	f7ff ff38 	bl	4a74 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    4c04:	4c0c      	ldr	r4, [pc, #48]	; (4c38 <sjsu::cortex::SystemTimer::Initialize() const+0x8c>)
    4c06:	463b      	mov	r3, r7
    4c08:	f107 0210 	add.w	r2, r7, #16
    4c0c:	f107 0118 	add.w	r1, r7, #24
    4c10:	4618      	mov	r0, r3
    4c12:	f7ff ff6a 	bl	4aea <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4c16:	e9d7 2300 	ldrd	r2, r3, [r7]
    4c1a:	e9c4 2300 	strd	r2, r3, [r4]
  }
    4c1e:	bf00      	nop
    4c20:	372c      	adds	r7, #44	; 0x2c
    4c22:	46bd      	mov	sp, r7
    4c24:	bd90      	pop	{r4, r7, pc}
    4c26:	bf00      	nop
    4c28:	10001350 	.word	0x10001350
    4c2c:	10624dd3 	.word	0x10624dd3
    4c30:	10000c30 	.word	0x10000c30
    4c34:	000093b4 	.word	0x000093b4
    4c38:	10000c28 	.word	0x10000c28

00004c3c <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const>:

  void SetCallback(InterruptCallback isr) const override
    4c3c:	b580      	push	{r7, lr}
    4c3e:	b082      	sub	sp, #8
    4c40:	af00      	add	r7, sp, #0
    4c42:	6078      	str	r0, [r7, #4]
    4c44:	6039      	str	r1, [r7, #0]
  {
    callback = isr;
    4c46:	6839      	ldr	r1, [r7, #0]
    4c48:	4803      	ldr	r0, [pc, #12]	; (4c58 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const+0x1c>)
    4c4a:	f7fd fb2f 	bl	22ac <std::function<void ()>::operator=(std::function<void ()> const&)>
  }
    4c4e:	bf00      	nop
    4c50:	3708      	adds	r7, #8
    4c52:	46bd      	mov	sp, r7
    4c54:	bd80      	pop	{r7, pc}
    4c56:	bf00      	nop
    4c58:	10001338 	.word	0x10001338

00004c5c <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    4c5c:	b5b0      	push	{r4, r5, r7, lr}
    4c5e:	b08a      	sub	sp, #40	; 0x28
    4c60:	af00      	add	r7, sp, #0
    4c62:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    4c64:	2304      	movs	r3, #4
    4c66:	627b      	str	r3, [r7, #36]	; 0x24

    if (sys_tick->LOAD != 0)
    4c68:	4b1d      	ldr	r3, [pc, #116]	; (4ce0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4c6a:	681b      	ldr	r3, [r3, #0]
    4c6c:	685b      	ldr	r3, [r3, #4]
    4c6e:	2b00      	cmp	r3, #0
    4c70:	bf14      	ite	ne
    4c72:	2301      	movne	r3, #1
    4c74:	2300      	moveq	r3, #0
    4c76:	b2db      	uxtb	r3, r3
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d02c      	beq.n	4cd6 <sjsu::cortex::SystemTimer::StartTimer() const+0x7a>
    {
      // The interrupt handler must be registered before you starting the timer
      // by setting the Enable counter flag in the CTRL register.
      // Otherwise, the handler may not be set by the time the first tick
      // interrupt occurs.
      sjsu::InterruptController::GetPlatformController().Enable({
    4c7c:	f7fb fbca 	bl	414 <sjsu::InterruptController::GetPlatformController()>
    4c80:	4604      	mov	r4, r0
          .interrupt_request_number = cortex::SysTick_IRQn,
          .interrupt_handler        = SystemTimerHandler,
          .priority                 = priority_,
      });
    4c82:	6823      	ldr	r3, [r4, #0]
    4c84:	3304      	adds	r3, #4
    4c86:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
    4c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c8c:	60bb      	str	r3, [r7, #8]
    4c8e:	f107 0308 	add.w	r3, r7, #8
    4c92:	3304      	adds	r3, #4
    4c94:	4913      	ldr	r1, [pc, #76]	; (4ce4 <sjsu::cortex::SystemTimer::StartTimer() const+0x88>)
    4c96:	4618      	mov	r0, r3
    4c98:	f7fd fade 	bl	2258 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
          .priority                 = priority_,
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	791b      	ldrb	r3, [r3, #4]
      sjsu::InterruptController::GetPlatformController().Enable({
    4ca0:	61fb      	str	r3, [r7, #28]
    4ca2:	f107 0308 	add.w	r3, r7, #8
    4ca6:	4619      	mov	r1, r3
    4ca8:	4620      	mov	r0, r4
    4caa:	47a8      	blx	r5
      });
    4cac:	f107 0308 	add.w	r3, r7, #8
    4cb0:	4618      	mov	r0, r3
    4cb2:	f7fc f88b 	bl	dcc <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
      // Set all flags required to enable the counter
      uint32_t ctrl_mask = (1 << ControlBitMap::kTickInterupt) |
    4cb6:	2307      	movs	r3, #7
    4cb8:	623b      	str	r3, [r7, #32]
                           (1 << ControlBitMap::kEnableCounter) |
                           (1 << ControlBitMap::kClkSource);
      // Set the system tick counter to start immediately
      sys_tick->VAL = 0;
    4cba:	4b09      	ldr	r3, [pc, #36]	; (4ce0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4cbc:	681b      	ldr	r3, [r3, #0]
    4cbe:	2200      	movs	r2, #0
    4cc0:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= ctrl_mask;
    4cc2:	4b07      	ldr	r3, [pc, #28]	; (4ce0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4cc4:	681b      	ldr	r3, [r3, #0]
    4cc6:	6819      	ldr	r1, [r3, #0]
    4cc8:	4b05      	ldr	r3, [pc, #20]	; (4ce0 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	6a3a      	ldr	r2, [r7, #32]
    4cce:	430a      	orrs	r2, r1
    4cd0:	601a      	str	r2, [r3, #0]

      status = Status::kSuccess;
    4cd2:	2300      	movs	r3, #0
    4cd4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return status;
    4cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
    4cd8:	4618      	mov	r0, r3
    4cda:	3728      	adds	r7, #40	; 0x28
    4cdc:	46bd      	mov	sp, r7
    4cde:	bdb0      	pop	{r4, r5, r7, pc}
    4ce0:	10000c20 	.word	0x10000c20
    4ce4:	00004a29 	.word	0x00004a29

00004ce8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    4ce8:	b580      	push	{r7, lr}
    4cea:	b082      	sub	sp, #8
    4cec:	af00      	add	r7, sp, #0
    4cee:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    4cf0:	6878      	ldr	r0, [r7, #4]
    4cf2:	f001 f90c 	bl	5f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4cf6:	4603      	mov	r3, r0
	}
    4cf8:	4618      	mov	r0, r3
    4cfa:	3708      	adds	r7, #8
    4cfc:	46bd      	mov	sp, r7
    4cfe:	bd80      	pop	{r7, pc}

00004d00 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    4d00:	b580      	push	{r7, lr}
    4d02:	b084      	sub	sp, #16
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
    4d08:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	4618      	mov	r0, r3
    4d0e:	f7fc f99f 	bl	1050 <units::linear_scale<float>::operator()() const>
    4d12:	eeb0 7a40 	vmov.f32	s14, s0
    4d16:	683b      	ldr	r3, [r7, #0]
    4d18:	ee07 3a90 	vmov	s15, r3
    4d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4d20:	ee77 7a67 	vsub.f32	s15, s14, s15
    4d24:	f107 030c 	add.w	r3, r7, #12
    4d28:	eeb0 0a67 	vmov.f32	s0, s15
    4d2c:	4618      	mov	r0, r3
    4d2e:	f7fc fac7 	bl	12c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4d32:	68fb      	ldr	r3, [r7, #12]
	}
    4d34:	4618      	mov	r0, r3
    4d36:	3710      	adds	r7, #16
    4d38:	46bd      	mov	sp, r7
    4d3a:	bd80      	pop	{r7, pc}

00004d3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    4d3c:	b580      	push	{r7, lr}
    4d3e:	b082      	sub	sp, #8
    4d40:	af00      	add	r7, sp, #0
    4d42:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    4d44:	6878      	ldr	r0, [r7, #4]
    4d46:	f000 f805 	bl	4d54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4d4a:	4603      	mov	r3, r0
	}
    4d4c:	4618      	mov	r0, r3
    4d4e:	3708      	adds	r7, #8
    4d50:	46bd      	mov	sp, r7
    4d52:	bd80      	pop	{r7, pc}

00004d54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    4d54:	b580      	push	{r7, lr}
    4d56:	b082      	sub	sp, #8
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    4d5c:	687b      	ldr	r3, [r7, #4]
    4d5e:	4618      	mov	r0, r3
    4d60:	f7fc f976 	bl	1050 <units::linear_scale<float>::operator()() const>
    4d64:	eef0 7a40 	vmov.f32	s15, s0
    4d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4d6c:	ee17 3a90 	vmov	r3, s15
		}
    4d70:	4618      	mov	r0, r3
    4d72:	3708      	adds	r7, #8
    4d74:	46bd      	mov	sp, r7
    4d76:	bd80      	pop	{r7, pc}

00004d78 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    4d78:	b590      	push	{r4, r7, lr}
    4d7a:	b089      	sub	sp, #36	; 0x24
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    4d82:	f04f 0001 	mov.w	r0, #1
    4d86:	f04f 0100 	mov.w	r1, #0
    4d8a:	f7ff fdbb 	bl	4904 <units::literals::operator"" _Hz(unsigned long long)>
    4d8e:	4603      	mov	r3, r0
    4d90:	60fb      	str	r3, [r7, #12]
    4d92:	f107 020c 	add.w	r2, r7, #12
    4d96:	463b      	mov	r3, r7
    4d98:	4611      	mov	r1, r2
    4d9a:	4618      	mov	r0, r3
    4d9c:	f7ff fe08 	bl	49b0 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4da0:	4603      	mov	r3, r0
    4da2:	2b00      	cmp	r3, #0
    4da4:	d002      	beq.n	4dac <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    4da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4daa:	e040      	b.n	4e2e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb6>
    }

    units::frequency::hertz_t system_frequency =
        sjsu::SystemController::GetPlatformController().GetSystemFrequency();
    4dac:	f7fb fce2 	bl	774 <sjsu::SystemController::GetPlatformController()>
    4db0:	4603      	mov	r3, r0
    4db2:	681a      	ldr	r2, [r3, #0]
    4db4:	320c      	adds	r2, #12
    4db6:	6812      	ldr	r2, [r2, #0]
    4db8:	4618      	mov	r0, r3
    4dba:	4790      	blx	r2
    4dbc:	4603      	mov	r3, r0
    4dbe:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    4dc0:	463a      	mov	r2, r7
    4dc2:	f107 0308 	add.w	r3, r7, #8
    4dc6:	4611      	mov	r1, r2
    4dc8:	4618      	mov	r0, r3
    4dca:	f7fc fa4d 	bl	1268 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4dce:	4603      	mov	r3, r0
    4dd0:	617b      	str	r3, [r7, #20]
    4dd2:	f107 0314 	add.w	r3, r7, #20
    4dd6:	2101      	movs	r1, #1
    4dd8:	4618      	mov	r0, r3
    4dda:	f7ff ff91 	bl	4d00 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4dde:	4603      	mov	r3, r0
    4de0:	613b      	str	r3, [r7, #16]
    4de2:	f107 0310 	add.w	r3, r7, #16
    4de6:	4618      	mov	r0, r3
    4de8:	f7ff ff7e 	bl	4ce8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4dec:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4dee:	f107 0308 	add.w	r3, r7, #8
    4df2:	4618      	mov	r0, r3
    4df4:	f7ff ffa2 	bl	4d3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4df8:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    4dfa:	463b      	mov	r3, r7
    4dfc:	4618      	mov	r0, r3
    4dfe:	f7ff ff9d 	bl	4d3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4e02:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4e04:	fbb4 f2f3 	udiv	r2, r4, r3
    4e08:	fb03 f302 	mul.w	r3, r3, r2
    4e0c:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    4e0e:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    4e10:	69fb      	ldr	r3, [r7, #28]
    4e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4e16:	d305      	bcc.n	4e24 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xac>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    4e18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4e1c:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    4e1e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4e22:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    4e24:	4b04      	ldr	r3, [pc, #16]	; (4e38 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	69fa      	ldr	r2, [r7, #28]
    4e2a:	605a      	str	r2, [r3, #4]
    return remainder;
    4e2c:	69bb      	ldr	r3, [r7, #24]
  }
    4e2e:	4618      	mov	r0, r3
    4e30:	3724      	adds	r7, #36	; 0x24
    4e32:	46bd      	mov	sp, r7
    4e34:	bd90      	pop	{r4, r7, pc}
    4e36:	bf00      	nop
    4e38:	10000c20 	.word	0x10000c20

00004e3c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    4e3c:	b480      	push	{r7}
    4e3e:	b083      	sub	sp, #12
    4e40:	af00      	add	r7, sp, #0
    4e42:	6078      	str	r0, [r7, #4]
	{ return __r; }
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e4a:	4610      	mov	r0, r2
    4e4c:	4619      	mov	r1, r3
    4e4e:	370c      	adds	r7, #12
    4e50:	46bd      	mov	sp, r7
    4e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e56:	4770      	bx	lr

00004e58 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    4e58:	b480      	push	{r7}
    4e5a:	b083      	sub	sp, #12
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	6078      	str	r0, [r7, #4]
    4e60:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    4e62:	683b      	ldr	r3, [r7, #0]
    4e64:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e68:	6879      	ldr	r1, [r7, #4]
    4e6a:	e9c1 2300 	strd	r2, r3, [r1]
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	4618      	mov	r0, r3
    4e72:	370c      	adds	r7, #12
    4e74:	46bd      	mov	sp, r7
    4e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e7a:	4770      	bx	lr

00004e7c <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4e7c:	b580      	push	{r7, lr}
    4e7e:	b086      	sub	sp, #24
    4e80:	af00      	add	r7, sp, #0
    4e82:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4e84:	6878      	ldr	r0, [r7, #4]
    4e86:	f000 f807 	bl	4e98 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4e8a:	eef0 7a40 	vmov.f32	s15, s0
	}
    4e8e:	eeb0 0a67 	vmov.f32	s0, s15
    4e92:	3718      	adds	r7, #24
    4e94:	46bd      	mov	sp, r7
    4e96:	bd80      	pop	{r7, pc}

00004e98 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    4e98:	b480      	push	{r7}
    4e9a:	b085      	sub	sp, #20
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	60f8      	str	r0, [r7, #12]
    4ea0:	7239      	strb	r1, [r7, #8]
    4ea2:	713a      	strb	r2, [r7, #4]
    4ea4:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    4ea6:	68fb      	ldr	r3, [r7, #12]
    4ea8:	edd3 7a00 	vldr	s15, [r3]
    4eac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4ec4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    4eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    4eb4:	eeb0 0a67 	vmov.f32	s0, s15
    4eb8:	3714      	adds	r7, #20
    4eba:	46bd      	mov	sp, r7
    4ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec0:	4770      	bx	lr
    4ec2:	bf00      	nop
    4ec4:	49742400 	.word	0x49742400

00004ec8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetSystemClockFrequency(
    4ec8:	b580      	push	{r7, lr}
    4eca:	b084      	sub	sp, #16
    4ecc:	af00      	add	r7, sp, #0
    4ece:	6078      	str	r0, [r7, #4]
    4ed0:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    4ed2:	2100      	movs	r1, #0
    4ed4:	6878      	ldr	r0, [r7, #4]
    4ed6:	f000 f8e3 	bl	50a0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    4eda:	f04f 000c 	mov.w	r0, #12
    4ede:	f04f 0100 	mov.w	r1, #0
    4ee2:	f7fb fbdf 	bl	6a4 <units::literals::operator"" _MHz(unsigned long long)>
    4ee6:	4603      	mov	r3, r0
    4ee8:	60bb      	str	r3, [r7, #8]
    4eea:	f107 0208 	add.w	r2, r7, #8
    4eee:	463b      	mov	r3, r7
    4ef0:	4611      	mov	r1, r2
    4ef2:	4618      	mov	r0, r3
    4ef4:	f000 f982 	bl	51fc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4ef8:	4603      	mov	r3, r0
    4efa:	2b00      	cmp	r3, #0
    4efc:	d00f      	beq.n	4f1e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    4efe:	4b16      	ldr	r3, [pc, #88]	; (4f58 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    4f00:	683a      	ldr	r2, [r7, #0]
    4f02:	6819      	ldr	r1, [r3, #0]
    4f04:	6878      	ldr	r0, [r7, #4]
    4f06:	f000 fa95 	bl	5434 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    4f0a:	2101      	movs	r1, #1
    4f0c:	6878      	ldr	r0, [r7, #4]
    4f0e:	f000 f8eb 	bl	50e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    4f12:	463b      	mov	r3, r7
    4f14:	4619      	mov	r1, r3
    4f16:	4811      	ldr	r0, [pc, #68]	; (4f5c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    4f18:	f001 f814 	bl	5f44 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4f1c:	e007      	b.n	4f2e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    4f1e:	2100      	movs	r1, #0
    4f20:	6878      	ldr	r0, [r7, #4]
    4f22:	f000 f8e1 	bl	50e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    4f26:	490e      	ldr	r1, [pc, #56]	; (4f60 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    4f28:	480c      	ldr	r0, [pc, #48]	; (4f5c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    4f2a:	f001 f80b 	bl	5f44 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    4f2e:	2101      	movs	r1, #1
    4f30:	6878      	ldr	r0, [r7, #4]
    4f32:	f000 fae3 	bl	54fc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    4f36:	23ff      	movs	r3, #255	; 0xff
    4f38:	733b      	strb	r3, [r7, #12]
    4f3a:	f107 030c 	add.w	r3, r7, #12
    4f3e:	2201      	movs	r2, #1
    4f40:	4619      	mov	r1, r3
    4f42:	6878      	ldr	r0, [r7, #4]
    4f44:	f000 f80e 	bl	4f64 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    4f48:	2100      	movs	r1, #0
    4f4a:	6878      	ldr	r0, [r7, #4]
    4f4c:	f000 fb14 	bl	5578 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    4f50:	bf00      	nop
    4f52:	3710      	adds	r7, #16
    4f54:	46bd      	mov	sp, r7
    4f56:	bd80      	pop	{r7, pc}
    4f58:	000093b8 	.word	0x000093b8
    4f5c:	10000c34 	.word	0x10000c34
    4f60:	000093bc 	.word	0x000093bc

00004f64 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    4f64:	b580      	push	{r7, lr}
    4f66:	b084      	sub	sp, #16
    4f68:	af00      	add	r7, sp, #0
    4f6a:	60f8      	str	r0, [r7, #12]
    4f6c:	60b9      	str	r1, [r7, #8]
    4f6e:	4613      	mov	r3, r2
    4f70:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    4f72:	79fb      	ldrb	r3, [r7, #7]
    4f74:	2b04      	cmp	r3, #4
    4f76:	d90e      	bls.n	4f96 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x32>
    4f78:	23b2      	movs	r3, #178	; 0xb2
    4f7a:	4a0b      	ldr	r2, [pc, #44]	; (4fa8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    4f7c:	490b      	ldr	r1, [pc, #44]	; (4fac <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    4f7e:	480c      	ldr	r0, [pc, #48]	; (4fb0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    4f80:	f7ff fbb8 	bl	46f4 <printf>
    4f84:	480b      	ldr	r0, [pc, #44]	; (4fb4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    4f86:	f7fe fa57 	bl	3438 <puts>
    4f8a:	2100      	movs	r1, #0
    4f8c:	2001      	movs	r0, #1
    4f8e:	f7fd ffe3 	bl	2f58 <sjsu::debug::PrintBacktrace(bool, void*)>
    4f92:	f7fe f82d 	bl	2ff0 <sjsu::Halt()>
    system_controller->PCLKSEL = peripheral_divider;
    4f96:	4b08      	ldr	r3, [pc, #32]	; (4fb8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	79fa      	ldrb	r2, [r7, #7]
    4f9c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    4fa0:	bf00      	nop
    4fa2:	3710      	adds	r7, #16
    4fa4:	46bd      	mov	sp, r7
    4fa6:	bd80      	pop	{r7, pc}
    4fa8:	00008d5c 	.word	0x00008d5c
    4fac:	000093d8 	.word	0x000093d8
    4fb0:	00008de0 	.word	0x00008de0
    4fb4:	00008e80 	.word	0x00008e80
    4fb8:	10001194 	.word	0x10001194

00004fbc <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    4fbc:	b480      	push	{r7}
    4fbe:	b083      	sub	sp, #12
    4fc0:	af00      	add	r7, sp, #0
    4fc2:	6078      	str	r0, [r7, #4]
    4fc4:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    4fc6:	4b05      	ldr	r3, [pc, #20]	; (4fdc <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    4fc8:	681b      	ldr	r3, [r3, #0]
    4fca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    4fce:	4618      	mov	r0, r3
    4fd0:	370c      	adds	r7, #12
    4fd2:	46bd      	mov	sp, r7
    4fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd8:	4770      	bx	lr
    4fda:	bf00      	nop
    4fdc:	10001194 	.word	0x10001194

00004fe0 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    4fe0:	b480      	push	{r7}
    4fe2:	b083      	sub	sp, #12
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    4fe8:	4b03      	ldr	r3, [pc, #12]	; (4ff8 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    4fea:	681b      	ldr	r3, [r3, #0]
  }
    4fec:	4618      	mov	r0, r3
    4fee:	370c      	adds	r7, #12
    4ff0:	46bd      	mov	sp, r7
    4ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff6:	4770      	bx	lr
    4ff8:	10000c34 	.word	0x10000c34

00004ffc <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    4ffc:	b480      	push	{r7}
    4ffe:	b085      	sub	sp, #20
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]
    5004:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    5006:	4b0b      	ldr	r3, [pc, #44]	; (5034 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    500e:	683a      	ldr	r2, [r7, #0]
    5010:	7812      	ldrb	r2, [r2, #0]
    5012:	4611      	mov	r1, r2
    5014:	2201      	movs	r2, #1
    5016:	408a      	lsls	r2, r1
    5018:	4013      	ands	r3, r2
    501a:	2b00      	cmp	r3, #0
    501c:	bf14      	ite	ne
    501e:	2301      	movne	r3, #1
    5020:	2300      	moveq	r3, #0
    5022:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    5024:	7bfb      	ldrb	r3, [r7, #15]
  }
    5026:	4618      	mov	r0, r3
    5028:	3714      	adds	r7, #20
    502a:	46bd      	mov	sp, r7
    502c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5030:	4770      	bx	lr
    5032:	bf00      	nop
    5034:	10001194 	.word	0x10001194

00005038 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    5038:	b590      	push	{r4, r7, lr}
    503a:	b083      	sub	sp, #12
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
    5040:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    5042:	4b09      	ldr	r3, [pc, #36]	; (5068 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5044:	681b      	ldr	r3, [r3, #0]
    5046:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    504a:	683b      	ldr	r3, [r7, #0]
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	4619      	mov	r1, r3
    system_controller->PCONP =
    5050:	4b05      	ldr	r3, [pc, #20]	; (5068 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5052:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    5054:	4610      	mov	r0, r2
    5056:	f7fd f8d6 	bl	2206 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    505a:	4603      	mov	r3, r0
    system_controller->PCONP =
    505c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    5060:	bf00      	nop
    5062:	370c      	adds	r7, #12
    5064:	46bd      	mov	sp, r7
    5066:	bd90      	pop	{r4, r7, pc}
    5068:	10001194 	.word	0x10001194

0000506c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    506c:	b590      	push	{r4, r7, lr}
    506e:	b083      	sub	sp, #12
    5070:	af00      	add	r7, sp, #0
    5072:	6078      	str	r0, [r7, #4]
    5074:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    5076:	4b09      	ldr	r3, [pc, #36]	; (509c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    507e:	683b      	ldr	r3, [r7, #0]
    5080:	781b      	ldrb	r3, [r3, #0]
    5082:	4619      	mov	r1, r3
    system_controller->PCONP =
    5084:	4b05      	ldr	r3, [pc, #20]	; (509c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    5086:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    5088:	4610      	mov	r0, r2
    508a:	f7fd f8a9 	bl	21e0 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    508e:	4603      	mov	r3, r0
    system_controller->PCONP =
    5090:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    5094:	bf00      	nop
    5096:	370c      	adds	r7, #12
    5098:	46bd      	mov	sp, r7
    509a:	bd90      	pop	{r4, r7, pc}
    509c:	10001194 	.word	0x10001194

000050a0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    50a0:	b590      	push	{r4, r7, lr}
    50a2:	b083      	sub	sp, #12
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
    50a8:	460b      	mov	r3, r1
    50aa:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    50ac:	4b0c      	ldr	r3, [pc, #48]	; (50e0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    50b4:	8879      	ldrh	r1, [r7, #2]
    50b6:	4b0a      	ldr	r3, [pc, #40]	; (50e0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    50b8:	681c      	ldr	r4, [r3, #0]
    50ba:	4b0a      	ldr	r3, [pc, #40]	; (50e4 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    50bc:	781a      	ldrb	r2, [r3, #0]
    50be:	785b      	ldrb	r3, [r3, #1]
    50c0:	021b      	lsls	r3, r3, #8
    50c2:	431a      	orrs	r2, r3
    50c4:	2300      	movs	r3, #0
    50c6:	f362 030f 	bfi	r3, r2, #0, #16
    50ca:	461a      	mov	r2, r3
    50cc:	f000 ff4d 	bl	5f6a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    50d0:	4603      	mov	r3, r0
    50d2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    50d6:	bf00      	nop
    50d8:	370c      	adds	r7, #12
    50da:	46bd      	mov	sp, r7
    50dc:	bd90      	pop	{r4, r7, pc}
    50de:	bf00      	nop
    50e0:	10001194 	.word	0x10001194
    50e4:	000093c0 	.word	0x000093c0

000050e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    50e8:	b590      	push	{r4, r7, lr}
    50ea:	b083      	sub	sp, #12
    50ec:	af00      	add	r7, sp, #0
    50ee:	6078      	str	r0, [r7, #4]
    50f0:	460b      	mov	r3, r1
    50f2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    50f4:	4b0c      	ldr	r3, [pc, #48]	; (5128 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    50fc:	8879      	ldrh	r1, [r7, #2]
    50fe:	4b0a      	ldr	r3, [pc, #40]	; (5128 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    5100:	681c      	ldr	r4, [r3, #0]
    5102:	4b0a      	ldr	r3, [pc, #40]	; (512c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    5104:	781a      	ldrb	r2, [r3, #0]
    5106:	785b      	ldrb	r3, [r3, #1]
    5108:	021b      	lsls	r3, r3, #8
    510a:	431a      	orrs	r2, r3
    510c:	2300      	movs	r3, #0
    510e:	f362 030f 	bfi	r3, r2, #0, #16
    5112:	461a      	mov	r2, r3
    5114:	f000 ff29 	bl	5f6a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5118:	4603      	mov	r3, r0
    511a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    511e:	bf00      	nop
    5120:	370c      	adds	r7, #12
    5122:	46bd      	mov	sp, r7
    5124:	bd90      	pop	{r4, r7, pc}
    5126:	bf00      	nop
    5128:	10001194 	.word	0x10001194
    512c:	000093cc 	.word	0x000093cc

00005130 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    5130:	b590      	push	{r4, r7, lr}
    5132:	b083      	sub	sp, #12
    5134:	af00      	add	r7, sp, #0
    5136:	6078      	str	r0, [r7, #4]
    5138:	460b      	mov	r3, r1
    513a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    513c:	4b0c      	ldr	r3, [pc, #48]	; (5170 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    513e:	681b      	ldr	r3, [r3, #0]
    5140:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    5144:	8879      	ldrh	r1, [r7, #2]
    5146:	4b0a      	ldr	r3, [pc, #40]	; (5170 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    5148:	681c      	ldr	r4, [r3, #0]
    514a:	4b0a      	ldr	r3, [pc, #40]	; (5174 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    514c:	781a      	ldrb	r2, [r3, #0]
    514e:	785b      	ldrb	r3, [r3, #1]
    5150:	021b      	lsls	r3, r3, #8
    5152:	431a      	orrs	r2, r3
    5154:	2300      	movs	r3, #0
    5156:	f362 030f 	bfi	r3, r2, #0, #16
    515a:	461a      	mov	r2, r3
    515c:	f000 ff05 	bl	5f6a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5160:	4603      	mov	r3, r0
    5162:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    5166:	bf00      	nop
    5168:	370c      	adds	r7, #12
    516a:	46bd      	mov	sp, r7
    516c:	bd90      	pop	{r4, r7, pc}
    516e:	bf00      	nop
    5170:	10001194 	.word	0x10001194
    5174:	000093d0 	.word	0x000093d0

00005178 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    5178:	b590      	push	{r4, r7, lr}
    517a:	b083      	sub	sp, #12
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
    5180:	460b      	mov	r3, r1
    5182:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    5184:	4b0c      	ldr	r3, [pc, #48]	; (51b8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    518c:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    518e:	4b0a      	ldr	r3, [pc, #40]	; (51b8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    5190:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    5192:	4b0a      	ldr	r3, [pc, #40]	; (51bc <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    5194:	781a      	ldrb	r2, [r3, #0]
    5196:	785b      	ldrb	r3, [r3, #1]
    5198:	021b      	lsls	r3, r3, #8
    519a:	431a      	orrs	r2, r3
    519c:	2300      	movs	r3, #0
    519e:	f362 030f 	bfi	r3, r2, #0, #16
    51a2:	461a      	mov	r2, r3
    51a4:	f000 fee1 	bl	5f6a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    51a8:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    51aa:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    51ae:	bf00      	nop
    51b0:	370c      	adds	r7, #12
    51b2:	46bd      	mov	sp, r7
    51b4:	bd90      	pop	{r4, r7, pc}
    51b6:	bf00      	nop
    51b8:	10001194 	.word	0x10001194
    51bc:	000093d4 	.word	0x000093d4

000051c0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    51c0:	b580      	push	{r7, lr}
    51c2:	ed2d 8b02 	vpush	{d8}
    51c6:	b082      	sub	sp, #8
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	ed93 8a00 	vldr	s16, [r3]
    51d4:	683b      	ldr	r3, [r7, #0]
    51d6:	4618      	mov	r0, r3
    51d8:	f7ff fbaa 	bl	4930 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    51dc:	eef0 7a40 	vmov.f32	s15, s0
    51e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
    51e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51e8:	bf4c      	ite	mi
    51ea:	2301      	movmi	r3, #1
    51ec:	2300      	movpl	r3, #0
    51ee:	b2db      	uxtb	r3, r3
		}
    51f0:	4618      	mov	r0, r3
    51f2:	3708      	adds	r7, #8
    51f4:	46bd      	mov	sp, r7
    51f6:	ecbd 8b02 	vpop	{d8}
    51fa:	bd80      	pop	{r7, pc}

000051fc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    51fc:	b580      	push	{r7, lr}
    51fe:	ed2d 8b02 	vpush	{d8}
    5202:	b082      	sub	sp, #8
    5204:	af00      	add	r7, sp, #0
    5206:	6078      	str	r0, [r7, #4]
    5208:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    520a:	687b      	ldr	r3, [r7, #4]
    520c:	ed93 8a00 	vldr	s16, [r3]
    5210:	683b      	ldr	r3, [r7, #0]
    5212:	4618      	mov	r0, r3
    5214:	f7ff fb8c 	bl	4930 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5218:	eef0 7a40 	vmov.f32	s15, s0
    521c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5224:	bfcc      	ite	gt
    5226:	2301      	movgt	r3, #1
    5228:	2300      	movle	r3, #0
    522a:	b2db      	uxtb	r3, r3
		}
    522c:	4618      	mov	r0, r3
    522e:	3708      	adds	r7, #8
    5230:	46bd      	mov	sp, r7
    5232:	ecbd 8b02 	vpop	{d8}
    5236:	bd80      	pop	{r7, pc}

00005238 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    5238:	b580      	push	{r7, lr}
    523a:	b082      	sub	sp, #8
    523c:	af00      	add	r7, sp, #0
    523e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    5240:	6878      	ldr	r0, [r7, #4]
    5242:	f000 f805 	bl	5250 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5246:	4603      	mov	r3, r0
		}
    5248:	4618      	mov	r0, r3
    524a:	3708      	adds	r7, #8
    524c:	46bd      	mov	sp, r7
    524e:	bd80      	pop	{r7, pc}

00005250 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    5250:	b580      	push	{r7, lr}
    5252:	b082      	sub	sp, #8
    5254:	af00      	add	r7, sp, #0
    5256:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	4618      	mov	r0, r3
    525c:	f7fb fef8 	bl	1050 <units::linear_scale<float>::operator()() const>
    5260:	eef0 7a40 	vmov.f32	s15, s0
    5264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5268:	ee17 3a90 	vmov	r3, s15
		}
    526c:	4618      	mov	r0, r3
    526e:	3708      	adds	r7, #8
    5270:	46bd      	mov	sp, r7
    5272:	bd80      	pop	{r7, pc}

00005274 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    5274:	b580      	push	{r7, lr}
    5276:	b082      	sub	sp, #8
    5278:	af00      	add	r7, sp, #0
    527a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	4618      	mov	r0, r3
    5280:	f7fb fee6 	bl	1050 <units::linear_scale<float>::operator()() const>
    5284:	eef0 7a40 	vmov.f32	s15, s0
    5288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    528c:	ee17 3a90 	vmov	r3, s15
    5290:	b29b      	uxth	r3, r3
		}
    5292:	4618      	mov	r0, r3
    5294:	3708      	adds	r7, #8
    5296:	46bd      	mov	sp, r7
    5298:	bd80      	pop	{r7, pc}
    529a:	Address 0x000000000000529a is out of bounds.


0000529c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    529c:	b590      	push	{r4, r7, lr}
    529e:	b08d      	sub	sp, #52	; 0x34
    52a0:	af00      	add	r7, sp, #0
    52a2:	60f8      	str	r0, [r7, #12]
    52a4:	60b9      	str	r1, [r7, #8]
    52a6:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    52a8:	f44f 70c0 	mov.w	r0, #384	; 0x180
    52ac:	f04f 0100 	mov.w	r1, #0
    52b0:	f7fb f9f8 	bl	6a4 <units::literals::operator"" _MHz(unsigned long long)>
    52b4:	4603      	mov	r3, r0
    52b6:	613b      	str	r3, [r7, #16]
    52b8:	f107 0210 	add.w	r2, r7, #16
    52bc:	1d3b      	adds	r3, r7, #4
    52be:	4611      	mov	r1, r2
    52c0:	4618      	mov	r0, r3
    52c2:	f7ff ff7d 	bl	51c0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    52c6:	4603      	mov	r3, r0
    52c8:	f083 0301 	eor.w	r3, r3, #1
    52cc:	b2db      	uxtb	r3, r3
    52ce:	2b00      	cmp	r3, #0
    52d0:	d114      	bne.n	52fc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    52d2:	f04f 000c 	mov.w	r0, #12
    52d6:	f04f 0100 	mov.w	r1, #0
    52da:	f7fb f9e3 	bl	6a4 <units::literals::operator"" _MHz(unsigned long long)>
    52de:	4603      	mov	r3, r0
    52e0:	617b      	str	r3, [r7, #20]
    52e2:	f107 0214 	add.w	r2, r7, #20
    52e6:	1d3b      	adds	r3, r7, #4
    52e8:	4611      	mov	r1, r2
    52ea:	4618      	mov	r0, r3
    52ec:	f7ff ff86 	bl	51fc <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    52f0:	4603      	mov	r3, r0
    52f2:	f083 0301 	eor.w	r3, r3, #1
    52f6:	b2db      	uxtb	r3, r3
    52f8:	2b00      	cmp	r3, #0
    52fa:	d001      	beq.n	5300 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    52fc:	2301      	movs	r3, #1
    52fe:	e000      	b.n	5302 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    5300:	2300      	movs	r3, #0
    5302:	2b00      	cmp	r3, #0
    5304:	d00e      	beq.n	5324 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x88>
    5306:	23f4      	movs	r3, #244	; 0xf4
    5308:	4a44      	ldr	r2, [pc, #272]	; (541c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    530a:	4945      	ldr	r1, [pc, #276]	; (5420 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    530c:	4845      	ldr	r0, [pc, #276]	; (5424 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    530e:	f7ff f9f1 	bl	46f4 <printf>
    5312:	4845      	ldr	r0, [pc, #276]	; (5428 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    5314:	f7fe f890 	bl	3438 <puts>
    5318:	2100      	movs	r1, #0
    531a:	2001      	movs	r0, #1
    531c:	f7fd fe1c 	bl	2f58 <sjsu::debug::PrintBacktrace(bool, void*)>
    5320:	f7fd fe66 	bl	2ff0 <sjsu::Halt()>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    5324:	2301      	movs	r3, #1
    5326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    532a:	1d3b      	adds	r3, r7, #4
    532c:	4618      	mov	r0, r3
    532e:	f7ff ff83 	bl	5238 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    5332:	4604      	mov	r4, r0
    5334:	f107 0308 	add.w	r3, r7, #8
    5338:	4618      	mov	r0, r3
    533a:	f7ff ff7d 	bl	5238 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    533e:	4603      	mov	r3, r0
    5340:	fbb4 f2f3 	udiv	r2, r4, r3
    5344:	fb03 f302 	mul.w	r3, r3, r2
    5348:	1ae3      	subs	r3, r4, r3
    534a:	2b00      	cmp	r3, #0
    534c:	bf14      	ite	ne
    534e:	2301      	movne	r3, #1
    5350:	2300      	moveq	r3, #0
    5352:	b2db      	uxtb	r3, r3
    5354:	2b00      	cmp	r3, #0
    5356:	d017      	beq.n	5388 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xec>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    5358:	f107 0208 	add.w	r2, r7, #8
    535c:	1d3b      	adds	r3, r7, #4
    535e:	4611      	mov	r1, r2
    5360:	4618      	mov	r0, r3
    5362:	f000 fe14 	bl	5f8e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5366:	4603      	mov	r3, r0
    5368:	61fb      	str	r3, [r7, #28]
    536a:	f107 031c 	add.w	r3, r7, #28
    536e:	2101      	movs	r1, #1
    5370:	4618      	mov	r0, r3
    5372:	f000 fe38 	bl	5fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    5376:	4603      	mov	r3, r0
    5378:	61bb      	str	r3, [r7, #24]
    537a:	f107 0318 	add.w	r3, r7, #24
    537e:	4618      	mov	r0, r3
    5380:	f000 fdc5 	bl	5f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5384:	62b8      	str	r0, [r7, #40]	; 0x28
    5386:	e00e      	b.n	53a6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10a>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    5388:	f107 0208 	add.w	r2, r7, #8
    538c:	1d3b      	adds	r3, r7, #4
    538e:	4611      	mov	r1, r2
    5390:	4618      	mov	r0, r3
    5392:	f000 fdfc 	bl	5f8e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5396:	4603      	mov	r3, r0
    5398:	623b      	str	r3, [r7, #32]
    539a:	f107 0320 	add.w	r3, r7, #32
    539e:	4618      	mov	r0, r3
    53a0:	f000 fdb5 	bl	5f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    53a4:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    53a6:	2301      	movs	r3, #1
    53a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    53aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    53ae:	2b00      	cmp	r3, #0
    53b0:	d02f      	beq.n	5412 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x176>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    53b2:	f107 0308 	add.w	r3, r7, #8
    53b6:	4618      	mov	r0, r3
    53b8:	f7ff ff5c 	bl	5274 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    53bc:	4603      	mov	r3, r0
    53be:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    53c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    53c2:	b29b      	uxth	r3, r3
    53c4:	fb12 f303 	smulbb	r3, r2, r3
    53c8:	b29b      	uxth	r3, r3
    53ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    53cc:	fb12 f303 	smulbb	r3, r2, r3
    53d0:	b29b      	uxth	r3, r3
    53d2:	005b      	lsls	r3, r3, #1
    53d4:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    53d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    53d8:	2b9b      	cmp	r3, #155	; 0x9b
    53da:	d903      	bls.n	53e4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x148>
      {
        calculating = false;
    53dc:	2300      	movs	r3, #0
    53de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    53e2:	e7e2      	b.n	53aa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    53e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    53e6:	005b      	lsls	r3, r3, #1
    53e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    53ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    53ec:	2b07      	cmp	r3, #7
    53ee:	d9dc      	bls.n	53aa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
    53f0:	f240 1311 	movw	r3, #273	; 0x111
    53f4:	4a09      	ldr	r2, [pc, #36]	; (541c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    53f6:	490d      	ldr	r1, [pc, #52]	; (542c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    53f8:	480d      	ldr	r0, [pc, #52]	; (5430 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x194>)
    53fa:	f7ff f97b 	bl	46f4 <printf>
    53fe:	480a      	ldr	r0, [pc, #40]	; (5428 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    5400:	f7fe f81a 	bl	3438 <puts>
    5404:	2100      	movs	r1, #0
    5406:	2001      	movs	r0, #1
    5408:	f7fd fda6 	bl	2f58 <sjsu::debug::PrintBacktrace(bool, void*)>
    540c:	f7fd fdf0 	bl	2ff0 <sjsu::Halt()>
    while (calculating)
    5410:	e7cb      	b.n	53aa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    5412:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    5414:	4618      	mov	r0, r3
    5416:	3734      	adds	r7, #52	; 0x34
    5418:	46bd      	mov	sp, r7
    541a:	bd90      	pop	{r4, r7, pc}
    541c:	00008e98 	.word	0x00008e98
    5420:	000093f0 	.word	0x000093f0
    5424:	00008f14 	.word	0x00008f14
    5428:	00008e80 	.word	0x00008e80
    542c:	00009408 	.word	0x00009408
    5430:	00009004 	.word	0x00009004

00005434 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    5434:	b580      	push	{r7, lr}
    5436:	b086      	sub	sp, #24
    5438:	af00      	add	r7, sp, #0
    543a:	60f8      	str	r0, [r7, #12]
    543c:	60b9      	str	r1, [r7, #8]
    543e:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    5440:	2301      	movs	r3, #1
    5442:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    5444:	687a      	ldr	r2, [r7, #4]
    5446:	68b9      	ldr	r1, [r7, #8]
    5448:	68f8      	ldr	r0, [r7, #12]
    544a:	f7ff ff27 	bl	529c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    544e:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    5450:	2100      	movs	r1, #0
    5452:	68f8      	ldr	r0, [r7, #12]
    5454:	f7ff fe24 	bl	50a0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    5458:	2100      	movs	r1, #0
    545a:	68f8      	ldr	r0, [r7, #12]
    545c:	f7ff fe44 	bl	50e8 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    5460:	2100      	movs	r1, #0
    5462:	68f8      	ldr	r0, [r7, #12]
    5464:	f7ff fe64 	bl	5130 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    5468:	2100      	movs	r1, #0
    546a:	68f8      	ldr	r0, [r7, #12]
    546c:	f7ff fe84 	bl	5178 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5470:	4b21      	ldr	r3, [pc, #132]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5478:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    547c:	693b      	ldr	r3, [r7, #16]
    547e:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    5480:	4b1d      	ldr	r3, [pc, #116]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5482:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5484:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    5486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    548a:	4b1b      	ldr	r3, [pc, #108]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    548c:	681b      	ldr	r3, [r3, #0]
    548e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5492:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    5496:	8afb      	ldrh	r3, [r7, #22]
    5498:	015b      	lsls	r3, r3, #5
    549a:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    549c:	4b16      	ldr	r3, [pc, #88]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    549e:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    54a0:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    54a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    54a6:	4b14      	ldr	r3, [pc, #80]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    54ae:	4b12      	ldr	r3, [pc, #72]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	f042 0201 	orr.w	r2, r2, #1
    54b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    54ba:	4b0f      	ldr	r3, [pc, #60]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	22aa      	movs	r2, #170	; 0xaa
    54c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    54c4:	4b0c      	ldr	r3, [pc, #48]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	2255      	movs	r2, #85	; 0x55
    54ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    54ce:	4b0a      	ldr	r3, [pc, #40]	; (54f8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    54d6:	210a      	movs	r1, #10
    54d8:	4618      	mov	r0, r3
    54da:	f7fc fea6 	bl	222a <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    54de:	4603      	mov	r3, r0
    54e0:	f083 0301 	eor.w	r3, r3, #1
    54e4:	b2db      	uxtb	r3, r3
    54e6:	2b00      	cmp	r3, #0
    54e8:	d001      	beq.n	54ee <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    54ea:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    54ec:	e7ef      	b.n	54ce <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    54ee:	bf00      	nop
    54f0:	3718      	adds	r7, #24
    54f2:	46bd      	mov	sp, r7
    54f4:	bd80      	pop	{r7, pc}
    54f6:	bf00      	nop
    54f8:	10001194 	.word	0x10001194

000054fc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    54fc:	b590      	push	{r4, r7, lr}
    54fe:	b083      	sub	sp, #12
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
    5504:	460b      	mov	r3, r1
    5506:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    5508:	78fb      	ldrb	r3, [r7, #3]
    550a:	2b1f      	cmp	r3, #31
    550c:	d90f      	bls.n	552e <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x32>
    550e:	f44f 73a9 	mov.w	r3, #338	; 0x152
    5512:	4a13      	ldr	r2, [pc, #76]	; (5560 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    5514:	4913      	ldr	r1, [pc, #76]	; (5564 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    5516:	4814      	ldr	r0, [pc, #80]	; (5568 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    5518:	f7ff f8ec 	bl	46f4 <printf>
    551c:	4813      	ldr	r0, [pc, #76]	; (556c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    551e:	f7fd ff8b 	bl	3438 <puts>
    5522:	2100      	movs	r1, #0
    5524:	2001      	movs	r0, #1
    5526:	f7fd fd17 	bl	2f58 <sjsu::debug::PrintBacktrace(bool, void*)>
    552a:	f7fd fd61 	bl	2ff0 <sjsu::Halt()>

    system_controller->CCLKSEL = bit::Insert(
    552e:	4b10      	ldr	r3, [pc, #64]	; (5570 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    5530:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    5532:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    5536:	4b0e      	ldr	r3, [pc, #56]	; (5570 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    5538:	681c      	ldr	r4, [r3, #0]
    553a:	4b0e      	ldr	r3, [pc, #56]	; (5574 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    553c:	78f9      	ldrb	r1, [r7, #3]
    553e:	781a      	ldrb	r2, [r3, #0]
    5540:	785b      	ldrb	r3, [r3, #1]
    5542:	021b      	lsls	r3, r3, #8
    5544:	431a      	orrs	r2, r3
    5546:	2300      	movs	r3, #0
    5548:	f362 030f 	bfi	r3, r2, #0, #16
    554c:	461a      	mov	r2, r3
    554e:	f7fc fd8f 	bl	2070 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    5552:	4603      	mov	r3, r0
    5554:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    5558:	bf00      	nop
    555a:	370c      	adds	r7, #12
    555c:	46bd      	mov	sp, r7
    555e:	bd90      	pop	{r4, r7, pc}
    5560:	000090ac 	.word	0x000090ac
    5564:	00009420 	.word	0x00009420
    5568:	000090f4 	.word	0x000090f4
    556c:	00008e80 	.word	0x00008e80
    5570:	10001194 	.word	0x10001194
    5574:	000093c8 	.word	0x000093c8

00005578 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    5578:	b590      	push	{r4, r7, lr}
    557a:	b083      	sub	sp, #12
    557c:	af00      	add	r7, sp, #0
    557e:	6078      	str	r0, [r7, #4]
    5580:	460b      	mov	r3, r1
    5582:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    5584:	4b0c      	ldr	r3, [pc, #48]	; (55b8 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    558c:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    558e:	4b0a      	ldr	r3, [pc, #40]	; (55b8 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    5590:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    5592:	4b0a      	ldr	r3, [pc, #40]	; (55bc <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    5594:	781a      	ldrb	r2, [r3, #0]
    5596:	785b      	ldrb	r3, [r3, #1]
    5598:	021b      	lsls	r3, r3, #8
    559a:	431a      	orrs	r2, r3
    559c:	2300      	movs	r3, #0
    559e:	f362 030f 	bfi	r3, r2, #0, #16
    55a2:	461a      	mov	r2, r3
    55a4:	f000 fce1 	bl	5f6a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    55a8:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    55aa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    55ae:	bf00      	nop
    55b0:	370c      	adds	r7, #12
    55b2:	46bd      	mov	sp, r7
    55b4:	bd90      	pop	{r4, r7, pc}
    55b6:	bf00      	nop
    55b8:	10001194 	.word	0x10001194
    55bc:	000093c4 	.word	0x000093c4

000055c0 <sjsu::Pin::PullUp() const>:
  void PullUp() const
    55c0:	b580      	push	{r7, lr}
    55c2:	b082      	sub	sp, #8
    55c4:	af00      	add	r7, sp, #0
    55c6:	6078      	str	r0, [r7, #4]
    SetPull(Resistor::kPullUp);
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	3308      	adds	r3, #8
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	2102      	movs	r1, #2
    55d2:	6878      	ldr	r0, [r7, #4]
    55d4:	4798      	blx	r3
  }
    55d6:	bf00      	nop
    55d8:	3708      	adds	r7, #8
    55da:	46bd      	mov	sp, r7
    55dc:	bd80      	pop	{r7, pc}

000055de <sjsu::Uart::Flush() const>:
  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// The default implementation reads out all of the bytes by checking
  /// HasData() repeatedly and use Read() to read each. Some implementations may
  /// have more efficient methods of clearing their buffers.
  virtual void Flush() const
    55de:	b580      	push	{r7, lr}
    55e0:	b082      	sub	sp, #8
    55e2:	af00      	add	r7, sp, #0
    55e4:	6078      	str	r0, [r7, #4]
  {
    PollingFlush();
    55e6:	6878      	ldr	r0, [r7, #4]
    55e8:	f000 f820 	bl	562c <sjsu::Uart::PollingFlush() const>
  }
    55ec:	bf00      	nop
    55ee:	3708      	adds	r7, #8
    55f0:	46bd      	mov	sp, r7
    55f2:	bd80      	pop	{r7, pc}

000055f4 <sjsu::Uart::Read() const>:
  }

  /// @return Retrieves a single byte from UART RX line. Users must ensure that
  /// HasData() is true before reading using this method. Otherwise contents of
  /// read data will not be correct and the returned byte will be 0xFF.
  uint8_t Read() const
    55f4:	b580      	push	{r7, lr}
    55f6:	b084      	sub	sp, #16
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
  {
    uint8_t byte;
    if (Read(&byte, sizeof(byte)) == 0)
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	681b      	ldr	r3, [r3, #0]
    5600:	330c      	adds	r3, #12
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	f107 010f 	add.w	r1, r7, #15
    5608:	2201      	movs	r2, #1
    560a:	6878      	ldr	r0, [r7, #4]
    560c:	4798      	blx	r3
    560e:	4603      	mov	r3, r0
    5610:	2b00      	cmp	r3, #0
    5612:	bf0c      	ite	eq
    5614:	2301      	moveq	r3, #1
    5616:	2300      	movne	r3, #0
    5618:	b2db      	uxtb	r3, r3
    561a:	2b00      	cmp	r3, #0
    561c:	d001      	beq.n	5622 <sjsu::Uart::Read() const+0x2e>
    {
      byte = 0xFF;
    561e:	23ff      	movs	r3, #255	; 0xff
    5620:	73fb      	strb	r3, [r7, #15]
    }
    return byte;
    5622:	7bfb      	ldrb	r3, [r7, #15]
  }
    5624:	4618      	mov	r0, r3
    5626:	3710      	adds	r7, #16
    5628:	46bd      	mov	sp, r7
    562a:	bd80      	pop	{r7, pc}

0000562c <sjsu::Uart::PollingFlush() const>:

  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// by checking HasData() repeatedly and use Read() to read each. Some
  /// implementations may have more efficient methods of clearing their buffers.
  void PollingFlush() const
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
  {
    while (HasData())
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	3310      	adds	r3, #16
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	6878      	ldr	r0, [r7, #4]
    563e:	4798      	blx	r3
    5640:	4603      	mov	r3, r0
    5642:	2b00      	cmp	r3, #0
    5644:	d003      	beq.n	564e <sjsu::Uart::PollingFlush() const+0x22>
    {
      Read();
    5646:	6878      	ldr	r0, [r7, #4]
    5648:	f7ff ffd4 	bl	55f4 <sjsu::Uart::Read() const>
    while (HasData())
    564c:	e7f2      	b.n	5634 <sjsu::Uart::PollingFlush() const+0x8>
    }
  }
    564e:	bf00      	nop
    5650:	3708      	adds	r7, #8
    5652:	46bd      	mov	sp, r7
    5654:	bd80      	pop	{r7, pc}
    5656:	Address 0x0000000000005656 is out of bounds.


00005658 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    5658:	b480      	push	{r7}
    565a:	b089      	sub	sp, #36	; 0x24
    565c:	af00      	add	r7, sp, #0
    565e:	6078      	str	r0, [r7, #4]
    5660:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	2200      	movs	r2, #0
    5668:	601a      	str	r2, [r3, #0]
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	2200      	movs	r2, #0
    566e:	605a      	str	r2, [r3, #4]
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	2201      	movs	r2, #1
    5674:	609a      	str	r2, [r3, #8]
  bool finished = false;
    5676:	2300      	movs	r3, #0
    5678:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    567a:	2300      	movs	r3, #0
    567c:	61bb      	str	r3, [r7, #24]
    567e:	69bb      	ldr	r3, [r7, #24]
    5680:	2b0e      	cmp	r3, #14
    5682:	dc4f      	bgt.n	5724 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    5684:	7ffb      	ldrb	r3, [r7, #31]
    5686:	2b00      	cmp	r3, #0
    5688:	d14c      	bne.n	5724 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    568a:	69bb      	ldr	r3, [r7, #24]
    568c:	3301      	adds	r3, #1
    568e:	617b      	str	r3, [r7, #20]
    5690:	697b      	ldr	r3, [r7, #20]
    5692:	2b0e      	cmp	r3, #14
    5694:	dc42      	bgt.n	571c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    5696:	7ffb      	ldrb	r3, [r7, #31]
    5698:	2b00      	cmp	r3, #0
    569a:	d13f      	bne.n	571c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    569c:	69bb      	ldr	r3, [r7, #24]
    569e:	ee07 3a90 	vmov	s15, r3
    56a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    56a6:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    56aa:	697b      	ldr	r3, [r7, #20]
    56ac:	ee07 3a90 	vmov	s15, r3
    56b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    56b4:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    56b8:	edd7 6a04 	vldr	s13, [r7, #16]
    56bc:	ed97 7a03 	vldr	s14, [r7, #12]
    56c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    56c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    56c8:	ee77 7a87 	vadd.f32	s15, s15, s14
    56cc:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    56d0:	edd7 7a02 	vldr	s15, [r7, #8]
    56d4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 5734 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    56d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    56dc:	ed97 7a00 	vldr	s14, [r7]
    56e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    56e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56e8:	d814      	bhi.n	5714 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    56ea:	edd7 7a02 	vldr	s15, [r7, #8]
    56ee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 5734 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    56f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    56f6:	ed97 7a00 	vldr	s14, [r7]
    56fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
    56fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5702:	db07      	blt.n	5714 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    5704:	69ba      	ldr	r2, [r7, #24]
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    570a:	697a      	ldr	r2, [r7, #20]
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	609a      	str	r2, [r3, #8]
        finished          = true;
    5710:	2301      	movs	r3, #1
    5712:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    5714:	697b      	ldr	r3, [r7, #20]
    5716:	3301      	adds	r3, #1
    5718:	617b      	str	r3, [r7, #20]
    571a:	e7b9      	b.n	5690 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    571c:	69bb      	ldr	r3, [r7, #24]
    571e:	3301      	adds	r3, #1
    5720:	61bb      	str	r3, [r7, #24]
    5722:	e7ac      	b.n	567e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    5724:	bf00      	nop
}
    5726:	6878      	ldr	r0, [r7, #4]
    5728:	3724      	adds	r7, #36	; 0x24
    572a:	46bd      	mov	sp, r7
    572c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5730:	4770      	bx	lr
    5732:	bf00      	nop
    5734:	3c23d70a 	.word	0x3c23d70a

00005738 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    5738:	b480      	push	{r7}
    573a:	b087      	sub	sp, #28
    573c:	af00      	add	r7, sp, #0
    573e:	ed87 0a03 	vstr	s0, [r7, #12]
    5742:	edc7 0a02 	vstr	s1, [r7, #8]
    5746:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    5748:	687b      	ldr	r3, [r7, #4]
    574a:	ee07 3a90 	vmov	s15, r3
    574e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5752:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    5756:	edd7 7a03 	vldr	s15, [r7, #12]
    575a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    575e:	ee27 7a87 	vmul.f32	s14, s15, s14
    5762:	edd7 7a02 	vldr	s15, [r7, #8]
    5766:	ee67 7a27 	vmul.f32	s15, s14, s15
    576a:	ed97 7a05 	vldr	s14, [r7, #20]
    576e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5772:	eef0 7a66 	vmov.f32	s15, s13
}
    5776:	eeb0 0a67 	vmov.f32	s0, s15
    577a:	371c      	adds	r7, #28
    577c:	46bd      	mov	sp, r7
    577e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5782:	4770      	bx	lr

00005784 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    5784:	b480      	push	{r7}
    5786:	b087      	sub	sp, #28
    5788:	af00      	add	r7, sp, #0
    578a:	ed87 0a03 	vstr	s0, [r7, #12]
    578e:	edc7 0a02 	vstr	s1, [r7, #8]
    5792:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	ee07 3a90 	vmov	s15, r3
    579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    579e:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    57a2:	edd7 7a03 	vldr	s15, [r7, #12]
    57a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    57aa:	ee27 7a87 	vmul.f32	s14, s15, s14
    57ae:	edd7 7a02 	vldr	s15, [r7, #8]
    57b2:	ee67 7a27 	vmul.f32	s15, s14, s15
    57b6:	ed97 7a05 	vldr	s14, [r7, #20]
    57ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
    57be:	eef0 7a66 	vmov.f32	s15, s13
}
    57c2:	eeb0 0a67 	vmov.f32	s0, s15
    57c6:	371c      	adds	r7, #28
    57c8:	46bd      	mov	sp, r7
    57ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ce:	4770      	bx	lr

000057d0 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    57d0:	b480      	push	{r7}
    57d2:	b083      	sub	sp, #12
    57d4:	af00      	add	r7, sp, #0
    57d6:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    57da:	edd7 7a01 	vldr	s15, [r7, #4]
    57de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    57e2:	ee77 7a87 	vadd.f32	s15, s15, s14
    57e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    57ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    57ee:	eeb0 0a67 	vmov.f32	s0, s15
    57f2:	370c      	adds	r7, #12
    57f4:	46bd      	mov	sp, r7
    57f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fa:	4770      	bx	lr

000057fc <sjsu::lpc40xx::uart::IsDecimal(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecimal(float value)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b086      	sub	sp, #24
    5800:	af00      	add	r7, sp, #0
    5802:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    5806:	2300      	movs	r3, #0
    5808:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    580a:	ed97 0a01 	vldr	s0, [r7, #4]
    580e:	f7ff ffdf 	bl	57d0 <sjsu::lpc40xx::uart::RoundFloat(float)>
    5812:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    5816:	ed97 7a01 	vldr	s14, [r7, #4]
    581a:	edd7 7a04 	vldr	s15, [r7, #16]
    581e:	ee77 7a67 	vsub.f32	s15, s14, s15
    5822:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    5826:	edd7 7a03 	vldr	s15, [r7, #12]
    582a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 5858 <sjsu::lpc40xx::uart::IsDecimal(float)+0x5c>
    582e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5836:	db0a      	blt.n	584e <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
    5838:	edd7 7a03 	vldr	s15, [r7, #12]
    583c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 585c <sjsu::lpc40xx::uart::IsDecimal(float)+0x60>
    5840:	eef4 7ac7 	vcmpe.f32	s15, s14
    5844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5848:	d801      	bhi.n	584e <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
  {
    result = true;
    584a:	2301      	movs	r3, #1
    584c:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    584e:	7dfb      	ldrb	r3, [r7, #23]
}
    5850:	4618      	mov	r0, r3
    5852:	3718      	adds	r7, #24
    5854:	46bd      	mov	sp, r7
    5856:	bd80      	pop	{r7, pc}
    5858:	bc23d70a 	.word	0xbc23d70a
    585c:	3c23d70a 	.word	0x3c23d70a

00005860 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    5860:	b590      	push	{r4, r7, lr}
    5862:	b091      	sub	sp, #68	; 0x44
    5864:	af00      	add	r7, sp, #0
    5866:	61f8      	str	r0, [r7, #28]
    5868:	61b9      	str	r1, [r7, #24]
    586a:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    586c:	f107 0314 	add.w	r3, r7, #20
    5870:	4618      	mov	r0, r3
    5872:	f7ff fa63 	bl	4d3c <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5876:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    5878:	2300      	movs	r3, #0
    587a:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    587c:	69fb      	ldr	r3, [r7, #28]
    587e:	2200      	movs	r2, #0
    5880:	601a      	str	r2, [r3, #0]
    5882:	69fb      	ldr	r3, [r7, #28]
    5884:	2200      	movs	r2, #0
    5886:	605a      	str	r2, [r3, #4]
    5888:	69fb      	ldr	r3, [r7, #28]
    588a:	2201      	movs	r2, #1
    588c:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    588e:	69bb      	ldr	r3, [r7, #24]
    5890:	ee07 3a90 	vmov	s15, r3
    5894:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5898:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    589c:	f04f 0300 	mov.w	r3, #0
    58a0:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    58a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    58a6:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    58a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    58ac:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    58ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    58b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    58b6:	2b04      	cmp	r3, #4
    58b8:	f000 80be 	beq.w	5a38 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
    58bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    58be:	2b03      	cmp	r3, #3
    58c0:	f200 80b8 	bhi.w	5a34 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    58c4:	a201      	add	r2, pc, #4	; (adr r2, 58cc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    58c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    58ca:	bf00      	nop
    58cc:	000058dd 	.word	0x000058dd
    58d0:	00005937 	.word	0x00005937
    58d4:	00005997 	.word	0x00005997
    58d8:	00005a07 	.word	0x00005a07
    switch (state)
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);
    58dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    58de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    58e2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    58e6:	f7ff ff27 	bl	5738 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    58ea:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

        if (divide_estimate < 1.0f)
    58ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    58f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    58f6:	eef4 7ac7 	vcmpe.f32	s15, s14
    58fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58fe:	d505      	bpl.n	590c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    5900:	69fb      	ldr	r3, [r7, #28]
    5902:	2200      	movs	r2, #0
    5904:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    5906:	2304      	movs	r3, #4
    5908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    590a:	e094      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecimal(divide_estimate))
    590c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    5910:	f7ff ff74 	bl	57fc <sjsu::lpc40xx::uart::IsDecimal(float)>
    5914:	4603      	mov	r3, r0
    5916:	2b00      	cmp	r3, #0
    5918:	d00a      	beq.n	5930 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    591a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    591e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5922:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    5926:	69fb      	ldr	r3, [r7, #28]
    5928:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    592a:	2304      	movs	r3, #4
    592c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    592e:	e082      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    5930:	2301      	movs	r3, #1
    5932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5934:	e07f      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    5936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5938:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    593c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5940:	f7ff fefa 	bl	5738 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5944:	eef0 7a40 	vmov.f32	s15, s0
    5948:	eeb0 0a67 	vmov.f32	s0, s15
    594c:	f7ff ff40 	bl	57d0 <sjsu::lpc40xx::uart::RoundFloat(float)>
    5950:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    5954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5956:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    595a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    595e:	f7ff ff11 	bl	5784 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    5962:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    5966:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    596a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 5a44 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    596e:	eef4 7ac7 	vcmpe.f32	s15, s14
    5972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5976:	db0b      	blt.n	5990 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    5978:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    597c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 5a48 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    5980:	eef4 7ac7 	vcmpe.f32	s15, s14
    5984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5988:	d802      	bhi.n	5990 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    598a:	2303      	movs	r3, #3
    598c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    598e:	e052      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    5990:	2302      	movs	r3, #2
    5992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5994:	e04f      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    5996:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    599a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    599e:	ee77 7a87 	vadd.f32	s15, s15, s14
    59a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    59a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    59aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    59ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    59b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59b6:	dd02      	ble.n	59be <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    59b8:	2304      	movs	r3, #4
    59ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    59bc:	e03b      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    59be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    59c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    59c6:	eef4 7ac7 	vcmpe.f32	s15, s14
    59ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59ce:	dd0f      	ble.n	59f0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    59d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    59d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    59d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    59dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    59e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    59e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    59e8:	ee77 7a87 	vadd.f32	s15, s15, s14
    59ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    59f0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    59f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    59f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    59fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    5a00:	2301      	movs	r3, #1
    5a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5a04:	e017      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    5a06:	69fc      	ldr	r4, [r7, #28]
    5a08:	463b      	mov	r3, r7
    5a0a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    5a0e:	4618      	mov	r0, r3
    5a10:	f7ff fe22 	bl	5658 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    5a14:	463b      	mov	r3, r7
    5a16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    5a1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5a26:	ee17 2a90 	vmov	r2, s15
    5a2a:	69fb      	ldr	r3, [r7, #28]
    5a2c:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    5a2e:	2304      	movs	r3, #4
    5a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5a32:	e000      	b.n	5a36 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    5a34:	bf00      	nop
  while (state != States::kDone)
    5a36:	e73d      	b.n	58b4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    5a38:	bf00      	nop
}
    5a3a:	69f8      	ldr	r0, [r7, #28]
    5a3c:	3744      	adds	r7, #68	; 0x44
    5a3e:	46bd      	mov	sp, r7
    5a40:	bd90      	pop	{r4, r7, pc}
    5a42:	bf00      	nop
    5a44:	3f8ccccd 	.word	0x3f8ccccd
    5a48:	3ff33333 	.word	0x3ff33333

00005a4c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
  };

  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  explicit constexpr Uart(const Port_t & port) : port_(port) {}

  Status Initialize(uint32_t baud_rate) const override
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b084      	sub	sp, #16
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
    5a54:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    5a56:	2307      	movs	r3, #7
    5a58:	73fb      	strb	r3, [r7, #15]
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5a5a:	f7fa fe8b 	bl	774 <sjsu::SystemController::GetPlatformController()>
    5a5e:	4603      	mov	r3, r0
        port_.power_on_id);
    5a60:	681a      	ldr	r2, [r3, #0]
    5a62:	3214      	adds	r2, #20
    5a64:	6812      	ldr	r2, [r2, #0]
    5a66:	6879      	ldr	r1, [r7, #4]
    5a68:	6849      	ldr	r1, [r1, #4]
    5a6a:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5a6c:	4618      	mov	r0, r3
    5a6e:	4790      	blx	r2

    SetBaudRate(baud_rate);
    5a70:	6839      	ldr	r1, [r7, #0]
    5a72:	6878      	ldr	r0, [r7, #4]
    5a74:	f000 f83f 	bl	5af6 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	685b      	ldr	r3, [r3, #4]
    5a7c:	68db      	ldr	r3, [r3, #12]
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	3304      	adds	r3, #4
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	687a      	ldr	r2, [r7, #4]
    5a86:	6852      	ldr	r2, [r2, #4]
    5a88:	68d0      	ldr	r0, [r2, #12]
    5a8a:	687a      	ldr	r2, [r7, #4]
    5a8c:	6852      	ldr	r2, [r2, #4]
    5a8e:	7c12      	ldrb	r2, [r2, #16]
    5a90:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    5a94:	b2d2      	uxtb	r2, r2
    5a96:	4611      	mov	r1, r2
    5a98:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	685b      	ldr	r3, [r3, #4]
    5a9e:	689b      	ldr	r3, [r3, #8]
    5aa0:	681b      	ldr	r3, [r3, #0]
    5aa2:	3304      	adds	r3, #4
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	687a      	ldr	r2, [r7, #4]
    5aa8:	6852      	ldr	r2, [r2, #4]
    5aaa:	6890      	ldr	r0, [r2, #8]
    5aac:	687a      	ldr	r2, [r7, #4]
    5aae:	6852      	ldr	r2, [r2, #4]
    5ab0:	7c12      	ldrb	r2, [r2, #16]
    5ab2:	f3c2 0202 	ubfx	r2, r2, #0, #3
    5ab6:	b2d2      	uxtb	r2, r2
    5ab8:	4611      	mov	r1, r2
    5aba:	4798      	blx	r3
    port_.rx.PullUp();
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	685b      	ldr	r3, [r3, #4]
    5ac0:	68db      	ldr	r3, [r3, #12]
    5ac2:	4618      	mov	r0, r3
    5ac4:	f7ff fd7c 	bl	55c0 <sjsu::Pin::PullUp() const>
    port_.tx.PullUp();
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	685b      	ldr	r3, [r3, #4]
    5acc:	689b      	ldr	r3, [r3, #8]
    5ace:	4618      	mov	r0, r3
    5ad0:	f7ff fd76 	bl	55c0 <sjsu::Pin::PullUp() const>
    port_.registers->FCR |= kFIFOEnableAndReset;
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	685b      	ldr	r3, [r3, #4]
    5ad8:	681b      	ldr	r3, [r3, #0]
    5ada:	7a1b      	ldrb	r3, [r3, #8]
    5adc:	b2da      	uxtb	r2, r3
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	685b      	ldr	r3, [r3, #4]
    5ae2:	681b      	ldr	r3, [r3, #0]
    5ae4:	f042 0207 	orr.w	r2, r2, #7
    5ae8:	b2d2      	uxtb	r2, r2
    5aea:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    5aec:	2300      	movs	r3, #0
  }
    5aee:	4618      	mov	r0, r3
    5af0:	3710      	adds	r7, #16
    5af2:	46bd      	mov	sp, r7
    5af4:	bd80      	pop	{r7, pc}

00005af6 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    5af6:	b580      	push	{r7, lr}
    5af8:	b088      	sub	sp, #32
    5afa:	af00      	add	r7, sp, #0
    5afc:	6078      	str	r0, [r7, #4]
    5afe:	6039      	str	r1, [r7, #0]
  {
    auto peripheral_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    5b00:	f7fa fe38 	bl	774 <sjsu::SystemController::GetPlatformController()>
    5b04:	4602      	mov	r2, r0
            port_.power_on_id);
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	685b      	ldr	r3, [r3, #4]
    5b0a:	3304      	adds	r3, #4
    5b0c:	4619      	mov	r1, r3
    5b0e:	4610      	mov	r0, r2
    5b10:	f7fa fe3c 	bl	78c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    5b14:	4603      	mov	r3, r0
    5b16:	61bb      	str	r3, [r7, #24]

    uart::UartCalibration_t calibration =
        uart::GenerateUartCalibration(baud_rate, peripheral_frequency);
    5b18:	f107 030c 	add.w	r3, r7, #12
    5b1c:	69ba      	ldr	r2, [r7, #24]
    5b1e:	6839      	ldr	r1, [r7, #0]
    5b20:	4618      	mov	r0, r3
    5b22:	f7ff fe9d 	bl	5860 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    5b26:	2380      	movs	r3, #128	; 0x80
    5b28:	77fb      	strb	r3, [r7, #31]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    5b2a:	68fb      	ldr	r3, [r7, #12]
    5b2c:	0a1b      	lsrs	r3, r3, #8
    5b2e:	77bb      	strb	r3, [r7, #30]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	777b      	strb	r3, [r7, #29]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5b34:	697b      	ldr	r3, [r7, #20]
    5b36:	b2db      	uxtb	r3, r3
    5b38:	011b      	lsls	r3, r3, #4
    5b3a:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    5b3c:	693b      	ldr	r3, [r7, #16]
    5b3e:	b2db      	uxtb	r3, r3
    5b40:	f003 030f 	and.w	r3, r3, #15
    5b44:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5b46:	4313      	orrs	r3, r2
    5b48:	773b      	strb	r3, [r7, #28]

    port_.registers->LCR = kDlabBit;
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	685b      	ldr	r3, [r3, #4]
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	2280      	movs	r2, #128	; 0x80
    5b52:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    5b54:	687b      	ldr	r3, [r7, #4]
    5b56:	685b      	ldr	r3, [r3, #4]
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	7fba      	ldrb	r2, [r7, #30]
    5b5c:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	685b      	ldr	r3, [r3, #4]
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	7f7a      	ldrb	r2, [r7, #29]
    5b66:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	685b      	ldr	r3, [r3, #4]
    5b6c:	681b      	ldr	r3, [r3, #0]
    5b6e:	7f3a      	ldrb	r2, [r7, #28]
    5b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    5b74:	687b      	ldr	r3, [r7, #4]
    5b76:	685b      	ldr	r3, [r3, #4]
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	2203      	movs	r2, #3
    5b7c:	731a      	strb	r2, [r3, #12]
    return true;
    5b7e:	2301      	movs	r3, #1
  }
    5b80:	4618      	mov	r0, r3
    5b82:	3720      	adds	r7, #32
    5b84:	46bd      	mov	sp, r7
    5b86:	bd80      	pop	{r7, pc}

00005b88 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>:

  void Write(const void * data, size_t size) const override
    5b88:	b580      	push	{r7, lr}
    5b8a:	b086      	sub	sp, #24
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	60f8      	str	r0, [r7, #12]
    5b90:	60b9      	str	r1, [r7, #8]
    5b92:	607a      	str	r2, [r7, #4]
  {
    const uint8_t * data_buffer = reinterpret_cast<const uint8_t *>(data);
    5b94:	68bb      	ldr	r3, [r7, #8]
    5b96:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++)
    5b98:	2300      	movs	r3, #0
    5b9a:	617b      	str	r3, [r7, #20]
    5b9c:	697a      	ldr	r2, [r7, #20]
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	429a      	cmp	r2, r3
    5ba2:	d216      	bcs.n	5bd2 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x4a>
    {
      port_.registers->THR = data_buffer[i];
    5ba4:	693a      	ldr	r2, [r7, #16]
    5ba6:	697b      	ldr	r3, [r7, #20]
    5ba8:	441a      	add	r2, r3
    5baa:	68fb      	ldr	r3, [r7, #12]
    5bac:	685b      	ldr	r3, [r3, #4]
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	7812      	ldrb	r2, [r2, #0]
    5bb2:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    5bb4:	68f8      	ldr	r0, [r7, #12]
    5bb6:	f000 f843 	bl	5c40 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    5bba:	4603      	mov	r3, r0
    5bbc:	f083 0301 	eor.w	r3, r3, #1
    5bc0:	b2db      	uxtb	r3, r3
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d001      	beq.n	5bca <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x42>
      {
        continue;
    5bc6:	bf00      	nop
      while (!TransmissionComplete())
    5bc8:	e7f4      	b.n	5bb4 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x2c>
    for (size_t i = 0; i < size; i++)
    5bca:	697b      	ldr	r3, [r7, #20]
    5bcc:	3301      	adds	r3, #1
    5bce:	617b      	str	r3, [r7, #20]
    5bd0:	e7e4      	b.n	5b9c <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x14>
      }
    }
  }
    5bd2:	bf00      	nop
    5bd4:	3718      	adds	r7, #24
    5bd6:	46bd      	mov	sp, r7
    5bd8:	bd80      	pop	{r7, pc}

00005bda <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>:

  size_t Read(void * data, size_t size) const override
    5bda:	b580      	push	{r7, lr}
    5bdc:	b086      	sub	sp, #24
    5bde:	af00      	add	r7, sp, #0
    5be0:	60f8      	str	r0, [r7, #12]
    5be2:	60b9      	str	r1, [r7, #8]
    5be4:	607a      	str	r2, [r7, #4]
  {
    uint8_t * data_buffer = reinterpret_cast<uint8_t *>(data);
    5be6:	68bb      	ldr	r3, [r7, #8]
    5be8:	613b      	str	r3, [r7, #16]
    size_t index          = 0;
    5bea:	2300      	movs	r3, #0
    5bec:	617b      	str	r3, [r7, #20]
    while (FifoHasData())
    5bee:	68f8      	ldr	r0, [r7, #12]
    5bf0:	f000 f838 	bl	5c64 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5bf4:	4603      	mov	r3, r0
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d011      	beq.n	5c1e <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x44>
    {
      if (index >= size)
    5bfa:	697a      	ldr	r2, [r7, #20]
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	429a      	cmp	r2, r3
    5c00:	d20c      	bcs.n	5c1c <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x42>
      {
        break;
      }
      data_buffer[index++] = port_.registers->RBR;
    5c02:	68fb      	ldr	r3, [r7, #12]
    5c04:	685b      	ldr	r3, [r3, #4]
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	781b      	ldrb	r3, [r3, #0]
    5c0a:	b2d9      	uxtb	r1, r3
    5c0c:	697b      	ldr	r3, [r7, #20]
    5c0e:	1c5a      	adds	r2, r3, #1
    5c10:	617a      	str	r2, [r7, #20]
    5c12:	693a      	ldr	r2, [r7, #16]
    5c14:	4413      	add	r3, r2
    5c16:	460a      	mov	r2, r1
    5c18:	701a      	strb	r2, [r3, #0]
    while (FifoHasData())
    5c1a:	e7e8      	b.n	5bee <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x14>
        break;
    5c1c:	bf00      	nop
    }
    return index;
    5c1e:	697b      	ldr	r3, [r7, #20]
  }
    5c20:	4618      	mov	r0, r3
    5c22:	3718      	adds	r7, #24
    5c24:	46bd      	mov	sp, r7
    5c26:	bd80      	pop	{r7, pc}

00005c28 <sjsu::lpc40xx::Uart::HasData() const>:

  bool HasData() const override
    5c28:	b580      	push	{r7, lr}
    5c2a:	b082      	sub	sp, #8
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
  {
    return FifoHasData();
    5c30:	6878      	ldr	r0, [r7, #4]
    5c32:	f000 f817 	bl	5c64 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5c36:	4603      	mov	r3, r0
  }
    5c38:	4618      	mov	r0, r3
    5c3a:	3708      	adds	r7, #8
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}

00005c40 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	685b      	ldr	r3, [r3, #4]
    5c4c:	681b      	ldr	r3, [r3, #0]
    5c4e:	7d1b      	ldrb	r3, [r3, #20]
    5c50:	b2db      	uxtb	r3, r3
    5c52:	2105      	movs	r1, #5
    5c54:	4618      	mov	r0, r3
    5c56:	f000 f9e4 	bl	6022 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5c5a:	4603      	mov	r3, r0
  }
    5c5c:	4618      	mov	r0, r3
    5c5e:	3708      	adds	r7, #8
    5c60:	46bd      	mov	sp, r7
    5c62:	bd80      	pop	{r7, pc}

00005c64 <sjsu::lpc40xx::Uart::FifoHasData() const>:
  /// @return true if fifo contains receive data.
  bool FifoHasData() const
    5c64:	b580      	push	{r7, lr}
    5c66:	b082      	sub	sp, #8
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	685b      	ldr	r3, [r3, #4]
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	7d1b      	ldrb	r3, [r3, #20]
    5c74:	b2db      	uxtb	r3, r3
    5c76:	2100      	movs	r1, #0
    5c78:	4618      	mov	r0, r3
    5c7a:	f000 f9d2 	bl	6022 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5c7e:	4603      	mov	r3, r0
  }
    5c80:	4618      	mov	r0, r3
    5c82:	3708      	adds	r7, #8
    5c84:	46bd      	mov	sp, r7
    5c86:	bd80      	pop	{r7, pc}

00005c88 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::InterruptController<sjsu::lpc40xx::kNumberOfIrqs,
                                  __NVIC_PRIO_BITS>
    interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b082      	sub	sp, #8
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
    5c90:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    5c92:	683a      	ldr	r2, [r7, #0]
    5c94:	6879      	ldr	r1, [r7, #4]
    5c96:	4804      	ldr	r0, [pc, #16]	; (5ca8 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    5c98:	f7ff ff76 	bl	5b88 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>
  return length;
    5c9c:	683b      	ldr	r3, [r7, #0]
}
    5c9e:	4618      	mov	r0, r3
    5ca0:	3708      	adds	r7, #8
    5ca2:	46bd      	mov	sp, r7
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	bf00      	nop
    5ca8:	10000c78 	.word	0x10000c78

00005cac <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	6078      	str	r0, [r7, #4]
    5cb4:	6039      	str	r1, [r7, #0]
  // Wait until data comes in
  while (!uart0.HasData())
    5cb6:	480a      	ldr	r0, [pc, #40]	; (5ce0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    5cb8:	f7ff ffb6 	bl	5c28 <sjsu::lpc40xx::Uart::HasData() const>
    5cbc:	4603      	mov	r3, r0
    5cbe:	f083 0301 	eor.w	r3, r3, #1
    5cc2:	b2db      	uxtb	r3, r3
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d001      	beq.n	5ccc <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x20>
  {
    continue;
    5cc8:	bf00      	nop
  while (!uart0.HasData())
    5cca:	e7f4      	b.n	5cb6 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0xa>
  }
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5ccc:	683a      	ldr	r2, [r7, #0]
    5cce:	6879      	ldr	r1, [r7, #4]
    5cd0:	4803      	ldr	r0, [pc, #12]	; (5ce0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    5cd2:	f7ff ff82 	bl	5bda <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>
  return length;
    5cd6:	683b      	ldr	r3, [r7, #0]
}
    5cd8:	4618      	mov	r0, r3
    5cda:	3708      	adds	r7, #8
    5cdc:	46bd      	mov	sp, r7
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	10000c78 	.word	0x10000c78

00005ce4 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    5ce4:	b580      	push	{r7, lr}
    5ce6:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5ce8:	4802      	ldr	r0, [pc, #8]	; (5cf4 <ThreadRuntimeCounter+0x10>)
    5cea:	f7fe fdd7 	bl	489c <sjsu::cortex::DwtCounter::GetCount()>
    5cee:	4603      	mov	r3, r0
}
    5cf0:	4618      	mov	r0, r3
    5cf2:	bd80      	pop	{r7, pc}
    5cf4:	10001354 	.word	0x10001354

00005cf8 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b086      	sub	sp, #24
    5cfc:	af00      	add	r7, sp, #0
  // Enable FPU (Floating Point Unit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5cfe:	f7fe fddd 	bl	48bc <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set the platform's interrupt controller.
  // This will be used by other libraries to enable and disable interrupts.
  sjsu::InterruptController::SetPlatformController(&interrupt_controller);
    5d02:	4828      	ldr	r0, [pc, #160]	; (5da4 <sjsu::InitializePlatform()+0xac>)
    5d04:	f7fe fdee 	bl	48e4 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>
  sjsu::SystemController::SetPlatformController(&system_controller);
    5d08:	4827      	ldr	r0, [pc, #156]	; (5da8 <sjsu::InitializePlatform()+0xb0>)
    5d0a:	f7fe fe7d 	bl	4a08 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    5d0e:	4b27      	ldr	r3, [pc, #156]	; (5dac <sjsu::InitializePlatform()+0xb4>)
    5d10:	6819      	ldr	r1, [r3, #0]
    5d12:	4825      	ldr	r0, [pc, #148]	; (5da8 <sjsu::InitializePlatform()+0xb0>)
    5d14:	f7ff f8d8 	bl	4ec8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5d18:	23ff      	movs	r3, #255	; 0xff
    5d1a:	703b      	strb	r3, [r7, #0]
    5d1c:	463b      	mov	r3, r7
    5d1e:	2201      	movs	r2, #1
    5d20:	4619      	mov	r1, r3
    5d22:	4821      	ldr	r0, [pc, #132]	; (5da8 <sjsu::InitializePlatform()+0xb0>)
    5d24:	f7ff f91e 	bl	4f64 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5d28:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5d2c:	4820      	ldr	r0, [pc, #128]	; (5db0 <sjsu::InitializePlatform()+0xb8>)
    5d2e:	f7ff fe8d 	bl	5a4c <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    5d32:	4820      	ldr	r0, [pc, #128]	; (5db4 <sjsu::InitializePlatform()+0xbc>)
    5d34:	f000 fe00 	bl	6938 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5d38:	481f      	ldr	r0, [pc, #124]	; (5db8 <sjsu::InitializePlatform()+0xc0>)
    5d3a:	f000 fe0d 	bl	6958 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.Initialize();
    5d3e:	481f      	ldr	r0, [pc, #124]	; (5dbc <sjsu::InitializePlatform()+0xc4>)
    5d40:	f7fe ff34 	bl	4bac <sjsu::cortex::SystemTimer::Initialize() const>
  system_timer.SetTickFrequency(config::kRtosFrequency);
    5d44:	4b1e      	ldr	r3, [pc, #120]	; (5dc0 <sjsu::InitializePlatform()+0xc8>)
    5d46:	6819      	ldr	r1, [r3, #0]
    5d48:	481c      	ldr	r0, [pc, #112]	; (5dbc <sjsu::InitializePlatform()+0xc4>)
    5d4a:	f7ff f815 	bl	4d78 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    5d4e:	481b      	ldr	r0, [pc, #108]	; (5dbc <sjsu::InitializePlatform()+0xc4>)
    5d50:	f7fe ff84 	bl	4c5c <sjsu::cortex::SystemTimer::StartTimer() const>
    5d54:	6178      	str	r0, [r7, #20]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    5d56:	697b      	ldr	r3, [r7, #20]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d00e      	beq.n	5d7a <sjsu::InitializePlatform()+0x82>
    5d5c:	23ba      	movs	r3, #186	; 0xba
    5d5e:	4a19      	ldr	r2, [pc, #100]	; (5dc4 <sjsu::InitializePlatform()+0xcc>)
    5d60:	4919      	ldr	r1, [pc, #100]	; (5dc8 <sjsu::InitializePlatform()+0xd0>)
    5d62:	481a      	ldr	r0, [pc, #104]	; (5dcc <sjsu::InitializePlatform()+0xd4>)
    5d64:	f7fe fcc6 	bl	46f4 <printf>
    5d68:	4819      	ldr	r0, [pc, #100]	; (5dd0 <sjsu::InitializePlatform()+0xd8>)
    5d6a:	f7fd fb65 	bl	3438 <puts>
    5d6e:	2100      	movs	r1, #0
    5d70:	2001      	movs	r0, #1
    5d72:	f7fd f8f1 	bl	2f58 <sjsu::debug::PrintBacktrace(bool, void*)>
    5d76:	f7fd f93b 	bl	2ff0 <sjsu::Halt()>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    5d7a:	4816      	ldr	r0, [pc, #88]	; (5dd4 <sjsu::InitializePlatform()+0xdc>)
    5d7c:	f7fe fd6c 	bl	4858 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    5d80:	1d3b      	adds	r3, r7, #4
    5d82:	4915      	ldr	r1, [pc, #84]	; (5dd8 <sjsu::InitializePlatform()+0xe0>)
    5d84:	4618      	mov	r0, r3
    5d86:	f7fc f9cb 	bl	2120 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    5d8a:	1d3b      	adds	r3, r7, #4
    5d8c:	4618      	mov	r0, r3
    5d8e:	f7fe fe2d 	bl	49ec <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>
    5d92:	1d3b      	adds	r3, r7, #4
    5d94:	4618      	mov	r0, r3
    5d96:	f7fa fd5b 	bl	850 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
}
    5d9a:	bf00      	nop
    5d9c:	3718      	adds	r7, #24
    5d9e:	46bd      	mov	sp, r7
    5da0:	bd80      	pop	{r7, pc}
    5da2:	bf00      	nop
    5da4:	10000c94 	.word	0x10000c94
    5da8:	10000c74 	.word	0x10000c74
    5dac:	00008c6c 	.word	0x00008c6c
    5db0:	10000c78 	.word	0x10000c78
    5db4:	00005c89 	.word	0x00005c89
    5db8:	00005cad 	.word	0x00005cad
    5dbc:	10000c80 	.word	0x10000c80
    5dc0:	00008c70 	.word	0x00008c70
    5dc4:	00009190 	.word	0x00009190
    5dc8:	0000948c 	.word	0x0000948c
    5dcc:	000091b0 	.word	0x000091b0
    5dd0:	00008e80 	.word	0x00008e80
    5dd4:	10001354 	.word	0x10001354
    5dd8:	00004b35 	.word	0x00004b35

00005ddc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
      operator=(const function& __x)
    5ddc:	b580      	push	{r7, lr}
    5dde:	b086      	sub	sp, #24
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
    5de4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    5de6:	f107 0308 	add.w	r3, r7, #8
    5dea:	6839      	ldr	r1, [r7, #0]
    5dec:	4618      	mov	r0, r3
    5dee:	f000 f96f 	bl	60d0 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
    5df2:	f107 0308 	add.w	r3, r7, #8
    5df6:	6879      	ldr	r1, [r7, #4]
    5df8:	4618      	mov	r0, r3
    5dfa:	f000 f98b 	bl	6114 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>
    5dfe:	f107 0308 	add.w	r3, r7, #8
    5e02:	4618      	mov	r0, r3
    5e04:	f7fa fd24 	bl	850 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
	return *this;
    5e08:	687b      	ldr	r3, [r7, #4]
      }
    5e0a:	4618      	mov	r0, r3
    5e0c:	3718      	adds	r7, #24
    5e0e:	46bd      	mov	sp, r7
    5e10:	bd80      	pop	{r7, pc}

00005e12 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    5e12:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    5e16:	b08a      	sub	sp, #40	; 0x28
    5e18:	af00      	add	r7, sp, #0
    5e1a:	60f8      	str	r0, [r7, #12]
    5e1c:	60b9      	str	r1, [r7, #8]
    5e1e:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    5e20:	68bb      	ldr	r3, [r7, #8]
    5e22:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    5e2a:	f107 0318 	add.w	r3, r7, #24
    5e2e:	4618      	mov	r0, r3
    5e30:	f7fa fc18 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    5e34:	4604      	mov	r4, r0
    5e36:	460d      	mov	r5, r1
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    5e42:	f107 0320 	add.w	r3, r7, #32
    5e46:	4618      	mov	r0, r3
    5e48:	f7fa fc0c 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    5e4c:	4602      	mov	r2, r0
    5e4e:	460b      	mov	r3, r1
    5e50:	eb14 0802 	adds.w	r8, r4, r2
    5e54:	eb45 0903 	adc.w	r9, r5, r3
    5e58:	e9c7 8904 	strd	r8, r9, [r7, #16]
    5e5c:	f107 0310 	add.w	r3, r7, #16
    5e60:	4619      	mov	r1, r3
    5e62:	68f8      	ldr	r0, [r7, #12]
    5e64:	f7fa fc0c 	bl	680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    5e68:	68f8      	ldr	r0, [r7, #12]
    5e6a:	3728      	adds	r7, #40	; 0x28
    5e6c:	46bd      	mov	sp, r7
    5e6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00005e72 <std::function<void ()>::function(decltype(nullptr))>:
      function(nullptr_t) noexcept
    5e72:	b580      	push	{r7, lr}
    5e74:	b082      	sub	sp, #8
    5e76:	af00      	add	r7, sp, #0
    5e78:	6078      	str	r0, [r7, #4]
    5e7a:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	4618      	mov	r0, r3
    5e80:	f7fa fa96 	bl	3b0 <std::_Function_base::_Function_base()>
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	4618      	mov	r0, r3
    5e88:	3708      	adds	r7, #8
    5e8a:	46bd      	mov	sp, r7
    5e8c:	bd80      	pop	{r7, pc}

00005e8e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    5e8e:	b580      	push	{r7, lr}
    5e90:	b082      	sub	sp, #8
    5e92:	af00      	add	r7, sp, #0
    5e94:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	4618      	mov	r0, r3
    5e9a:	f000 f95c 	bl	6156 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    5e9e:	bf00      	nop
    5ea0:	6878      	ldr	r0, [r7, #4]
    5ea2:	3708      	adds	r7, #8
    5ea4:	46bd      	mov	sp, r7
    5ea6:	bd80      	pop	{r7, pc}

00005ea8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b084      	sub	sp, #16
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
    5eb0:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    5eb2:	f107 0308 	add.w	r3, r7, #8
    5eb6:	6839      	ldr	r1, [r7, #0]
    5eb8:	4618      	mov	r0, r3
    5eba:	f000 f960 	bl	617e <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    5ebe:	f107 0308 	add.w	r3, r7, #8
    5ec2:	4618      	mov	r0, r3
    5ec4:	f7fa fbce 	bl	664 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    5ec8:	4602      	mov	r2, r0
    5eca:	460b      	mov	r3, r1
    5ecc:	6879      	ldr	r1, [r7, #4]
    5ece:	e9c1 2300 	strd	r2, r3, [r1]
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	4618      	mov	r0, r3
    5ed6:	3710      	adds	r7, #16
    5ed8:	46bd      	mov	sp, r7
    5eda:	bd80      	pop	{r7, pc}

00005edc <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    5edc:	b580      	push	{r7, lr}
    5ede:	b082      	sub	sp, #8
    5ee0:	af00      	add	r7, sp, #0
    5ee2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    5ee4:	6878      	ldr	r0, [r7, #4]
    5ee6:	f7fe ff35 	bl	4d54 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5eea:	4603      	mov	r3, r0
		}
    5eec:	4618      	mov	r0, r3
    5eee:	3708      	adds	r7, #8
    5ef0:	46bd      	mov	sp, r7
    5ef2:	bd80      	pop	{r7, pc}

00005ef4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
    5ef4:	b580      	push	{r7, lr}
    5ef6:	b082      	sub	sp, #8
    5ef8:	af00      	add	r7, sp, #0
    5efa:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	4618      	mov	r0, r3
    5f00:	f000 f94e 	bl	61a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    5f04:	bf00      	nop
    5f06:	6878      	ldr	r0, [r7, #4]
    5f08:	3708      	adds	r7, #8
    5f0a:	46bd      	mov	sp, r7
    5f0c:	bd80      	pop	{r7, pc}

00005f0e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    5f0e:	b580      	push	{r7, lr}
    5f10:	b084      	sub	sp, #16
    5f12:	af00      	add	r7, sp, #0
    5f14:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	4618      	mov	r0, r3
    5f1a:	f7fb f899 	bl	1050 <units::linear_scale<float>::operator()() const>
    5f1e:	eef0 7a40 	vmov.f32	s15, s0
    5f22:	edc7 7a03 	vstr	s15, [r7, #12]
    5f26:	f107 030c 	add.w	r3, r7, #12
    5f2a:	4618      	mov	r0, r3
    5f2c:	f000 f950 	bl	61d0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5f30:	eef0 7a40 	vmov.f32	s15, s0
    5f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5f38:	ee17 3a90 	vmov	r3, s15
		}
    5f3c:	4618      	mov	r0, r3
    5f3e:	3710      	adds	r7, #16
    5f40:	46bd      	mov	sp, r7
    5f42:	bd80      	pop	{r7, pc}

00005f44 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    5f44:	b580      	push	{r7, lr}
    5f46:	b082      	sub	sp, #8
    5f48:	af00      	add	r7, sp, #0
    5f4a:	6078      	str	r0, [r7, #4]
    5f4c:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    5f4e:	683b      	ldr	r3, [r7, #0]
    5f50:	4618      	mov	r0, r3
    5f52:	f7fe ff93 	bl	4e7c <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5f56:	eef0 7a40 	vmov.f32	s15, s0
    5f5a:	687b      	ldr	r3, [r7, #4]
    5f5c:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    5f60:	687b      	ldr	r3, [r7, #4]
		}
    5f62:	4618      	mov	r0, r3
    5f64:	3708      	adds	r7, #8
    5f66:	46bd      	mov	sp, r7
    5f68:	bd80      	pop	{r7, pc}

00005f6a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    5f6a:	b580      	push	{r7, lr}
    5f6c:	b084      	sub	sp, #16
    5f6e:	af00      	add	r7, sp, #0
    5f70:	60f8      	str	r0, [r7, #12]
    5f72:	60b9      	str	r1, [r7, #8]
    5f74:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    5f76:	793b      	ldrb	r3, [r7, #4]
    5f78:	461a      	mov	r2, r3
    5f7a:	797b      	ldrb	r3, [r7, #5]
    5f7c:	68b9      	ldr	r1, [r7, #8]
    5f7e:	68f8      	ldr	r0, [r7, #12]
    5f80:	f000 f934 	bl	61ec <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    5f84:	4603      	mov	r3, r0
}
    5f86:	4618      	mov	r0, r3
    5f88:	3710      	adds	r7, #16
    5f8a:	46bd      	mov	sp, r7
    5f8c:	bd80      	pop	{r7, pc}

00005f8e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    5f8e:	b580      	push	{r7, lr}
    5f90:	ed2d 8b02 	vpush	{d8}
    5f94:	b084      	sub	sp, #16
    5f96:	af00      	add	r7, sp, #0
    5f98:	6078      	str	r0, [r7, #4]
    5f9a:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	4618      	mov	r0, r3
    5fa0:	f7fb f856 	bl	1050 <units::linear_scale<float>::operator()() const>
    5fa4:	eeb0 8a40 	vmov.f32	s16, s0
    5fa8:	683b      	ldr	r3, [r7, #0]
    5faa:	4618      	mov	r0, r3
    5fac:	f7fb f850 	bl	1050 <units::linear_scale<float>::operator()() const>
    5fb0:	eef0 7a40 	vmov.f32	s15, s0
    5fb4:	edc7 7a03 	vstr	s15, [r7, #12]
    5fb8:	f107 030c 	add.w	r3, r7, #12
    5fbc:	4618      	mov	r0, r3
    5fbe:	f7fe fcb7 	bl	4930 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5fc2:	eeb0 7a40 	vmov.f32	s14, s0
    5fc6:	eec8 7a07 	vdiv.f32	s15, s16, s14
    5fca:	f107 0308 	add.w	r3, r7, #8
    5fce:	eeb0 0a67 	vmov.f32	s0, s15
    5fd2:	4618      	mov	r0, r3
    5fd4:	f7fb f974 	bl	12c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5fd8:	68bb      	ldr	r3, [r7, #8]
	}
    5fda:	4618      	mov	r0, r3
    5fdc:	3710      	adds	r7, #16
    5fde:	46bd      	mov	sp, r7
    5fe0:	ecbd 8b02 	vpop	{d8}
    5fe4:	bd80      	pop	{r7, pc}

00005fe6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    5fe6:	b580      	push	{r7, lr}
    5fe8:	b084      	sub	sp, #16
    5fea:	af00      	add	r7, sp, #0
    5fec:	6078      	str	r0, [r7, #4]
    5fee:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	4618      	mov	r0, r3
    5ff4:	f7fb f82c 	bl	1050 <units::linear_scale<float>::operator()() const>
    5ff8:	eeb0 7a40 	vmov.f32	s14, s0
    5ffc:	683b      	ldr	r3, [r7, #0]
    5ffe:	ee07 3a90 	vmov	s15, r3
    6002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6006:	ee77 7a27 	vadd.f32	s15, s14, s15
    600a:	f107 030c 	add.w	r3, r7, #12
    600e:	eeb0 0a67 	vmov.f32	s0, s15
    6012:	4618      	mov	r0, r3
    6014:	f7fb f954 	bl	12c0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    6018:	68fb      	ldr	r3, [r7, #12]
	}
    601a:	4618      	mov	r0, r3
    601c:	3710      	adds	r7, #16
    601e:	46bd      	mov	sp, r7
    6020:	bd80      	pop	{r7, pc}

00006022 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    6022:	b480      	push	{r7}
    6024:	b083      	sub	sp, #12
    6026:	af00      	add	r7, sp, #0
    6028:	4603      	mov	r3, r0
    602a:	6039      	str	r1, [r7, #0]
    602c:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    602e:	79fa      	ldrb	r2, [r7, #7]
    6030:	683b      	ldr	r3, [r7, #0]
    6032:	fa42 f303 	asr.w	r3, r2, r3
    6036:	f003 0301 	and.w	r3, r3, #1
    603a:	2b00      	cmp	r3, #0
    603c:	bf14      	ite	ne
    603e:	2301      	movne	r3, #1
    6040:	2300      	moveq	r3, #0
    6042:	b2db      	uxtb	r3, r3
}
    6044:	4618      	mov	r0, r3
    6046:	370c      	adds	r7, #12
    6048:	46bd      	mov	sp, r7
    604a:	f85d 7b04 	ldr.w	r7, [sp], #4
    604e:	4770      	bx	lr

00006050 <std::array<std::function<void ()>, 59u>::array()>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
    6050:	b5b0      	push	{r4, r5, r7, lr}
    6052:	b082      	sub	sp, #8
    6054:	af00      	add	r7, sp, #0
    6056:	6078      	str	r0, [r7, #4]
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	243a      	movs	r4, #58	; 0x3a
    605c:	461d      	mov	r5, r3
    605e:	2c00      	cmp	r4, #0
    6060:	db05      	blt.n	606e <std::array<std::function<void ()>, 59u>::array()+0x1e>
    6062:	4628      	mov	r0, r5
    6064:	f7fc f899 	bl	219a <std::function<void ()>::function()>
    6068:	3510      	adds	r5, #16
    606a:	3c01      	subs	r4, #1
    606c:	e7f7      	b.n	605e <std::array<std::function<void ()>, 59u>::array()+0xe>
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	4618      	mov	r0, r3
    6072:	3708      	adds	r7, #8
    6074:	46bd      	mov	sp, r7
    6076:	bdb0      	pop	{r4, r5, r7, pc}

00006078 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()>:

  /// This must be put into the interrupt vector table for all of the interrupts
  /// this lookup handler will work for in ROM at compile time.
  /// @note This must not be executed directly, only by the processor when an
  ///       interrupt occurs.
  static void LookupHandler()
    6078:	b580      	push	{r7, lr}
    607a:	b086      	sub	sp, #24
    607c:	af00      	add	r7, sp, #0
  {
    int active_interrupt     = (scb->ICSR & 0xFF);
    607e:	4b11      	ldr	r3, [pc, #68]	; (60c4 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x4c>)
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	685b      	ldr	r3, [r3, #4]
    6084:	b2db      	uxtb	r3, r3
    6086:	617b      	str	r3, [r7, #20]
    current_vector           = IndexToIRQ(active_interrupt);
    6088:	6978      	ldr	r0, [r7, #20]
    608a:	f000 f8db 	bl	6244 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>
    608e:	4603      	mov	r3, r0
    6090:	4a0d      	ldr	r2, [pc, #52]	; (60c8 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x50>)
    6092:	6013      	str	r3, [r2, #0]
    InterruptHandler handler = table[active_interrupt];
    6094:	697b      	ldr	r3, [r7, #20]
    6096:	4619      	mov	r1, r3
    6098:	480c      	ldr	r0, [pc, #48]	; (60cc <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x54>)
    609a:	f000 f8df 	bl	625c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    609e:	4602      	mov	r2, r0
    60a0:	1d3b      	adds	r3, r7, #4
    60a2:	4611      	mov	r1, r2
    60a4:	4618      	mov	r0, r3
    60a6:	f7fc fb00 	bl	26aa <std::function<void ()>::function(std::function<void ()> const&)>
    handler();
    60aa:	1d3b      	adds	r3, r7, #4
    60ac:	4618      	mov	r0, r3
    60ae:	f7fc f881 	bl	21b4 <std::function<void ()>::operator()() const>
    InterruptHandler handler = table[active_interrupt];
    60b2:	1d3b      	adds	r3, r7, #4
    60b4:	4618      	mov	r0, r3
    60b6:	f7fa fe7c 	bl	db2 <std::function<void ()>::~function()>
  }
    60ba:	bf00      	nop
    60bc:	3718      	adds	r7, #24
    60be:	46bd      	mov	sp, r7
    60c0:	bd80      	pop	{r7, pc}
    60c2:	bf00      	nop
    60c4:	10000c88 	.word	0x10000c88
    60c8:	10000c90 	.word	0x10000c90
    60cc:	10001358 	.word	0x10001358

000060d0 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
    function<_Res(_ArgTypes...)>::
    60d0:	b580      	push	{r7, lr}
    60d2:	b082      	sub	sp, #8
    60d4:	af00      	add	r7, sp, #0
    60d6:	6078      	str	r0, [r7, #4]
    60d8:	6039      	str	r1, [r7, #0]
    : _Function_base()
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	4618      	mov	r0, r3
    60de:	f7fa f967 	bl	3b0 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    60e2:	6838      	ldr	r0, [r7, #0]
    60e4:	f000 f8c9 	bl	627a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>
    60e8:	4603      	mov	r3, r0
    60ea:	2b00      	cmp	r3, #0
    60ec:	d00d      	beq.n	610a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    60ee:	683b      	ldr	r3, [r7, #0]
    60f0:	689b      	ldr	r3, [r3, #8]
    60f2:	6878      	ldr	r0, [r7, #4]
    60f4:	6839      	ldr	r1, [r7, #0]
    60f6:	2202      	movs	r2, #2
    60f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    60fa:	683b      	ldr	r3, [r7, #0]
    60fc:	68da      	ldr	r2, [r3, #12]
    60fe:	687b      	ldr	r3, [r7, #4]
    6100:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    6102:	683b      	ldr	r3, [r7, #0]
    6104:	689a      	ldr	r2, [r3, #8]
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	609a      	str	r2, [r3, #8]
    }
    610a:	687b      	ldr	r3, [r7, #4]
    610c:	4618      	mov	r0, r3
    610e:	3708      	adds	r7, #8
    6110:	46bd      	mov	sp, r7
    6112:	bd80      	pop	{r7, pc}

00006114 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>:
      void swap(function& __x) noexcept
    6114:	b580      	push	{r7, lr}
    6116:	b082      	sub	sp, #8
    6118:	af00      	add	r7, sp, #0
    611a:	6078      	str	r0, [r7, #4]
    611c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	683a      	ldr	r2, [r7, #0]
    6122:	4611      	mov	r1, r2
    6124:	4618      	mov	r0, r3
    6126:	f7fc fbfc 	bl	2922 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	f103 0208 	add.w	r2, r3, #8
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	3308      	adds	r3, #8
    6134:	4619      	mov	r1, r3
    6136:	4610      	mov	r0, r2
    6138:	f7fc fc25 	bl	2986 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	f103 020c 	add.w	r2, r3, #12
    6142:	683b      	ldr	r3, [r7, #0]
    6144:	330c      	adds	r3, #12
    6146:	4619      	mov	r1, r3
    6148:	4610      	mov	r0, r2
    614a:	f000 f8b1 	bl	62b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
      }
    614e:	bf00      	nop
    6150:	3708      	adds	r7, #8
    6152:	46bd      	mov	sp, r7
    6154:	bd80      	pop	{r7, pc}

00006156 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    6156:	b580      	push	{r7, lr}
    6158:	b084      	sub	sp, #16
    615a:	af00      	add	r7, sp, #0
    615c:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    615e:	f04f 0201 	mov.w	r2, #1
    6162:	f04f 0300 	mov.w	r3, #0
    6166:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    616a:	f107 0308 	add.w	r3, r7, #8
    616e:	4619      	mov	r1, r3
    6170:	6878      	ldr	r0, [r7, #4]
    6172:	f7fe fe71 	bl	4e58 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    6176:	6878      	ldr	r0, [r7, #4]
    6178:	3710      	adds	r7, #16
    617a:	46bd      	mov	sp, r7
    617c:	bd80      	pop	{r7, pc}

0000617e <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    617e:	b580      	push	{r7, lr}
    6180:	b082      	sub	sp, #8
    6182:	af00      	add	r7, sp, #0
    6184:	6078      	str	r0, [r7, #4]
    6186:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	6839      	ldr	r1, [r7, #0]
    618c:	4618      	mov	r0, r3
    618e:	f000 f8ae 	bl	62ee <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    6192:	bf00      	nop
      }
    6194:	6878      	ldr	r0, [r7, #4]
    6196:	3708      	adds	r7, #8
    6198:	46bd      	mov	sp, r7
    619a:	bd80      	pop	{r7, pc}
    619c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000061a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    61a0:	b580      	push	{r7, lr}
    61a2:	b084      	sub	sp, #16
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    61a8:	a307      	add	r3, pc, #28	; (adr r3, 61c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()+0x28>)
    61aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    61ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    61b2:	f107 0308 	add.w	r3, r7, #8
    61b6:	4619      	mov	r1, r3
    61b8:	6878      	ldr	r0, [r7, #4]
    61ba:	f7fa fa61 	bl	680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    61be:	6878      	ldr	r0, [r7, #4]
    61c0:	3710      	adds	r7, #16
    61c2:	46bd      	mov	sp, r7
    61c4:	bd80      	pop	{r7, pc}
    61c6:	bf00      	nop
    61c8:	3b9aca00 	.word	0x3b9aca00
    61cc:	00000000 	.word	0x00000000

000061d0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    61d0:	b580      	push	{r7, lr}
    61d2:	b086      	sub	sp, #24
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    61d8:	6878      	ldr	r0, [r7, #4]
    61da:	f000 f8cb 	bl	6374 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    61de:	eef0 7a40 	vmov.f32	s15, s0
	}
    61e2:	eeb0 0a67 	vmov.f32	s0, s15
    61e6:	3718      	adds	r7, #24
    61e8:	46bd      	mov	sp, r7
    61ea:	bd80      	pop	{r7, pc}

000061ec <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    61ec:	b480      	push	{r7}
    61ee:	b089      	sub	sp, #36	; 0x24
    61f0:	af00      	add	r7, sp, #0
    61f2:	60f8      	str	r0, [r7, #12]
    61f4:	60b9      	str	r1, [r7, #8]
    61f6:	607a      	str	r2, [r7, #4]
    61f8:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    61fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    61fe:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    6200:	2320      	movs	r3, #32
    6202:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    6204:	683b      	ldr	r3, [r7, #0]
    6206:	f1c3 0320 	rsb	r3, r3, #32
    620a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    620e:	fa22 f303 	lsr.w	r3, r2, r3
    6212:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    6214:	697a      	ldr	r2, [r7, #20]
    6216:	687b      	ldr	r3, [r7, #4]
    6218:	fa02 f303 	lsl.w	r3, r2, r3
    621c:	43db      	mvns	r3, r3
    621e:	68fa      	ldr	r2, [r7, #12]
    6220:	4013      	ands	r3, r2
    6222:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    6224:	68ba      	ldr	r2, [r7, #8]
    6226:	697b      	ldr	r3, [r7, #20]
    6228:	401a      	ands	r2, r3
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	fa02 f303 	lsl.w	r3, r2, r3
    6230:	68fa      	ldr	r2, [r7, #12]
    6232:	4313      	orrs	r3, r2
    6234:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    6236:	68fb      	ldr	r3, [r7, #12]
}
    6238:	4618      	mov	r0, r3
    623a:	3724      	adds	r7, #36	; 0x24
    623c:	46bd      	mov	sp, r7
    623e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6242:	4770      	bx	lr

00006244 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>:
  static int IndexToIRQ(int index)
    6244:	b480      	push	{r7}
    6246:	b083      	sub	sp, #12
    6248:	af00      	add	r7, sp, #0
    624a:	6078      	str	r0, [r7, #4]
    return index - kArmExceptionOffset;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	3b10      	subs	r3, #16
  }
    6250:	4618      	mov	r0, r3
    6252:	370c      	adds	r7, #12
    6254:	46bd      	mov	sp, r7
    6256:	f85d 7b04 	ldr.w	r7, [sp], #4
    625a:	4770      	bx	lr

0000625c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
    625c:	b580      	push	{r7, lr}
    625e:	b082      	sub	sp, #8
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
    6264:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	6839      	ldr	r1, [r7, #0]
    626a:	4618      	mov	r0, r3
    626c:	f000 f894 	bl	6398 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>
    6270:	4603      	mov	r3, r0
    6272:	4618      	mov	r0, r3
    6274:	3708      	adds	r7, #8
    6276:	46bd      	mov	sp, r7
    6278:	bd80      	pop	{r7, pc}

0000627a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>:
      explicit operator bool() const noexcept
    627a:	b580      	push	{r7, lr}
    627c:	b082      	sub	sp, #8
    627e:	af00      	add	r7, sp, #0
    6280:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	4618      	mov	r0, r3
    6286:	f7fa f8b4 	bl	3f2 <std::_Function_base::_M_empty() const>
    628a:	4603      	mov	r3, r0
    628c:	f083 0301 	eor.w	r3, r3, #1
    6290:	b2db      	uxtb	r3, r3
    6292:	4618      	mov	r0, r3
    6294:	3708      	adds	r7, #8
    6296:	46bd      	mov	sp, r7
    6298:	bd80      	pop	{r7, pc}

0000629a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    629a:	b480      	push	{r7}
    629c:	b083      	sub	sp, #12
    629e:	af00      	add	r7, sp, #0
    62a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    62a2:	687b      	ldr	r3, [r7, #4]
    62a4:	4618      	mov	r0, r3
    62a6:	370c      	adds	r7, #12
    62a8:	46bd      	mov	sp, r7
    62aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ae:	4770      	bx	lr

000062b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    62b0:	b580      	push	{r7, lr}
    62b2:	b084      	sub	sp, #16
    62b4:	af00      	add	r7, sp, #0
    62b6:	6078      	str	r0, [r7, #4]
    62b8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    62ba:	6878      	ldr	r0, [r7, #4]
    62bc:	f7ff ffed 	bl	629a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    62c0:	4603      	mov	r3, r0
    62c2:	681b      	ldr	r3, [r3, #0]
    62c4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    62c6:	6838      	ldr	r0, [r7, #0]
    62c8:	f7ff ffe7 	bl	629a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    62cc:	4603      	mov	r3, r0
    62ce:	681a      	ldr	r2, [r3, #0]
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    62d4:	f107 030c 	add.w	r3, r7, #12
    62d8:	4618      	mov	r0, r3
    62da:	f7ff ffde 	bl	629a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    62de:	4603      	mov	r3, r0
    62e0:	681a      	ldr	r2, [r3, #0]
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	601a      	str	r2, [r3, #0]
    }
    62e6:	bf00      	nop
    62e8:	3710      	adds	r7, #16
    62ea:	46bd      	mov	sp, r7
    62ec:	bd80      	pop	{r7, pc}

000062ee <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    62ee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    62f2:	b084      	sub	sp, #16
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
    62f8:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    62fa:	6838      	ldr	r0, [r7, #0]
    62fc:	f7fe fd9e 	bl	4e3c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    6300:	4604      	mov	r4, r0
    6302:	460d      	mov	r5, r1
    6304:	4622      	mov	r2, r4
    6306:	462b      	mov	r3, r5
    6308:	f04f 0000 	mov.w	r0, #0
    630c:	f04f 0100 	mov.w	r1, #0
    6310:	0159      	lsls	r1, r3, #5
    6312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
    6316:	0150      	lsls	r0, r2, #5
    6318:	4602      	mov	r2, r0
    631a:	460b      	mov	r3, r1
    631c:	1b12      	subs	r2, r2, r4
    631e:	eb63 0305 	sbc.w	r3, r3, r5
    6322:	f04f 0000 	mov.w	r0, #0
    6326:	f04f 0100 	mov.w	r1, #0
    632a:	0259      	lsls	r1, r3, #9
    632c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
    6330:	0250      	lsls	r0, r2, #9
    6332:	4602      	mov	r2, r0
    6334:	460b      	mov	r3, r1
    6336:	1912      	adds	r2, r2, r4
    6338:	eb45 0303 	adc.w	r3, r5, r3
    633c:	f04f 0000 	mov.w	r0, #0
    6340:	f04f 0100 	mov.w	r1, #0
    6344:	0199      	lsls	r1, r3, #6
    6346:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    634a:	0190      	lsls	r0, r2, #6
    634c:	1a80      	subs	r0, r0, r2
    634e:	eb61 0103 	sbc.w	r1, r1, r3
    6352:	eb10 0804 	adds.w	r8, r0, r4
    6356:	eb41 0905 	adc.w	r9, r1, r5
    635a:	e9c7 8902 	strd	r8, r9, [r7, #8]
    635e:	f107 0308 	add.w	r3, r7, #8
    6362:	4619      	mov	r1, r3
    6364:	6878      	ldr	r0, [r7, #4]
    6366:	f7fa f98b 	bl	680 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    636a:	6878      	ldr	r0, [r7, #4]
    636c:	3710      	adds	r7, #16
    636e:	46bd      	mov	sp, r7
    6370:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00006374 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    6374:	b480      	push	{r7}
    6376:	b085      	sub	sp, #20
    6378:	af00      	add	r7, sp, #0
    637a:	60f8      	str	r0, [r7, #12]
    637c:	7239      	strb	r1, [r7, #8]
    637e:	713a      	strb	r2, [r7, #4]
    6380:	703b      	strb	r3, [r7, #0]
			return value;
    6382:	68fb      	ldr	r3, [r7, #12]
    6384:	681b      	ldr	r3, [r3, #0]
    6386:	ee07 3a90 	vmov	s15, r3
		}
    638a:	eeb0 0a67 	vmov.f32	s0, s15
    638e:	3714      	adds	r7, #20
    6390:	46bd      	mov	sp, r7
    6392:	f85d 7b04 	ldr.w	r7, [sp], #4
    6396:	4770      	bx	lr

00006398 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    6398:	b480      	push	{r7}
    639a:	b083      	sub	sp, #12
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
    63a0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    63a2:	683b      	ldr	r3, [r7, #0]
    63a4:	011b      	lsls	r3, r3, #4
    63a6:	687a      	ldr	r2, [r7, #4]
    63a8:	4413      	add	r3, r2
    63aa:	4618      	mov	r0, r3
    63ac:	370c      	adds	r7, #12
    63ae:	46bd      	mov	sp, r7
    63b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b4:	4770      	bx	lr

000063b6 <std::array<std::function<void ()>, 59u>::~array()>:
    struct array
    63b6:	b590      	push	{r4, r7, lr}
    63b8:	b083      	sub	sp, #12
    63ba:	af00      	add	r7, sp, #0
    63bc:	6078      	str	r0, [r7, #4]
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	2b00      	cmp	r3, #0
    63c2:	d00a      	beq.n	63da <std::array<std::function<void ()>, 59u>::~array()+0x24>
    63c4:	687b      	ldr	r3, [r7, #4]
    63c6:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	429c      	cmp	r4, r3
    63ce:	d004      	beq.n	63da <std::array<std::function<void ()>, 59u>::~array()+0x24>
    63d0:	3c10      	subs	r4, #16
    63d2:	4620      	mov	r0, r4
    63d4:	f7fa fced 	bl	db2 <std::function<void ()>::~function()>
    63d8:	e7f7      	b.n	63ca <std::array<std::function<void ()>, 59u>::~array()+0x14>
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	4618      	mov	r0, r3
    63de:	370c      	adds	r7, #12
    63e0:	46bd      	mov	sp, r7
    63e2:	bd90      	pop	{r4, r7, pc}

000063e4 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    63e4:	b580      	push	{r7, lr}
    63e6:	b082      	sub	sp, #8
    63e8:	af00      	add	r7, sp, #0
    63ea:	6078      	str	r0, [r7, #4]
    63ec:	6039      	str	r1, [r7, #0]
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	2b01      	cmp	r3, #1
    63f2:	d175      	bne.n	64e0 <__static_initialization_and_destruction_0(int, int)+0xfc>
    63f4:	683b      	ldr	r3, [r7, #0]
    63f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    63fa:	4293      	cmp	r3, r2
    63fc:	d170      	bne.n	64e0 <__static_initialization_and_destruction_0(int, int)+0xfc>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    63fe:	4b3a      	ldr	r3, [pc, #232]	; (64e8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    6400:	681b      	ldr	r3, [r3, #0]
    6402:	f003 0301 	and.w	r3, r3, #1
    6406:	2b00      	cmp	r3, #0
    6408:	d10b      	bne.n	6422 <__static_initialization_and_destruction_0(int, int)+0x3e>
    640a:	4b37      	ldr	r3, [pc, #220]	; (64e8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    640c:	2201      	movs	r2, #1
    640e:	601a      	str	r2, [r3, #0]
    6410:	4936      	ldr	r1, [pc, #216]	; (64ec <__static_initialization_and_destruction_0(int, int)+0x108>)
    6412:	4837      	ldr	r0, [pc, #220]	; (64f0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6414:	f7fb fe84 	bl	2120 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    6418:	4a36      	ldr	r2, [pc, #216]	; (64f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    641a:	4937      	ldr	r1, [pc, #220]	; (64f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    641c:	4834      	ldr	r0, [pc, #208]	; (64f0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    641e:	f000 faab 	bl	6978 <__aeabi_atexit>
  inline static InterruptCallback callback = nullptr;
    6422:	4b36      	ldr	r3, [pc, #216]	; (64fc <__static_initialization_and_destruction_0(int, int)+0x118>)
    6424:	681b      	ldr	r3, [r3, #0]
    6426:	f003 0301 	and.w	r3, r3, #1
    642a:	2b00      	cmp	r3, #0
    642c:	d10b      	bne.n	6446 <__static_initialization_and_destruction_0(int, int)+0x62>
    642e:	4b33      	ldr	r3, [pc, #204]	; (64fc <__static_initialization_and_destruction_0(int, int)+0x118>)
    6430:	2201      	movs	r2, #1
    6432:	601a      	str	r2, [r3, #0]
    6434:	2100      	movs	r1, #0
    6436:	4832      	ldr	r0, [pc, #200]	; (6500 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    6438:	f7ff fd1b 	bl	5e72 <std::function<void ()>::function(decltype(nullptr))>
    643c:	4a2d      	ldr	r2, [pc, #180]	; (64f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    643e:	4931      	ldr	r1, [pc, #196]	; (6504 <__static_initialization_and_destruction_0(int, int)+0x120>)
    6440:	482f      	ldr	r0, [pc, #188]	; (6500 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    6442:	f000 fa99 	bl	6978 <__aeabi_atexit>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    6446:	4b30      	ldr	r3, [pc, #192]	; (6508 <__static_initialization_and_destruction_0(int, int)+0x124>)
    6448:	681b      	ldr	r3, [r3, #0]
    644a:	f003 0301 	and.w	r3, r3, #1
    644e:	2b00      	cmp	r3, #0
    6450:	d105      	bne.n	645e <__static_initialization_and_destruction_0(int, int)+0x7a>
    6452:	4b2d      	ldr	r3, [pc, #180]	; (6508 <__static_initialization_and_destruction_0(int, int)+0x124>)
    6454:	2201      	movs	r2, #1
    6456:	601a      	str	r2, [r3, #0]
    6458:	4a2c      	ldr	r2, [pc, #176]	; (650c <__static_initialization_and_destruction_0(int, int)+0x128>)
    645a:	4b2d      	ldr	r3, [pc, #180]	; (6510 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    645c:	601a      	str	r2, [r3, #0]
    645e:	4b2d      	ldr	r3, [pc, #180]	; (6514 <__static_initialization_and_destruction_0(int, int)+0x130>)
    6460:	681b      	ldr	r3, [r3, #0]
    6462:	f003 0301 	and.w	r3, r3, #1
    6466:	2b00      	cmp	r3, #0
    6468:	d105      	bne.n	6476 <__static_initialization_and_destruction_0(int, int)+0x92>
    646a:	4b2a      	ldr	r3, [pc, #168]	; (6514 <__static_initialization_and_destruction_0(int, int)+0x130>)
    646c:	2201      	movs	r2, #1
    646e:	601a      	str	r2, [r3, #0]
    6470:	4a29      	ldr	r2, [pc, #164]	; (6518 <__static_initialization_and_destruction_0(int, int)+0x134>)
    6472:	4b2a      	ldr	r3, [pc, #168]	; (651c <__static_initialization_and_destruction_0(int, int)+0x138>)
    6474:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    6476:	4b2a      	ldr	r3, [pc, #168]	; (6520 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    6478:	681b      	ldr	r3, [r3, #0]
    647a:	f003 0301 	and.w	r3, r3, #1
    647e:	2b00      	cmp	r3, #0
    6480:	d105      	bne.n	648e <__static_initialization_and_destruction_0(int, int)+0xaa>
    6482:	4b27      	ldr	r3, [pc, #156]	; (6520 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    6484:	2201      	movs	r2, #1
    6486:	601a      	str	r2, [r3, #0]
    };
    6488:	4a26      	ldr	r2, [pc, #152]	; (6524 <__static_initialization_and_destruction_0(int, int)+0x140>)
    648a:	4b27      	ldr	r3, [pc, #156]	; (6528 <__static_initialization_and_destruction_0(int, int)+0x144>)
    648c:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    648e:	4b27      	ldr	r3, [pc, #156]	; (652c <__static_initialization_and_destruction_0(int, int)+0x148>)
    6490:	681b      	ldr	r3, [r3, #0]
    6492:	f003 0301 	and.w	r3, r3, #1
    6496:	2b00      	cmp	r3, #0
    6498:	d105      	bne.n	64a6 <__static_initialization_and_destruction_0(int, int)+0xc2>
    649a:	4b24      	ldr	r3, [pc, #144]	; (652c <__static_initialization_and_destruction_0(int, int)+0x148>)
    649c:	2201      	movs	r2, #1
    649e:	601a      	str	r2, [r3, #0]
    };
    64a0:	4a23      	ldr	r2, [pc, #140]	; (6530 <__static_initialization_and_destruction_0(int, int)+0x14c>)
    64a2:	4b24      	ldr	r3, [pc, #144]	; (6534 <__static_initialization_and_destruction_0(int, int)+0x150>)
    64a4:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    64a6:	4b24      	ldr	r3, [pc, #144]	; (6538 <__static_initialization_and_destruction_0(int, int)+0x154>)
    64a8:	681b      	ldr	r3, [r3, #0]
    64aa:	f003 0301 	and.w	r3, r3, #1
    64ae:	2b00      	cmp	r3, #0
    64b0:	d105      	bne.n	64be <__static_initialization_and_destruction_0(int, int)+0xda>
    64b2:	4b21      	ldr	r3, [pc, #132]	; (6538 <__static_initialization_and_destruction_0(int, int)+0x154>)
    64b4:	2201      	movs	r2, #1
    64b6:	601a      	str	r2, [r3, #0]
    };
    64b8:	4a20      	ldr	r2, [pc, #128]	; (653c <__static_initialization_and_destruction_0(int, int)+0x158>)
    64ba:	4b21      	ldr	r3, [pc, #132]	; (6540 <__static_initialization_and_destruction_0(int, int)+0x15c>)
    64bc:	601a      	str	r2, [r3, #0]
  }

 private:
  static inline std::array<InterruptHandler,
                           kNumberOfInterrupts + kArmExceptionOffset>
      table;
    64be:	4b21      	ldr	r3, [pc, #132]	; (6544 <__static_initialization_and_destruction_0(int, int)+0x160>)
    64c0:	681b      	ldr	r3, [r3, #0]
    64c2:	f003 0301 	and.w	r3, r3, #1
    64c6:	2b00      	cmp	r3, #0
    64c8:	d10a      	bne.n	64e0 <__static_initialization_and_destruction_0(int, int)+0xfc>
    64ca:	4b1e      	ldr	r3, [pc, #120]	; (6544 <__static_initialization_and_destruction_0(int, int)+0x160>)
    64cc:	2201      	movs	r2, #1
    64ce:	601a      	str	r2, [r3, #0]
    64d0:	481d      	ldr	r0, [pc, #116]	; (6548 <__static_initialization_and_destruction_0(int, int)+0x164>)
    64d2:	f7ff fdbd 	bl	6050 <std::array<std::function<void ()>, 59u>::array()>
    64d6:	4a07      	ldr	r2, [pc, #28]	; (64f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    64d8:	491c      	ldr	r1, [pc, #112]	; (654c <__static_initialization_and_destruction_0(int, int)+0x168>)
    64da:	481b      	ldr	r0, [pc, #108]	; (6548 <__static_initialization_and_destruction_0(int, int)+0x164>)
    64dc:	f000 fa4c 	bl	6978 <__aeabi_atexit>
    64e0:	bf00      	nop
    64e2:	3708      	adds	r7, #8
    64e4:	46bd      	mov	sp, r7
    64e6:	bd80      	pop	{r7, pc}
    64e8:	10001278 	.word	0x10001278
    64ec:	00000809 	.word	0x00000809
    64f0:	10000d30 	.word	0x10000d30
    64f4:	10000000 	.word	0x10000000
    64f8:	00000851 	.word	0x00000851
    64fc:	10001708 	.word	0x10001708
    6500:	10001338 	.word	0x10001338
    6504:	00000db3 	.word	0x00000db3
    6508:	1000128c 	.word	0x1000128c
    650c:	400fc000 	.word	0x400fc000
    6510:	10001194 	.word	0x10001194
    6514:	10001274 	.word	0x10001274
    6518:	4002c000 	.word	0x4002c000
    651c:	10000d20 	.word	0x10000d20
    6520:	1000170c 	.word	0x1000170c
    6524:	40098000 	.word	0x40098000
    6528:	10000c38 	.word	0x10000c38
    652c:	10001710 	.word	0x10001710
    6530:	4009c000 	.word	0x4009c000
    6534:	10000c4c 	.word	0x10000c4c
    6538:	10001714 	.word	0x10001714
    653c:	400a4000 	.word	0x400a4000
    6540:	10000c60 	.word	0x10000c60
    6544:	10001718 	.word	0x10001718
    6548:	10001358 	.word	0x10001358
    654c:	000063b7 	.word	0x000063b7

00006550 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)>:
  void Initialize(
    6550:	b590      	push	{r4, r7, lr}
    6552:	b083      	sub	sp, #12
    6554:	af00      	add	r7, sp, #0
    6556:	6078      	str	r0, [r7, #4]
    6558:	6039      	str	r1, [r7, #0]
    std::fill(table.begin(), table.end(), unregistered_handler);
    655a:	4808      	ldr	r0, [pc, #32]	; (657c <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    655c:	f000 f85e 	bl	661c <std::array<std::function<void ()>, 59u>::begin()>
    6560:	4604      	mov	r4, r0
    6562:	4806      	ldr	r0, [pc, #24]	; (657c <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    6564:	f000 f866 	bl	6634 <std::array<std::function<void ()>, 59u>::end()>
    6568:	4603      	mov	r3, r0
    656a:	683a      	ldr	r2, [r7, #0]
    656c:	4619      	mov	r1, r3
    656e:	4620      	mov	r0, r4
    6570:	f000 f86e 	bl	6650 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
  }
    6574:	bf00      	nop
    6576:	370c      	adds	r7, #12
    6578:	46bd      	mov	sp, r7
    657a:	bd90      	pop	{r4, r7, pc}
    657c:	10001358 	.word	0x10001358

00006580 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)>:
  void Enable(RegistrationInfo_t register_info) override
    6580:	b590      	push	{r4, r7, lr}
    6582:	b085      	sub	sp, #20
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
    6588:	6039      	str	r1, [r7, #0]
    int irq                = register_info.interrupt_request_number;
    658a:	683b      	ldr	r3, [r7, #0]
    658c:	681b      	ldr	r3, [r3, #0]
    658e:	60fb      	str	r3, [r7, #12]
    table[IRQToIndex(irq)] = register_info.interrupt_handler;
    6590:	683b      	ldr	r3, [r7, #0]
    6592:	1d1c      	adds	r4, r3, #4
    6594:	68f8      	ldr	r0, [r7, #12]
    6596:	f000 f872 	bl	667e <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    659a:	4603      	mov	r3, r0
    659c:	4619      	mov	r1, r3
    659e:	480e      	ldr	r0, [pc, #56]	; (65d8 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x58>)
    65a0:	f7ff fe5c 	bl	625c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    65a4:	4603      	mov	r3, r0
    65a6:	4621      	mov	r1, r4
    65a8:	4618      	mov	r0, r3
    65aa:	f7fb fe7f 	bl	22ac <std::function<void ()>::operator=(std::function<void ()> const&)>
    if (irq >= 0)
    65ae:	68fb      	ldr	r3, [r7, #12]
    65b0:	2b00      	cmp	r3, #0
    65b2:	db02      	blt.n	65ba <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x3a>
      NvicEnableIRQ(irq);
    65b4:	68f8      	ldr	r0, [r7, #12]
    65b6:	f000 f86f 	bl	6698 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>
    if (register_info.priority > -1)
    65ba:	683b      	ldr	r3, [r7, #0]
    65bc:	695b      	ldr	r3, [r3, #20]
    65be:	2b00      	cmp	r3, #0
    65c0:	db05      	blt.n	65ce <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x4e>
      NvicSetPriority(irq, register_info.priority);
    65c2:	683b      	ldr	r3, [r7, #0]
    65c4:	695b      	ldr	r3, [r3, #20]
    65c6:	4619      	mov	r1, r3
    65c8:	68f8      	ldr	r0, [r7, #12]
    65ca:	f000 f87d 	bl	66c8 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>
  }
    65ce:	bf00      	nop
    65d0:	3714      	adds	r7, #20
    65d2:	46bd      	mov	sp, r7
    65d4:	bd90      	pop	{r4, r7, pc}
    65d6:	bf00      	nop
    65d8:	10001358 	.word	0x10001358

000065dc <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)>:
  void Disable(int interrupt_request_number) override
    65dc:	b580      	push	{r7, lr}
    65de:	b082      	sub	sp, #8
    65e0:	af00      	add	r7, sp, #0
    65e2:	6078      	str	r0, [r7, #4]
    65e4:	6039      	str	r1, [r7, #0]
    if (interrupt_request_number >= 0)
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	2b00      	cmp	r3, #0
    65ea:	db02      	blt.n	65f2 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x16>
      NvicDisableIRQ(interrupt_request_number);
    65ec:	6838      	ldr	r0, [r7, #0]
    65ee:	f000 f897 	bl	6720 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    table[IRQToIndex(interrupt_request_number)] = UnregisteredHandler;
    65f2:	6838      	ldr	r0, [r7, #0]
    65f4:	f000 f843 	bl	667e <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    65f8:	4603      	mov	r3, r0
    65fa:	4619      	mov	r1, r3
    65fc:	4805      	ldr	r0, [pc, #20]	; (6614 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x38>)
    65fe:	f7ff fe2d 	bl	625c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6602:	4603      	mov	r3, r0
    6604:	4904      	ldr	r1, [pc, #16]	; (6618 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x3c>)
    6606:	4618      	mov	r0, r3
    6608:	f000 f8c4 	bl	6794 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
  }
    660c:	bf00      	nop
    660e:	3708      	adds	r7, #8
    6610:	46bd      	mov	sp, r7
    6612:	bd80      	pop	{r7, pc}
    6614:	10001358 	.word	0x10001358
    6618:	00006755 	.word	0x00006755

0000661c <std::array<std::function<void ()>, 59u>::begin()>:
      begin() noexcept
    661c:	b580      	push	{r7, lr}
    661e:	b082      	sub	sp, #8
    6620:	af00      	add	r7, sp, #0
    6622:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
    6624:	6878      	ldr	r0, [r7, #4]
    6626:	f000 f8d4 	bl	67d2 <std::array<std::function<void ()>, 59u>::data()>
    662a:	4603      	mov	r3, r0
    662c:	4618      	mov	r0, r3
    662e:	3708      	adds	r7, #8
    6630:	46bd      	mov	sp, r7
    6632:	bd80      	pop	{r7, pc}

00006634 <std::array<std::function<void ()>, 59u>::end()>:
      end() noexcept
    6634:	b580      	push	{r7, lr}
    6636:	b082      	sub	sp, #8
    6638:	af00      	add	r7, sp, #0
    663a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
    663c:	6878      	ldr	r0, [r7, #4]
    663e:	f000 f8c8 	bl	67d2 <std::array<std::function<void ()>, 59u>::data()>
    6642:	4603      	mov	r3, r0
    6644:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    6648:	4618      	mov	r0, r3
    664a:	3708      	adds	r7, #8
    664c:	46bd      	mov	sp, r7
    664e:	bd80      	pop	{r7, pc}

00006650 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    6650:	b590      	push	{r4, r7, lr}
    6652:	b085      	sub	sp, #20
    6654:	af00      	add	r7, sp, #0
    6656:	60f8      	str	r0, [r7, #12]
    6658:	60b9      	str	r1, [r7, #8]
    665a:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
    665c:	68f8      	ldr	r0, [r7, #12]
    665e:	f000 f8c5 	bl	67ec <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    6662:	4604      	mov	r4, r0
    6664:	68b8      	ldr	r0, [r7, #8]
    6666:	f000 f8c1 	bl	67ec <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    666a:	4603      	mov	r3, r0
    666c:	687a      	ldr	r2, [r7, #4]
    666e:	4619      	mov	r1, r3
    6670:	4620      	mov	r0, r4
    6672:	f000 f8c6 	bl	6802 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
		    __value);
    }
    6676:	bf00      	nop
    6678:	3714      	adds	r7, #20
    667a:	46bd      	mov	sp, r7
    667c:	bd90      	pop	{r4, r7, pc}

0000667e <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>:
  static int IRQToIndex(int irq)
    667e:	b480      	push	{r7}
    6680:	b083      	sub	sp, #12
    6682:	af00      	add	r7, sp, #0
    6684:	6078      	str	r0, [r7, #4]
    return irq + kArmExceptionOffset;
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	3310      	adds	r3, #16
  }
    668a:	4618      	mov	r0, r3
    668c:	370c      	adds	r7, #12
    668e:	46bd      	mov	sp, r7
    6690:	f85d 7b04 	ldr.w	r7, [sp], #4
    6694:	4770      	bx	lr
    6696:	Address 0x0000000000006696 is out of bounds.


00006698 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>:
  /// Enable External Interrupt
  /// Enables a device-specific interrupt in the NVIC interrupt controller.
  ///
  /// @param irq - External interrupt number. Value cannot be negative.
  static void NvicEnableIRQ(int irq)
    6698:	b480      	push	{r7}
    669a:	b083      	sub	sp, #12
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
  {
    nvic->ISER[(irq >> 5)] = (1 << (irq & 0x1F));
    66a0:	687b      	ldr	r3, [r7, #4]
    66a2:	f003 031f 	and.w	r3, r3, #31
    66a6:	2201      	movs	r2, #1
    66a8:	fa02 f103 	lsl.w	r1, r2, r3
    66ac:	4b05      	ldr	r3, [pc, #20]	; (66c4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)+0x2c>)
    66ae:	681b      	ldr	r3, [r3, #0]
    66b0:	687a      	ldr	r2, [r7, #4]
    66b2:	1152      	asrs	r2, r2, #5
    66b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    66b8:	bf00      	nop
    66ba:	370c      	adds	r7, #12
    66bc:	46bd      	mov	sp, r7
    66be:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c2:	4770      	bx	lr
    66c4:	10000c8c 	.word	0x10000c8c

000066c8 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>:
  /// Set Interrupt Priority
  /// Sets the priority of an interrupt.
  /// @note    The priority cannot be set for every core interrupt.
  /// @param irq -  Interrupt number.
  /// @param priority -  Priority to set.
  static void NvicSetPriority(int irq, uint32_t priority)
    66c8:	b480      	push	{r7}
    66ca:	b085      	sub	sp, #20
    66cc:	af00      	add	r7, sp, #0
    66ce:	6078      	str	r0, [r7, #4]
    66d0:	6039      	str	r1, [r7, #0]
  {
    uint32_t priority_mask = priority << (8U - kNvicPriorityBits);
    66d2:	683b      	ldr	r3, [r7, #0]
    66d4:	00db      	lsls	r3, r3, #3
    66d6:	60fb      	str	r3, [r7, #12]
    if (irq < 0)
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	2b00      	cmp	r3, #0
    66dc:	da0b      	bge.n	66f6 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x2e>
    {
      scb->SHP[(irq & 0xFUL) - 4UL] = static_cast<uint8_t>(priority_mask);
    66de:	4b0e      	ldr	r3, [pc, #56]	; (6718 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x50>)
    66e0:	681a      	ldr	r2, [r3, #0]
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	f003 030f 	and.w	r3, r3, #15
    66e8:	3b04      	subs	r3, #4
    66ea:	68f9      	ldr	r1, [r7, #12]
    66ec:	b2c9      	uxtb	r1, r1
    66ee:	4413      	add	r3, r2
    66f0:	460a      	mov	r2, r1
    66f2:	761a      	strb	r2, [r3, #24]
    }
    else
    {
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    }
  }
    66f4:	e009      	b.n	670a <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x42>
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    66f6:	4b09      	ldr	r3, [pc, #36]	; (671c <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x54>)
    66f8:	681a      	ldr	r2, [r3, #0]
    66fa:	68fb      	ldr	r3, [r7, #12]
    66fc:	b2d9      	uxtb	r1, r3
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	4413      	add	r3, r2
    6702:	f503 7340 	add.w	r3, r3, #768	; 0x300
    6706:	460a      	mov	r2, r1
    6708:	701a      	strb	r2, [r3, #0]
  }
    670a:	bf00      	nop
    670c:	3714      	adds	r7, #20
    670e:	46bd      	mov	sp, r7
    6710:	f85d 7b04 	ldr.w	r7, [sp], #4
    6714:	4770      	bx	lr
    6716:	bf00      	nop
    6718:	10000c88 	.word	0x10000c88
    671c:	10000c8c 	.word	0x10000c8c

00006720 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>:
  static void NvicDisableIRQ(int irq)
    6720:	b480      	push	{r7}
    6722:	b083      	sub	sp, #12
    6724:	af00      	add	r7, sp, #0
    6726:	6078      	str	r0, [r7, #4]
    nvic->ICER[(irq >> 5)] = (1 << (irq & 0x1F));
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	f003 031f 	and.w	r3, r3, #31
    672e:	2201      	movs	r2, #1
    6730:	fa02 f103 	lsl.w	r1, r2, r3
    6734:	4b06      	ldr	r3, [pc, #24]	; (6750 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)+0x30>)
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	687a      	ldr	r2, [r7, #4]
    673a:	1152      	asrs	r2, r2, #5
    673c:	3220      	adds	r2, #32
    673e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    6742:	bf00      	nop
    6744:	370c      	adds	r7, #12
    6746:	46bd      	mov	sp, r7
    6748:	f85d 7b04 	ldr.w	r7, [sp], #4
    674c:	4770      	bx	lr
    674e:	bf00      	nop
    6750:	10000c8c 	.word	0x10000c8c

00006754 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()>:

  /// Program will call this if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void UnregisteredHandler()
    6754:	b580      	push	{r7, lr}
    6756:	b082      	sub	sp, #8
    6758:	af02      	add	r7, sp, #8
  {
    LOG_DEBUG("No interrupt handler found. Disabling interrupt request %d!",
    675a:	4b0a      	ldr	r3, [pc, #40]	; (6784 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    675c:	681b      	ldr	r3, [r3, #0]
    675e:	9300      	str	r3, [sp, #0]
    6760:	2385      	movs	r3, #133	; 0x85
    6762:	4a09      	ldr	r2, [pc, #36]	; (6788 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x34>)
    6764:	4909      	ldr	r1, [pc, #36]	; (678c <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x38>)
    6766:	480a      	ldr	r0, [pc, #40]	; (6790 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x3c>)
    6768:	f7fd ffc4 	bl	46f4 <printf>
              current_vector);
    if (current_vector >= 0)
    676c:	4b05      	ldr	r3, [pc, #20]	; (6784 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    676e:	681b      	ldr	r3, [r3, #0]
    6770:	2b00      	cmp	r3, #0
    6772:	db04      	blt.n	677e <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x2a>
    {
      NvicDisableIRQ(current_vector);
    6774:	4b03      	ldr	r3, [pc, #12]	; (6784 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	4618      	mov	r0, r3
    677a:	f7ff ffd1 	bl	6720 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    }
  }
    677e:	bf00      	nop
    6780:	46bd      	mov	sp, r7
    6782:	bd80      	pop	{r7, pc}
    6784:	10000c90 	.word	0x10000c90
    6788:	00009280 	.word	0x00009280
    678c:	00009508 	.word	0x00009508
    6790:	00009344 	.word	0x00009344

00006794 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
	operator=(_Functor&& __f)
    6794:	b580      	push	{r7, lr}
    6796:	b086      	sub	sp, #24
    6798:	af00      	add	r7, sp, #0
    679a:	6078      	str	r0, [r7, #4]
    679c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
    679e:	6838      	ldr	r0, [r7, #0]
    67a0:	f000 f845 	bl	682e <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    67a4:	4602      	mov	r2, r0
    67a6:	f107 0308 	add.w	r3, r7, #8
    67aa:	4611      	mov	r1, r2
    67ac:	4618      	mov	r0, r3
    67ae:	f7fb fd53 	bl	2258 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    67b2:	f107 0308 	add.w	r3, r7, #8
    67b6:	6879      	ldr	r1, [r7, #4]
    67b8:	4618      	mov	r0, r3
    67ba:	f7fb ff98 	bl	26ee <std::function<void ()>::swap(std::function<void ()>&)>
    67be:	f107 0308 	add.w	r3, r7, #8
    67c2:	4618      	mov	r0, r3
    67c4:	f7fa faf5 	bl	db2 <std::function<void ()>::~function()>
	  return *this;
    67c8:	687b      	ldr	r3, [r7, #4]
	}
    67ca:	4618      	mov	r0, r3
    67cc:	3718      	adds	r7, #24
    67ce:	46bd      	mov	sp, r7
    67d0:	bd80      	pop	{r7, pc}

000067d2 <std::array<std::function<void ()>, 59u>::data()>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
    67d2:	b580      	push	{r7, lr}
    67d4:	b082      	sub	sp, #8
    67d6:	af00      	add	r7, sp, #0
    67d8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	4618      	mov	r0, r3
    67de:	f000 f831 	bl	6844 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>
    67e2:	4603      	mov	r3, r0
    67e4:	4618      	mov	r0, r3
    67e6:	3708      	adds	r7, #8
    67e8:	46bd      	mov	sp, r7
    67ea:	bd80      	pop	{r7, pc}

000067ec <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>:
    __niter_base(_Iterator __it)
    67ec:	b480      	push	{r7}
    67ee:	b083      	sub	sp, #12
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
    { return __it; }
    67f4:	687b      	ldr	r3, [r7, #4]
    67f6:	4618      	mov	r0, r3
    67f8:	370c      	adds	r7, #12
    67fa:	46bd      	mov	sp, r7
    67fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6800:	4770      	bx	lr

00006802 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
    6802:	b580      	push	{r7, lr}
    6804:	b084      	sub	sp, #16
    6806:	af00      	add	r7, sp, #0
    6808:	60f8      	str	r0, [r7, #12]
    680a:	60b9      	str	r1, [r7, #8]
    680c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
    680e:	68fa      	ldr	r2, [r7, #12]
    6810:	68bb      	ldr	r3, [r7, #8]
    6812:	429a      	cmp	r2, r3
    6814:	d007      	beq.n	6826 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0x24>
	*__first = __value;
    6816:	6879      	ldr	r1, [r7, #4]
    6818:	68f8      	ldr	r0, [r7, #12]
    681a:	f7fb fd47 	bl	22ac <std::function<void ()>::operator=(std::function<void ()> const&)>
      for (; __first != __last; ++__first)
    681e:	68fb      	ldr	r3, [r7, #12]
    6820:	3310      	adds	r3, #16
    6822:	60fb      	str	r3, [r7, #12]
    6824:	e7f3      	b.n	680e <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0xc>
    }
    6826:	bf00      	nop
    6828:	3710      	adds	r7, #16
    682a:	46bd      	mov	sp, r7
    682c:	bd80      	pop	{r7, pc}

0000682e <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    682e:	b480      	push	{r7}
    6830:	b083      	sub	sp, #12
    6832:	af00      	add	r7, sp, #0
    6834:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	4618      	mov	r0, r3
    683a:	370c      	adds	r7, #12
    683c:	46bd      	mov	sp, r7
    683e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6842:	4770      	bx	lr

00006844 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>:
      _S_ptr(const _Type& __t) noexcept
    6844:	b480      	push	{r7}
    6846:	b083      	sub	sp, #12
    6848:	af00      	add	r7, sp, #0
    684a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	4618      	mov	r0, r3
    6850:	370c      	adds	r7, #12
    6852:	46bd      	mov	sp, r7
    6854:	f85d 7b04 	ldr.w	r7, [sp], #4
    6858:	4770      	bx	lr

0000685a <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    685a:	b580      	push	{r7, lr}
    685c:	af00      	add	r7, sp, #0
    685e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6862:	2001      	movs	r0, #1
    6864:	f7ff fdbe 	bl	63e4 <__static_initialization_and_destruction_0(int, int)>
    6868:	bd80      	pop	{r7, pc}
    686a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    686e:	Address 0x000000000000686e is out of bounds.


00006870 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    6870:	4b07      	ldr	r3, [pc, #28]	; (6890 <pxCurrentTCBConst2>)
    6872:	6819      	ldr	r1, [r3, #0]
    6874:	6808      	ldr	r0, [r1, #0]
    6876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    687a:	f380 8809 	msr	PSP, r0
    687e:	f3bf 8f6f 	isb	sy
    6882:	f04f 0000 	mov.w	r0, #0
    6886:	f380 8811 	msr	BASEPRI, r0
    688a:	4770      	bx	lr
    688c:	f3af 8000 	nop.w

00006890 <pxCurrentTCBConst2>:
    6890:	100012b8 	.word	0x100012b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6894:	bf00      	nop
    6896:	bf00      	nop
    6898:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    689c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000068a0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    68a0:	f3ef 8009 	mrs	r0, PSP
    68a4:	f3bf 8f6f 	isb	sy
    68a8:	4b15      	ldr	r3, [pc, #84]	; (6900 <pxCurrentTCBConst>)
    68aa:	681a      	ldr	r2, [r3, #0]
    68ac:	f01e 0f10 	tst.w	lr, #16
    68b0:	bf08      	it	eq
    68b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    68b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68ba:	6010      	str	r0, [r2, #0]
    68bc:	e92d 0009 	stmdb	sp!, {r0, r3}
    68c0:	f04f 0028 	mov.w	r0, #40	; 0x28
    68c4:	f380 8811 	msr	BASEPRI, r0
    68c8:	f3bf 8f4f 	dsb	sy
    68cc:	f3bf 8f6f 	isb	sy
    68d0:	f7fc fd22 	bl	3318 <vTaskSwitchContext>
    68d4:	f04f 0000 	mov.w	r0, #0
    68d8:	f380 8811 	msr	BASEPRI, r0
    68dc:	bc09      	pop	{r0, r3}
    68de:	6819      	ldr	r1, [r3, #0]
    68e0:	6808      	ldr	r0, [r1, #0]
    68e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68e6:	f01e 0f10 	tst.w	lr, #16
    68ea:	bf08      	it	eq
    68ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    68f0:	f380 8809 	msr	PSP, r0
    68f4:	f3bf 8f6f 	isb	sy
    68f8:	4770      	bx	lr
    68fa:	bf00      	nop
    68fc:	f3af 8000 	nop.w

00006900 <pxCurrentTCBConst>:
    6900:	100012b8 	.word	0x100012b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6904:	bf00      	nop
    6906:	bf00      	nop

00006908 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6908:	b480      	push	{r7}
    690a:	b083      	sub	sp, #12
    690c:	af00      	add	r7, sp, #0
    690e:	6078      	str	r0, [r7, #4]
    6910:	6039      	str	r1, [r7, #0]
  return 1;
    6912:	2301      	movs	r3, #1
}
    6914:	4618      	mov	r0, r3
    6916:	370c      	adds	r7, #12
    6918:	46bd      	mov	sp, r7
    691a:	f85d 7b04 	ldr.w	r7, [sp], #4
    691e:	4770      	bx	lr

00006920 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6920:	b480      	push	{r7}
    6922:	b083      	sub	sp, #12
    6924:	af00      	add	r7, sp, #0
    6926:	6078      	str	r0, [r7, #4]
    6928:	6039      	str	r1, [r7, #0]
  return 0;
    692a:	2300      	movs	r3, #0
}
    692c:	4618      	mov	r0, r3
    692e:	370c      	adds	r7, #12
    6930:	46bd      	mov	sp, r7
    6932:	f85d 7b04 	ldr.w	r7, [sp], #4
    6936:	4770      	bx	lr

00006938 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6938:	b480      	push	{r7}
    693a:	b083      	sub	sp, #12
    693c:	af00      	add	r7, sp, #0
    693e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    6940:	4a04      	ldr	r2, [pc, #16]	; (6954 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    6942:	687b      	ldr	r3, [r7, #4]
    6944:	6013      	str	r3, [r2, #0]
}
    6946:	bf00      	nop
    6948:	370c      	adds	r7, #12
    694a:	46bd      	mov	sp, r7
    694c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6950:	4770      	bx	lr
    6952:	bf00      	nop
    6954:	10000c10 	.word	0x10000c10

00006958 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    6958:	b480      	push	{r7}
    695a:	b083      	sub	sp, #12
    695c:	af00      	add	r7, sp, #0
    695e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    6960:	4a04      	ldr	r2, [pc, #16]	; (6974 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    6962:	687b      	ldr	r3, [r7, #4]
    6964:	6013      	str	r3, [r2, #0]
}
    6966:	bf00      	nop
    6968:	370c      	adds	r7, #12
    696a:	46bd      	mov	sp, r7
    696c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6970:	4770      	bx	lr
    6972:	bf00      	nop
    6974:	10000c14 	.word	0x10000c14

00006978 <__aeabi_atexit>:
    6978:	460b      	mov	r3, r1
    697a:	4601      	mov	r1, r0
    697c:	4618      	mov	r0, r3
    697e:	f001 ba9d 	b.w	7ebc <__cxa_atexit>

00006982 <__cxa_pure_virtual>:
    6982:	b508      	push	{r3, lr}
    6984:	f000 f810 	bl	69a8 <std::terminate()>

00006988 <std::__throw_bad_function_call()>:
    6988:	b508      	push	{r3, lr}
    698a:	f001 fa8f 	bl	7eac <abort>

0000698e <__cxxabiv1::__terminate(void (*)())>:
    698e:	b508      	push	{r3, lr}
    6990:	4780      	blx	r0
    6992:	f001 fa8b 	bl	7eac <abort>
    6996:	Address 0x0000000000006996 is out of bounds.


00006998 <std::get_terminate()>:
    6998:	4b02      	ldr	r3, [pc, #8]	; (69a4 <std::get_terminate()+0xc>)
    699a:	6818      	ldr	r0, [r3, #0]
    699c:	f3bf 8f5b 	dmb	ish
    69a0:	4770      	bx	lr
    69a2:	bf00      	nop
    69a4:	10000c98 	.word	0x10000c98

000069a8 <std::terminate()>:
    69a8:	b508      	push	{r3, lr}
    69aa:	f7ff fff5 	bl	6998 <std::get_terminate()>
    69ae:	f7ff ffee 	bl	698e <__cxxabiv1::__terminate(void (*)())>
    69b2:	Address 0x00000000000069b2 is out of bounds.


000069b4 <__aeabi_d2f>:
    69b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    69b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    69bc:	bf24      	itt	cs
    69be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    69c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    69c6:	d90d      	bls.n	69e4 <__aeabi_d2f+0x30>
    69c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    69cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    69d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    69d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    69d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    69dc:	bf08      	it	eq
    69de:	f020 0001 	biceq.w	r0, r0, #1
    69e2:	4770      	bx	lr
    69e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    69e8:	d121      	bne.n	6a2e <__aeabi_d2f+0x7a>
    69ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    69ee:	bfbc      	itt	lt
    69f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    69f4:	4770      	bxlt	lr
    69f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    69fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
    69fe:	f1c2 0218 	rsb	r2, r2, #24
    6a02:	f1c2 0c20 	rsb	ip, r2, #32
    6a06:	fa10 f30c 	lsls.w	r3, r0, ip
    6a0a:	fa20 f002 	lsr.w	r0, r0, r2
    6a0e:	bf18      	it	ne
    6a10:	f040 0001 	orrne.w	r0, r0, #1
    6a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
    6a20:	ea40 000c 	orr.w	r0, r0, ip
    6a24:	fa23 f302 	lsr.w	r3, r3, r2
    6a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6a2c:	e7cc      	b.n	69c8 <__aeabi_d2f+0x14>
    6a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6a32:	d107      	bne.n	6a44 <__aeabi_d2f+0x90>
    6a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6a38:	bf1e      	ittt	ne
    6a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6a42:	4770      	bxne	lr
    6a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    6a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6a50:	4770      	bx	lr
    6a52:	bf00      	nop

00006a54 <__aeabi_frsub>:
    6a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6a58:	e002      	b.n	6a60 <__addsf3>
    6a5a:	bf00      	nop

00006a5c <__aeabi_fsub>:
    6a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006a60 <__addsf3>:
    6a60:	0042      	lsls	r2, r0, #1
    6a62:	bf1f      	itttt	ne
    6a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    6a68:	ea92 0f03 	teqne	r2, r3
    6a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6a74:	d06a      	beq.n	6b4c <__addsf3+0xec>
    6a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
    6a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6a7e:	bfc1      	itttt	gt
    6a80:	18d2      	addgt	r2, r2, r3
    6a82:	4041      	eorgt	r1, r0
    6a84:	4048      	eorgt	r0, r1
    6a86:	4041      	eorgt	r1, r0
    6a88:	bfb8      	it	lt
    6a8a:	425b      	neglt	r3, r3
    6a8c:	2b19      	cmp	r3, #25
    6a8e:	bf88      	it	hi
    6a90:	4770      	bxhi	lr
    6a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6a9e:	bf18      	it	ne
    6aa0:	4240      	negne	r0, r0
    6aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6aae:	bf18      	it	ne
    6ab0:	4249      	negne	r1, r1
    6ab2:	ea92 0f03 	teq	r2, r3
    6ab6:	d03f      	beq.n	6b38 <__addsf3+0xd8>
    6ab8:	f1a2 0201 	sub.w	r2, r2, #1
    6abc:	fa41 fc03 	asr.w	ip, r1, r3
    6ac0:	eb10 000c 	adds.w	r0, r0, ip
    6ac4:	f1c3 0320 	rsb	r3, r3, #32
    6ac8:	fa01 f103 	lsl.w	r1, r1, r3
    6acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6ad0:	d502      	bpl.n	6ad8 <__addsf3+0x78>
    6ad2:	4249      	negs	r1, r1
    6ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6adc:	d313      	bcc.n	6b06 <__addsf3+0xa6>
    6ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6ae2:	d306      	bcc.n	6af2 <__addsf3+0x92>
    6ae4:	0840      	lsrs	r0, r0, #1
    6ae6:	ea4f 0131 	mov.w	r1, r1, rrx
    6aea:	f102 0201 	add.w	r2, r2, #1
    6aee:	2afe      	cmp	r2, #254	; 0xfe
    6af0:	d251      	bcs.n	6b96 <__addsf3+0x136>
    6af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6afa:	bf08      	it	eq
    6afc:	f020 0001 	biceq.w	r0, r0, #1
    6b00:	ea40 0003 	orr.w	r0, r0, r3
    6b04:	4770      	bx	lr
    6b06:	0049      	lsls	r1, r1, #1
    6b08:	eb40 0000 	adc.w	r0, r0, r0
    6b0c:	3a01      	subs	r2, #1
    6b0e:	bf28      	it	cs
    6b10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    6b14:	d2ed      	bcs.n	6af2 <__addsf3+0x92>
    6b16:	fab0 fc80 	clz	ip, r0
    6b1a:	f1ac 0c08 	sub.w	ip, ip, #8
    6b1e:	ebb2 020c 	subs.w	r2, r2, ip
    6b22:	fa00 f00c 	lsl.w	r0, r0, ip
    6b26:	bfaa      	itet	ge
    6b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6b2c:	4252      	neglt	r2, r2
    6b2e:	4318      	orrge	r0, r3
    6b30:	bfbc      	itt	lt
    6b32:	40d0      	lsrlt	r0, r2
    6b34:	4318      	orrlt	r0, r3
    6b36:	4770      	bx	lr
    6b38:	f092 0f00 	teq	r2, #0
    6b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6b40:	bf06      	itte	eq
    6b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6b46:	3201      	addeq	r2, #1
    6b48:	3b01      	subne	r3, #1
    6b4a:	e7b5      	b.n	6ab8 <__addsf3+0x58>
    6b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6b54:	bf18      	it	ne
    6b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6b5a:	d021      	beq.n	6ba0 <__addsf3+0x140>
    6b5c:	ea92 0f03 	teq	r2, r3
    6b60:	d004      	beq.n	6b6c <__addsf3+0x10c>
    6b62:	f092 0f00 	teq	r2, #0
    6b66:	bf08      	it	eq
    6b68:	4608      	moveq	r0, r1
    6b6a:	4770      	bx	lr
    6b6c:	ea90 0f01 	teq	r0, r1
    6b70:	bf1c      	itt	ne
    6b72:	2000      	movne	r0, #0
    6b74:	4770      	bxne	lr
    6b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6b7a:	d104      	bne.n	6b86 <__addsf3+0x126>
    6b7c:	0040      	lsls	r0, r0, #1
    6b7e:	bf28      	it	cs
    6b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6b84:	4770      	bx	lr
    6b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6b8a:	bf3c      	itt	cc
    6b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6b90:	4770      	bxcc	lr
    6b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6b9e:	4770      	bx	lr
    6ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6ba4:	bf16      	itet	ne
    6ba6:	4608      	movne	r0, r1
    6ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6bac:	4601      	movne	r1, r0
    6bae:	0242      	lsls	r2, r0, #9
    6bb0:	bf06      	itte	eq
    6bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6bb6:	ea90 0f01 	teqeq	r0, r1
    6bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6bbe:	4770      	bx	lr

00006bc0 <__aeabi_ui2f>:
    6bc0:	f04f 0300 	mov.w	r3, #0
    6bc4:	e004      	b.n	6bd0 <__aeabi_i2f+0x8>
    6bc6:	bf00      	nop

00006bc8 <__aeabi_i2f>:
    6bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6bcc:	bf48      	it	mi
    6bce:	4240      	negmi	r0, r0
    6bd0:	ea5f 0c00 	movs.w	ip, r0
    6bd4:	bf08      	it	eq
    6bd6:	4770      	bxeq	lr
    6bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6bdc:	4601      	mov	r1, r0
    6bde:	f04f 0000 	mov.w	r0, #0
    6be2:	e01c      	b.n	6c1e <__aeabi_l2f+0x2a>

00006be4 <__aeabi_ul2f>:
    6be4:	ea50 0201 	orrs.w	r2, r0, r1
    6be8:	bf08      	it	eq
    6bea:	4770      	bxeq	lr
    6bec:	f04f 0300 	mov.w	r3, #0
    6bf0:	e00a      	b.n	6c08 <__aeabi_l2f+0x14>
    6bf2:	bf00      	nop

00006bf4 <__aeabi_l2f>:
    6bf4:	ea50 0201 	orrs.w	r2, r0, r1
    6bf8:	bf08      	it	eq
    6bfa:	4770      	bxeq	lr
    6bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6c00:	d502      	bpl.n	6c08 <__aeabi_l2f+0x14>
    6c02:	4240      	negs	r0, r0
    6c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6c08:	ea5f 0c01 	movs.w	ip, r1
    6c0c:	bf02      	ittt	eq
    6c0e:	4684      	moveq	ip, r0
    6c10:	4601      	moveq	r1, r0
    6c12:	2000      	moveq	r0, #0
    6c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6c18:	bf08      	it	eq
    6c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6c22:	fabc f28c 	clz	r2, ip
    6c26:	3a08      	subs	r2, #8
    6c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6c2c:	db10      	blt.n	6c50 <__aeabi_l2f+0x5c>
    6c2e:	fa01 fc02 	lsl.w	ip, r1, r2
    6c32:	4463      	add	r3, ip
    6c34:	fa00 fc02 	lsl.w	ip, r0, r2
    6c38:	f1c2 0220 	rsb	r2, r2, #32
    6c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6c40:	fa20 f202 	lsr.w	r2, r0, r2
    6c44:	eb43 0002 	adc.w	r0, r3, r2
    6c48:	bf08      	it	eq
    6c4a:	f020 0001 	biceq.w	r0, r0, #1
    6c4e:	4770      	bx	lr
    6c50:	f102 0220 	add.w	r2, r2, #32
    6c54:	fa01 fc02 	lsl.w	ip, r1, r2
    6c58:	f1c2 0220 	rsb	r2, r2, #32
    6c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6c60:	fa21 f202 	lsr.w	r2, r1, r2
    6c64:	eb43 0002 	adc.w	r0, r3, r2
    6c68:	bf08      	it	eq
    6c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6c6e:	4770      	bx	lr

00006c70 <__aeabi_ldivmod>:
    6c70:	b97b      	cbnz	r3, 6c92 <__aeabi_ldivmod+0x22>
    6c72:	b972      	cbnz	r2, 6c92 <__aeabi_ldivmod+0x22>
    6c74:	2900      	cmp	r1, #0
    6c76:	bfbe      	ittt	lt
    6c78:	2000      	movlt	r0, #0
    6c7a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    6c7e:	e006      	blt.n	6c8e <__aeabi_ldivmod+0x1e>
    6c80:	bf08      	it	eq
    6c82:	2800      	cmpeq	r0, #0
    6c84:	bf1c      	itt	ne
    6c86:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    6c8a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6c8e:	f001 b90b 	b.w	7ea8 <__aeabi_idiv0>
    6c92:	f1ad 0c08 	sub.w	ip, sp, #8
    6c96:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6c9a:	2900      	cmp	r1, #0
    6c9c:	db09      	blt.n	6cb2 <__aeabi_ldivmod+0x42>
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	db1a      	blt.n	6cd8 <__aeabi_ldivmod+0x68>
    6ca2:	f000 f84d 	bl	6d40 <__udivmoddi4>
    6ca6:	f8dd e004 	ldr.w	lr, [sp, #4]
    6caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6cae:	b004      	add	sp, #16
    6cb0:	4770      	bx	lr
    6cb2:	4240      	negs	r0, r0
    6cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6cb8:	2b00      	cmp	r3, #0
    6cba:	db1b      	blt.n	6cf4 <__aeabi_ldivmod+0x84>
    6cbc:	f000 f840 	bl	6d40 <__udivmoddi4>
    6cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
    6cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6cc8:	b004      	add	sp, #16
    6cca:	4240      	negs	r0, r0
    6ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6cd0:	4252      	negs	r2, r2
    6cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6cd6:	4770      	bx	lr
    6cd8:	4252      	negs	r2, r2
    6cda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6cde:	f000 f82f 	bl	6d40 <__udivmoddi4>
    6ce2:	f8dd e004 	ldr.w	lr, [sp, #4]
    6ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6cea:	b004      	add	sp, #16
    6cec:	4240      	negs	r0, r0
    6cee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6cf2:	4770      	bx	lr
    6cf4:	4252      	negs	r2, r2
    6cf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6cfa:	f000 f821 	bl	6d40 <__udivmoddi4>
    6cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
    6d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6d06:	b004      	add	sp, #16
    6d08:	4252      	negs	r2, r2
    6d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6d0e:	4770      	bx	lr

00006d10 <__aeabi_uldivmod>:
    6d10:	b953      	cbnz	r3, 6d28 <__aeabi_uldivmod+0x18>
    6d12:	b94a      	cbnz	r2, 6d28 <__aeabi_uldivmod+0x18>
    6d14:	2900      	cmp	r1, #0
    6d16:	bf08      	it	eq
    6d18:	2800      	cmpeq	r0, #0
    6d1a:	bf1c      	itt	ne
    6d1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6d20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6d24:	f001 b8c0 	b.w	7ea8 <__aeabi_idiv0>
    6d28:	f1ad 0c08 	sub.w	ip, sp, #8
    6d2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6d30:	f000 f806 	bl	6d40 <__udivmoddi4>
    6d34:	f8dd e004 	ldr.w	lr, [sp, #4]
    6d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6d3c:	b004      	add	sp, #16
    6d3e:	4770      	bx	lr

00006d40 <__udivmoddi4>:
    6d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d44:	9d08      	ldr	r5, [sp, #32]
    6d46:	4604      	mov	r4, r0
    6d48:	468c      	mov	ip, r1
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	f040 8083 	bne.w	6e56 <__udivmoddi4+0x116>
    6d50:	428a      	cmp	r2, r1
    6d52:	4617      	mov	r7, r2
    6d54:	d947      	bls.n	6de6 <__udivmoddi4+0xa6>
    6d56:	fab2 f282 	clz	r2, r2
    6d5a:	b142      	cbz	r2, 6d6e <__udivmoddi4+0x2e>
    6d5c:	f1c2 0020 	rsb	r0, r2, #32
    6d60:	fa24 f000 	lsr.w	r0, r4, r0
    6d64:	4091      	lsls	r1, r2
    6d66:	4097      	lsls	r7, r2
    6d68:	ea40 0c01 	orr.w	ip, r0, r1
    6d6c:	4094      	lsls	r4, r2
    6d6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    6d72:	0c23      	lsrs	r3, r4, #16
    6d74:	fbbc f6f8 	udiv	r6, ip, r8
    6d78:	fa1f fe87 	uxth.w	lr, r7
    6d7c:	fb08 c116 	mls	r1, r8, r6, ip
    6d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6d84:	fb06 f10e 	mul.w	r1, r6, lr
    6d88:	4299      	cmp	r1, r3
    6d8a:	d909      	bls.n	6da0 <__udivmoddi4+0x60>
    6d8c:	18fb      	adds	r3, r7, r3
    6d8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    6d92:	f080 8119 	bcs.w	6fc8 <__udivmoddi4+0x288>
    6d96:	4299      	cmp	r1, r3
    6d98:	f240 8116 	bls.w	6fc8 <__udivmoddi4+0x288>
    6d9c:	3e02      	subs	r6, #2
    6d9e:	443b      	add	r3, r7
    6da0:	1a5b      	subs	r3, r3, r1
    6da2:	b2a4      	uxth	r4, r4
    6da4:	fbb3 f0f8 	udiv	r0, r3, r8
    6da8:	fb08 3310 	mls	r3, r8, r0, r3
    6dac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6db0:	fb00 fe0e 	mul.w	lr, r0, lr
    6db4:	45a6      	cmp	lr, r4
    6db6:	d909      	bls.n	6dcc <__udivmoddi4+0x8c>
    6db8:	193c      	adds	r4, r7, r4
    6dba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6dbe:	f080 8105 	bcs.w	6fcc <__udivmoddi4+0x28c>
    6dc2:	45a6      	cmp	lr, r4
    6dc4:	f240 8102 	bls.w	6fcc <__udivmoddi4+0x28c>
    6dc8:	3802      	subs	r0, #2
    6dca:	443c      	add	r4, r7
    6dcc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6dd0:	eba4 040e 	sub.w	r4, r4, lr
    6dd4:	2600      	movs	r6, #0
    6dd6:	b11d      	cbz	r5, 6de0 <__udivmoddi4+0xa0>
    6dd8:	40d4      	lsrs	r4, r2
    6dda:	2300      	movs	r3, #0
    6ddc:	e9c5 4300 	strd	r4, r3, [r5]
    6de0:	4631      	mov	r1, r6
    6de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6de6:	b902      	cbnz	r2, 6dea <__udivmoddi4+0xaa>
    6de8:	deff      	udf	#255	; 0xff
    6dea:	fab2 f282 	clz	r2, r2
    6dee:	2a00      	cmp	r2, #0
    6df0:	d150      	bne.n	6e94 <__udivmoddi4+0x154>
    6df2:	1bcb      	subs	r3, r1, r7
    6df4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6df8:	fa1f f887 	uxth.w	r8, r7
    6dfc:	2601      	movs	r6, #1
    6dfe:	fbb3 fcfe 	udiv	ip, r3, lr
    6e02:	0c21      	lsrs	r1, r4, #16
    6e04:	fb0e 331c 	mls	r3, lr, ip, r3
    6e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6e0c:	fb08 f30c 	mul.w	r3, r8, ip
    6e10:	428b      	cmp	r3, r1
    6e12:	d907      	bls.n	6e24 <__udivmoddi4+0xe4>
    6e14:	1879      	adds	r1, r7, r1
    6e16:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    6e1a:	d202      	bcs.n	6e22 <__udivmoddi4+0xe2>
    6e1c:	428b      	cmp	r3, r1
    6e1e:	f200 80e9 	bhi.w	6ff4 <__udivmoddi4+0x2b4>
    6e22:	4684      	mov	ip, r0
    6e24:	1ac9      	subs	r1, r1, r3
    6e26:	b2a3      	uxth	r3, r4
    6e28:	fbb1 f0fe 	udiv	r0, r1, lr
    6e2c:	fb0e 1110 	mls	r1, lr, r0, r1
    6e30:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    6e34:	fb08 f800 	mul.w	r8, r8, r0
    6e38:	45a0      	cmp	r8, r4
    6e3a:	d907      	bls.n	6e4c <__udivmoddi4+0x10c>
    6e3c:	193c      	adds	r4, r7, r4
    6e3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6e42:	d202      	bcs.n	6e4a <__udivmoddi4+0x10a>
    6e44:	45a0      	cmp	r8, r4
    6e46:	f200 80d9 	bhi.w	6ffc <__udivmoddi4+0x2bc>
    6e4a:	4618      	mov	r0, r3
    6e4c:	eba4 0408 	sub.w	r4, r4, r8
    6e50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6e54:	e7bf      	b.n	6dd6 <__udivmoddi4+0x96>
    6e56:	428b      	cmp	r3, r1
    6e58:	d909      	bls.n	6e6e <__udivmoddi4+0x12e>
    6e5a:	2d00      	cmp	r5, #0
    6e5c:	f000 80b1 	beq.w	6fc2 <__udivmoddi4+0x282>
    6e60:	2600      	movs	r6, #0
    6e62:	e9c5 0100 	strd	r0, r1, [r5]
    6e66:	4630      	mov	r0, r6
    6e68:	4631      	mov	r1, r6
    6e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e6e:	fab3 f683 	clz	r6, r3
    6e72:	2e00      	cmp	r6, #0
    6e74:	d14a      	bne.n	6f0c <__udivmoddi4+0x1cc>
    6e76:	428b      	cmp	r3, r1
    6e78:	d302      	bcc.n	6e80 <__udivmoddi4+0x140>
    6e7a:	4282      	cmp	r2, r0
    6e7c:	f200 80b8 	bhi.w	6ff0 <__udivmoddi4+0x2b0>
    6e80:	1a84      	subs	r4, r0, r2
    6e82:	eb61 0103 	sbc.w	r1, r1, r3
    6e86:	2001      	movs	r0, #1
    6e88:	468c      	mov	ip, r1
    6e8a:	2d00      	cmp	r5, #0
    6e8c:	d0a8      	beq.n	6de0 <__udivmoddi4+0xa0>
    6e8e:	e9c5 4c00 	strd	r4, ip, [r5]
    6e92:	e7a5      	b.n	6de0 <__udivmoddi4+0xa0>
    6e94:	f1c2 0320 	rsb	r3, r2, #32
    6e98:	fa20 f603 	lsr.w	r6, r0, r3
    6e9c:	4097      	lsls	r7, r2
    6e9e:	fa01 f002 	lsl.w	r0, r1, r2
    6ea2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6ea6:	40d9      	lsrs	r1, r3
    6ea8:	4330      	orrs	r0, r6
    6eaa:	0c03      	lsrs	r3, r0, #16
    6eac:	fbb1 f6fe 	udiv	r6, r1, lr
    6eb0:	fa1f f887 	uxth.w	r8, r7
    6eb4:	fb0e 1116 	mls	r1, lr, r6, r1
    6eb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6ebc:	fb06 f108 	mul.w	r1, r6, r8
    6ec0:	4299      	cmp	r1, r3
    6ec2:	fa04 f402 	lsl.w	r4, r4, r2
    6ec6:	d909      	bls.n	6edc <__udivmoddi4+0x19c>
    6ec8:	18fb      	adds	r3, r7, r3
    6eca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    6ece:	f080 808d 	bcs.w	6fec <__udivmoddi4+0x2ac>
    6ed2:	4299      	cmp	r1, r3
    6ed4:	f240 808a 	bls.w	6fec <__udivmoddi4+0x2ac>
    6ed8:	3e02      	subs	r6, #2
    6eda:	443b      	add	r3, r7
    6edc:	1a5b      	subs	r3, r3, r1
    6ede:	b281      	uxth	r1, r0
    6ee0:	fbb3 f0fe 	udiv	r0, r3, lr
    6ee4:	fb0e 3310 	mls	r3, lr, r0, r3
    6ee8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6eec:	fb00 f308 	mul.w	r3, r0, r8
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d907      	bls.n	6f04 <__udivmoddi4+0x1c4>
    6ef4:	1879      	adds	r1, r7, r1
    6ef6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6efa:	d273      	bcs.n	6fe4 <__udivmoddi4+0x2a4>
    6efc:	428b      	cmp	r3, r1
    6efe:	d971      	bls.n	6fe4 <__udivmoddi4+0x2a4>
    6f00:	3802      	subs	r0, #2
    6f02:	4439      	add	r1, r7
    6f04:	1acb      	subs	r3, r1, r3
    6f06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    6f0a:	e778      	b.n	6dfe <__udivmoddi4+0xbe>
    6f0c:	f1c6 0c20 	rsb	ip, r6, #32
    6f10:	fa03 f406 	lsl.w	r4, r3, r6
    6f14:	fa22 f30c 	lsr.w	r3, r2, ip
    6f18:	431c      	orrs	r4, r3
    6f1a:	fa20 f70c 	lsr.w	r7, r0, ip
    6f1e:	fa01 f306 	lsl.w	r3, r1, r6
    6f22:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    6f26:	fa21 f10c 	lsr.w	r1, r1, ip
    6f2a:	431f      	orrs	r7, r3
    6f2c:	0c3b      	lsrs	r3, r7, #16
    6f2e:	fbb1 f9fe 	udiv	r9, r1, lr
    6f32:	fa1f f884 	uxth.w	r8, r4
    6f36:	fb0e 1119 	mls	r1, lr, r9, r1
    6f3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6f3e:	fb09 fa08 	mul.w	sl, r9, r8
    6f42:	458a      	cmp	sl, r1
    6f44:	fa02 f206 	lsl.w	r2, r2, r6
    6f48:	fa00 f306 	lsl.w	r3, r0, r6
    6f4c:	d908      	bls.n	6f60 <__udivmoddi4+0x220>
    6f4e:	1861      	adds	r1, r4, r1
    6f50:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    6f54:	d248      	bcs.n	6fe8 <__udivmoddi4+0x2a8>
    6f56:	458a      	cmp	sl, r1
    6f58:	d946      	bls.n	6fe8 <__udivmoddi4+0x2a8>
    6f5a:	f1a9 0902 	sub.w	r9, r9, #2
    6f5e:	4421      	add	r1, r4
    6f60:	eba1 010a 	sub.w	r1, r1, sl
    6f64:	b2bf      	uxth	r7, r7
    6f66:	fbb1 f0fe 	udiv	r0, r1, lr
    6f6a:	fb0e 1110 	mls	r1, lr, r0, r1
    6f6e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    6f72:	fb00 f808 	mul.w	r8, r0, r8
    6f76:	45b8      	cmp	r8, r7
    6f78:	d907      	bls.n	6f8a <__udivmoddi4+0x24a>
    6f7a:	19e7      	adds	r7, r4, r7
    6f7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    6f80:	d22e      	bcs.n	6fe0 <__udivmoddi4+0x2a0>
    6f82:	45b8      	cmp	r8, r7
    6f84:	d92c      	bls.n	6fe0 <__udivmoddi4+0x2a0>
    6f86:	3802      	subs	r0, #2
    6f88:	4427      	add	r7, r4
    6f8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    6f8e:	eba7 0708 	sub.w	r7, r7, r8
    6f92:	fba0 8902 	umull	r8, r9, r0, r2
    6f96:	454f      	cmp	r7, r9
    6f98:	46c6      	mov	lr, r8
    6f9a:	4649      	mov	r1, r9
    6f9c:	d31a      	bcc.n	6fd4 <__udivmoddi4+0x294>
    6f9e:	d017      	beq.n	6fd0 <__udivmoddi4+0x290>
    6fa0:	b15d      	cbz	r5, 6fba <__udivmoddi4+0x27a>
    6fa2:	ebb3 020e 	subs.w	r2, r3, lr
    6fa6:	eb67 0701 	sbc.w	r7, r7, r1
    6faa:	fa07 fc0c 	lsl.w	ip, r7, ip
    6fae:	40f2      	lsrs	r2, r6
    6fb0:	ea4c 0202 	orr.w	r2, ip, r2
    6fb4:	40f7      	lsrs	r7, r6
    6fb6:	e9c5 2700 	strd	r2, r7, [r5]
    6fba:	2600      	movs	r6, #0
    6fbc:	4631      	mov	r1, r6
    6fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fc2:	462e      	mov	r6, r5
    6fc4:	4628      	mov	r0, r5
    6fc6:	e70b      	b.n	6de0 <__udivmoddi4+0xa0>
    6fc8:	4606      	mov	r6, r0
    6fca:	e6e9      	b.n	6da0 <__udivmoddi4+0x60>
    6fcc:	4618      	mov	r0, r3
    6fce:	e6fd      	b.n	6dcc <__udivmoddi4+0x8c>
    6fd0:	4543      	cmp	r3, r8
    6fd2:	d2e5      	bcs.n	6fa0 <__udivmoddi4+0x260>
    6fd4:	ebb8 0e02 	subs.w	lr, r8, r2
    6fd8:	eb69 0104 	sbc.w	r1, r9, r4
    6fdc:	3801      	subs	r0, #1
    6fde:	e7df      	b.n	6fa0 <__udivmoddi4+0x260>
    6fe0:	4608      	mov	r0, r1
    6fe2:	e7d2      	b.n	6f8a <__udivmoddi4+0x24a>
    6fe4:	4660      	mov	r0, ip
    6fe6:	e78d      	b.n	6f04 <__udivmoddi4+0x1c4>
    6fe8:	4681      	mov	r9, r0
    6fea:	e7b9      	b.n	6f60 <__udivmoddi4+0x220>
    6fec:	4666      	mov	r6, ip
    6fee:	e775      	b.n	6edc <__udivmoddi4+0x19c>
    6ff0:	4630      	mov	r0, r6
    6ff2:	e74a      	b.n	6e8a <__udivmoddi4+0x14a>
    6ff4:	f1ac 0c02 	sub.w	ip, ip, #2
    6ff8:	4439      	add	r1, r7
    6ffa:	e713      	b.n	6e24 <__udivmoddi4+0xe4>
    6ffc:	3802      	subs	r0, #2
    6ffe:	443c      	add	r4, r7
    7000:	e724      	b.n	6e4c <__udivmoddi4+0x10c>
    7002:	bf00      	nop

00007004 <selfrel_offset31>:
    7004:	6803      	ldr	r3, [r0, #0]
    7006:	005a      	lsls	r2, r3, #1
    7008:	bf4c      	ite	mi
    700a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    700e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    7012:	4418      	add	r0, r3
    7014:	4770      	bx	lr
    7016:	bf00      	nop

00007018 <search_EIT_table>:
    7018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    701c:	b329      	cbz	r1, 706a <search_EIT_table+0x52>
    701e:	1e4f      	subs	r7, r1, #1
    7020:	4604      	mov	r4, r0
    7022:	4615      	mov	r5, r2
    7024:	463e      	mov	r6, r7
    7026:	f04f 0800 	mov.w	r8, #0
    702a:	eb08 0106 	add.w	r1, r8, r6
    702e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    7032:	1049      	asrs	r1, r1, #1
    7034:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    7038:	4648      	mov	r0, r9
    703a:	f7ff ffe3 	bl	7004 <selfrel_offset31>
    703e:	4603      	mov	r3, r0
    7040:	00c8      	lsls	r0, r1, #3
    7042:	3008      	adds	r0, #8
    7044:	428f      	cmp	r7, r1
    7046:	4420      	add	r0, r4
    7048:	d009      	beq.n	705e <search_EIT_table+0x46>
    704a:	42ab      	cmp	r3, r5
    704c:	d809      	bhi.n	7062 <search_EIT_table+0x4a>
    704e:	f7ff ffd9 	bl	7004 <selfrel_offset31>
    7052:	3801      	subs	r0, #1
    7054:	42a8      	cmp	r0, r5
    7056:	d20a      	bcs.n	706e <search_EIT_table+0x56>
    7058:	f101 0801 	add.w	r8, r1, #1
    705c:	e7e5      	b.n	702a <search_EIT_table+0x12>
    705e:	42ab      	cmp	r3, r5
    7060:	d905      	bls.n	706e <search_EIT_table+0x56>
    7062:	4588      	cmp	r8, r1
    7064:	d001      	beq.n	706a <search_EIT_table+0x52>
    7066:	1e4e      	subs	r6, r1, #1
    7068:	e7df      	b.n	702a <search_EIT_table+0x12>
    706a:	f04f 0900 	mov.w	r9, #0
    706e:	4648      	mov	r0, r9
    7070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007074 <__gnu_unwind_get_pr_addr>:
    7074:	2801      	cmp	r0, #1
    7076:	d007      	beq.n	7088 <__gnu_unwind_get_pr_addr+0x14>
    7078:	2802      	cmp	r0, #2
    707a:	d007      	beq.n	708c <__gnu_unwind_get_pr_addr+0x18>
    707c:	4b04      	ldr	r3, [pc, #16]	; (7090 <__gnu_unwind_get_pr_addr+0x1c>)
    707e:	2800      	cmp	r0, #0
    7080:	bf0c      	ite	eq
    7082:	4618      	moveq	r0, r3
    7084:	2000      	movne	r0, #0
    7086:	4770      	bx	lr
    7088:	4802      	ldr	r0, [pc, #8]	; (7094 <__gnu_unwind_get_pr_addr+0x20>)
    708a:	4770      	bx	lr
    708c:	4802      	ldr	r0, [pc, #8]	; (7098 <__gnu_unwind_get_pr_addr+0x24>)
    708e:	4770      	bx	lr
    7090:	00007739 	.word	0x00007739
    7094:	0000773d 	.word	0x0000773d
    7098:	00007741 	.word	0x00007741

0000709c <get_eit_entry>:
    709c:	b530      	push	{r4, r5, lr}
    709e:	4b23      	ldr	r3, [pc, #140]	; (712c <get_eit_entry+0x90>)
    70a0:	b083      	sub	sp, #12
    70a2:	4604      	mov	r4, r0
    70a4:	1e8d      	subs	r5, r1, #2
    70a6:	b33b      	cbz	r3, 70f8 <get_eit_entry+0x5c>
    70a8:	a901      	add	r1, sp, #4
    70aa:	4628      	mov	r0, r5
    70ac:	f3af 8000 	nop.w
    70b0:	b1e8      	cbz	r0, 70ee <get_eit_entry+0x52>
    70b2:	9901      	ldr	r1, [sp, #4]
    70b4:	462a      	mov	r2, r5
    70b6:	f7ff ffaf 	bl	7018 <search_EIT_table>
    70ba:	4601      	mov	r1, r0
    70bc:	b1b8      	cbz	r0, 70ee <get_eit_entry+0x52>
    70be:	f7ff ffa1 	bl	7004 <selfrel_offset31>
    70c2:	684b      	ldr	r3, [r1, #4]
    70c4:	64a0      	str	r0, [r4, #72]	; 0x48
    70c6:	2b01      	cmp	r3, #1
    70c8:	d02b      	beq.n	7122 <get_eit_entry+0x86>
    70ca:	2b00      	cmp	r3, #0
    70cc:	f101 0004 	add.w	r0, r1, #4
    70d0:	db23      	blt.n	711a <get_eit_entry+0x7e>
    70d2:	f7ff ff97 	bl	7004 <selfrel_offset31>
    70d6:	2300      	movs	r3, #0
    70d8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    70dc:	6803      	ldr	r3, [r0, #0]
    70de:	2b00      	cmp	r3, #0
    70e0:	db10      	blt.n	7104 <get_eit_entry+0x68>
    70e2:	f7ff ff8f 	bl	7004 <selfrel_offset31>
    70e6:	6120      	str	r0, [r4, #16]
    70e8:	2000      	movs	r0, #0
    70ea:	b003      	add	sp, #12
    70ec:	bd30      	pop	{r4, r5, pc}
    70ee:	2300      	movs	r3, #0
    70f0:	2009      	movs	r0, #9
    70f2:	6123      	str	r3, [r4, #16]
    70f4:	b003      	add	sp, #12
    70f6:	bd30      	pop	{r4, r5, pc}
    70f8:	490d      	ldr	r1, [pc, #52]	; (7130 <get_eit_entry+0x94>)
    70fa:	480e      	ldr	r0, [pc, #56]	; (7134 <get_eit_entry+0x98>)
    70fc:	1a09      	subs	r1, r1, r0
    70fe:	10c9      	asrs	r1, r1, #3
    7100:	9101      	str	r1, [sp, #4]
    7102:	e7d7      	b.n	70b4 <get_eit_entry+0x18>
    7104:	f3c3 6003 	ubfx	r0, r3, #24, #4
    7108:	f7ff ffb4 	bl	7074 <__gnu_unwind_get_pr_addr>
    710c:	2800      	cmp	r0, #0
    710e:	6120      	str	r0, [r4, #16]
    7110:	bf14      	ite	ne
    7112:	2000      	movne	r0, #0
    7114:	2009      	moveq	r0, #9
    7116:	b003      	add	sp, #12
    7118:	bd30      	pop	{r4, r5, pc}
    711a:	2301      	movs	r3, #1
    711c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7120:	e7dc      	b.n	70dc <get_eit_entry+0x40>
    7122:	2300      	movs	r3, #0
    7124:	6123      	str	r3, [r4, #16]
    7126:	2005      	movs	r0, #5
    7128:	e7df      	b.n	70ea <get_eit_entry+0x4e>
    712a:	bf00      	nop
    712c:	00000000 	.word	0x00000000
    7130:	00009648 	.word	0x00009648
    7134:	00009590 	.word	0x00009590

00007138 <restore_non_core_regs>:
    7138:	6803      	ldr	r3, [r0, #0]
    713a:	07da      	lsls	r2, r3, #31
    713c:	b510      	push	{r4, lr}
    713e:	4604      	mov	r4, r0
    7140:	d406      	bmi.n	7150 <restore_non_core_regs+0x18>
    7142:	079b      	lsls	r3, r3, #30
    7144:	f100 0048 	add.w	r0, r0, #72	; 0x48
    7148:	d509      	bpl.n	715e <restore_non_core_regs+0x26>
    714a:	f000 fc4b 	bl	79e4 <__gnu_Unwind_Restore_VFP_D>
    714e:	6823      	ldr	r3, [r4, #0]
    7150:	0759      	lsls	r1, r3, #29
    7152:	d509      	bpl.n	7168 <restore_non_core_regs+0x30>
    7154:	071a      	lsls	r2, r3, #28
    7156:	d50e      	bpl.n	7176 <restore_non_core_regs+0x3e>
    7158:	06db      	lsls	r3, r3, #27
    715a:	d513      	bpl.n	7184 <restore_non_core_regs+0x4c>
    715c:	bd10      	pop	{r4, pc}
    715e:	f000 fc39 	bl	79d4 <__gnu_Unwind_Restore_VFP>
    7162:	6823      	ldr	r3, [r4, #0]
    7164:	0759      	lsls	r1, r3, #29
    7166:	d4f5      	bmi.n	7154 <restore_non_core_regs+0x1c>
    7168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    716c:	f000 fc42 	bl	79f4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7170:	6823      	ldr	r3, [r4, #0]
    7172:	071a      	lsls	r2, r3, #28
    7174:	d4f0      	bmi.n	7158 <restore_non_core_regs+0x20>
    7176:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    717a:	f000 fc43 	bl	7a04 <__gnu_Unwind_Restore_WMMXD>
    717e:	6823      	ldr	r3, [r4, #0]
    7180:	06db      	lsls	r3, r3, #27
    7182:	d4eb      	bmi.n	715c <restore_non_core_regs+0x24>
    7184:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    7188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    718c:	f000 bc7e 	b.w	7a8c <__gnu_Unwind_Restore_WMMXC>

00007190 <_Unwind_decode_typeinfo_ptr.isra.0>:
    7190:	4603      	mov	r3, r0
    7192:	6800      	ldr	r0, [r0, #0]
    7194:	b100      	cbz	r0, 7198 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    7196:	4418      	add	r0, r3
    7198:	4770      	bx	lr
    719a:	bf00      	nop

0000719c <__gnu_unwind_24bit.isra.0>:
    719c:	2009      	movs	r0, #9
    719e:	4770      	bx	lr

000071a0 <_Unwind_DebugHook>:
    71a0:	4770      	bx	lr
    71a2:	bf00      	nop

000071a4 <unwind_phase2>:
    71a4:	b570      	push	{r4, r5, r6, lr}
    71a6:	4604      	mov	r4, r0
    71a8:	460e      	mov	r6, r1
    71aa:	6c31      	ldr	r1, [r6, #64]	; 0x40
    71ac:	4620      	mov	r0, r4
    71ae:	f7ff ff75 	bl	709c <get_eit_entry>
    71b2:	4605      	mov	r5, r0
    71b4:	b988      	cbnz	r0, 71da <unwind_phase2+0x36>
    71b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    71b8:	6163      	str	r3, [r4, #20]
    71ba:	4632      	mov	r2, r6
    71bc:	6923      	ldr	r3, [r4, #16]
    71be:	4621      	mov	r1, r4
    71c0:	2001      	movs	r0, #1
    71c2:	4798      	blx	r3
    71c4:	2808      	cmp	r0, #8
    71c6:	d0f0      	beq.n	71aa <unwind_phase2+0x6>
    71c8:	2807      	cmp	r0, #7
    71ca:	d106      	bne.n	71da <unwind_phase2+0x36>
    71cc:	4628      	mov	r0, r5
    71ce:	6c31      	ldr	r1, [r6, #64]	; 0x40
    71d0:	f7ff ffe6 	bl	71a0 <_Unwind_DebugHook>
    71d4:	1d30      	adds	r0, r6, #4
    71d6:	f000 fbf1 	bl	79bc <__restore_core_regs>
    71da:	f000 fe67 	bl	7eac <abort>
    71de:	bf00      	nop

000071e0 <unwind_phase2_forced>:
    71e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71e4:	1d0d      	adds	r5, r1, #4
    71e6:	4606      	mov	r6, r0
    71e8:	4614      	mov	r4, r2
    71ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    71ec:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    71f0:	f10d 0c0c 	add.w	ip, sp, #12
    71f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    71f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    71fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    71fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7200:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7204:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7208:	ad02      	add	r5, sp, #8
    720a:	68f7      	ldr	r7, [r6, #12]
    720c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    7210:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    7214:	2300      	movs	r3, #0
    7216:	602b      	str	r3, [r5, #0]
    7218:	e021      	b.n	725e <unwind_phase2_forced+0x7e>
    721a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    721c:	6173      	str	r3, [r6, #20]
    721e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7222:	4629      	mov	r1, r5
    7224:	a87a      	add	r0, sp, #488	; 0x1e8
    7226:	f000 fe7b 	bl	7f20 <memcpy>
    722a:	6933      	ldr	r3, [r6, #16]
    722c:	aa7a      	add	r2, sp, #488	; 0x1e8
    722e:	4631      	mov	r1, r6
    7230:	4650      	mov	r0, sl
    7232:	4798      	blx	r3
    7234:	9b88      	ldr	r3, [sp, #544]	; 0x220
    7236:	e9cd 5800 	strd	r5, r8, [sp]
    723a:	4621      	mov	r1, r4
    723c:	646b      	str	r3, [r5, #68]	; 0x44
    723e:	4681      	mov	r9, r0
    7240:	4633      	mov	r3, r6
    7242:	4632      	mov	r2, r6
    7244:	2001      	movs	r0, #1
    7246:	47b8      	blx	r7
    7248:	4604      	mov	r4, r0
    724a:	b9e8      	cbnz	r0, 7288 <unwind_phase2_forced+0xa8>
    724c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7250:	a97a      	add	r1, sp, #488	; 0x1e8
    7252:	4628      	mov	r0, r5
    7254:	f000 fe64 	bl	7f20 <memcpy>
    7258:	f1b9 0f08 	cmp.w	r9, #8
    725c:	d11b      	bne.n	7296 <unwind_phase2_forced+0xb6>
    725e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7260:	4630      	mov	r0, r6
    7262:	f7ff ff1b 	bl	709c <get_eit_entry>
    7266:	3409      	adds	r4, #9
    7268:	fa5f fa84 	uxtb.w	sl, r4
    726c:	4681      	mov	r9, r0
    726e:	2800      	cmp	r0, #0
    7270:	d0d3      	beq.n	721a <unwind_phase2_forced+0x3a>
    7272:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7274:	f04a 0110 	orr.w	r1, sl, #16
    7278:	e9cd 5800 	strd	r5, r8, [sp]
    727c:	4632      	mov	r2, r6
    727e:	646b      	str	r3, [r5, #68]	; 0x44
    7280:	2001      	movs	r0, #1
    7282:	4633      	mov	r3, r6
    7284:	47b8      	blx	r7
    7286:	b108      	cbz	r0, 728c <unwind_phase2_forced+0xac>
    7288:	f04f 0909 	mov.w	r9, #9
    728c:	4648      	mov	r0, r9
    728e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    7292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7296:	f1b9 0f07 	cmp.w	r9, #7
    729a:	d1f5      	bne.n	7288 <unwind_phase2_forced+0xa8>
    729c:	4620      	mov	r0, r4
    729e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    72a0:	f7ff ff7e 	bl	71a0 <_Unwind_DebugHook>
    72a4:	a803      	add	r0, sp, #12
    72a6:	f000 fb89 	bl	79bc <__restore_core_regs>
    72aa:	bf00      	nop

000072ac <_Unwind_GetCFA>:
    72ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
    72ae:	4770      	bx	lr

000072b0 <__gnu_Unwind_RaiseException>:
    72b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    72b4:	640b      	str	r3, [r1, #64]	; 0x40
    72b6:	1d0e      	adds	r6, r1, #4
    72b8:	460f      	mov	r7, r1
    72ba:	4605      	mov	r5, r0
    72bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    72be:	b0f9      	sub	sp, #484	; 0x1e4
    72c0:	ac01      	add	r4, sp, #4
    72c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    72c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    72c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    72c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    72ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    72cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    72d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    72d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    72d8:	9600      	str	r6, [sp, #0]
    72da:	e006      	b.n	72ea <__gnu_Unwind_RaiseException+0x3a>
    72dc:	692b      	ldr	r3, [r5, #16]
    72de:	466a      	mov	r2, sp
    72e0:	4629      	mov	r1, r5
    72e2:	4798      	blx	r3
    72e4:	2808      	cmp	r0, #8
    72e6:	4604      	mov	r4, r0
    72e8:	d108      	bne.n	72fc <__gnu_Unwind_RaiseException+0x4c>
    72ea:	9910      	ldr	r1, [sp, #64]	; 0x40
    72ec:	4628      	mov	r0, r5
    72ee:	f7ff fed5 	bl	709c <get_eit_entry>
    72f2:	2800      	cmp	r0, #0
    72f4:	d0f2      	beq.n	72dc <__gnu_Unwind_RaiseException+0x2c>
    72f6:	2009      	movs	r0, #9
    72f8:	b079      	add	sp, #484	; 0x1e4
    72fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72fc:	4668      	mov	r0, sp
    72fe:	f7ff ff1b 	bl	7138 <restore_non_core_regs>
    7302:	2c06      	cmp	r4, #6
    7304:	d1f7      	bne.n	72f6 <__gnu_Unwind_RaiseException+0x46>
    7306:	4639      	mov	r1, r7
    7308:	4628      	mov	r0, r5
    730a:	f7ff ff4b 	bl	71a4 <unwind_phase2>
    730e:	bf00      	nop

00007310 <__gnu_Unwind_ForcedUnwind>:
    7310:	b430      	push	{r4, r5}
    7312:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    7314:	60c1      	str	r1, [r0, #12]
    7316:	6182      	str	r2, [r0, #24]
    7318:	4619      	mov	r1, r3
    731a:	641d      	str	r5, [r3, #64]	; 0x40
    731c:	2200      	movs	r2, #0
    731e:	bc30      	pop	{r4, r5}
    7320:	e75e      	b.n	71e0 <unwind_phase2_forced>
    7322:	bf00      	nop

00007324 <__gnu_Unwind_Resume>:
    7324:	b570      	push	{r4, r5, r6, lr}
    7326:	68c6      	ldr	r6, [r0, #12]
    7328:	6943      	ldr	r3, [r0, #20]
    732a:	640b      	str	r3, [r1, #64]	; 0x40
    732c:	b9ae      	cbnz	r6, 735a <__gnu_Unwind_Resume+0x36>
    732e:	6903      	ldr	r3, [r0, #16]
    7330:	460a      	mov	r2, r1
    7332:	4604      	mov	r4, r0
    7334:	460d      	mov	r5, r1
    7336:	4601      	mov	r1, r0
    7338:	2002      	movs	r0, #2
    733a:	4798      	blx	r3
    733c:	2807      	cmp	r0, #7
    733e:	d005      	beq.n	734c <__gnu_Unwind_Resume+0x28>
    7340:	2808      	cmp	r0, #8
    7342:	d10f      	bne.n	7364 <__gnu_Unwind_Resume+0x40>
    7344:	4629      	mov	r1, r5
    7346:	4620      	mov	r0, r4
    7348:	f7ff ff2c 	bl	71a4 <unwind_phase2>
    734c:	4630      	mov	r0, r6
    734e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7350:	f7ff ff26 	bl	71a0 <_Unwind_DebugHook>
    7354:	1d28      	adds	r0, r5, #4
    7356:	f000 fb31 	bl	79bc <__restore_core_regs>
    735a:	2201      	movs	r2, #1
    735c:	f7ff ff40 	bl	71e0 <unwind_phase2_forced>
    7360:	f000 fda4 	bl	7eac <abort>
    7364:	f000 fda2 	bl	7eac <abort>

00007368 <__gnu_Unwind_Resume_or_Rethrow>:
    7368:	68c2      	ldr	r2, [r0, #12]
    736a:	b11a      	cbz	r2, 7374 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    736c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    736e:	640a      	str	r2, [r1, #64]	; 0x40
    7370:	2200      	movs	r2, #0
    7372:	e735      	b.n	71e0 <unwind_phase2_forced>
    7374:	e79c      	b.n	72b0 <__gnu_Unwind_RaiseException>
    7376:	bf00      	nop

00007378 <_Unwind_Complete>:
    7378:	4770      	bx	lr
    737a:	bf00      	nop

0000737c <_Unwind_DeleteException>:
    737c:	6883      	ldr	r3, [r0, #8]
    737e:	4601      	mov	r1, r0
    7380:	b10b      	cbz	r3, 7386 <_Unwind_DeleteException+0xa>
    7382:	2001      	movs	r0, #1
    7384:	4718      	bx	r3
    7386:	4770      	bx	lr

00007388 <_Unwind_VRS_Get>:
    7388:	2901      	cmp	r1, #1
    738a:	d012      	beq.n	73b2 <_Unwind_VRS_Get+0x2a>
    738c:	d809      	bhi.n	73a2 <_Unwind_VRS_Get+0x1a>
    738e:	b973      	cbnz	r3, 73ae <_Unwind_VRS_Get+0x26>
    7390:	2a0f      	cmp	r2, #15
    7392:	d80c      	bhi.n	73ae <_Unwind_VRS_Get+0x26>
    7394:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    7398:	4618      	mov	r0, r3
    739a:	6853      	ldr	r3, [r2, #4]
    739c:	9a00      	ldr	r2, [sp, #0]
    739e:	6013      	str	r3, [r2, #0]
    73a0:	4770      	bx	lr
    73a2:	3903      	subs	r1, #3
    73a4:	2901      	cmp	r1, #1
    73a6:	bf94      	ite	ls
    73a8:	2001      	movls	r0, #1
    73aa:	2002      	movhi	r0, #2
    73ac:	4770      	bx	lr
    73ae:	2002      	movs	r0, #2
    73b0:	4770      	bx	lr
    73b2:	4608      	mov	r0, r1
    73b4:	4770      	bx	lr
    73b6:	bf00      	nop

000073b8 <_Unwind_GetGR>:
    73b8:	b510      	push	{r4, lr}
    73ba:	b084      	sub	sp, #16
    73bc:	2300      	movs	r3, #0
    73be:	ac03      	add	r4, sp, #12
    73c0:	460a      	mov	r2, r1
    73c2:	9400      	str	r4, [sp, #0]
    73c4:	4619      	mov	r1, r3
    73c6:	f7ff ffdf 	bl	7388 <_Unwind_VRS_Get>
    73ca:	9803      	ldr	r0, [sp, #12]
    73cc:	b004      	add	sp, #16
    73ce:	bd10      	pop	{r4, pc}

000073d0 <_Unwind_VRS_Set>:
    73d0:	2901      	cmp	r1, #1
    73d2:	d012      	beq.n	73fa <_Unwind_VRS_Set+0x2a>
    73d4:	d809      	bhi.n	73ea <_Unwind_VRS_Set+0x1a>
    73d6:	b973      	cbnz	r3, 73f6 <_Unwind_VRS_Set+0x26>
    73d8:	2a0f      	cmp	r2, #15
    73da:	d80c      	bhi.n	73f6 <_Unwind_VRS_Set+0x26>
    73dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    73e0:	9a00      	ldr	r2, [sp, #0]
    73e2:	6812      	ldr	r2, [r2, #0]
    73e4:	6042      	str	r2, [r0, #4]
    73e6:	4618      	mov	r0, r3
    73e8:	4770      	bx	lr
    73ea:	3903      	subs	r1, #3
    73ec:	2901      	cmp	r1, #1
    73ee:	bf94      	ite	ls
    73f0:	2001      	movls	r0, #1
    73f2:	2002      	movhi	r0, #2
    73f4:	4770      	bx	lr
    73f6:	2002      	movs	r0, #2
    73f8:	4770      	bx	lr
    73fa:	4608      	mov	r0, r1
    73fc:	4770      	bx	lr
    73fe:	bf00      	nop

00007400 <_Unwind_SetGR>:
    7400:	b510      	push	{r4, lr}
    7402:	b084      	sub	sp, #16
    7404:	2300      	movs	r3, #0
    7406:	ac03      	add	r4, sp, #12
    7408:	9203      	str	r2, [sp, #12]
    740a:	9400      	str	r4, [sp, #0]
    740c:	460a      	mov	r2, r1
    740e:	4619      	mov	r1, r3
    7410:	f7ff ffde 	bl	73d0 <_Unwind_VRS_Set>
    7414:	b004      	add	sp, #16
    7416:	bd10      	pop	{r4, pc}

00007418 <__gnu_Unwind_Backtrace>:
    7418:	b5f0      	push	{r4, r5, r6, r7, lr}
    741a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    741c:	6413      	str	r3, [r2, #64]	; 0x40
    741e:	1d15      	adds	r5, r2, #4
    7420:	468c      	mov	ip, r1
    7422:	4606      	mov	r6, r0
    7424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7426:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    742a:	ac17      	add	r4, sp, #92	; 0x5c
    742c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    742e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7436:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    743a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    743e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7442:	4665      	mov	r5, ip
    7444:	9716      	str	r7, [sp, #88]	; 0x58
    7446:	e010      	b.n	746a <__gnu_Unwind_Backtrace+0x52>
    7448:	f7ff ffda 	bl	7400 <_Unwind_SetGR>
    744c:	4629      	mov	r1, r5
    744e:	a816      	add	r0, sp, #88	; 0x58
    7450:	47b0      	blx	r6
    7452:	4603      	mov	r3, r0
    7454:	aa16      	add	r2, sp, #88	; 0x58
    7456:	4669      	mov	r1, sp
    7458:	2008      	movs	r0, #8
    745a:	b983      	cbnz	r3, 747e <__gnu_Unwind_Backtrace+0x66>
    745c:	9b04      	ldr	r3, [sp, #16]
    745e:	4798      	blx	r3
    7460:	2805      	cmp	r0, #5
    7462:	4604      	mov	r4, r0
    7464:	d00c      	beq.n	7480 <__gnu_Unwind_Backtrace+0x68>
    7466:	2809      	cmp	r0, #9
    7468:	d009      	beq.n	747e <__gnu_Unwind_Backtrace+0x66>
    746a:	9926      	ldr	r1, [sp, #152]	; 0x98
    746c:	4668      	mov	r0, sp
    746e:	f7ff fe15 	bl	709c <get_eit_entry>
    7472:	4603      	mov	r3, r0
    7474:	466a      	mov	r2, sp
    7476:	210c      	movs	r1, #12
    7478:	a816      	add	r0, sp, #88	; 0x58
    747a:	2b00      	cmp	r3, #0
    747c:	d0e4      	beq.n	7448 <__gnu_Unwind_Backtrace+0x30>
    747e:	2409      	movs	r4, #9
    7480:	a816      	add	r0, sp, #88	; 0x58
    7482:	f7ff fe59 	bl	7138 <restore_non_core_regs>
    7486:	4620      	mov	r0, r4
    7488:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    748e:	bf00      	nop

00007490 <__gnu_unwind_pr_common>:
    7490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7494:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    7496:	b089      	sub	sp, #36	; 0x24
    7498:	460d      	mov	r5, r1
    749a:	f854 1b04 	ldr.w	r1, [r4], #4
    749e:	9406      	str	r4, [sp, #24]
    74a0:	4617      	mov	r7, r2
    74a2:	f000 0803 	and.w	r8, r0, #3
    74a6:	461e      	mov	r6, r3
    74a8:	2b00      	cmp	r3, #0
    74aa:	d079      	beq.n	75a0 <__gnu_unwind_pr_common+0x110>
    74ac:	0c0b      	lsrs	r3, r1, #16
    74ae:	b2da      	uxtb	r2, r3
    74b0:	0409      	lsls	r1, r1, #16
    74b2:	f88d 301d 	strb.w	r3, [sp, #29]
    74b6:	2302      	movs	r3, #2
    74b8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    74bc:	9105      	str	r1, [sp, #20]
    74be:	f88d 301c 	strb.w	r3, [sp, #28]
    74c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    74c4:	f1b8 0f02 	cmp.w	r8, #2
    74c8:	bf08      	it	eq
    74ca:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    74cc:	f013 0301 	ands.w	r3, r3, #1
    74d0:	d00c      	beq.n	74ec <__gnu_unwind_pr_common+0x5c>
    74d2:	4638      	mov	r0, r7
    74d4:	a905      	add	r1, sp, #20
    74d6:	f000 fb73 	bl	7bc0 <__gnu_unwind_execute>
    74da:	b918      	cbnz	r0, 74e4 <__gnu_unwind_pr_common+0x54>
    74dc:	2008      	movs	r0, #8
    74de:	b009      	add	sp, #36	; 0x24
    74e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74e4:	2009      	movs	r0, #9
    74e6:	b009      	add	sp, #36	; 0x24
    74e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74ec:	f8d4 a000 	ldr.w	sl, [r4]
    74f0:	f1ba 0f00 	cmp.w	sl, #0
    74f4:	d0ed      	beq.n	74d2 <__gnu_unwind_pr_common+0x42>
    74f6:	9301      	str	r3, [sp, #4]
    74f8:	f000 0308 	and.w	r3, r0, #8
    74fc:	9302      	str	r3, [sp, #8]
    74fe:	2e02      	cmp	r6, #2
    7500:	d04a      	beq.n	7598 <__gnu_unwind_pr_common+0x108>
    7502:	f8b4 a000 	ldrh.w	sl, [r4]
    7506:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    750a:	3404      	adds	r4, #4
    750c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    750e:	f029 0b01 	bic.w	fp, r9, #1
    7512:	210f      	movs	r1, #15
    7514:	4638      	mov	r0, r7
    7516:	4493      	add	fp, r2
    7518:	f7ff ff4e 	bl	73b8 <_Unwind_GetGR>
    751c:	4583      	cmp	fp, r0
    751e:	d839      	bhi.n	7594 <__gnu_unwind_pr_common+0x104>
    7520:	f02a 0201 	bic.w	r2, sl, #1
    7524:	445a      	add	r2, fp
    7526:	4282      	cmp	r2, r0
    7528:	bf94      	ite	ls
    752a:	2000      	movls	r0, #0
    752c:	2001      	movhi	r0, #1
    752e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7532:	f003 0302 	and.w	r3, r3, #2
    7536:	f00a 0a01 	and.w	sl, sl, #1
    753a:	ea43 030a 	orr.w	r3, r3, sl
    753e:	2b01      	cmp	r3, #1
    7540:	d049      	beq.n	75d6 <__gnu_unwind_pr_common+0x146>
    7542:	2b02      	cmp	r3, #2
    7544:	d032      	beq.n	75ac <__gnu_unwind_pr_common+0x11c>
    7546:	2b00      	cmp	r3, #0
    7548:	d1cc      	bne.n	74e4 <__gnu_unwind_pr_common+0x54>
    754a:	f1b8 0f00 	cmp.w	r8, #0
    754e:	d002      	beq.n	7556 <__gnu_unwind_pr_common+0xc6>
    7550:	2800      	cmp	r0, #0
    7552:	f040 80cd 	bne.w	76f0 <__gnu_unwind_pr_common+0x260>
    7556:	3404      	adds	r4, #4
    7558:	f8d4 a000 	ldr.w	sl, [r4]
    755c:	f1ba 0f00 	cmp.w	sl, #0
    7560:	d1cd      	bne.n	74fe <__gnu_unwind_pr_common+0x6e>
    7562:	a905      	add	r1, sp, #20
    7564:	4638      	mov	r0, r7
    7566:	f000 fb2b 	bl	7bc0 <__gnu_unwind_execute>
    756a:	2800      	cmp	r0, #0
    756c:	d1ba      	bne.n	74e4 <__gnu_unwind_pr_common+0x54>
    756e:	9b01      	ldr	r3, [sp, #4]
    7570:	2b00      	cmp	r3, #0
    7572:	d0b3      	beq.n	74dc <__gnu_unwind_pr_common+0x4c>
    7574:	210f      	movs	r1, #15
    7576:	4638      	mov	r0, r7
    7578:	f7ff ff1e 	bl	73b8 <_Unwind_GetGR>
    757c:	210e      	movs	r1, #14
    757e:	4602      	mov	r2, r0
    7580:	4638      	mov	r0, r7
    7582:	f7ff ff3d 	bl	7400 <_Unwind_SetGR>
    7586:	4638      	mov	r0, r7
    7588:	4a6a      	ldr	r2, [pc, #424]	; (7734 <__gnu_unwind_pr_common+0x2a4>)
    758a:	210f      	movs	r1, #15
    758c:	f7ff ff38 	bl	7400 <_Unwind_SetGR>
    7590:	2007      	movs	r0, #7
    7592:	e7a8      	b.n	74e6 <__gnu_unwind_pr_common+0x56>
    7594:	2000      	movs	r0, #0
    7596:	e7ca      	b.n	752e <__gnu_unwind_pr_common+0x9e>
    7598:	f8d4 9004 	ldr.w	r9, [r4, #4]
    759c:	3408      	adds	r4, #8
    759e:	e7b5      	b.n	750c <__gnu_unwind_pr_common+0x7c>
    75a0:	0209      	lsls	r1, r1, #8
    75a2:	2303      	movs	r3, #3
    75a4:	9105      	str	r1, [sp, #20]
    75a6:	f8ad 301c 	strh.w	r3, [sp, #28]
    75aa:	e78a      	b.n	74c2 <__gnu_unwind_pr_common+0x32>
    75ac:	6823      	ldr	r3, [r4, #0]
    75ae:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    75b2:	f1b8 0f00 	cmp.w	r8, #0
    75b6:	d145      	bne.n	7644 <__gnu_unwind_pr_common+0x1b4>
    75b8:	b128      	cbz	r0, 75c6 <__gnu_unwind_pr_common+0x136>
    75ba:	9a02      	ldr	r2, [sp, #8]
    75bc:	2a00      	cmp	r2, #0
    75be:	d05c      	beq.n	767a <__gnu_unwind_pr_common+0x1ea>
    75c0:	f1bb 0f00 	cmp.w	fp, #0
    75c4:	d074      	beq.n	76b0 <__gnu_unwind_pr_common+0x220>
    75c6:	2b00      	cmp	r3, #0
    75c8:	da00      	bge.n	75cc <__gnu_unwind_pr_common+0x13c>
    75ca:	3404      	adds	r4, #4
    75cc:	f10b 0b01 	add.w	fp, fp, #1
    75d0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    75d4:	e7c0      	b.n	7558 <__gnu_unwind_pr_common+0xc8>
    75d6:	f1b8 0f00 	cmp.w	r8, #0
    75da:	d119      	bne.n	7610 <__gnu_unwind_pr_common+0x180>
    75dc:	b1b0      	cbz	r0, 760c <__gnu_unwind_pr_common+0x17c>
    75de:	e9d4 2300 	ldrd	r2, r3, [r4]
    75e2:	1c99      	adds	r1, r3, #2
    75e4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    75e8:	f43f af7c 	beq.w	74e4 <__gnu_unwind_pr_common+0x54>
    75ec:	f105 0158 	add.w	r1, r5, #88	; 0x58
    75f0:	3301      	adds	r3, #1
    75f2:	9104      	str	r1, [sp, #16]
    75f4:	f000 8090 	beq.w	7718 <__gnu_unwind_pr_common+0x288>
    75f8:	1d20      	adds	r0, r4, #4
    75fa:	f7ff fdc9 	bl	7190 <_Unwind_decode_typeinfo_ptr.isra.0>
    75fe:	ab04      	add	r3, sp, #16
    7600:	4601      	mov	r1, r0
    7602:	4628      	mov	r0, r5
    7604:	f3af 8000 	nop.w
    7608:	2800      	cmp	r0, #0
    760a:	d15b      	bne.n	76c4 <__gnu_unwind_pr_common+0x234>
    760c:	3408      	adds	r4, #8
    760e:	e7a3      	b.n	7558 <__gnu_unwind_pr_common+0xc8>
    7610:	210d      	movs	r1, #13
    7612:	4638      	mov	r0, r7
    7614:	f8d5 9020 	ldr.w	r9, [r5, #32]
    7618:	f7ff fece 	bl	73b8 <_Unwind_GetGR>
    761c:	4581      	cmp	r9, r0
    761e:	d1f5      	bne.n	760c <__gnu_unwind_pr_common+0x17c>
    7620:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7622:	429c      	cmp	r4, r3
    7624:	d1f2      	bne.n	760c <__gnu_unwind_pr_common+0x17c>
    7626:	4620      	mov	r0, r4
    7628:	f7ff fcec 	bl	7004 <selfrel_offset31>
    762c:	210f      	movs	r1, #15
    762e:	4602      	mov	r2, r0
    7630:	4638      	mov	r0, r7
    7632:	f7ff fee5 	bl	7400 <_Unwind_SetGR>
    7636:	4638      	mov	r0, r7
    7638:	462a      	mov	r2, r5
    763a:	2100      	movs	r1, #0
    763c:	f7ff fee0 	bl	7400 <_Unwind_SetGR>
    7640:	2007      	movs	r0, #7
    7642:	e750      	b.n	74e6 <__gnu_unwind_pr_common+0x56>
    7644:	210d      	movs	r1, #13
    7646:	4638      	mov	r0, r7
    7648:	f8d5 9020 	ldr.w	r9, [r5, #32]
    764c:	f7ff feb4 	bl	73b8 <_Unwind_GetGR>
    7650:	4581      	cmp	r9, r0
    7652:	d001      	beq.n	7658 <__gnu_unwind_pr_common+0x1c8>
    7654:	6823      	ldr	r3, [r4, #0]
    7656:	e7b6      	b.n	75c6 <__gnu_unwind_pr_common+0x136>
    7658:	6aab      	ldr	r3, [r5, #40]	; 0x28
    765a:	429c      	cmp	r4, r3
    765c:	d1fa      	bne.n	7654 <__gnu_unwind_pr_common+0x1c4>
    765e:	2204      	movs	r2, #4
    7660:	2100      	movs	r1, #0
    7662:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    7666:	18a3      	adds	r3, r4, r2
    7668:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    766c:	636b      	str	r3, [r5, #52]	; 0x34
    766e:	6823      	ldr	r3, [r4, #0]
    7670:	428b      	cmp	r3, r1
    7672:	db59      	blt.n	7728 <__gnu_unwind_pr_common+0x298>
    7674:	2301      	movs	r3, #1
    7676:	9301      	str	r3, [sp, #4]
    7678:	e7a8      	b.n	75cc <__gnu_unwind_pr_common+0x13c>
    767a:	f105 0358 	add.w	r3, r5, #88	; 0x58
    767e:	f8cd 800c 	str.w	r8, [sp, #12]
    7682:	f104 0a04 	add.w	sl, r4, #4
    7686:	46b0      	mov	r8, r6
    7688:	4691      	mov	r9, r2
    768a:	461e      	mov	r6, r3
    768c:	e00d      	b.n	76aa <__gnu_unwind_pr_common+0x21a>
    768e:	9604      	str	r6, [sp, #16]
    7690:	f7ff fd7e 	bl	7190 <_Unwind_decode_typeinfo_ptr.isra.0>
    7694:	ab04      	add	r3, sp, #16
    7696:	4601      	mov	r1, r0
    7698:	2200      	movs	r2, #0
    769a:	4628      	mov	r0, r5
    769c:	f3af 8000 	nop.w
    76a0:	f109 0901 	add.w	r9, r9, #1
    76a4:	f10a 0a04 	add.w	sl, sl, #4
    76a8:	b9e8      	cbnz	r0, 76e6 <__gnu_unwind_pr_common+0x256>
    76aa:	45d9      	cmp	r9, fp
    76ac:	4650      	mov	r0, sl
    76ae:	d1ee      	bne.n	768e <__gnu_unwind_pr_common+0x1fe>
    76b0:	4638      	mov	r0, r7
    76b2:	210d      	movs	r1, #13
    76b4:	f7ff fe80 	bl	73b8 <_Unwind_GetGR>
    76b8:	9b04      	ldr	r3, [sp, #16]
    76ba:	6228      	str	r0, [r5, #32]
    76bc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    76c0:	2006      	movs	r0, #6
    76c2:	e710      	b.n	74e6 <__gnu_unwind_pr_common+0x56>
    76c4:	4681      	mov	r9, r0
    76c6:	210d      	movs	r1, #13
    76c8:	4638      	mov	r0, r7
    76ca:	f7ff fe75 	bl	73b8 <_Unwind_GetGR>
    76ce:	f1b9 0f02 	cmp.w	r9, #2
    76d2:	6228      	str	r0, [r5, #32]
    76d4:	d125      	bne.n	7722 <__gnu_unwind_pr_common+0x292>
    76d6:	462b      	mov	r3, r5
    76d8:	9a04      	ldr	r2, [sp, #16]
    76da:	f843 2f2c 	str.w	r2, [r3, #44]!
    76de:	626b      	str	r3, [r5, #36]	; 0x24
    76e0:	62ac      	str	r4, [r5, #40]	; 0x28
    76e2:	2006      	movs	r0, #6
    76e4:	e6ff      	b.n	74e6 <__gnu_unwind_pr_common+0x56>
    76e6:	4646      	mov	r6, r8
    76e8:	6823      	ldr	r3, [r4, #0]
    76ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
    76ee:	e76a      	b.n	75c6 <__gnu_unwind_pr_common+0x136>
    76f0:	4620      	mov	r0, r4
    76f2:	f7ff fc87 	bl	7004 <selfrel_offset31>
    76f6:	3404      	adds	r4, #4
    76f8:	4602      	mov	r2, r0
    76fa:	63ac      	str	r4, [r5, #56]	; 0x38
    76fc:	4628      	mov	r0, r5
    76fe:	4614      	mov	r4, r2
    7700:	f3af 8000 	nop.w
    7704:	2800      	cmp	r0, #0
    7706:	f43f aeed 	beq.w	74e4 <__gnu_unwind_pr_common+0x54>
    770a:	4638      	mov	r0, r7
    770c:	4622      	mov	r2, r4
    770e:	210f      	movs	r1, #15
    7710:	f7ff fe76 	bl	7400 <_Unwind_SetGR>
    7714:	2007      	movs	r0, #7
    7716:	e6e6      	b.n	74e6 <__gnu_unwind_pr_common+0x56>
    7718:	4638      	mov	r0, r7
    771a:	210d      	movs	r1, #13
    771c:	f7ff fe4c 	bl	73b8 <_Unwind_GetGR>
    7720:	6228      	str	r0, [r5, #32]
    7722:	9b04      	ldr	r3, [sp, #16]
    7724:	626b      	str	r3, [r5, #36]	; 0x24
    7726:	e7db      	b.n	76e0 <__gnu_unwind_pr_common+0x250>
    7728:	f10b 0001 	add.w	r0, fp, #1
    772c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7730:	e77a      	b.n	7628 <__gnu_unwind_pr_common+0x198>
    7732:	bf00      	nop
    7734:	00000000 	.word	0x00000000

00007738 <__aeabi_unwind_cpp_pr0>:
    7738:	2300      	movs	r3, #0
    773a:	e6a9      	b.n	7490 <__gnu_unwind_pr_common>

0000773c <__aeabi_unwind_cpp_pr1>:
    773c:	2301      	movs	r3, #1
    773e:	e6a7      	b.n	7490 <__gnu_unwind_pr_common>

00007740 <__aeabi_unwind_cpp_pr2>:
    7740:	2302      	movs	r3, #2
    7742:	e6a5      	b.n	7490 <__gnu_unwind_pr_common>

00007744 <_Unwind_VRS_Pop>:
    7744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7748:	4606      	mov	r6, r0
    774a:	b0c3      	sub	sp, #268	; 0x10c
    774c:	4615      	mov	r5, r2
    774e:	461c      	mov	r4, r3
    7750:	2904      	cmp	r1, #4
    7752:	f200 80b9 	bhi.w	78c8 <_Unwind_VRS_Pop+0x184>
    7756:	e8df f001 	tbb	[pc, r1]
    775a:	539a      	.short	0x539a
    775c:	29b7      	.short	0x29b7
    775e:	03          	.byte	0x03
    775f:	00          	.byte	0x00
    7760:	2c00      	cmp	r4, #0
    7762:	f040 80b1 	bne.w	78c8 <_Unwind_VRS_Pop+0x184>
    7766:	2a10      	cmp	r2, #16
    7768:	f200 80ae 	bhi.w	78c8 <_Unwind_VRS_Pop+0x184>
    776c:	6803      	ldr	r3, [r0, #0]
    776e:	06d8      	lsls	r0, r3, #27
    7770:	f100 80f3 	bmi.w	795a <_Unwind_VRS_Pop+0x216>
    7774:	af20      	add	r7, sp, #128	; 0x80
    7776:	4638      	mov	r0, r7
    7778:	f000 f992 	bl	7aa0 <__gnu_Unwind_Save_WMMXC>
    777c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    777e:	2300      	movs	r3, #0
    7780:	2401      	movs	r4, #1
    7782:	fa04 f203 	lsl.w	r2, r4, r3
    7786:	422a      	tst	r2, r5
    7788:	4601      	mov	r1, r0
    778a:	d004      	beq.n	7796 <_Unwind_VRS_Pop+0x52>
    778c:	f851 2b04 	ldr.w	r2, [r1], #4
    7790:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    7794:	4608      	mov	r0, r1
    7796:	3301      	adds	r3, #1
    7798:	2b04      	cmp	r3, #4
    779a:	d1f2      	bne.n	7782 <_Unwind_VRS_Pop+0x3e>
    779c:	63b0      	str	r0, [r6, #56]	; 0x38
    779e:	4638      	mov	r0, r7
    77a0:	f000 f974 	bl	7a8c <__gnu_Unwind_Restore_WMMXC>
    77a4:	2000      	movs	r0, #0
    77a6:	b043      	add	sp, #268	; 0x10c
    77a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    77ac:	2c03      	cmp	r4, #3
    77ae:	f040 808b 	bne.w	78c8 <_Unwind_VRS_Pop+0x184>
    77b2:	b294      	uxth	r4, r2
    77b4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    77b8:	2b10      	cmp	r3, #16
    77ba:	ea4f 4512 	mov.w	r5, r2, lsr #16
    77be:	f200 8083 	bhi.w	78c8 <_Unwind_VRS_Pop+0x184>
    77c2:	6803      	ldr	r3, [r0, #0]
    77c4:	071f      	lsls	r7, r3, #28
    77c6:	f100 80d0 	bmi.w	796a <_Unwind_VRS_Pop+0x226>
    77ca:	af20      	add	r7, sp, #128	; 0x80
    77cc:	4638      	mov	r0, r7
    77ce:	f000 f93b 	bl	7a48 <__gnu_Unwind_Save_WMMXD>
    77d2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    77d6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    77d8:	b154      	cbz	r4, 77f0 <_Unwind_VRS_Pop+0xac>
    77da:	460b      	mov	r3, r1
    77dc:	1ae8      	subs	r0, r5, r3
    77de:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    77e2:	00e4      	lsls	r4, r4, #3
    77e4:	581a      	ldr	r2, [r3, r0]
    77e6:	f843 2b04 	str.w	r2, [r3], #4
    77ea:	428b      	cmp	r3, r1
    77ec:	d1fa      	bne.n	77e4 <_Unwind_VRS_Pop+0xa0>
    77ee:	4425      	add	r5, r4
    77f0:	4638      	mov	r0, r7
    77f2:	63b5      	str	r5, [r6, #56]	; 0x38
    77f4:	f000 f906 	bl	7a04 <__gnu_Unwind_Restore_WMMXD>
    77f8:	2000      	movs	r0, #0
    77fa:	b043      	add	sp, #268	; 0x10c
    77fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7800:	2c01      	cmp	r4, #1
    7802:	ea4f 4812 	mov.w	r8, r2, lsr #16
    7806:	b295      	uxth	r5, r2
    7808:	d05a      	beq.n	78c0 <_Unwind_VRS_Pop+0x17c>
    780a:	2c05      	cmp	r4, #5
    780c:	d15c      	bne.n	78c8 <_Unwind_VRS_Pop+0x184>
    780e:	eb08 0905 	add.w	r9, r8, r5
    7812:	f1b9 0f20 	cmp.w	r9, #32
    7816:	d857      	bhi.n	78c8 <_Unwind_VRS_Pop+0x184>
    7818:	f1b8 0f0f 	cmp.w	r8, #15
    781c:	d977      	bls.n	790e <_Unwind_VRS_Pop+0x1ca>
    781e:	46a9      	mov	r9, r5
    7820:	2d00      	cmp	r5, #0
    7822:	f040 8088 	bne.w	7936 <_Unwind_VRS_Pop+0x1f2>
    7826:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7828:	b36d      	cbz	r5, 7886 <_Unwind_VRS_Pop+0x142>
    782a:	af20      	add	r7, sp, #128	; 0x80
    782c:	f04f 0900 	mov.w	r9, #0
    7830:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    7834:	3f04      	subs	r7, #4
    7836:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    783a:	f853 1b04 	ldr.w	r1, [r3], #4
    783e:	f847 1f04 	str.w	r1, [r7, #4]!
    7842:	42ab      	cmp	r3, r5
    7844:	d1f9      	bne.n	783a <_Unwind_VRS_Pop+0xf6>
    7846:	f1b9 0f00 	cmp.w	r9, #0
    784a:	d00f      	beq.n	786c <_Unwind_VRS_Pop+0x128>
    784c:	466f      	mov	r7, sp
    784e:	4641      	mov	r1, r8
    7850:	2910      	cmp	r1, #16
    7852:	bf38      	it	cc
    7854:	2110      	movcc	r1, #16
    7856:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    785a:	3984      	subs	r1, #132	; 0x84
    785c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    7860:	f853 0b04 	ldr.w	r0, [r3], #4
    7864:	f841 0f04 	str.w	r0, [r1, #4]!
    7868:	42ab      	cmp	r3, r5
    786a:	d1f9      	bne.n	7860 <_Unwind_VRS_Pop+0x11c>
    786c:	2c01      	cmp	r4, #1
    786e:	f000 8084 	beq.w	797a <_Unwind_VRS_Pop+0x236>
    7872:	f1b8 0f0f 	cmp.w	r8, #15
    7876:	63b5      	str	r5, [r6, #56]	; 0x38
    7878:	d945      	bls.n	7906 <_Unwind_VRS_Pop+0x1c2>
    787a:	f1b9 0f00 	cmp.w	r9, #0
    787e:	d002      	beq.n	7886 <_Unwind_VRS_Pop+0x142>
    7880:	4668      	mov	r0, sp
    7882:	f000 f8b7 	bl	79f4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7886:	2000      	movs	r0, #0
    7888:	b043      	add	sp, #268	; 0x10c
    788a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    788e:	b9dc      	cbnz	r4, 78c8 <_Unwind_VRS_Pop+0x184>
    7890:	6b87      	ldr	r7, [r0, #56]	; 0x38
    7892:	4623      	mov	r3, r4
    7894:	2001      	movs	r0, #1
    7896:	b294      	uxth	r4, r2
    7898:	f106 0c04 	add.w	ip, r6, #4
    789c:	fa00 f203 	lsl.w	r2, r0, r3
    78a0:	4222      	tst	r2, r4
    78a2:	4639      	mov	r1, r7
    78a4:	d004      	beq.n	78b0 <_Unwind_VRS_Pop+0x16c>
    78a6:	f851 2b04 	ldr.w	r2, [r1], #4
    78aa:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    78ae:	460f      	mov	r7, r1
    78b0:	3301      	adds	r3, #1
    78b2:	2b10      	cmp	r3, #16
    78b4:	d1f2      	bne.n	789c <_Unwind_VRS_Pop+0x158>
    78b6:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    78ba:	d1e4      	bne.n	7886 <_Unwind_VRS_Pop+0x142>
    78bc:	63b7      	str	r7, [r6, #56]	; 0x38
    78be:	e004      	b.n	78ca <_Unwind_VRS_Pop+0x186>
    78c0:	eb08 0305 	add.w	r3, r8, r5
    78c4:	2b10      	cmp	r3, #16
    78c6:	d903      	bls.n	78d0 <_Unwind_VRS_Pop+0x18c>
    78c8:	2002      	movs	r0, #2
    78ca:	b043      	add	sp, #268	; 0x10c
    78cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    78d0:	f1b8 0f0f 	cmp.w	r8, #15
    78d4:	d8f8      	bhi.n	78c8 <_Unwind_VRS_Pop+0x184>
    78d6:	6833      	ldr	r3, [r6, #0]
    78d8:	07da      	lsls	r2, r3, #31
    78da:	d506      	bpl.n	78ea <_Unwind_VRS_Pop+0x1a6>
    78dc:	4630      	mov	r0, r6
    78de:	f023 0303 	bic.w	r3, r3, #3
    78e2:	f840 3b48 	str.w	r3, [r0], #72
    78e6:	f000 f879 	bl	79dc <__gnu_Unwind_Save_VFP>
    78ea:	af20      	add	r7, sp, #128	; 0x80
    78ec:	4638      	mov	r0, r7
    78ee:	f000 f875 	bl	79dc <__gnu_Unwind_Save_VFP>
    78f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    78f4:	2d00      	cmp	r5, #0
    78f6:	d199      	bne.n	782c <_Unwind_VRS_Pop+0xe8>
    78f8:	461d      	mov	r5, r3
    78fa:	3504      	adds	r5, #4
    78fc:	63b5      	str	r5, [r6, #56]	; 0x38
    78fe:	4638      	mov	r0, r7
    7900:	f000 f868 	bl	79d4 <__gnu_Unwind_Restore_VFP>
    7904:	e7bf      	b.n	7886 <_Unwind_VRS_Pop+0x142>
    7906:	a820      	add	r0, sp, #128	; 0x80
    7908:	f000 f86c 	bl	79e4 <__gnu_Unwind_Restore_VFP_D>
    790c:	e7b5      	b.n	787a <_Unwind_VRS_Pop+0x136>
    790e:	f1b9 0f10 	cmp.w	r9, #16
    7912:	d940      	bls.n	7996 <_Unwind_VRS_Pop+0x252>
    7914:	f1a9 0910 	sub.w	r9, r9, #16
    7918:	6833      	ldr	r3, [r6, #0]
    791a:	07d9      	lsls	r1, r3, #31
    791c:	d508      	bpl.n	7930 <_Unwind_VRS_Pop+0x1ec>
    791e:	f023 0301 	bic.w	r3, r3, #1
    7922:	4630      	mov	r0, r6
    7924:	f043 0302 	orr.w	r3, r3, #2
    7928:	f840 3b48 	str.w	r3, [r0], #72
    792c:	f000 f85e 	bl	79ec <__gnu_Unwind_Save_VFP_D>
    7930:	f1b9 0f00 	cmp.w	r9, #0
    7934:	d032      	beq.n	799c <_Unwind_VRS_Pop+0x258>
    7936:	6833      	ldr	r3, [r6, #0]
    7938:	075a      	lsls	r2, r3, #29
    793a:	d420      	bmi.n	797e <_Unwind_VRS_Pop+0x23a>
    793c:	f1b8 0f0f 	cmp.w	r8, #15
    7940:	d925      	bls.n	798e <_Unwind_VRS_Pop+0x24a>
    7942:	466f      	mov	r7, sp
    7944:	4638      	mov	r0, r7
    7946:	f1c8 0510 	rsb	r5, r8, #16
    794a:	f000 f857 	bl	79fc <__gnu_Unwind_Save_VFP_D_16_to_31>
    794e:	2d00      	cmp	r5, #0
    7950:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7952:	f77f af7c 	ble.w	784e <_Unwind_VRS_Pop+0x10a>
    7956:	af20      	add	r7, sp, #128	; 0x80
    7958:	e76a      	b.n	7830 <_Unwind_VRS_Pop+0xec>
    795a:	f023 0310 	bic.w	r3, r3, #16
    795e:	6033      	str	r3, [r6, #0]
    7960:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    7964:	f000 f89c 	bl	7aa0 <__gnu_Unwind_Save_WMMXC>
    7968:	e704      	b.n	7774 <_Unwind_VRS_Pop+0x30>
    796a:	f023 0308 	bic.w	r3, r3, #8
    796e:	6003      	str	r3, [r0, #0]
    7970:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7974:	f000 f868 	bl	7a48 <__gnu_Unwind_Save_WMMXD>
    7978:	e727      	b.n	77ca <_Unwind_VRS_Pop+0x86>
    797a:	af20      	add	r7, sp, #128	; 0x80
    797c:	e7bd      	b.n	78fa <_Unwind_VRS_Pop+0x1b6>
    797e:	4630      	mov	r0, r6
    7980:	f023 0304 	bic.w	r3, r3, #4
    7984:	f840 3bd0 	str.w	r3, [r0], #208
    7988:	f000 f838 	bl	79fc <__gnu_Unwind_Save_VFP_D_16_to_31>
    798c:	e7d6      	b.n	793c <_Unwind_VRS_Pop+0x1f8>
    798e:	a820      	add	r0, sp, #128	; 0x80
    7990:	f000 f82c 	bl	79ec <__gnu_Unwind_Save_VFP_D>
    7994:	e7d5      	b.n	7942 <_Unwind_VRS_Pop+0x1fe>
    7996:	f04f 0900 	mov.w	r9, #0
    799a:	e7bd      	b.n	7918 <_Unwind_VRS_Pop+0x1d4>
    799c:	f1b8 0f0f 	cmp.w	r8, #15
    79a0:	f63f af41 	bhi.w	7826 <_Unwind_VRS_Pop+0xe2>
    79a4:	af20      	add	r7, sp, #128	; 0x80
    79a6:	4638      	mov	r0, r7
    79a8:	f000 f820 	bl	79ec <__gnu_Unwind_Save_VFP_D>
    79ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    79ae:	2d00      	cmp	r5, #0
    79b0:	f47f af3c 	bne.w	782c <_Unwind_VRS_Pop+0xe8>
    79b4:	4638      	mov	r0, r7
    79b6:	f000 f815 	bl	79e4 <__gnu_Unwind_Restore_VFP_D>
    79ba:	e764      	b.n	7886 <_Unwind_VRS_Pop+0x142>

000079bc <__restore_core_regs>:
    79bc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    79c0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    79c4:	469c      	mov	ip, r3
    79c6:	46a6      	mov	lr, r4
    79c8:	f84c 5d04 	str.w	r5, [ip, #-4]!
    79cc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    79d0:	46e5      	mov	sp, ip
    79d2:	bd00      	pop	{pc}

000079d4 <__gnu_Unwind_Restore_VFP>:
    79d4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    79d8:	4770      	bx	lr
    79da:	bf00      	nop

000079dc <__gnu_Unwind_Save_VFP>:
    79dc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    79e0:	4770      	bx	lr
    79e2:	bf00      	nop

000079e4 <__gnu_Unwind_Restore_VFP_D>:
    79e4:	ec90 0b20 	vldmia	r0, {d0-d15}
    79e8:	4770      	bx	lr
    79ea:	bf00      	nop

000079ec <__gnu_Unwind_Save_VFP_D>:
    79ec:	ec80 0b20 	vstmia	r0, {d0-d15}
    79f0:	4770      	bx	lr
    79f2:	bf00      	nop

000079f4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    79f4:	ecd0 0b20 	vldmia	r0, {d16-d31}
    79f8:	4770      	bx	lr
    79fa:	bf00      	nop

000079fc <__gnu_Unwind_Save_VFP_D_16_to_31>:
    79fc:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7a00:	4770      	bx	lr
    7a02:	bf00      	nop

00007a04 <__gnu_Unwind_Restore_WMMXD>:
    7a04:	ecf0 0102 	ldfe	f0, [r0], #8
    7a08:	ecf0 1102 	ldfe	f1, [r0], #8
    7a0c:	ecf0 2102 	ldfe	f2, [r0], #8
    7a10:	ecf0 3102 	ldfe	f3, [r0], #8
    7a14:	ecf0 4102 	ldfe	f4, [r0], #8
    7a18:	ecf0 5102 	ldfe	f5, [r0], #8
    7a1c:	ecf0 6102 	ldfe	f6, [r0], #8
    7a20:	ecf0 7102 	ldfe	f7, [r0], #8
    7a24:	ecf0 8102 	ldfp	f0, [r0], #8
    7a28:	ecf0 9102 	ldfp	f1, [r0], #8
    7a2c:	ecf0 a102 	ldfp	f2, [r0], #8
    7a30:	ecf0 b102 	ldfp	f3, [r0], #8
    7a34:	ecf0 c102 	ldfp	f4, [r0], #8
    7a38:	ecf0 d102 	ldfp	f5, [r0], #8
    7a3c:	ecf0 e102 	ldfp	f6, [r0], #8
    7a40:	ecf0 f102 	ldfp	f7, [r0], #8
    7a44:	4770      	bx	lr
    7a46:	bf00      	nop

00007a48 <__gnu_Unwind_Save_WMMXD>:
    7a48:	ece0 0102 	stfe	f0, [r0], #8
    7a4c:	ece0 1102 	stfe	f1, [r0], #8
    7a50:	ece0 2102 	stfe	f2, [r0], #8
    7a54:	ece0 3102 	stfe	f3, [r0], #8
    7a58:	ece0 4102 	stfe	f4, [r0], #8
    7a5c:	ece0 5102 	stfe	f5, [r0], #8
    7a60:	ece0 6102 	stfe	f6, [r0], #8
    7a64:	ece0 7102 	stfe	f7, [r0], #8
    7a68:	ece0 8102 	stfp	f0, [r0], #8
    7a6c:	ece0 9102 	stfp	f1, [r0], #8
    7a70:	ece0 a102 	stfp	f2, [r0], #8
    7a74:	ece0 b102 	stfp	f3, [r0], #8
    7a78:	ece0 c102 	stfp	f4, [r0], #8
    7a7c:	ece0 d102 	stfp	f5, [r0], #8
    7a80:	ece0 e102 	stfp	f6, [r0], #8
    7a84:	ece0 f102 	stfp	f7, [r0], #8
    7a88:	4770      	bx	lr
    7a8a:	bf00      	nop

00007a8c <__gnu_Unwind_Restore_WMMXC>:
    7a8c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7a90:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    7a94:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7a98:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    7a9c:	4770      	bx	lr
    7a9e:	bf00      	nop

00007aa0 <__gnu_Unwind_Save_WMMXC>:
    7aa0:	fca0 8101 	stc2	1, cr8, [r0], #4
    7aa4:	fca0 9101 	stc2	1, cr9, [r0], #4
    7aa8:	fca0 a101 	stc2	1, cr10, [r0], #4
    7aac:	fca0 b101 	stc2	1, cr11, [r0], #4
    7ab0:	4770      	bx	lr
    7ab2:	bf00      	nop

00007ab4 <_Unwind_RaiseException>:
    7ab4:	46ec      	mov	ip, sp
    7ab6:	b500      	push	{lr}
    7ab8:	e92d 5000 	stmdb	sp!, {ip, lr}
    7abc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7ac0:	f04f 0300 	mov.w	r3, #0
    7ac4:	e92d 000c 	stmdb	sp!, {r2, r3}
    7ac8:	a901      	add	r1, sp, #4
    7aca:	f7ff fbf1 	bl	72b0 <__gnu_Unwind_RaiseException>
    7ace:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7ad2:	b012      	add	sp, #72	; 0x48
    7ad4:	4770      	bx	lr
    7ad6:	bf00      	nop

00007ad8 <_Unwind_Resume>:
    7ad8:	46ec      	mov	ip, sp
    7ada:	b500      	push	{lr}
    7adc:	e92d 5000 	stmdb	sp!, {ip, lr}
    7ae0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7ae4:	f04f 0300 	mov.w	r3, #0
    7ae8:	e92d 000c 	stmdb	sp!, {r2, r3}
    7aec:	a901      	add	r1, sp, #4
    7aee:	f7ff fc19 	bl	7324 <__gnu_Unwind_Resume>
    7af2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7af6:	b012      	add	sp, #72	; 0x48
    7af8:	4770      	bx	lr
    7afa:	bf00      	nop

00007afc <_Unwind_Resume_or_Rethrow>:
    7afc:	46ec      	mov	ip, sp
    7afe:	b500      	push	{lr}
    7b00:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b04:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b08:	f04f 0300 	mov.w	r3, #0
    7b0c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b10:	a901      	add	r1, sp, #4
    7b12:	f7ff fc29 	bl	7368 <__gnu_Unwind_Resume_or_Rethrow>
    7b16:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b1a:	b012      	add	sp, #72	; 0x48
    7b1c:	4770      	bx	lr
    7b1e:	bf00      	nop

00007b20 <_Unwind_ForcedUnwind>:
    7b20:	46ec      	mov	ip, sp
    7b22:	b500      	push	{lr}
    7b24:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b2c:	f04f 0300 	mov.w	r3, #0
    7b30:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b34:	ab01      	add	r3, sp, #4
    7b36:	f7ff fbeb 	bl	7310 <__gnu_Unwind_ForcedUnwind>
    7b3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b3e:	b012      	add	sp, #72	; 0x48
    7b40:	4770      	bx	lr
    7b42:	bf00      	nop

00007b44 <_Unwind_Backtrace>:
    7b44:	46ec      	mov	ip, sp
    7b46:	b500      	push	{lr}
    7b48:	e92d 5000 	stmdb	sp!, {ip, lr}
    7b4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7b50:	f04f 0300 	mov.w	r3, #0
    7b54:	e92d 000c 	stmdb	sp!, {r2, r3}
    7b58:	aa01      	add	r2, sp, #4
    7b5a:	f7ff fc5d 	bl	7418 <__gnu_Unwind_Backtrace>
    7b5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7b62:	b012      	add	sp, #72	; 0x48
    7b64:	4770      	bx	lr
    7b66:	bf00      	nop

00007b68 <next_unwind_byte>:
    7b68:	7a02      	ldrb	r2, [r0, #8]
    7b6a:	b97a      	cbnz	r2, 7b8c <next_unwind_byte+0x24>
    7b6c:	7a43      	ldrb	r3, [r0, #9]
    7b6e:	b1a3      	cbz	r3, 7b9a <next_unwind_byte+0x32>
    7b70:	6842      	ldr	r2, [r0, #4]
    7b72:	3b01      	subs	r3, #1
    7b74:	b410      	push	{r4}
    7b76:	7243      	strb	r3, [r0, #9]
    7b78:	6813      	ldr	r3, [r2, #0]
    7b7a:	2103      	movs	r1, #3
    7b7c:	1d14      	adds	r4, r2, #4
    7b7e:	7201      	strb	r1, [r0, #8]
    7b80:	021a      	lsls	r2, r3, #8
    7b82:	6044      	str	r4, [r0, #4]
    7b84:	6002      	str	r2, [r0, #0]
    7b86:	bc10      	pop	{r4}
    7b88:	0e18      	lsrs	r0, r3, #24
    7b8a:	4770      	bx	lr
    7b8c:	6803      	ldr	r3, [r0, #0]
    7b8e:	3a01      	subs	r2, #1
    7b90:	7202      	strb	r2, [r0, #8]
    7b92:	021a      	lsls	r2, r3, #8
    7b94:	6002      	str	r2, [r0, #0]
    7b96:	0e18      	lsrs	r0, r3, #24
    7b98:	4770      	bx	lr
    7b9a:	20b0      	movs	r0, #176	; 0xb0
    7b9c:	4770      	bx	lr
    7b9e:	bf00      	nop

00007ba0 <_Unwind_GetGR.constprop.0>:
    7ba0:	b500      	push	{lr}
    7ba2:	b085      	sub	sp, #20
    7ba4:	aa03      	add	r2, sp, #12
    7ba6:	2300      	movs	r3, #0
    7ba8:	9200      	str	r2, [sp, #0]
    7baa:	4619      	mov	r1, r3
    7bac:	220c      	movs	r2, #12
    7bae:	f7ff fbeb 	bl	7388 <_Unwind_VRS_Get>
    7bb2:	9803      	ldr	r0, [sp, #12]
    7bb4:	b005      	add	sp, #20
    7bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    7bba:	bf00      	nop

00007bbc <unwind_UCB_from_context>:
    7bbc:	e7f0      	b.n	7ba0 <_Unwind_GetGR.constprop.0>
    7bbe:	bf00      	nop

00007bc0 <__gnu_unwind_execute>:
    7bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7bc4:	4605      	mov	r5, r0
    7bc6:	b085      	sub	sp, #20
    7bc8:	460e      	mov	r6, r1
    7bca:	f04f 0800 	mov.w	r8, #0
    7bce:	4630      	mov	r0, r6
    7bd0:	f7ff ffca 	bl	7b68 <next_unwind_byte>
    7bd4:	28b0      	cmp	r0, #176	; 0xb0
    7bd6:	4604      	mov	r4, r0
    7bd8:	f000 80b2 	beq.w	7d40 <__gnu_unwind_execute+0x180>
    7bdc:	0607      	lsls	r7, r0, #24
    7bde:	d520      	bpl.n	7c22 <__gnu_unwind_execute+0x62>
    7be0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7be4:	2b80      	cmp	r3, #128	; 0x80
    7be6:	d04d      	beq.n	7c84 <__gnu_unwind_execute+0xc4>
    7be8:	2b90      	cmp	r3, #144	; 0x90
    7bea:	d036      	beq.n	7c5a <__gnu_unwind_execute+0x9a>
    7bec:	2ba0      	cmp	r3, #160	; 0xa0
    7bee:	d060      	beq.n	7cb2 <__gnu_unwind_execute+0xf2>
    7bf0:	2bb0      	cmp	r3, #176	; 0xb0
    7bf2:	d074      	beq.n	7cde <__gnu_unwind_execute+0x11e>
    7bf4:	2bc0      	cmp	r3, #192	; 0xc0
    7bf6:	f000 808b 	beq.w	7d10 <__gnu_unwind_execute+0x150>
    7bfa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7bfe:	2bd0      	cmp	r3, #208	; 0xd0
    7c00:	d10b      	bne.n	7c1a <__gnu_unwind_execute+0x5a>
    7c02:	f000 0207 	and.w	r2, r0, #7
    7c06:	3201      	adds	r2, #1
    7c08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7c0c:	2305      	movs	r3, #5
    7c0e:	2101      	movs	r1, #1
    7c10:	4628      	mov	r0, r5
    7c12:	f7ff fd97 	bl	7744 <_Unwind_VRS_Pop>
    7c16:	2800      	cmp	r0, #0
    7c18:	d0d9      	beq.n	7bce <__gnu_unwind_execute+0xe>
    7c1a:	2009      	movs	r0, #9
    7c1c:	b005      	add	sp, #20
    7c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7c22:	f10d 090c 	add.w	r9, sp, #12
    7c26:	2300      	movs	r3, #0
    7c28:	4619      	mov	r1, r3
    7c2a:	0087      	lsls	r7, r0, #2
    7c2c:	f8cd 9000 	str.w	r9, [sp]
    7c30:	220d      	movs	r2, #13
    7c32:	4628      	mov	r0, r5
    7c34:	f7ff fba8 	bl	7388 <_Unwind_VRS_Get>
    7c38:	b2ff      	uxtb	r7, r7
    7c3a:	9b03      	ldr	r3, [sp, #12]
    7c3c:	f8cd 9000 	str.w	r9, [sp]
    7c40:	3704      	adds	r7, #4
    7c42:	0660      	lsls	r0, r4, #25
    7c44:	bf4c      	ite	mi
    7c46:	1bdf      	submi	r7, r3, r7
    7c48:	18ff      	addpl	r7, r7, r3
    7c4a:	2300      	movs	r3, #0
    7c4c:	4619      	mov	r1, r3
    7c4e:	220d      	movs	r2, #13
    7c50:	4628      	mov	r0, r5
    7c52:	9703      	str	r7, [sp, #12]
    7c54:	f7ff fbbc 	bl	73d0 <_Unwind_VRS_Set>
    7c58:	e7b9      	b.n	7bce <__gnu_unwind_execute+0xe>
    7c5a:	f000 030d 	and.w	r3, r0, #13
    7c5e:	2b0d      	cmp	r3, #13
    7c60:	d0db      	beq.n	7c1a <__gnu_unwind_execute+0x5a>
    7c62:	af03      	add	r7, sp, #12
    7c64:	2300      	movs	r3, #0
    7c66:	f000 020f 	and.w	r2, r0, #15
    7c6a:	4619      	mov	r1, r3
    7c6c:	9700      	str	r7, [sp, #0]
    7c6e:	4628      	mov	r0, r5
    7c70:	f7ff fb8a 	bl	7388 <_Unwind_VRS_Get>
    7c74:	2300      	movs	r3, #0
    7c76:	9700      	str	r7, [sp, #0]
    7c78:	4619      	mov	r1, r3
    7c7a:	220d      	movs	r2, #13
    7c7c:	4628      	mov	r0, r5
    7c7e:	f7ff fba7 	bl	73d0 <_Unwind_VRS_Set>
    7c82:	e7a4      	b.n	7bce <__gnu_unwind_execute+0xe>
    7c84:	4630      	mov	r0, r6
    7c86:	f7ff ff6f 	bl	7b68 <next_unwind_byte>
    7c8a:	0224      	lsls	r4, r4, #8
    7c8c:	4320      	orrs	r0, r4
    7c8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    7c92:	d0c2      	beq.n	7c1a <__gnu_unwind_execute+0x5a>
    7c94:	0104      	lsls	r4, r0, #4
    7c96:	2300      	movs	r3, #0
    7c98:	b2a2      	uxth	r2, r4
    7c9a:	4619      	mov	r1, r3
    7c9c:	4628      	mov	r0, r5
    7c9e:	f7ff fd51 	bl	7744 <_Unwind_VRS_Pop>
    7ca2:	2800      	cmp	r0, #0
    7ca4:	d1b9      	bne.n	7c1a <__gnu_unwind_execute+0x5a>
    7ca6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    7caa:	bf18      	it	ne
    7cac:	f04f 0801 	movne.w	r8, #1
    7cb0:	e78d      	b.n	7bce <__gnu_unwind_execute+0xe>
    7cb2:	43c2      	mvns	r2, r0
    7cb4:	f002 0307 	and.w	r3, r2, #7
    7cb8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    7cbc:	411a      	asrs	r2, r3
    7cbe:	0701      	lsls	r1, r0, #28
    7cc0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7cc4:	f04f 0300 	mov.w	r3, #0
    7cc8:	bf48      	it	mi
    7cca:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    7cce:	4619      	mov	r1, r3
    7cd0:	4628      	mov	r0, r5
    7cd2:	f7ff fd37 	bl	7744 <_Unwind_VRS_Pop>
    7cd6:	2800      	cmp	r0, #0
    7cd8:	f43f af79 	beq.w	7bce <__gnu_unwind_execute+0xe>
    7cdc:	e79d      	b.n	7c1a <__gnu_unwind_execute+0x5a>
    7cde:	28b1      	cmp	r0, #177	; 0xb1
    7ce0:	d033      	beq.n	7d4a <__gnu_unwind_execute+0x18a>
    7ce2:	28b2      	cmp	r0, #178	; 0xb2
    7ce4:	f000 808b 	beq.w	7dfe <__gnu_unwind_execute+0x23e>
    7ce8:	28b3      	cmp	r0, #179	; 0xb3
    7cea:	d039      	beq.n	7d60 <__gnu_unwind_execute+0x1a0>
    7cec:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7cf0:	2bb4      	cmp	r3, #180	; 0xb4
    7cf2:	d092      	beq.n	7c1a <__gnu_unwind_execute+0x5a>
    7cf4:	f000 0207 	and.w	r2, r0, #7
    7cf8:	3201      	adds	r2, #1
    7cfa:	2301      	movs	r3, #1
    7cfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7d00:	4619      	mov	r1, r3
    7d02:	4628      	mov	r0, r5
    7d04:	f7ff fd1e 	bl	7744 <_Unwind_VRS_Pop>
    7d08:	2800      	cmp	r0, #0
    7d0a:	f43f af60 	beq.w	7bce <__gnu_unwind_execute+0xe>
    7d0e:	e784      	b.n	7c1a <__gnu_unwind_execute+0x5a>
    7d10:	28c6      	cmp	r0, #198	; 0xc6
    7d12:	d042      	beq.n	7d9a <__gnu_unwind_execute+0x1da>
    7d14:	28c7      	cmp	r0, #199	; 0xc7
    7d16:	d04c      	beq.n	7db2 <__gnu_unwind_execute+0x1f2>
    7d18:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7d1c:	2bc0      	cmp	r3, #192	; 0xc0
    7d1e:	d05b      	beq.n	7dd8 <__gnu_unwind_execute+0x218>
    7d20:	28c8      	cmp	r0, #200	; 0xc8
    7d22:	d060      	beq.n	7de6 <__gnu_unwind_execute+0x226>
    7d24:	28c9      	cmp	r0, #201	; 0xc9
    7d26:	f47f af78 	bne.w	7c1a <__gnu_unwind_execute+0x5a>
    7d2a:	4630      	mov	r0, r6
    7d2c:	f7ff ff1c 	bl	7b68 <next_unwind_byte>
    7d30:	0302      	lsls	r2, r0, #12
    7d32:	f000 000f 	and.w	r0, r0, #15
    7d36:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    7d3a:	3001      	adds	r0, #1
    7d3c:	4302      	orrs	r2, r0
    7d3e:	e765      	b.n	7c0c <__gnu_unwind_execute+0x4c>
    7d40:	f1b8 0f00 	cmp.w	r8, #0
    7d44:	d018      	beq.n	7d78 <__gnu_unwind_execute+0x1b8>
    7d46:	2000      	movs	r0, #0
    7d48:	e768      	b.n	7c1c <__gnu_unwind_execute+0x5c>
    7d4a:	4630      	mov	r0, r6
    7d4c:	f7ff ff0c 	bl	7b68 <next_unwind_byte>
    7d50:	4602      	mov	r2, r0
    7d52:	2800      	cmp	r0, #0
    7d54:	f43f af61 	beq.w	7c1a <__gnu_unwind_execute+0x5a>
    7d58:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7d5c:	d0d0      	beq.n	7d00 <__gnu_unwind_execute+0x140>
    7d5e:	e75c      	b.n	7c1a <__gnu_unwind_execute+0x5a>
    7d60:	4630      	mov	r0, r6
    7d62:	f7ff ff01 	bl	7b68 <next_unwind_byte>
    7d66:	0301      	lsls	r1, r0, #12
    7d68:	f000 000f 	and.w	r0, r0, #15
    7d6c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7d70:	1c42      	adds	r2, r0, #1
    7d72:	2301      	movs	r3, #1
    7d74:	430a      	orrs	r2, r1
    7d76:	e7c3      	b.n	7d00 <__gnu_unwind_execute+0x140>
    7d78:	ac03      	add	r4, sp, #12
    7d7a:	4643      	mov	r3, r8
    7d7c:	220e      	movs	r2, #14
    7d7e:	4641      	mov	r1, r8
    7d80:	9400      	str	r4, [sp, #0]
    7d82:	4628      	mov	r0, r5
    7d84:	f7ff fb00 	bl	7388 <_Unwind_VRS_Get>
    7d88:	9400      	str	r4, [sp, #0]
    7d8a:	4628      	mov	r0, r5
    7d8c:	4643      	mov	r3, r8
    7d8e:	220f      	movs	r2, #15
    7d90:	4641      	mov	r1, r8
    7d92:	f7ff fb1d 	bl	73d0 <_Unwind_VRS_Set>
    7d96:	4640      	mov	r0, r8
    7d98:	e740      	b.n	7c1c <__gnu_unwind_execute+0x5c>
    7d9a:	4630      	mov	r0, r6
    7d9c:	f7ff fee4 	bl	7b68 <next_unwind_byte>
    7da0:	0301      	lsls	r1, r0, #12
    7da2:	f000 000f 	and.w	r0, r0, #15
    7da6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7daa:	1c42      	adds	r2, r0, #1
    7dac:	2303      	movs	r3, #3
    7dae:	430a      	orrs	r2, r1
    7db0:	e7a6      	b.n	7d00 <__gnu_unwind_execute+0x140>
    7db2:	4630      	mov	r0, r6
    7db4:	f7ff fed8 	bl	7b68 <next_unwind_byte>
    7db8:	4602      	mov	r2, r0
    7dba:	2800      	cmp	r0, #0
    7dbc:	f43f af2d 	beq.w	7c1a <__gnu_unwind_execute+0x5a>
    7dc0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7dc4:	f47f af29 	bne.w	7c1a <__gnu_unwind_execute+0x5a>
    7dc8:	2104      	movs	r1, #4
    7dca:	4628      	mov	r0, r5
    7dcc:	f7ff fcba 	bl	7744 <_Unwind_VRS_Pop>
    7dd0:	2800      	cmp	r0, #0
    7dd2:	f43f aefc 	beq.w	7bce <__gnu_unwind_execute+0xe>
    7dd6:	e720      	b.n	7c1a <__gnu_unwind_execute+0x5a>
    7dd8:	f000 020f 	and.w	r2, r0, #15
    7ddc:	3201      	adds	r2, #1
    7dde:	2303      	movs	r3, #3
    7de0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    7de4:	e78c      	b.n	7d00 <__gnu_unwind_execute+0x140>
    7de6:	4630      	mov	r0, r6
    7de8:	f7ff febe 	bl	7b68 <next_unwind_byte>
    7dec:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    7df0:	f000 030f 	and.w	r3, r0, #15
    7df4:	3210      	adds	r2, #16
    7df6:	3301      	adds	r3, #1
    7df8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    7dfc:	e706      	b.n	7c0c <__gnu_unwind_execute+0x4c>
    7dfe:	2300      	movs	r3, #0
    7e00:	f10d 090c 	add.w	r9, sp, #12
    7e04:	220d      	movs	r2, #13
    7e06:	4619      	mov	r1, r3
    7e08:	f8cd 9000 	str.w	r9, [sp]
    7e0c:	4628      	mov	r0, r5
    7e0e:	f7ff fabb 	bl	7388 <_Unwind_VRS_Get>
    7e12:	4630      	mov	r0, r6
    7e14:	f7ff fea8 	bl	7b68 <next_unwind_byte>
    7e18:	0602      	lsls	r2, r0, #24
    7e1a:	f04f 0702 	mov.w	r7, #2
    7e1e:	d50c      	bpl.n	7e3a <__gnu_unwind_execute+0x27a>
    7e20:	9b03      	ldr	r3, [sp, #12]
    7e22:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7e26:	40b8      	lsls	r0, r7
    7e28:	4403      	add	r3, r0
    7e2a:	4630      	mov	r0, r6
    7e2c:	9303      	str	r3, [sp, #12]
    7e2e:	f7ff fe9b 	bl	7b68 <next_unwind_byte>
    7e32:	0603      	lsls	r3, r0, #24
    7e34:	f107 0707 	add.w	r7, r7, #7
    7e38:	d4f2      	bmi.n	7e20 <__gnu_unwind_execute+0x260>
    7e3a:	9b03      	ldr	r3, [sp, #12]
    7e3c:	f8cd 9000 	str.w	r9, [sp]
    7e40:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    7e44:	f503 7201 	add.w	r2, r3, #516	; 0x204
    7e48:	40bc      	lsls	r4, r7
    7e4a:	2300      	movs	r3, #0
    7e4c:	4414      	add	r4, r2
    7e4e:	4619      	mov	r1, r3
    7e50:	220d      	movs	r2, #13
    7e52:	4628      	mov	r0, r5
    7e54:	9403      	str	r4, [sp, #12]
    7e56:	f7ff fabb 	bl	73d0 <_Unwind_VRS_Set>
    7e5a:	e6b8      	b.n	7bce <__gnu_unwind_execute+0xe>

00007e5c <__gnu_unwind_frame>:
    7e5c:	b510      	push	{r4, lr}
    7e5e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    7e60:	b084      	sub	sp, #16
    7e62:	6853      	ldr	r3, [r2, #4]
    7e64:	2403      	movs	r4, #3
    7e66:	f88d 400c 	strb.w	r4, [sp, #12]
    7e6a:	021b      	lsls	r3, r3, #8
    7e6c:	f102 0408 	add.w	r4, r2, #8
    7e70:	4608      	mov	r0, r1
    7e72:	79d2      	ldrb	r2, [r2, #7]
    7e74:	9301      	str	r3, [sp, #4]
    7e76:	a901      	add	r1, sp, #4
    7e78:	9402      	str	r4, [sp, #8]
    7e7a:	f88d 200d 	strb.w	r2, [sp, #13]
    7e7e:	f7ff fe9f 	bl	7bc0 <__gnu_unwind_execute>
    7e82:	b004      	add	sp, #16
    7e84:	bd10      	pop	{r4, pc}
    7e86:	bf00      	nop

00007e88 <_Unwind_GetRegionStart>:
    7e88:	b508      	push	{r3, lr}
    7e8a:	f7ff fe97 	bl	7bbc <unwind_UCB_from_context>
    7e8e:	6c80      	ldr	r0, [r0, #72]	; 0x48
    7e90:	bd08      	pop	{r3, pc}
    7e92:	bf00      	nop

00007e94 <_Unwind_GetLanguageSpecificData>:
    7e94:	b508      	push	{r3, lr}
    7e96:	f7ff fe91 	bl	7bbc <unwind_UCB_from_context>
    7e9a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    7e9c:	79c3      	ldrb	r3, [r0, #7]
    7e9e:	3302      	adds	r3, #2
    7ea0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7ea4:	bd08      	pop	{r3, pc}
    7ea6:	bf00      	nop

00007ea8 <__aeabi_idiv0>:
    7ea8:	4770      	bx	lr
    7eaa:	bf00      	nop

00007eac <abort>:
    7eac:	b508      	push	{r3, lr}
    7eae:	2006      	movs	r0, #6
    7eb0:	f000 f874 	bl	7f9c <raise>
    7eb4:	2001      	movs	r0, #1
    7eb6:	f7fb fae3 	bl	3480 <_exit>
    7eba:	Address 0x0000000000007eba is out of bounds.


00007ebc <__cxa_atexit>:
    7ebc:	b510      	push	{r4, lr}
    7ebe:	4c05      	ldr	r4, [pc, #20]	; (7ed4 <__cxa_atexit+0x18>)
    7ec0:	4613      	mov	r3, r2
    7ec2:	b12c      	cbz	r4, 7ed0 <__cxa_atexit+0x14>
    7ec4:	460a      	mov	r2, r1
    7ec6:	4601      	mov	r1, r0
    7ec8:	2002      	movs	r0, #2
    7eca:	f3af 8000 	nop.w
    7ece:	bd10      	pop	{r4, pc}
    7ed0:	4620      	mov	r0, r4
    7ed2:	e7fc      	b.n	7ece <__cxa_atexit+0x12>
    7ed4:	00000000 	.word	0x00000000

00007ed8 <__libc_init_array>:
    7ed8:	b570      	push	{r4, r5, r6, lr}
    7eda:	4d0d      	ldr	r5, [pc, #52]	; (7f10 <__libc_init_array+0x38>)
    7edc:	4c0d      	ldr	r4, [pc, #52]	; (7f14 <__libc_init_array+0x3c>)
    7ede:	1b64      	subs	r4, r4, r5
    7ee0:	10a4      	asrs	r4, r4, #2
    7ee2:	2600      	movs	r6, #0
    7ee4:	42a6      	cmp	r6, r4
    7ee6:	d109      	bne.n	7efc <__libc_init_array+0x24>
    7ee8:	4d0b      	ldr	r5, [pc, #44]	; (7f18 <__libc_init_array+0x40>)
    7eea:	4c0c      	ldr	r4, [pc, #48]	; (7f1c <__libc_init_array+0x44>)
    7eec:	f7f8 fa08 	bl	300 <_init>
    7ef0:	1b64      	subs	r4, r4, r5
    7ef2:	10a4      	asrs	r4, r4, #2
    7ef4:	2600      	movs	r6, #0
    7ef6:	42a6      	cmp	r6, r4
    7ef8:	d105      	bne.n	7f06 <__libc_init_array+0x2e>
    7efa:	bd70      	pop	{r4, r5, r6, pc}
    7efc:	f855 3b04 	ldr.w	r3, [r5], #4
    7f00:	4798      	blx	r3
    7f02:	3601      	adds	r6, #1
    7f04:	e7ee      	b.n	7ee4 <__libc_init_array+0xc>
    7f06:	f855 3b04 	ldr.w	r3, [r5], #4
    7f0a:	4798      	blx	r3
    7f0c:	3601      	adds	r6, #1
    7f0e:	e7f2      	b.n	7ef6 <__libc_init_array+0x1e>
    7f10:	0000030c 	.word	0x0000030c
    7f14:	0000030c 	.word	0x0000030c
    7f18:	0000030c 	.word	0x0000030c
    7f1c:	00000320 	.word	0x00000320

00007f20 <memcpy>:
    7f20:	440a      	add	r2, r1
    7f22:	4291      	cmp	r1, r2
    7f24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7f28:	d100      	bne.n	7f2c <memcpy+0xc>
    7f2a:	4770      	bx	lr
    7f2c:	b510      	push	{r4, lr}
    7f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7f32:	f803 4f01 	strb.w	r4, [r3, #1]!
    7f36:	4291      	cmp	r1, r2
    7f38:	d1f9      	bne.n	7f2e <memcpy+0xe>
    7f3a:	bd10      	pop	{r4, pc}

00007f3c <memset>:
    7f3c:	4402      	add	r2, r0
    7f3e:	4603      	mov	r3, r0
    7f40:	4293      	cmp	r3, r2
    7f42:	d100      	bne.n	7f46 <memset+0xa>
    7f44:	4770      	bx	lr
    7f46:	f803 1b01 	strb.w	r1, [r3], #1
    7f4a:	e7f9      	b.n	7f40 <memset+0x4>

00007f4c <_raise_r>:
    7f4c:	291f      	cmp	r1, #31
    7f4e:	b538      	push	{r3, r4, r5, lr}
    7f50:	4604      	mov	r4, r0
    7f52:	460d      	mov	r5, r1
    7f54:	d904      	bls.n	7f60 <_raise_r+0x14>
    7f56:	2316      	movs	r3, #22
    7f58:	6003      	str	r3, [r0, #0]
    7f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f5e:	bd38      	pop	{r3, r4, r5, pc}
    7f60:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7f62:	b112      	cbz	r2, 7f6a <_raise_r+0x1e>
    7f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7f68:	b94b      	cbnz	r3, 7f7e <_raise_r+0x32>
    7f6a:	4620      	mov	r0, r4
    7f6c:	f000 f830 	bl	7fd0 <_getpid_r>
    7f70:	462a      	mov	r2, r5
    7f72:	4601      	mov	r1, r0
    7f74:	4620      	mov	r0, r4
    7f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f7a:	f000 b817 	b.w	7fac <_kill_r>
    7f7e:	2b01      	cmp	r3, #1
    7f80:	d00a      	beq.n	7f98 <_raise_r+0x4c>
    7f82:	1c59      	adds	r1, r3, #1
    7f84:	d103      	bne.n	7f8e <_raise_r+0x42>
    7f86:	2316      	movs	r3, #22
    7f88:	6003      	str	r3, [r0, #0]
    7f8a:	2001      	movs	r0, #1
    7f8c:	e7e7      	b.n	7f5e <_raise_r+0x12>
    7f8e:	2400      	movs	r4, #0
    7f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    7f94:	4628      	mov	r0, r5
    7f96:	4798      	blx	r3
    7f98:	2000      	movs	r0, #0
    7f9a:	e7e0      	b.n	7f5e <_raise_r+0x12>

00007f9c <raise>:
    7f9c:	4b02      	ldr	r3, [pc, #8]	; (7fa8 <raise+0xc>)
    7f9e:	4601      	mov	r1, r0
    7fa0:	6818      	ldr	r0, [r3, #0]
    7fa2:	f7ff bfd3 	b.w	7f4c <_raise_r>
    7fa6:	bf00      	nop
    7fa8:	10000c9c 	.word	0x10000c9c

00007fac <_kill_r>:
    7fac:	b538      	push	{r3, r4, r5, lr}
    7fae:	4d07      	ldr	r5, [pc, #28]	; (7fcc <_kill_r+0x20>)
    7fb0:	2300      	movs	r3, #0
    7fb2:	4604      	mov	r4, r0
    7fb4:	4608      	mov	r0, r1
    7fb6:	4611      	mov	r1, r2
    7fb8:	602b      	str	r3, [r5, #0]
    7fba:	f7fb fa17 	bl	33ec <_kill>
    7fbe:	1c43      	adds	r3, r0, #1
    7fc0:	d102      	bne.n	7fc8 <_kill_r+0x1c>
    7fc2:	682b      	ldr	r3, [r5, #0]
    7fc4:	b103      	cbz	r3, 7fc8 <_kill_r+0x1c>
    7fc6:	6023      	str	r3, [r4, #0]
    7fc8:	bd38      	pop	{r3, r4, r5, pc}
    7fca:	bf00      	nop
    7fcc:	1000171c 	.word	0x1000171c

00007fd0 <_getpid_r>:
    7fd0:	f7fb ba04 	b.w	33dc <_getpid>

00007fd4 <strlen>:
    7fd4:	4603      	mov	r3, r0
    7fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
    7fda:	2a00      	cmp	r2, #0
    7fdc:	d1fb      	bne.n	7fd6 <strlen+0x2>
    7fde:	1a18      	subs	r0, r3, r0
    7fe0:	3801      	subs	r0, #1
    7fe2:	4770      	bx	lr

00007fe4 <sjsu::lpc40xx::Pin::kFunction>:
    7fe4:	0300 ffff                                   ....

00007fe8 <sjsu::lpc40xx::Pin::kResistor>:
    7fe8:	0203 ffff                                   ....

00007fec <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    7fec:	0107 ffff                                   ....

00007ff0 <sjsu::lpc40xx::Pin::kOpenDrain>:
    7ff0:	010a ffff                                   ....

00007ff4 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    7ff4:	0302 0100                                   ....

00007ff8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    7ff8:	6970 2e6e 7068 0070 6976 7472 6175 206c     pin.hpp.virtual 
    8008:	6f76 6469 7320 736a 3a75 6c3a 6370 3731     void sjsu::lpc17
    8018:	7878 3a3a 6950 3a6e 533a 7465 7341 6e41     xx::Pin::SetAsAn
    8028:	6c61 676f 6f4d 6564 6228 6f6f 296c 6320     alogMode(bool) c
    8038:	6e6f 7473 0000 0000 5b1b 3334 206d 4157     onst.....[43m WA
    8048:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    8058:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8068:	256d 3e64 1b20 305b 333b 6d37 6e55 7573     m%d> .[0;37mUnsu
    8078:	7070 726f 6574 2064 706f 7265 7461 6f69     pported operatio
    8088:	1b6e 305b 0a6d 0000 6f62 6c6f 7320 736a     n.[0m...bool sjs
    8098:	3a75 6c3a 6370 3034 7878 3a3a 7047 6f69     u::lpc40xx::Gpio
    80a8:	3a3a 7349 5641 6c61 6469 6f50 7472 2928     ::IsAValidPort()
    80b8:	6320 6e6f 7473 0000 5b1b 3334 206d 4157      const...[43m WA
    80c8:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    80d8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    80e8:	256d 3e64 1b20 305b 333b 6d37 6854 7369     m%d> .[0;37mThis
    80f8:	6720 6970 206f 6f70 7472 6320 6e61 6f6e      gpio port canno
    8108:	2074 6562 7520 6573 2064 6f66 2072 7845     t be used for Ex
    8118:	6574 6e72 6c61 4920 746e 7265 7572 7470     ternal Interrupt
    8128:	2e73 4e20 6565 2064 6f74 7520 6573 4720     s. Need to use G
    8138:	4950 734f 6f20 206e 6f50 7472 3020 6f20     PIOs on Port 0 o
    8148:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    8158:	6f76 6469 7320 736a 3a75 533a 6473 3331     void sjsu::Ssd13
    8168:	3630 3a3a 7257 7469 2865 6975 746e 3233     06::Write(uint32
    8178:	745f 202c 6a73 7573 3a3a 7353 3164 3033     _t, sjsu::Ssd130
    8188:	3a36 543a 6172 736e 6361 6974 6e6f 202c     6::Transaction, 
    8198:	6973 657a 745f 0029 2020 4420 4245 4755     size_t).   DEBUG
    81a8:	5b1b 3b30 3439 3a6d 7325 1b3a 305b 393b     .[0;94m:%s:.[0;9
    81b8:	6d32 7325 1b3a 305b 393b 6d33 6425 203e     2m%s:.[0;93m%d> 
    81c8:	5b1b 3b30 3733 736d 6e65 2064 203d 7830     .[0;37msend = 0x
    81d8:	5825 5b1b 6d30 000a 6544 6963 616d 3a6c     %X.[0m..Decimal:
    81e8:	2520 0064                                    %d.

000081ec <sjsu::lpc40xx::Gpio::IsAValidPort() const::file>:
    81ec:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000081f8 <sjsu::lpc40xx::I2c::Bus::kI2c0SdaPin>:
    81f8:	8368 0000 0000 0000                         h.......

00008200 <sjsu::lpc40xx::I2c::Bus::kI2c0SclPin>:
    8200:	8368 0000 0100 0000                         h.......

00008208 <sjsu::lpc40xx::I2c::Bus::kI2c1SdaPin>:
    8208:	8368 0000 1e01 0000                         h.......

00008210 <sjsu::lpc40xx::I2c::Bus::kI2c1SclPin>:
    8210:	8368 0000 1f01 0000                         h.......

00008218 <sjsu::lpc40xx::I2c::Bus::kI2c2SdaPin>:
    8218:	8368 0000 0a00 0000                         h.......

00008220 <sjsu::lpc40xx::I2c::Bus::kI2c2SclPin>:
    8220:	8368 0000 0b00 0000                         h.......

00008228 <sjsu::lpc40xx::Spi::ControlRegister0::kDataBit>:
    8228:	0400 ffff                                   ....

0000822c <sjsu::lpc40xx::Spi::ControlRegister0::kFrameBit>:
    822c:	0204 ffff                                   ....

00008230 <sjsu::lpc40xx::Spi::ControlRegister0::kPolarityBit>:
    8230:	0106 ffff                                   ....

00008234 <sjsu::lpc40xx::Spi::ControlRegister0::kPhaseBit>:
    8234:	0107 ffff                                   ....

00008238 <sjsu::lpc40xx::Spi::ControlRegister0::kDividerBit>:
    8238:	0808 ffff                                   ....

0000823c <sjsu::lpc40xx::Spi::ControlRegister1::kSpiEnable>:
    823c:	0101 ffff                                   ....

00008240 <sjsu::lpc40xx::Spi::ControlRegister1::kSlaveModeBit>:
    8240:	0102 ffff                                   ....

00008244 <sjsu::lpc40xx::Spi::StatusRegister::kDataLineBusyBit>:
    8244:	0104 ffff                                   ....

00008248 <sjsu::lpc40xx::Spi::Bus::kMosi0>:
    8248:	8368 0000 1200 0000                         h.......

00008250 <sjsu::lpc40xx::Spi::Bus::kMiso0>:
    8250:	8368 0000 1100 0000                         h.......

00008258 <sjsu::lpc40xx::Spi::Bus::kSck0>:
    8258:	8368 0000 0f00 0000                         h.......

00008260 <sjsu::lpc40xx::Spi::Bus::kMosi1>:
    8260:	8368 0000 0900 0000                         h.......

00008268 <sjsu::lpc40xx::Spi::Bus::kMiso1>:
    8268:	8368 0000 0800 0000                         h.......

00008270 <sjsu::lpc40xx::Spi::Bus::kSck1>:
    8270:	8368 0000 0700 0000                         h.......

00008278 <sjsu::lpc40xx::Spi::Bus::kMosi2>:
    8278:	8368 0000 0101 0000                         h.......

00008280 <sjsu::lpc40xx::Spi::Bus::kMiso2>:
    8280:	8368 0000 0401 0000                         h.......

00008288 <sjsu::lpc40xx::Spi::Bus::kSck2>:
    8288:	8368 0000 0001 0000                         h.......

00008290 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)::file>:
    8290:	7373 3164 3033 2e36 7068 0070               ssd1306.hpp.

0000829c <vtable for sjsu::Button>:
	...
    82a4:	1cbd 0000 1cf9 0000 1d81 0000 1e09 0000     ................
    82b4:	1e29 0000                                   )...

000082b8 <vtable for sjsu::Ssd1306>:
	...
    82c0:	1437 0000 144d 0000 1463 0000 1555 0000     7...M...c...U...
    82d0:	140f 0000 1423 0000 1735 0000 1755 0000     ....#...5...U...
    82e0:	17d3 0000                                   ....

000082e4 <vtable for sjsu::lpc40xx::Spi>:
	...
    82ec:	1071 0000 11ad 0000 11fd 0000 12e5 0000     q...............

000082fc <vtable for sjsu::lpc40xx::Gpio>:
	...
    8304:	0c9d 0000 0d05 0000 0d49 0000 0d77 0000     ........I...w...
    8314:	0d9b 0000 0de9 0000 0ec5 0000               ............

00008320 <vtable for sjsu::lpc17xx::Pin>:
	...
    8328:	08cd 0000 08e1 0000 0941 0000 09c9 0000     ........A.......
    8338:	099d 0000                                   ....

0000833c <vtable for sjsu::Gpio>:
	...
    8344:	6983 0000 6983 0000 6983 0000 6983 0000     .i...i...i...i..
    8354:	6983 0000 6983 0000 6983 0000               .i...i...i..

00008360 <vtable for sjsu::lpc40xx::Pin>:
	...
    8368:	04e1 0000 04f5 0000 0529 0000 0599 0000     ........).......
    8378:	055d 0000                                   ]...

0000837c <vtable for sjsu::Pin>:
	...
    8384:	6983 0000 6983 0000 6983 0000 6983 0000     .i...i...i...i..
    8394:	6983 0000 2020 6425 2029 7830 3025 5838     .i..  %d) 0x%08X
    83a4:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    83b4:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    83c4:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    83d4:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    83e4:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    83f4:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8404:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8414:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8424:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8434:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8444:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8454:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8464:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8474:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8484:	6175 206c 6f76 6469 7320 736a 3a75 723a     ual void sjsu::r
    8494:	6f74 3a73 543a 7361 536b 6863 6465 6c75     tos::TaskSchedul
    84a4:	7265 3a3a 6441 5464 7361 286b 6a73 7573     er::AddTask(sjsu
    84b4:	3a3a 7472 736f 3a3a 6154 6b73 6e49 6574     ::rtos::TaskInte
    84c4:	6672 6361 2a65 0029 5b1b 3534 206d 2020     rface*)..[45m   
    84d4:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    84e4:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    84f4:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8504:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8514:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8524:	2820 6174 6b73 635f 756f 746e 205f 202b      (task_count_ + 
    8534:	2031 203c 6f63 666e 6769 3a3a 546b 7361     1 < config::kTas
    8544:	536b 6863 6465 6c75 7265 6953 657a 0a29     kSchedulerSize).
    8554:	2020 2020 2020 2020 2020 6854 2065 6373               The sc
    8564:	6568 7564 656c 2072 7369 6320 7275 6572     heduler is curre
    8574:	746e 796c 6620 6c75 2c6c 7420 6568 7420     ntly full, the t
    8584:	7361 206b 6977 6c6c 6e20 746f 6220 2065     ask will not be 
    8594:	6461 6564 2e64 4320 6e6f 6973 6564 2072     added. Consider 
    85a4:	6e69 7263 6165 6973 676e 7420 6568 7320     increasing the s
    85b4:	6863 6465 6c75 7265 7320 7a69 2065 6f63     cheduler size co
    85c4:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
    85d4:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    85e4:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    85f4:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8604:	3a3a 7472 736f 3a3a 6154 6b73 6353 6568     ::rtos::TaskSche
    8614:	7564 656c 3a72 523a 6e75 6154 6b73 7628     duler::RunTask(v
    8624:	696f 2a64 0029 0000 5b1b 3534 206d 2020     oid*)....[45m   
    8634:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8644:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8654:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8664:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8674:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8684:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    8694:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    86a4:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    86b4:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    86c4:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    86d4:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    86e4:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    86f4:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8704:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8714:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8724:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8734:	5420 7365 6574 3a64 2820 6174 6b73 502e      Tested: (task.P
    8744:	6572 7552 286e 2929 200a 2020 2020 2020     reRun()).       
    8754:	2020 5020 6572 7552 286e 2029 6166 6c69        PreRun() fail
    8764:	6465 6620 726f 7420 7361 3a6b 2520 2c73     ed for task: %s,
    8774:	7420 7265 696d 616e 6974 676e 7320 6863      terminating sch
    8784:	6465 6c75 7265 1b21 305b 1b6d 305b 0a6d     eduler!.[0m.[0m.
    8794:	0000 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    87a4:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    87b4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    87c4:	1b20 305b 333b 6d37 6e41 6520 7272 726f      .[0;37mAn error
    87d4:	6f20 6363 7275 6572 2c64 7420 6568 6620      occurred, the f
    87e4:	6c6f 6f6c 6977 676e 7420 7361 206b 6977     ollowing task wi
    87f4:	6c6c 6220 2065 7573 7073 6e65 6564 3a64     ll be suspended:
    8804:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8814:	6f76 6469 7320 736a 3a75 723a 6f74 3a73     void sjsu::rtos:
    8824:	543a 7361 536b 6863 6465 6c75 7265 3a3a     :TaskScheduler::
    8834:	6e49 7469 6169 696c 657a 6c41 546c 7361     InitializeAllTas
    8844:	736b 2928 0000 0000 5b1b 3534 206d 2020     ks().....[45m   
    8854:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8864:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8874:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8884:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8894:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    88a4:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    88b4:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    88c4:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    88d4:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    88e4:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    88f4:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8904:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8914:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8924:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8934:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8944:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    8954:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    8964:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    8974:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    8984:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    8994:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    89a4:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    89b4:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    89c4:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    89d4:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    89e4:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    89f4:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    8a04:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    8a14:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    8a24:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    8a34:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    8a44:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    8a54:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    8a64:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    8a74:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    8a84:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    8a94:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    8aa4:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    8ab4:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    8ac4:	6b63 7274 6361 2065 5254 4341 5345 223d     cktrace TRACES="
    8ad4:	0000 0000 7830 7025 0020 0000 0a22 1b0a     ....0x%p ..."...
    8ae4:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    8af4:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    8b04:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    8b14:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    8b24:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    8b34:	6c6c 6465 002e 0000 5b1b 3134 486d 7261     lled.....[41mHar
    8b44:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    8b54:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    8b64:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    8b74:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    8b84:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    8b94:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    8ba4:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    8bb4:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    8bc4:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    8bd4:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    8be4:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    8bf4:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    8c04:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    8c14:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    8c24:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    8c34:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00008c40 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    8c40:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    8c50:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    8c60:	bc20 4cbe 6b28 4e6e 743a 0074                ..L(knN:tt.

00008c6c <config::kSystemClockRateMhz>:
    8c6c:	0000 4240                                   ..@B

00008c70 <config::kRtosFrequency>:
    8c70:	0000 447a 2020 6425 2029 7830 3025 5838     ..zD  %d) 0x%08X
    8c80:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    8c90:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    8ca0:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    8cb0:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    8cc0:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8cd0:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8ce0:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8cf0:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8d00:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8d10:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8d20:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8d30:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8d40:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8d50:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8d60:	6175 206c 6f76 6469 7320 736a 3a75 6c3a     ual void sjsu::l
    8d70:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    8d80:	746e 6f72 6c6c 7265 3a3a 6553 5074 7265     ntroller::SetPer
    8d90:	7069 6568 6172 436c 6f6c 6b63 6944 6976     ipheralClockDivi
    8da0:	6564 2872 6f63 736e 2074 6a73 7573 3a3a     der(const sjsu::
    8db0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    8dc0:	3a3a 6550 6972 6870 7265 6c61 4449 2c26     ::PeripheralID&,
    8dd0:	7520 6e69 3874 745f 2029 6f63 736e 0074      uint8_t) const.
    8de0:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8df0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8e00:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8e10:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8e20:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8e30:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    8e40:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    8e50:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    8e60:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    8e70:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    8e80:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    8e90:	7254 6361 3a65 000a 6975 746e 3233 745f     Trace:..uint32_t
    8ea0:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    8eb0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    8ec0:	3a3a 6143 636c 6c75 7461 5065 6c6c 7528     ::CalculatePll(u
    8ed0:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    8ee0:	6d3a 6765 6861 7265 7a74 745f 202c 6e75     :megahertz_t, un
    8ef0:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    8f00:	656d 6167 6568 7472 5f7a 2974 6320 6e6f     megahertz_t) con
    8f10:	7473 0000 5b1b 3534 206d 2020 5245 4f52     st...[45m   ERRO
    8f20:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8f30:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8f40:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8f50:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8f60:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    8f70:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    8f80:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    8f90:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    8fa0:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    8fb0:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    8fc0:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    8fd0:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    8fe0:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    8ff0:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    9000:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    9010:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9020:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9030:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9040:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9050:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    9060:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    9070:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    9080:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    9090:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    90a0:	305b 1b6d 305b 0a6d 0000 0000 6f76 6469     [0m.[0m.....void
    90b0:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    90c0:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    90d0:	3a3a 6553 4374 7570 6c43 636f 446b 7669     ::SetCpuClockDiv
    90e0:	6469 7265 7528 6e69 3874 745f 2029 6f63     ider(uint8_t) co
    90f0:	736e 0074 5b1b 3534 206d 2020 5245 4f52     nst..[45m   ERRO
    9100:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9110:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9120:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9130:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9140:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    9150:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    9160:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    9170:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    9180:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    9190:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    91a0:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    91b0:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    91c0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    91d0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    91e0:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    91f0:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    9200:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    9210:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    9220:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    9230:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    9240:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    9250:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    9260:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    9270:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..
    9280:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    9290:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    92a0:	7075 4374 6e6f 7274 6c6f 656c 3c72 4e6b     uptController<kN
    92b0:	6d75 6562 4f72 4966 746e 7265 7572 7470     umberOfInterrupt
    92c0:	2c73 6b20 764e 6369 7250 6f69 6972 7974     s, kNvicPriority
    92d0:	6942 7374 3a3e 553a 726e 6765 7369 6574     Bits>::Unregiste
    92e0:	6572 4864 6e61 6c64 7265 2928 5b20 6977     redHandler() [wi
    92f0:	6874 7520 736e 6769 656e 2064 6e69 2074     th unsigned int 
    9300:	4e6b 6d75 6562 4f72 4966 746e 7265 7572     kNumberOfInterru
    9310:	7470 2073 203d 3334 203b 6f6c 676e 7520     pts = 43; long u
    9320:	736e 6769 656e 2064 6e69 2074 4e6b 6976     nsigned int kNvi
    9330:	5063 6972 726f 7469 4279 7469 2073 203d     cPriorityBits = 
    9340:	5d35 0000 2020 4420 4245 4755 5b1b 3b30     5]..   DEBUG.[0;
    9350:	3439 3a6d 7325 1b3a 305b 393b 6d32 7325     94m:%s:.[0;92m%s
    9360:	1b3a 305b 393b 6d33 6425 203e 5b1b 3b30     :.[0;93m%d> .[0;
    9370:	3733 4e6d 206f 6e69 6574 7272 7075 2074     37mNo interrupt 
    9380:	6168 646e 656c 2072 6f66 6e75 2e64 4420     handler found. D
    9390:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
    93a0:	7470 7220 7165 6575 7473 2520 2164 5b1b     pt request %d!.[
    93b0:	6d30 000a                                   0m..

000093b4 <sjsu::cortex::SystemTimer::kFixedPointScaling>:
    93b4:	4240 000f                                   @B..

000093b8 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    93b8:	0000 4140                                   ..@A

000093bc <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    93bc:	0000 4140                                   ..@A

000093c0 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    93c0:	0100 ffff                                   ....

000093c4 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    93c4:	0100 ffff                                   ....

000093c8 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    93c8:	0500 ffff                                   ....

000093cc <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    93cc:	0108 ffff                                   ....

000093d0 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    93d0:	0208 ffff                                   ....

000093d4 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    93d4:	0208 ffff                                   ....

000093d8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    93d8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    93e8:	2e72 7068 0070 ffff                         r.hpp...

000093f0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    93f0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9400:	2e72 7068 0070 ffff                         r.hpp...

00009408 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9408:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9418:	2e72 7068 0070 ffff                         r.hpp...

00009420 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    9420:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9430:	2e72 7068 0070 ffff                         r.hpp...

00009438 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    9438:	8368 0000 0200 0000                         h.......

00009440 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    9440:	8368 0000 0300 0000                         h.......

00009448 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    9448:	8368 0000 0802 0000                         h.......

00009450 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    9450:	8368 0000 0902 0000                         h.......

00009458 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    9458:	8368 0000 1c04 0000                         h.......

00009460 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    9460:	8368 0000 1d04 0000                         h.......

00009468 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    9468:	8368 0000 1d01 0000                         h.......

00009470 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    9470:	8368 0000 0902 0000                         h.......

00009478 <sjsu::lpc40xx::Uart::Port::kUart0>:
    9478:	c000 4000 0003 0000 9438 0000 9440 0000     ...@....8...@...
    9488:	0009 0000                                   ....

0000948c <sjsu::InitializePlatform()::file>:
    948c:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00009498 <vtable for sjsu::cortex::InterruptController<43u, 5ul>>:
	...
    94a0:	6551 0000 6581 0000 65dd 0000               Qe...e...e..

000094ac <vtable for sjsu::lpc40xx::Uart>:
	...
    94b4:	5a4d 0000 5af7 0000 5b89 0000 5bdb 0000     MZ...Z...[...[..
    94c4:	5c29 0000 55df 0000                         )\...U..

000094cc <vtable for sjsu::lpc40xx::SystemController>:
	...
    94d4:	4ec9 0000 4f65 0000 4fbd 0000 4fe1 0000     .N..eO...O...O..
    94e4:	4ffd 0000 5039 0000 506d 0000               .O..9P..mP..

000094f0 <vtable for sjsu::cortex::SystemTimer>:
	...
    94f8:	4bad 0000 4c3d 0000 4d79 0000 4c5d 0000     .K..=L..yM..]L..

00009508 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file>:
    9508:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

00009518 <__sf_fake_stderr>:
	...

00009538 <__sf_fake_stdin>:
	...

00009558 <__sf_fake_stdout>:
	...
