
build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/lpc40xx/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00003611

Program Header:
0x70000001 off    0x00019984 vaddr 0x00009984 paddr 0x00009984 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00009a3c memsz 0x00009a3c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00009a3c align 2**16
         filesz 0x00000d00 memsz 0x00000d00 flags rw-
    LOAD off    0x00020d00 vaddr 0x10000d00 paddr 0x10000d00 align 2**16
         filesz 0x00000000 memsz 0x00000a20 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000996c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000d00  10000000  00009a3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  20000000  20000000  00020d00  2**2
                  CONTENTS
  3 .bss          00000a20  10000d00  10000d00  00020d00  2**3
                  ALLOC
  4 .ARM.extab    00000018  0000996c  0000996c  0001996c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx    000000b8  00009984  00009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  00020d00  2**2
                  CONTENTS
  7 .noinit_RAM2  00000000  20000000  20000000  00020d00  2**2
                  CONTENTS
  8 .noinit       00000000  10001720  10001720  00020d00  2**2
                  CONTENTS
  9 .ARM.attributes 00000030  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY
 10 .comment      00000079  00000000  00000000  00020d30  2**0
                  CONTENTS, READONLY
 11 .debug_info   0009e792  00000000  00000000  00020da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000068c4  00000000  00000000  000bf53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001478  00000000  00000000  000c5dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013d8  00000000  00000000  000c7277  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b3db  00000000  00000000  000c864f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0003f798  00000000  00000000  000d3a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000066d4  00000000  00000000  001131c4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000d00 l    d  .bss	00000000 .bss
0000996c l    d  .ARM.extab	00000000 .ARM.extab
00009984 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10001720 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00009060 l     O .text	00000004 config::kSystemClockRateMhz
00004d14 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004d30 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00009064 l     O .text	00000004 config::kRtosFrequency
00004d54 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004d70 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00005220 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000523c l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00005c04 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000c74 l     O .data	00000004 (anonymous namespace)::system_controller
10001354 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000c78 l     O .data	00000008 (anonymous namespace)::uart0
10000c80 l     O .data	00000008 (anonymous namespace)::system_timer
10000c94 l     O .data	00000004 (anonymous namespace)::interrupt_controller
0000602c l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00006050 l     F .text	00000038 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00009880 l     O .text	0000000c sjsu::InitializePlatform()::file
000064c0 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000065de l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00006650 l     F .text	0000016c __static_initialization_and_destruction_0(int, int)
00006ac6 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/vsawce/Documents/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/vsawce/Documents/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000032c l     F .text	00000000 __do_global_dtors_aux
10000d00 l       .bss	00000001 completed.10274
00000350 l     F .text	00000000 frame_dummy
10000d04 l       .bss	00000018 object.10279
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000760 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000077c l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000011fc l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00001218 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000867c l     O .text	00000009 main::file
00008688 l     O .text	00000009 main::file
00008694 l     O .text	00000009 main::file
000086a0 l     O .text	00000009 main::file
0000295e l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002e04 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00002f80 l     F .text	00000028 __tcf_0
00002fa8 l     F .text	000002d0 __static_initialization_and_destruction_0(int, int)
00003278 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00003288 l     F .text	00000026 _Unwind_GetGR
000033dc l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00003438 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv
00000000 l    df *ABS*	00000000 exceptions.cpp
00003600 l       .text	00000000 handler2_address_const
00003690 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
000036ec l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
100012bc l     O .bss	00000064 pxReadyTasksLists
10001320 l     O .bss	00000004 uxTopReadyPriority
10001324 l     O .bss	00000004 xYieldPending
10001328 l     O .bss	00000004 uxSchedulerSuspended
1000132c l     O .bss	00000004 ulTaskSwitchedInTime
10001330 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00003870 l     F .text	0000002e _out_buffer(char, void*, unsigned int, unsigned int)
00003910 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
0000392c l     F .text	0000002e _strlen(char const*)
0000395a l     F .text	00000028 _is_digit(char)
00003982 l     F .text	00000048 _atoi(char const**)
000039ca l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00003c0c l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00003cdc l     F .text	000000de _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00009034 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00003dbc l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00004200 l     F .text	000008d6 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00004b74 l     F .text	000000c8 _trace_write_semihosting_stdout(char const*, unsigned int)
10001334 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
00006b00 l       .text	00000000 pxCurrentTCBConst2
00006b70 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00007274 l     F .text	00000012 selfrel_offset31
00007288 l     F .text	0000005c search_EIT_table
000072e4 l     F .text	00000028 __gnu_unwind_get_pr_addr
0000730c l     F .text	0000009c get_eit_entry
000073a8 l     F .text	00000058 restore_non_core_regs
00007400 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
0000740c l     F .text	00000004 __gnu_unwind_24bit.isra.0
00007410 l     F .text	00000002 _Unwind_DebugHook
00007414 l     F .text	0000003a unwind_phase2
00007450 l     F .text	000000ca unwind_phase2_forced
00007628 l     F .text	00000018 _Unwind_GetGR
00007670 l     F .text	00000018 _Unwind_SetGR
00007700 l     F .text	000002a8 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00007dd8 l     F .text	00000036 next_unwind_byte
00007e10 l     F .text	0000001a _Unwind_GetGR.constprop.0
00007e2c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000ca0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
000032b0  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00007d90 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00007520 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
0000116c  w    F .text	0000001c sjsu::lpc40xx::Gpio::LocalInterruptRegister() const
00004e0c  w    F .text	0000004c sjsu::cortex::SystemTimer::SystemTimerHandler()
00002d0e  w    F .text	00000020 std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)
10001350  w    O .bss	00000001 sjsu::cortex::SystemTimer::dwt_counter
00002470  w    F .text	0000001e unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
00004e58  w    F .text	00000022 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
100012a0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi1
100000b4  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c1
000034e4  w    F .text	0000006c sjsu::InitializeBssSection()
000037c0 g     F .text	00000010 _getpid
000097b8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00000d5c  w    F .text	00000070 sjsu::lpc40xx::Gpio::InterruptHandler()
00002c62  w    F .text	00000020 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
00001c1a  w    F .text	0000016c sjsu::GraphicalTerminal::printf(char const*, ...)
00004f18  w    F .text	00000078 sjsu::cortex::SystemTimer::GetCount()
00009814  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
10000c90  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::current_vector
00004ce8  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00001188  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000640  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const
10001278  w    O .bss	00000004 guard variable for sjsu::Uptime
00002228  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
10001718  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController<43u, 5ul>::table
10000c14  w    O .data	00000004 sjsu::newlib::in
10001294  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c1
000063e0  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
10001710  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00000f24  w    F .text	0000002e sjsu::lpc40xx::Gpio::Toggle() const
000004d8  w    F .text	00000014 sjsu::lpc40xx::Pin::Initialize() const
00005020  w    F .text	00000020 sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const
000007dc  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
0000821c g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
10000038  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c1
00004ad8 g     F .text	00000044 printf
00000b04  w    F .text	00000018 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
00001124  w    F .text	00000048 sjsu::lpc40xx::Gpio::IsAValidPort() const
000008e4  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000000 g       *ABS*	00000000 __vectors_start__
00002edc  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()
0000658a  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
00001644  w    F .text	00000016 sjsu::Ssd1306::GetHeight()
00006254  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
1000053c  w    O .data	000006d4 sjtwo::Oled()::oled_display
00001ff2  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00006848  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)
00006388  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()
0000654c  w    F .text	0000001e std::array<std::function<void ()>, 59u>::operator[](unsigned int)
00008608  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kDataBit
00006a3e  w    F .text	0000001a std::array<std::function<void ()>, 59u>::data()
00002b1e  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()
00001ae2  w    F .text	00000022 sjsu::Graphics::Update()
0000333c  w    F .text	00000098 sjsu::debug::PrintBacktrace(bool, void*)
00000b78  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
00008648  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso1
20000000 g       *ABS*	00000000 __base_RAM2
00007c4c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00007d6c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00001268  w    F .text	00000108 sjsu::lpc40xx::Spi::Initialize() const
0000192c  w    F .text	00000020 sjsu::Ssd1306::Clear()
10000d1c  w    O .bss	00000004 sjsu::InterruptController::platform_interrupt_controller
00009a3c g       .ARM.exidx	00000000 __exidx_end
00000a48  w    F .text	00000020 sjsu::Gpio::Gpio()
00008254  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00006088 g     F .text	00000014 ThreadRuntimeCounter
000079a8 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
00002b68  w    F .text	00000018 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00004dd0  w    F .text	0000001c sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)
000053dc  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00008638  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck0
00002228  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
100012b8 g     O .bss	00000004 pxCurrentTCB
00001a28  w    F .text	0000002e sjsu::PixelDisplay::Color_t::Color_t()
0000280c  w    F .text	00000020 bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())
000080f8 g     F .text	0000000a .hidden _Unwind_GetRegionStart
000085d8  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c0SdaPin
00002b80  w    F .text	00000016 std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
000004a8  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
00007d6c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00005998  w    F .text	00000038 sjsu::Uart::Read() const
000097b0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00002f3a  w    F .text	00000018 void (* const&std::_Any_data::_M_access<void (*)()>() const)()
000006ac  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)
10010000 g       *ABS*	00000000 __top_SRAM
1000171c g     O .bss	00000004 errno
00009a3c g       .ARM.exidx	00000000 _etext
0000621e  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000590  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
000054d4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
10001270  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled
00008620  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister1::kSlaveModeBit
00007db4 g     F .text	00000022 .hidden _Unwind_Backtrace
00001a28  w    F .text	0000002e sjsu::PixelDisplay::Color_t::Color_t()
10000d20  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00006cd0 g     F .text	00000160 .hidden __aeabi_fadd
10001260  w    O .bss	00000010 sjtwo::Oled()::oled
00006ccc g     F .text	00000164 .hidden __subsf3
000055dc  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000984c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00007c2c g     F .text	00000018 .hidden __restore_core_regs
00007c6c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00006a6e  w    F .text	0000002c __gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
000027b2  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
000063e0  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000097ac  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00001a56  w    F .text	0000006a sjsu::Graphics::Graphics(sjsu::PixelDisplay&)
000098a0  w    O .text	00000020 vtable for sjsu::lpc40xx::Uart
00008258  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
0000591c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
0000751c g     F .text	00000004 .hidden _Unwind_GetCFA
00008190 g     F .text	0000001c memcpy
00005640  w    F .text	00000198 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006b90 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
0000254c  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()
00001810  w    F .text	000000da sjsu::Ssd1306::InitializationPanel()
00007640 g     F .text	0000002e .hidden _Unwind_VRS_Set
0000241e  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00006f80 g     F .text	00000000 .hidden __aeabi_uldivmod
10001720 g       .noinit	00000000 _noinit
000055f4  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000abc  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
0000381c g     F .text	00000048 puts
00000c22  w    F .text	00000030 sjsu::lpc17xx::Pin::PinRegisterLookup() const
00001460  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000059fc  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
0000627a  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
000011da  w    F .text	00000022 units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)
00002660  w    F .text	00000024 std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)
000086d8  w    O .text	00000018 vtable for sjsu::lpc40xx::Spi
00005308  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
10000c20  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
0000040a  w    F .text	00000022 std::_Function_base::_M_empty() const
000081bc g     F .text	00000050 _raise_r
00006e38 g     F .text	0000001c .hidden __aeabi_i2f
00005964  w    F .text	0000001e sjsu::Pin::PullUp() const
00002acc  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)
10000d4c  w    O .bss	00000400 sjsu::lpc40xx::Gpio::handlers
00000846  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()
10010000 g       *ABS*	00000000 __top_RAM
000011a4  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00006b10 g     F .text	00000066 xPortPendSVHandler
00004b1c g     F .text	0000002c vsnprintf
000025e8  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10000534  w    O .data	00000008 sjtwo::spi1
00000fa8  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
000006fc  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000554  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00008240 g     F .text	00000004 _getpid_r
000059d0  w    F .text	0000002a sjsu::Uart::PollingFlush() const
00001e1a  w    F .text	0000003a sjsu::GraphicalTerminal::ClearRow(unsigned long)
00007688 g     F .text	00000076 .hidden __gnu_Unwind_Backtrace
00002e28  w    F .text	00000086 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
10000000 g     O .data	00000000 .hidden __dso_handle
00001fcc  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
000008e4  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00008618  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kDividerBit
0000174c  w    F .text	000000c4 sjsu::Ssd1306::Initialize()
00008624  w    O .text	00000002 sjsu::lpc40xx::Spi::StatusRegister::kDataLineBusyBit
10010000 g       *ABS*	00000000 StackTop
00000a68  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
0000698c  w    F .text	00000034 sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)
00006424  w    F .text	00000042 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)
000062f6  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00006fb0 g     F .text	000002c2 .hidden __udivmoddi4
00006180  w    F .text	00000036 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000000fc g       .text	00000000 bss_section_table
000085f8  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c2SdaPin
0000825c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000050cc  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00006360  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
00007c5c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
0000263c  w    F .text	00000024 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())
20008000 g       *ABS*	00000000 __top_RAM2
00002508  w    F .text	00000044 sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)
000014dc  w    F .text	000000f0 sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const
1000123c  w    O .bss	00000020 sjtwo::Oled()::oled_dc
000079b4 g     F .text	00000278 .hidden _Unwind_VRS_Pop
000079b0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
10000134  w    O .data	00000400 font8x8_basic
00005040  w    F .text	0000008c sjsu::cortex::SystemTimer::StartTimer() const
1000128c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00000fa8  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
00007db4 g     F .text	00000022 .hidden ___Unwind_Backtrace
00002a18  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
000032f8  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00009864  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00000fc4  w    F .text	000000dc sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)
00008730  w    O .text	00000024 vtable for sjsu::Gpio
00001bac  w    F .text	00000040 sjsu::Graphics::DrawPixel(unsigned long, unsigned long)
20000000 g       *ABS*	00000000 __user_heap_base
1000011c  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi2
00009984 g       .ARM.extab	00000000 __exidx_start
000068bc  w    F .text	0000002e void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00006620  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00006888  w    F .text	00000018 std::array<std::function<void ()>, 59u>::begin()
000085e0  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c0SclPin
00002cc4  w    F .text	00000018 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00008148 g     F .text	00000048 __libc_init_array
000067bc  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)
00005b74  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00007d24 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000000 g       *ABS*	00000000 __base_SRAM
00002684  w    F .text	00000056 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00002be4  w    F .text	00000016 std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00008650  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck1
00005138  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000811c g     F .text	0000000e abort
00007d48 g     F .text	00000022 .hidden ___Unwind_Resume
00005120  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000c60  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00008668  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kSck2
000065a0  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
10001274  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00001698  w    F .text	000000b4 sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)
00006a00  w    F .text	0000003e std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00080000 g       *ABS*	00000000 __top_FLASH
10000104  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi1
00002c38  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)
00006b78 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
10001238  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled_cs
00002866  w    F .text	0000001c std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)
00002dc6  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
000003b2  w    F .text	00000016 std::_Any_data::_M_access() const
00008260  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00000dcc  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
00006c18 g     F .text	0000000a std::terminate()
000013a4  w    F .text	00000038 sjsu::lpc40xx::Spi::Transfer(unsigned short) const
00006c24 g     F .text	0000009e .hidden __aeabi_d2f
00007c74 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000003e4  w    F .text	00000026 std::_Function_base::~_Function_base()
0000241e  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00002a3c  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00006ccc g     F .text	00000164 .hidden __aeabi_fsub
00005e9a  w    F .text	00000092 sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00001bec  w    F .text	0000002e sjsu::GraphicalTerminal::Initialize()
0000230e  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
10001714  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000035e8 g     F .text	00000026 ArmHardFaultHandler
100012ac  w    O .bss	00000004 guard variable for sjtwo::led1
000000e4 g       .text	00000000 section_table_start
000010a0  w    F .text	00000084 sjsu::lpc40xx::Gpio::DetachInterrupt() const
000014b8  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10001720 g       .bss	00000000 _ebss
00006ab0  w    F .text	00000016 std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])
10000098  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c0
00002afe  w    F .text	00000020 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)
000015cc  w    F .text	0000003a sjsu::PixelDisplay::Color_t::IsBlank()
00006008  w    F .text	00000024 sjsu::lpc40xx::Uart::FifoHasData() const
0000162e  w    F .text	00000016 sjsu::Ssd1306::GetWidth()
000013dc  w    F .text	00000018 auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)
000098c0  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
000022bc  w    F .text	0000002c std::function<void ()>::operator()() const
000024e4  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
000098fc  w    O .text	0000000e sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file
10000c30  w    O .data	00000004 sjsu::cortex::SystemTimer::ticks_per_millisecond
00005384  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00004f90  w    F .text	00000090 sjsu::cortex::SystemTimer::Initialize() const
0000073e  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006e64 g     F .text	0000007c .hidden __floatdisf
00008610  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kPolarityBit
00001ac0  w    F .text	00000022 sjsu::Graphics::Initialize()
00005982  w    F .text	00000016 sjsu::Uart::Flush() const
00001370  w    F .text	00000034 sjsu::lpc40xx::Spi::IsBusBusy() const
00009834  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00003564 g     F .text	00000084 GetRegistersFromStack
000069c0  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()
00006490  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
00002452  w    F .text	0000001e unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
000013f4  w    F .text	00000054 sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const
1000127c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
000026ec  w    F .text	00000016 bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)
000009da  w    F .text	0000001a std::function<bool ()>::~function()
000009da  w    F .text	0000001a std::function<bool ()>::~function()
00008268  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
0000282c  w    F .text	00000016 std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())
0000036c  w    F .text	00000018 operator new(unsigned int, void*)
00000dcc  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00007c44 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
1000125c  w    O .bss	00000004 guard variable for sjtwo::Oled()::oled_dc
0000609c  w    F .text	000000e4 sjsu::InitializePlatform()
10001190  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
0000990c g     O .text	00000020 __sf_fake_stderr
000019ca  w    F .text	0000005e sjsu::Ssd1306::Update()
00001448  w    F .text	00000018 unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const
00002a18  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00006c08 g     F .text	00000010 std::get_terminate()
00008714  w    O .text	0000001c vtable for sjsu::lpc17xx::Pin
10001720 g       .bss	00000000 end
00002048  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
10001218  w    O .bss	00000020 sjtwo::Oled()::oled_cs
00007d48 g     F .text	00000022 .hidden _Unwind_Resume
000075ec g     F .text	0000000c .hidden _Unwind_DeleteException
000075e8 g     F .text	00000002 .hidden _Unwind_Complete
0000548c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
00002606  w    F .text	00000020 bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00000000 g       *ABS*	00000000 __base_Flash
0000389e g     F .text	00000072 _out_chunk(char, void*, unsigned int, unsigned int)
0000275c  w    F .text	00000056 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)
00001d86  w    F .text	00000094 sjsu::GraphicalTerminal::Update()
000029f0  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()
000098e4  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
10000008  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c0
00002b36  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
000097c8  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00000444  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
00004b56 g     F .text	0000001e trace_write
000067ec  w    F .text	0000005c sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)
00008614  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kPhaseBit
0000207c  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
1000170c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
10000d00 g       .bss	00000000 _bss
000097fc  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005ba0  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecimal(float)
00006204  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
10001348  w    O .bss	00000008 sjsu::cortex::SystemTimer::millisecond_count
00004b48 g     F .text	0000000e trace_initialize
00000b1c  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
00006bf2 g     F .text	00000006 __cxa_pure_virtual
00005618  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
0000656a  w    F .text	00000020 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const
000009c4  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const
00006e38 g     F .text	0000001c .hidden __floatsisf
000024ac  w    F .text	00000038 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
0000983c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10001194  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007e30 g     F .text	0000029c .hidden __gnu_unwind_execute
00002c9a  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)
0000526c  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007c54 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000490  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
000021d8  w    F .text	00000022 bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00002566  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000009f4  w    F .text	0000003a sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
000007a0  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00008770  w    O .text	0000001c vtable for sjsu::Pin
0000202e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()
10001720 g       .noinit	00000000 _end_noinit
00002f22  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()
10001198  w    O .bss	00000020 sjtwo::led0
000003c8  w    F .text	0000001c std::_Function_base::_Function_base()
00002cdc  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)
00005360  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
000036fc g     F .text	000000c4 vTaskSwitchContext
00002360  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
00002718  w    F .text	00000024 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)
000097b4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00004dec  w    F .text	00000020 sjsu::SystemController::SetPlatformController(sjsu::SystemController*)
000061d2  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00007594 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00006466  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
0000812c g     F .text	0000001c __cxa_atexit
10001168  w    O .bss	00000028 sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00001b04  w    F .text	00000022 sjsu::Graphics::Clear()
00004c3c  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00009844  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00007c64 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
0000515c  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006a58  w    F .text	00000016 std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)
000022a2  w    F .text	0000001a std::function<void ()>::function()
00008264  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
00000ba4  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
00001a56  w    F .text	0000006a sjsu::Graphics::Graphics(sjsu::PixelDisplay&)
00002d46  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00006e54 g     F .text	0000008c .hidden __floatundisf
10000d40  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00007d24 g     F .text	00000022 .hidden _Unwind_RaiseException
00008118  w    F .text	00000002 .hidden __aeabi_ldiv0
00000f8e  w    F .text	0000001a std::function<void ()>::~function()
10000c38  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00003550  w    F .text	00000014 sjsu::SystemInitialize()
10001338  w    O .bss	00000010 sjsu::cortex::SystemTimer::callback
00002d2e  w    F .text	00000018 void (**&std::_Any_data::_M_access<void (**)()>())()
00006e30 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
00008628  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi0
0000086e  w    F .text	0000002c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000d28  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00002b96  w    F .text	0000004e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
10001284  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00000bec  w    F .text	00000036 sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)
00006ba8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
000006d0  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
000068ea  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)
00000900  w    F .text	000000c4 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)
000004a8  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
0000992c g     O .text	00000020 __sf_fake_stdin
0000082c  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()
000002fc g       .text	00000000 __CRP_WORD_START__
000022a2  w    F .text	0000001a std::function<void ()>::function()
00006904  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)
000058a0  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
0000042c  w    F .text	00000018 sjsu::InterruptController::GetPlatformController()
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00004ece  w    F .text	0000004a std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
000081ac g     F .text	00000010 memset
00001e80 g     F .text	0000014c main
00004c80  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00005f7e  w    F .text	0000004e sjsu::lpc40xx::Uart::Read(void*, unsigned int) const
00008640  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi1
00006e64 g     F .text	0000007c .hidden __aeabi_l2f
000026da  w    F .text	00000012 std::chrono::duration_values<long long>::max()
00002146  w    F .text	00000032 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const
20000000 g       *ABS*	00000000 heap
000086ac  w    O .text	0000002c vtable for sjsu::Ssd1306
00006bf8 g     F .text	00000006 std::__throw_bad_function_call()
00004ca0  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000986c  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00008754  w    O .text	0000001c vtable for sjsu::lpc40xx::Pin
00006c24 g     F .text	0000009e .hidden __truncdfsf2
00000320 g       .text	00000000 __init_array_end
00006ae0 g     F .text	00000026 vPortSVCHandler
00000000 g       *ABS*	00000000 __base_FLASH
10000d24  w    O .bss	00000004 sjsu::SystemController::platform_system_controller
100000d0  w    O .data	0000001c sjsu::lpc40xx::I2c::Bus::kI2c2
000097c0  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000c18  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006e54 g     F .text	0000008c .hidden __aeabi_ul2f
00004d94  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00007580 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000003e4  w    F .text	00000026 std::_Function_base::~_Function_base()
00002d78  w    F .text	00000018 std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
000028d8  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
000028d8  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
00008660  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso2
000055a0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000f8e  w    F .text	0000001a std::function<void ()>::~function()
000025c0  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()
00000aa8  w    F .text	00000014 sjsu::lpc17xx::Pin::Initialize() const
00002f52  w    F .text	00000016 void (* const*std::__addressof<void (* const)()>(void (* const&)()))()
000075d8 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10001280  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
10000c10  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00006620  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00006332  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00000320 g     F .text	00000000 _fini
00007c2c g     F .text	00000018 .hidden restore_core_regs
000053a0  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
000085cc  w    O .text	00000009 sjsu::lpc40xx::Gpio::IsAValidPort() const::file
00007d10 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00004e7a  w    F .text	00000054 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
0000161a  w    F .text	00000014 sjsu::PixelDisplay::Disable()
0000985c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00000f52  w    F .text	00000024 sjsu::lpc40xx::Gpio::Read() const
000007c4  w    F .text	00000018 sjsu::SystemController::GetPlatformController()
000023ea  w    F .text	00000034 std::function<void ()>::operator=(decltype(nullptr))
0000194c  w    F .text	0000007e sjsu::Ssd1306::DrawPixel(long, long, sjsu::PixelDisplay::Color_t)
00000a48  w    F .text	00000020 sjsu::Gpio::Gpio()
10000c4c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00002d90  w    F .text	00000020 std::function<void ()>::operator bool() const
00005fe4  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
100011f8  w    O .bss	00000020 sjtwo::led3
00000a2e  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
00006cc4 g     F .text	0000016c .hidden __aeabi_frsub
00000444  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
0000291c  w    F .text	00000042 std::function<void ()>::swap(std::function<void ()>&)
10000c9c g     O .data	00000004 _impure_ptr
000097c4  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00001248  w    F .text	0000001e units::linear_scale<float>::operator()() const
00004cc8  w    F .text	00000020 sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)
100000ec  w    O .data	00000018 sjsu::lpc40xx::Spi::Bus::kSpi0
00000c54  w    F .text	00000074 sjsu::lpc40xx::Gpio::GpioRegister(int)
00005564  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000030c g       .text	00000000 __preinit_array_end
00006a9a  w    F .text	00000016 void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
000005c4  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
00002332  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00005f2c  w    F .text	00000052 sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const
000050e4  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00002bfa  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00002a58  w    F .text	00000074 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00008104 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000097e4  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
10001708  w    O .bss	00000004 guard variable for sjsu::cortex::SystemTimer::callback
000061b6  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006602  w    F .text	0000001e std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)
00000ee0  w    F .text	00000044 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
00003610 g     F .text	00000080 ArmResetHandler
00006934  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)
00002f68  w    F .text	00000018 void (*&std::_Any_data::_M_access<void (*)()>())()
0000065c  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
000020d0  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()
0000248e  w    F .text	0000001e bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
000075f8 g     F .text	0000002e .hidden _Unwind_VRS_Get
000003c8  w    F .text	0000001c std::_Function_base::_Function_base()
10000c98 g     O .data	00000004 __cxxabiv1::__terminate_handler
00007cfc g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
100012a4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi2
00005410  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00002842  w    F .text	00000024 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())
00005444  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
000037ec g     F .text	00000030 _write
000080cc g     F .text	0000002a .hidden __gnu_unwind_frame
0000860c  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister0::kFrameBit
00007d90 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
10000d00 g       .data	00000000 _edata
00001e54  w    F .text	0000002c sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)
1000114c  w    O .bss	00000018 sjsu::lpc40xx::Gpio::GpioRegister(int)::port
10001358  w    O .bss	000003b0 sjsu::cortex::InterruptController<43u, 5ul>::table
00002178  w    F .text	00000060 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000d48  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
00005fcc  w    F .text	00000018 sjsu::lpc40xx::Uart::HasData() const
00000e78  w    F .text	00000068 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
000086f0  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
100012b0  w    O .bss	00000004 guard variable for sjtwo::led2
0000861c  w    O .text	00000002 sjsu::lpc40xx::Spi::ControlRegister1::kSpiEnable
00002882  w    F .text	00000056 std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000021fa  w    F .text	0000002e std::function<bool ()>::operator()() const
10001290  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c0
00002c82  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()
00008600  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c2SclPin
10000c8c  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::nvic
000097cc  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00002eae  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()
0000629e  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
10000c88  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::scb
00006e30 g     F .text	00000024 .hidden __floatunsisf
00006bfe g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00007cb8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00008670  w    O .text	0000000c sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)::file
000097a8  w    O .text	00000004 sjsu::cortex::SystemTimer::kFixedPointScaling
000037d0 g     F .text	0000001a _kill
00003448  w    F .text	0000009c sjsu::InitializeDataSection()
000068a0  w    F .text	0000001c std::array<std::function<void ()>, 59u>::end()
00002998  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00006360  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
0000089c  w    F .text	00000048 sjsu::DefaultUptime()
0000207c  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
0000994c g     O .text	00000020 __sf_fake_stdout
00000384  w    F .text	00000018 std::numeric_limits<long long>::max()
000085e8  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c1SdaPin
100012a8  w    O .bss	00000004 guard variable for sjtwo::led0
10000068  w    O .data	00000030 sjsu::lpc40xx::I2c::Bus::transaction_i2c2
00000a68  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00002702  w    F .text	00000016 std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)
0000030c g       .text	00000000 __init_array_start
00008118  w    F .text	00000002 .hidden __aeabi_idiv0
000022e8  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000023b4  w    F .text	00000036 std::function<void ()>::operator=(std::function<void ()> const&)
00002db0  w    F .text	00000016 std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
0000039c  w    F .text	00000016 std::_Any_data::_M_access()
00008658  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMosi2
000061ec  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
000085f0  w    O .text	00000008 sjsu::lpc40xx::I2c::Bus::kI2c1SclPin
00003864 g     F .text	0000000c _exit
00002ef4  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const
00009854  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000c34  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
100011b8  w    O .bss	00000020 sjtwo::led1
10001298  w    O .bss	00000004 guard variable for sjsu::lpc40xx::I2c::Bus::kI2c2
00002f0c  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)
0000071e  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
0000273c  w    F .text	00000020 std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
00005adc  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
1000129c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Spi::Bus::kSpi0
00000f76  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
00000478  w    F .text	00000018 sjsu::Pin::GetPort() const
00002ec6  w    F .text	00000016 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()
00008244 g     F .text	00000010 strlen
000018ec  w    F .text	00000040 sjsu::Ssd1306::SetHorizontalAddressMode()
10000d30  w    O .bss	00000010 sjsu::Uptime
000004ec  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
000020f8  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
000079ac  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
0000165a  w    F .text	0000003e sjsu::Ssd1306::AvailableColors()
100011d8  w    O .bss	00000020 sjtwo::led2
00006534  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)
00008630  w    O .text	00000008 sjsu::lpc40xx::Spi::Bus::kMiso0
000057d8  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006bc8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00005b28  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
0000988c  w    O .text	00000014 vtable for sjsu::cortex::InterruptController<43u, 5ul>
10000c28  w    O .data	00000008 sjsu::cortex::SystemTimer::nanoseconds_per_tick
000064dc  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00001b28  w    F .text	00000084 sjsu::Graphics::DrawCharacter(long, long, char)
00000520  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
00001606  w    F .text	00000014 sjsu::PixelDisplay::Enable()
0000030c g       .text	00000000 __preinit_array_start
00002508  w    F .text	00000044 sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)
0000297a  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000551c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
10001288  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::handlers
00006ee0 g     F .text	00000000 .hidden __aeabi_ldivmod
000033d4  w    F .text	00000008 sjsu::Halt()
100012b4  w    O .bss	00000004 guard variable for sjtwo::led3
00000d48  w    F .text	00000014 sjsu::lpc40xx::Gpio::InterruptStatus()
000097bc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00006be8 g     F .text	0000000a __aeabi_atexit
00002360  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
000061b6  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006cd0 g     F .text	00000160 .hidden __addsf3
00002048  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
0000227c  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
00000cc8  w    F .text	00000080 sjsu::lpc40xx::Gpio::InterruptRegister(int)
10000d44  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
0000982c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
00005df0  w    F .text	000000aa sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000c1c  w    O .data	00000004 sjsu::cortex::DwtCounter::core
0000820c g     F .text	00000010 raise
10001164  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::GpioRegister(int)::port
00002626  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 11 36 00 00 89 63 00 00 e9 35 00 00     .....6...c...5..
      10:	89 63 00 00 89 63 00 00 89 63 00 00 00 00 00 00     .c...c...c......
	...
      2c:	e1 6a 00 00 89 63 00 00 00 00 00 00 11 6b 00 00     .j...c.......k..
      3c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      4c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      5c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      6c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      7c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      8c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      9c:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      ac:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      bc:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      cc:	89 63 00 00 89 63 00 00 89 63 00 00 89 63 00 00     .c...c...c...c..
      dc:	89 63 00 00 89 63 00 00                             .c...c..

000000e4 <data_section_table>:
      e4:	00009a3c 	.word	0x00009a3c
      e8:	10000000 	.word	0x10000000
      ec:	00000d00 	.word	0x00000d00
      f0:	00009a3c 	.word	0x00009a3c
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	10000d00 	.word	0x10000d00
     100:	00000a20 	.word	0x00000a20
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000351 	.word	0x00000351
     310:	00003279 	.word	0x00003279
     314:	00003439 	.word	0x00003439
     318:	000036ed 	.word	0x000036ed
     31c:	00006ac7 	.word	0x00006ac7

00000320 <_fini>:
     320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     322:	bf00      	nop
     324:	bcf8      	pop	{r3, r4, r5, r6, r7}
     326:	bc08      	pop	{r3}
     328:	469e      	mov	lr, r3
     32a:	4770      	bx	lr

0000032c <__do_global_dtors_aux>:
     32c:	b510      	push	{r4, lr}
     32e:	4c05      	ldr	r4, [pc, #20]	; (344 <__do_global_dtors_aux+0x18>)
     330:	7823      	ldrb	r3, [r4, #0]
     332:	b933      	cbnz	r3, 342 <__do_global_dtors_aux+0x16>
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <__do_global_dtors_aux+0x1c>)
     336:	b113      	cbz	r3, 33e <__do_global_dtors_aux+0x12>
     338:	4804      	ldr	r0, [pc, #16]	; (34c <__do_global_dtors_aux+0x20>)
     33a:	f3af 8000 	nop.w
     33e:	2301      	movs	r3, #1
     340:	7023      	strb	r3, [r4, #0]
     342:	bd10      	pop	{r4, pc}
     344:	10000d00 	.word	0x10000d00
     348:	00000000 	.word	0x00000000
     34c:	00009984 	.word	0x00009984

00000350 <frame_dummy>:
     350:	b508      	push	{r3, lr}
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <frame_dummy+0x10>)
     354:	b11b      	cbz	r3, 35e <frame_dummy+0xe>
     356:	4903      	ldr	r1, [pc, #12]	; (364 <frame_dummy+0x14>)
     358:	4803      	ldr	r0, [pc, #12]	; (368 <frame_dummy+0x18>)
     35a:	f3af 8000 	nop.w
     35e:	bd08      	pop	{r3, pc}
     360:	00000000 	.word	0x00000000
     364:	10000d04 	.word	0x10000d04
     368:	00009984 	.word	0x00009984

0000036c <operator new(unsigned int, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	6039      	str	r1, [r7, #0]
     376:	683b      	ldr	r3, [r7, #0]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	f85d 7b04 	ldr.w	r7, [sp], #4
     382:	4770      	bx	lr

00000384 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     384:	b480      	push	{r7}
     386:	af00      	add	r7, sp, #0
     388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     38c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
     390:	4610      	mov	r0, r2
     392:	4619      	mov	r1, r3
     394:	46bd      	mov	sp, r7
     396:	f85d 7b04 	ldr.w	r7, [sp], #4
     39a:	4770      	bx	lr

0000039c <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
     39c:	b480      	push	{r7}
     39e:	b083      	sub	sp, #12
     3a0:	af00      	add	r7, sp, #0
     3a2:	6078      	str	r0, [r7, #4]
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	4618      	mov	r0, r3
     3a8:	370c      	adds	r7, #12
     3aa:	46bd      	mov	sp, r7
     3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     3b0:	4770      	bx	lr

000003b2 <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
     3b2:	b480      	push	{r7}
     3b4:	b083      	sub	sp, #12
     3b6:	af00      	add	r7, sp, #0
     3b8:	6078      	str	r0, [r7, #4]
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	4618      	mov	r0, r3
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	2200      	movs	r2, #0
     3d4:	609a      	str	r2, [r3, #8]
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	4618      	mov	r0, r3
     3da:	370c      	adds	r7, #12
     3dc:	46bd      	mov	sp, r7
     3de:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e2:	4770      	bx	lr

000003e4 <std::_Function_base::~_Function_base()>:

    ~_Function_base()
     3e4:	b580      	push	{r7, lr}
     3e6:	b082      	sub	sp, #8
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	689b      	ldr	r3, [r3, #8]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <std::_Function_base::~_Function_base()+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	689b      	ldr	r3, [r3, #8]
     3f8:	6878      	ldr	r0, [r7, #4]
     3fa:	6879      	ldr	r1, [r7, #4]
     3fc:	2203      	movs	r2, #3
     3fe:	4798      	blx	r3
    }
     400:	687b      	ldr	r3, [r7, #4]
     402:	4618      	mov	r0, r3
     404:	3708      	adds	r7, #8
     406:	46bd      	mov	sp, r7
     408:	bd80      	pop	{r7, pc}

0000040a <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
     40a:	b480      	push	{r7}
     40c:	b083      	sub	sp, #12
     40e:	af00      	add	r7, sp, #0
     410:	6078      	str	r0, [r7, #4]
     412:	687b      	ldr	r3, [r7, #4]
     414:	689b      	ldr	r3, [r3, #8]
     416:	2b00      	cmp	r3, #0
     418:	bf0c      	ite	eq
     41a:	2301      	moveq	r3, #1
     41c:	2300      	movne	r3, #0
     41e:	b2db      	uxtb	r3, r3
     420:	4618      	mov	r0, r3
     422:	370c      	adds	r7, #12
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <sjsu::InterruptController::GetPlatformController()>:
  static void SetPlatformController(InterruptController * interrupt_controller)
  {
    platform_interrupt_controller = interrupt_controller;
  }
  /// Retrieve a reference of the platforms interrupt controller
  static sjsu::InterruptController & GetPlatformController()
     42c:	b480      	push	{r7}
     42e:	af00      	add	r7, sp, #0
  {
    return *platform_interrupt_controller;
     430:	4b03      	ldr	r3, [pc, #12]	; (440 <sjsu::InterruptController::GetPlatformController()+0x14>)
     432:	681b      	ldr	r3, [r3, #0]
  }
     434:	4618      	mov	r0, r3
     436:	46bd      	mov	sp, r7
     438:	f85d 7b04 	ldr.w	r7, [sp], #4
     43c:	4770      	bx	lr
     43e:	bf00      	nop
     440:	10000d1c 	.word	0x10000d1c

00000444 <sjsu::Pin::Pin(unsigned char, unsigned char)>:
    /// resistor.
    kRepeater
  };

  /// Set internal port and pin values.
  constexpr Pin(uint8_t port, uint8_t pin) : port_(port), pin_(pin) {}
     444:	b480      	push	{r7}
     446:	b083      	sub	sp, #12
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
     450:	4613      	mov	r3, r2
     452:	70bb      	strb	r3, [r7, #2]
     454:	4a07      	ldr	r2, [pc, #28]	; (474 <sjsu::Pin::Pin(unsigned char, unsigned char)+0x30>)
     456:	687b      	ldr	r3, [r7, #4]
     458:	601a      	str	r2, [r3, #0]
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	78fa      	ldrb	r2, [r7, #3]
     45e:	711a      	strb	r2, [r3, #4]
     460:	687b      	ldr	r3, [r7, #4]
     462:	78ba      	ldrb	r2, [r7, #2]
     464:	715a      	strb	r2, [r3, #5]
     466:	687b      	ldr	r3, [r7, #4]
     468:	4618      	mov	r0, r3
     46a:	370c      	adds	r7, #12
     46c:	46bd      	mov	sp, r7
     46e:	f85d 7b04 	ldr.w	r7, [sp], #4
     472:	4770      	bx	lr
     474:	00008778 	.word	0x00008778

00000478 <sjsu::Pin::GetPort() const>:
  {
    SetPull(Resistor::kNone);
  }

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     480:	687b      	ldr	r3, [r7, #4]
     482:	791b      	ldrb	r3, [r3, #4]
  }
     484:	4618      	mov	r0, r3
     486:	370c      	adds	r7, #12
     488:	46bd      	mov	sp, r7
     48a:	f85d 7b04 	ldr.w	r7, [sp], #4
     48e:	4770      	bx	lr

00000490 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     490:	b480      	push	{r7}
     492:	b083      	sub	sp, #12
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     498:	687b      	ldr	r3, [r7, #4]
     49a:	795b      	ldrb	r3, [r3, #5]
  }
     49c:	4618      	mov	r0, r3
     49e:	370c      	adds	r7, #12
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>:

  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}
     4a8:	b580      	push	{r7, lr}
     4aa:	b082      	sub	sp, #8
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	460b      	mov	r3, r1
     4b2:	70fb      	strb	r3, [r7, #3]
     4b4:	4613      	mov	r3, r2
     4b6:	70bb      	strb	r3, [r7, #2]
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	78ba      	ldrb	r2, [r7, #2]
     4bc:	78f9      	ldrb	r1, [r7, #3]
     4be:	4618      	mov	r0, r3
     4c0:	f7ff ffc0 	bl	444 <sjsu::Pin::Pin(unsigned char, unsigned char)>
     4c4:	4a03      	ldr	r2, [pc, #12]	; (4d4 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)+0x2c>)
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	601a      	str	r2, [r3, #0]
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	4618      	mov	r0, r3
     4ce:	3708      	adds	r7, #8
     4d0:	46bd      	mov	sp, r7
     4d2:	bd80      	pop	{r7, pc}
     4d4:	0000875c 	.word	0x0000875c

000004d8 <sjsu::lpc40xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     4d8:	b480      	push	{r7}
     4da:	b083      	sub	sp, #12
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
     4e0:	bf00      	nop
     4e2:	370c      	adds	r7, #12
     4e4:	46bd      	mov	sp, r7
     4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ea:	4770      	bx	lr

000004ec <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     4ec:	b580      	push	{r7, lr}
     4ee:	b082      	sub	sp, #8
     4f0:	af00      	add	r7, sp, #0
     4f2:	6078      	str	r0, [r7, #4]
     4f4:	460b      	mov	r3, r1
     4f6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     4f8:	4b08      	ldr	r3, [pc, #32]	; (51c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     4fa:	78f9      	ldrb	r1, [r7, #3]
     4fc:	781a      	ldrb	r2, [r3, #0]
     4fe:	785b      	ldrb	r3, [r3, #1]
     500:	021b      	lsls	r3, r3, #8
     502:	431a      	orrs	r2, r3
     504:	2300      	movs	r3, #0
     506:	f362 030f 	bfi	r3, r2, #0, #16
     50a:	461a      	mov	r2, r3
     50c:	6878      	ldr	r0, [r7, #4]
     50e:	f000 f859 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     512:	bf00      	nop
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	bd80      	pop	{r7, pc}
     51a:	bf00      	nop
     51c:	00008254 	.word	0x00008254

00000520 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
     528:	460b      	mov	r3, r1
     52a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     52c:	4b08      	ldr	r3, [pc, #32]	; (550 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     52e:	78f9      	ldrb	r1, [r7, #3]
     530:	781a      	ldrb	r2, [r3, #0]
     532:	785b      	ldrb	r3, [r3, #1]
     534:	021b      	lsls	r3, r3, #8
     536:	431a      	orrs	r2, r3
     538:	2300      	movs	r3, #0
     53a:	f362 030f 	bfi	r3, r2, #0, #16
     53e:	461a      	mov	r2, r3
     540:	6878      	ldr	r0, [r7, #4]
     542:	f000 f83f 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     546:	bf00      	nop
     548:	3708      	adds	r7, #8
     54a:	46bd      	mov	sp, r7
     54c:	bd80      	pop	{r7, pc}
     54e:	bf00      	nop
     550:	00008258 	.word	0x00008258

00000554 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     554:	b580      	push	{r7, lr}
     556:	b082      	sub	sp, #8
     558:	af00      	add	r7, sp, #0
     55a:	6078      	str	r0, [r7, #4]
     55c:	460b      	mov	r3, r1
     55e:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     560:	78fb      	ldrb	r3, [r7, #3]
     562:	f083 0301 	eor.w	r3, r3, #1
     566:	b2db      	uxtb	r3, r3
     568:	4619      	mov	r1, r3
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     56c:	781a      	ldrb	r2, [r3, #0]
     56e:	785b      	ldrb	r3, [r3, #1]
     570:	021b      	lsls	r3, r3, #8
     572:	431a      	orrs	r2, r3
     574:	2300      	movs	r3, #0
     576:	f362 030f 	bfi	r3, r2, #0, #16
     57a:	461a      	mov	r2, r3
     57c:	6878      	ldr	r0, [r7, #4]
     57e:	f000 f821 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     582:	bf00      	nop
     584:	3708      	adds	r7, #8
     586:	46bd      	mov	sp, r7
     588:	bd80      	pop	{r7, pc}
     58a:	bf00      	nop
     58c:	0000825c 	.word	0x0000825c

00000590 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
     598:	460b      	mov	r3, r1
     59a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     59c:	78f9      	ldrb	r1, [r7, #3]
     59e:	4b08      	ldr	r3, [pc, #32]	; (5c0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     5a0:	781a      	ldrb	r2, [r3, #0]
     5a2:	785b      	ldrb	r3, [r3, #1]
     5a4:	021b      	lsls	r3, r3, #8
     5a6:	431a      	orrs	r2, r3
     5a8:	2300      	movs	r3, #0
     5aa:	f362 030f 	bfi	r3, r2, #0, #16
     5ae:	461a      	mov	r2, r3
     5b0:	6878      	ldr	r0, [r7, #4]
     5b2:	f000 f807 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     5b6:	bf00      	nop
     5b8:	3708      	adds	r7, #8
     5ba:	46bd      	mov	sp, r7
     5bc:	bd80      	pop	{r7, pc}
     5be:	bf00      	nop
     5c0:	00008260 	.word	0x00008260

000005c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c6:	b087      	sub	sp, #28
     5c8:	af00      	add	r7, sp, #0
     5ca:	60f8      	str	r0, [r7, #12]
     5cc:	460b      	mov	r3, r1
     5ce:	80ba      	strh	r2, [r7, #4]
     5d0:	72fb      	strb	r3, [r7, #11]
     5d2:	68fb      	ldr	r3, [r7, #12]
     5d4:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     5d6:	4b19      	ldr	r3, [pc, #100]	; (63c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     5d8:	681c      	ldr	r4, [r3, #0]
     5da:	693b      	ldr	r3, [r7, #16]
     5dc:	4618      	mov	r0, r3
     5de:	f7ff ff4b 	bl	478 <sjsu::Pin::GetPort() const>
     5e2:	4603      	mov	r3, r0
     5e4:	461d      	mov	r5, r3
     5e6:	693b      	ldr	r3, [r7, #16]
     5e8:	4618      	mov	r0, r3
     5ea:	f7ff ff51 	bl	490 <sjsu::Pin::GetPin() const>
     5ee:	4603      	mov	r3, r0
     5f0:	461a      	mov	r2, r3
     5f2:	016b      	lsls	r3, r5, #5
     5f4:	4413      	add	r3, r2
     5f6:	009b      	lsls	r3, r3, #2
     5f8:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	7af9      	ldrb	r1, [r7, #11]
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	4618      	mov	r0, r3
     602:	f001 fce3 	bl	1fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     606:	4605      	mov	r5, r0
     608:	68fb      	ldr	r3, [r7, #12]
     60a:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     60c:	4b0b      	ldr	r3, [pc, #44]	; (63c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     60e:	681c      	ldr	r4, [r3, #0]
     610:	697b      	ldr	r3, [r7, #20]
     612:	4618      	mov	r0, r3
     614:	f7ff ff30 	bl	478 <sjsu::Pin::GetPort() const>
     618:	4603      	mov	r3, r0
     61a:	461e      	mov	r6, r3
     61c:	697b      	ldr	r3, [r7, #20]
     61e:	4618      	mov	r0, r3
     620:	f7ff ff36 	bl	490 <sjsu::Pin::GetPin() const>
     624:	4603      	mov	r3, r0
     626:	461a      	mov	r2, r3
     628:	0173      	lsls	r3, r6, #5
     62a:	4413      	add	r3, r2
     62c:	009b      	lsls	r3, r3, #2
     62e:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     630:	601d      	str	r5, [r3, #0]
  }
     632:	bf00      	nop
     634:	371c      	adds	r7, #28
     636:	46bd      	mov	sp, r7
     638:	bdf0      	pop	{r4, r5, r6, r7, pc}
     63a:	bf00      	nop
     63c:	10000d20 	.word	0x10000d20

00000640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	{ return __r; }
     648:	687b      	ldr	r3, [r7, #4]
     64a:	e9d3 2300 	ldrd	r2, r3, [r3]
     64e:	4610      	mov	r0, r2
     650:	4619      	mov	r1, r3
     652:	370c      	adds	r7, #12
     654:	46bd      	mov	sp, r7
     656:	f85d 7b04 	ldr.w	r7, [sp], #4
     65a:	4770      	bx	lr

0000065c <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      }

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
     65c:	b5b0      	push	{r4, r5, r7, lr}
     65e:	b086      	sub	sp, #24
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
     664:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
     666:	687b      	ldr	r3, [r7, #4]
     668:	e9d3 2300 	ldrd	r2, r3, [r3]
     66c:	e9c7 2302 	strd	r2, r3, [r7, #8]
     670:	f107 0308 	add.w	r3, r7, #8
     674:	4618      	mov	r0, r3
     676:	f7ff ffe3 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     67a:	4604      	mov	r4, r0
     67c:	460d      	mov	r5, r1
     67e:	683b      	ldr	r3, [r7, #0]
     680:	e9d3 2300 	ldrd	r2, r3, [r3]
     684:	e9c7 2304 	strd	r2, r3, [r7, #16]
     688:	f107 0310 	add.w	r3, r7, #16
     68c:	4618      	mov	r0, r3
     68e:	f7ff ffd7 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     692:	4602      	mov	r2, r0
     694:	460b      	mov	r3, r1
     696:	4294      	cmp	r4, r2
     698:	eb75 0303 	sbcs.w	r3, r5, r3
     69c:	bfb4      	ite	lt
     69e:	2301      	movlt	r3, #1
     6a0:	2300      	movge	r3, #0
     6a2:	b2db      	uxtb	r3, r3
      }
     6a4:	4618      	mov	r0, r3
     6a6:	3718      	adds	r7, #24
     6a8:	46bd      	mov	sp, r7
     6aa:	bdb0      	pop	{r4, r5, r7, pc}

000006ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     6ac:	b480      	push	{r7}
     6ae:	b083      	sub	sp, #12
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
     6b4:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     6b6:	683b      	ldr	r3, [r7, #0]
     6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
     6bc:	6879      	ldr	r1, [r7, #4]
     6be:	e9c1 2300 	strd	r2, r3, [r1]
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	4618      	mov	r0, r3
     6c6:	370c      	adds	r7, #12
     6c8:	46bd      	mov	sp, r7
     6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ce:	4770      	bx	lr

000006d0 <units::literals::operator"" _MHz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
     6d0:	b580      	push	{r7, lr}
     6d2:	b084      	sub	sp, #16
     6d4:	af00      	add	r7, sp, #0
     6d6:	e9c7 0100 	strd	r0, r1, [r7]
     6da:	e9d7 0100 	ldrd	r0, r1, [r7]
     6de:	f006 fbb9 	bl	6e54 <__aeabi_ul2f>
     6e2:	4602      	mov	r2, r0
     6e4:	f107 030c 	add.w	r3, r7, #12
     6e8:	ee00 2a10 	vmov	s0, r2
     6ec:	4618      	mov	r0, r3
     6ee:	f000 f805 	bl	6fc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
     6f2:	68fb      	ldr	r3, [r7, #12]
     6f4:	4618      	mov	r0, r3
     6f6:	3710      	adds	r7, #16
     6f8:	46bd      	mov	sp, r7
     6fa:	bd80      	pop	{r7, pc}

000006fc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]
     704:	ed87 0a00 	vstr	s0, [r7]
     708:	687b      	ldr	r3, [r7, #4]
     70a:	463a      	mov	r2, r7
     70c:	4611      	mov	r1, r2
     70e:	4618      	mov	r0, r3
     710:	f000 f805 	bl	71e <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     714:	687b      	ldr	r3, [r7, #4]
     716:	4618      	mov	r0, r3
     718:	3708      	adds	r7, #8
     71a:	46bd      	mov	sp, r7
     71c:	bd80      	pop	{r7, pc}

0000071e <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
     71e:	b480      	push	{r7}
     720:	b083      	sub	sp, #12
     722:	af00      	add	r7, sp, #0
     724:	6078      	str	r0, [r7, #4]
     726:	6039      	str	r1, [r7, #0]
     728:	683b      	ldr	r3, [r7, #0]
     72a:	681a      	ldr	r2, [r3, #0]
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	601a      	str	r2, [r3, #0]
     730:	687b      	ldr	r3, [r7, #4]
     732:	4618      	mov	r0, r3
     734:	370c      	adds	r7, #12
     736:	46bd      	mov	sp, r7
     738:	f85d 7b04 	ldr.w	r7, [sp], #4
     73c:	4770      	bx	lr

0000073e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
     73e:	b580      	push	{r7, lr}
     740:	b082      	sub	sp, #8
     742:	af00      	add	r7, sp, #0
     744:	6078      	str	r0, [r7, #4]
     746:	ed87 0a00 	vstr	s0, [r7]
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	463a      	mov	r2, r7
     74e:	4611      	mov	r1, r2
     750:	4618      	mov	r0, r3
     752:	f7ff ffe4 	bl	71e <units::linear_scale<float>::linear_scale<>(float const&)>
		}
     756:	687b      	ldr	r3, [r7, #4]
     758:	4618      	mov	r0, r3
     75a:	3708      	adds	r7, #8
     75c:	46bd      	mov	sp, r7
     75e:	bd80      	pop	{r7, pc}

00000760 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
     760:	b580      	push	{r7, lr}
     762:	b086      	sub	sp, #24
     764:	af00      	add	r7, sp, #0
     766:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
     768:	6878      	ldr	r0, [r7, #4]
     76a:	f000 f807 	bl	77c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
     76e:	eef0 7a40 	vmov.f32	s15, s0
	}
     772:	eeb0 0a67 	vmov.f32	s0, s15
     776:	3718      	adds	r7, #24
     778:	46bd      	mov	sp, r7
     77a:	bd80      	pop	{r7, pc}

0000077c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
     77c:	b480      	push	{r7}
     77e:	b085      	sub	sp, #20
     780:	af00      	add	r7, sp, #0
     782:	60f8      	str	r0, [r7, #12]
     784:	7239      	strb	r1, [r7, #8]
     786:	713a      	strb	r2, [r7, #4]
     788:	703b      	strb	r3, [r7, #0]
			return value;
     78a:	68fb      	ldr	r3, [r7, #12]
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	ee07 3a90 	vmov	s15, r3
		}
     792:	eeb0 0a67 	vmov.f32	s0, s15
     796:	3714      	adds	r7, #20
     798:	46bd      	mov	sp, r7
     79a:	f85d 7b04 	ldr.w	r7, [sp], #4
     79e:	4770      	bx	lr

000007a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     7a0:	b480      	push	{r7}
     7a2:	b083      	sub	sp, #12
     7a4:	af00      	add	r7, sp, #0
     7a6:	6078      	str	r0, [r7, #4]
     7a8:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     7aa:	683b      	ldr	r3, [r7, #0]
     7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
     7b0:	6879      	ldr	r1, [r7, #4]
     7b2:	e9c1 2300 	strd	r2, r3, [r1]
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	4618      	mov	r0, r3
     7ba:	370c      	adds	r7, #12
     7bc:	46bd      	mov	sp, r7
     7be:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c2:	4770      	bx	lr

000007c4 <sjsu::SystemController::GetPlatformController()>:
  static void SetPlatformController(SystemController * system_controller)
  {
    platform_system_controller = system_controller;
  }
  /// Retrieve a reference of the platforms system controller
  static sjsu::SystemController & GetPlatformController()
     7c4:	b480      	push	{r7}
     7c6:	af00      	add	r7, sp, #0
  {
    return *platform_system_controller;
     7c8:	4b03      	ldr	r3, [pc, #12]	; (7d8 <sjsu::SystemController::GetPlatformController()+0x14>)
     7ca:	681b      	ldr	r3, [r3, #0]
  }
     7cc:	4618      	mov	r0, r3
     7ce:	46bd      	mov	sp, r7
     7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7d4:	4770      	bx	lr
     7d6:	bf00      	nop
     7d8:	10000d24 	.word	0x10000d24

000007dc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
     7dc:	b580      	push	{r7, lr}
     7de:	b086      	sub	sp, #24
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
     7e4:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	681b      	ldr	r3, [r3, #0]
     7ea:	3308      	adds	r3, #8
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	6839      	ldr	r1, [r7, #0]
     7f0:	6878      	ldr	r0, [r7, #4]
     7f2:	4798      	blx	r3
     7f4:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
     7f6:	f04f 0300 	mov.w	r3, #0
     7fa:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
     7fc:	697b      	ldr	r3, [r7, #20]
     7fe:	2b00      	cmp	r3, #0
     800:	d00f      	beq.n	822 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
     802:	687b      	ldr	r3, [r7, #4]
     804:	681b      	ldr	r3, [r3, #0]
     806:	330c      	adds	r3, #12
     808:	681b      	ldr	r3, [r3, #0]
     80a:	6878      	ldr	r0, [r7, #4]
     80c:	4798      	blx	r3
     80e:	4603      	mov	r3, r0
     810:	613b      	str	r3, [r7, #16]
     812:	f107 0310 	add.w	r3, r7, #16
     816:	6979      	ldr	r1, [r7, #20]
     818:	4618      	mov	r0, r3
     81a:	f001 fbea 	bl	1ff2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
     81e:	4603      	mov	r3, r0
     820:	60fb      	str	r3, [r7, #12]
    }
    return result;
     822:	68fb      	ldr	r3, [r7, #12]
  }
     824:	4618      	mov	r0, r3
     826:	3718      	adds	r7, #24
     828:	46bd      	mov	sp, r7
     82a:	bd80      	pop	{r7, pc}

0000082c <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>:
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
     82c:	b580      	push	{r7, lr}
     82e:	b082      	sub	sp, #8
     830:	af00      	add	r7, sp, #0
     832:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
     834:	687b      	ldr	r3, [r7, #4]
     836:	4618      	mov	r0, r3
     838:	f000 f805 	bl	846 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>
     83c:	bf00      	nop
     83e:	6878      	ldr	r0, [r7, #4]
     840:	3708      	adds	r7, #8
     842:	46bd      	mov	sp, r7
     844:	bd80      	pop	{r7, pc}

00000846 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>:
      constexpr _Dur __check_overflow()
     846:	b580      	push	{r7, lr}
     848:	b084      	sub	sp, #16
     84a:	af00      	add	r7, sp, #0
     84c:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
     84e:	f04f 0200 	mov.w	r2, #0
     852:	f04f 0300 	mov.w	r3, #0
     856:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
     85a:	f107 0308 	add.w	r3, r7, #8
     85e:	4619      	mov	r1, r3
     860:	6878      	ldr	r0, [r7, #4]
     862:	f7ff ff23 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
     866:	6878      	ldr	r0, [r7, #4]
     868:	3710      	adds	r7, #16
     86a:	46bd      	mov	sp, r7
     86c:	bd80      	pop	{r7, pc}

0000086e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
	operator+=(const duration& __d)
     86e:	b5b0      	push	{r4, r5, r7, lr}
     870:	b082      	sub	sp, #8
     872:	af00      	add	r7, sp, #0
     874:	6078      	str	r0, [r7, #4]
     876:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
     878:	6838      	ldr	r0, [r7, #0]
     87a:	f7ff fee1 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     87e:	687b      	ldr	r3, [r7, #4]
     880:	e9d3 2300 	ldrd	r2, r3, [r3]
     884:	1884      	adds	r4, r0, r2
     886:	eb41 0503 	adc.w	r5, r1, r3
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	e9c3 4500 	strd	r4, r5, [r3]
	  return *this;
     890:	687b      	ldr	r3, [r7, #4]
	}
     892:	4618      	mov	r0, r3
     894:	3708      	adds	r7, #8
     896:	46bd      	mov	sp, r7
     898:	bdb0      	pop	{r4, r5, r7, pc}
     89a:	Address 0x000000000000089a is out of bounds.


0000089c <sjsu::DefaultUptime()>:
/// means to keep time. It should not be used in production.
///
/// @return the current number of fake uptime nanoseconds that increments each
/// time this function is called.
inline std::chrono::nanoseconds DefaultUptime()
{
     89c:	b580      	push	{r7, lr}
     89e:	b086      	sub	sp, #24
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
  static std::chrono::nanoseconds default_uptime = 0ns;
  default_uptime += 1us;
     8a4:	f107 0310 	add.w	r3, r7, #16
     8a8:	4618      	mov	r0, r3
     8aa:	f001 fbc0 	bl	202e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>
     8ae:	f107 0210 	add.w	r2, r7, #16
     8b2:	f107 0308 	add.w	r3, r7, #8
     8b6:	4611      	mov	r1, r2
     8b8:	4618      	mov	r0, r3
     8ba:	f001 fbc5 	bl	2048 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     8be:	f107 0308 	add.w	r3, r7, #8
     8c2:	4619      	mov	r1, r3
     8c4:	4806      	ldr	r0, [pc, #24]	; (8e0 <sjsu::DefaultUptime()+0x44>)
     8c6:	f7ff ffd2 	bl	86e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  return default_uptime;
     8ca:	6879      	ldr	r1, [r7, #4]
     8cc:	4b04      	ldr	r3, [pc, #16]	; (8e0 <sjsu::DefaultUptime()+0x44>)
     8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
     8d2:	e9c1 2300 	strd	r2, r3, [r1]
}
     8d6:	6878      	ldr	r0, [r7, #4]
     8d8:	3718      	adds	r7, #24
     8da:	46bd      	mov	sp, r7
     8dc:	bd80      	pop	{r7, pc}
     8de:	bf00      	nop
     8e0:	10000d28 	.word	0x10000d28

000008e4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     8e4:	b580      	push	{r7, lr}
     8e6:	b082      	sub	sp, #8
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	4618      	mov	r0, r3
     8f0:	f7ff fd78 	bl	3e4 <std::_Function_base::~_Function_base()>
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	4618      	mov	r0, r3
     8f8:	3708      	adds	r7, #8
     8fa:	46bd      	mov	sp, r7
     8fc:	bd80      	pop	{r7, pc}
     8fe:	Address 0x00000000000008fe is out of bounds.


00000900 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>:
///        return true.
/// @param is_done will be run in a tight loop until it returns true or the
///        timeout time has elapsed.
inline Status Wait(std::chrono::nanoseconds timeout,
                   std::function<bool()> is_done)
{
     900:	b580      	push	{r7, lr}
     902:	b092      	sub	sp, #72	; 0x48
     904:	af00      	add	r7, sp, #0
     906:	e9c7 0104 	strd	r0, r1, [r7, #16]
     90a:	60fa      	str	r2, [r7, #12]
  std::chrono::nanoseconds timeout_time;
  if (timeout == std::chrono::nanoseconds::max())
     90c:	f107 0320 	add.w	r3, r7, #32
     910:	4618      	mov	r0, r3
     912:	f001 fbdd 	bl	20d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>
     916:	f107 0220 	add.w	r2, r7, #32
     91a:	f107 0310 	add.w	r3, r7, #16
     91e:	4611      	mov	r1, r2
     920:	4618      	mov	r0, r3
     922:	f001 fbe9 	bl	20f8 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     926:	4603      	mov	r3, r0
     928:	2b00      	cmp	r3, #0
     92a:	d004      	beq.n	936 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x36>
  {
    // TODO(#983): This is a cheap hack to keep overflows from happening, but
    // what if the system hsa been on for a long period of time and a new
    // timeout overflows? This needs to be handled properly.
    timeout_time = timeout;
     92c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     930:	e9c7 2306 	strd	r2, r3, [r7, #24]
     934:	e023      	b.n	97e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x7e>
  }
  else if (timeout == 0ns)
     936:	f107 0328 	add.w	r3, r7, #40	; 0x28
     93a:	4618      	mov	r0, r3
     93c:	f7ff ff76 	bl	82c <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>
     940:	f107 0228 	add.w	r2, r7, #40	; 0x28
     944:	f107 0310 	add.w	r3, r7, #16
     948:	4611      	mov	r1, r2
     94a:	4618      	mov	r0, r3
     94c:	f001 fbd4 	bl	20f8 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     950:	4603      	mov	r3, r0
     952:	2b00      	cmp	r3, #0
     954:	d001      	beq.n	95a <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x5a>
  {
    return Status::kTimedOut;
     956:	2301      	movs	r3, #1
     958:	e02d      	b.n	9b6 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xb6>
      // this function, we substract 2ns.
      timeout_time = (Uptime() + timeout) - 2us;
    }
    else
    {
      timeout_time = Uptime() + timeout;
     95a:	f107 0330 	add.w	r3, r7, #48	; 0x30
     95e:	4918      	ldr	r1, [pc, #96]	; (9c0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xc0>)
     960:	4618      	mov	r0, r3
     962:	f001 fbf0 	bl	2146 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     966:	463b      	mov	r3, r7
     968:	f107 0210 	add.w	r2, r7, #16
     96c:	f107 0130 	add.w	r1, r7, #48	; 0x30
     970:	4618      	mov	r0, r3
     972:	f001 fc01 	bl	2178 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     976:	e9d7 2300 	ldrd	r2, r3, [r7]
     97a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
  }

  Status status = Status::kTimedOut;
     97e:	2301      	movs	r3, #1
     980:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() <= timeout_time)
     982:	f107 0338 	add.w	r3, r7, #56	; 0x38
     986:	490e      	ldr	r1, [pc, #56]	; (9c0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xc0>)
     988:	4618      	mov	r0, r3
     98a:	f001 fbdc 	bl	2146 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     98e:	f107 0218 	add.w	r2, r7, #24
     992:	f107 0338 	add.w	r3, r7, #56	; 0x38
     996:	4611      	mov	r1, r2
     998:	4618      	mov	r0, r3
     99a:	f001 fc1d 	bl	21d8 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     99e:	4603      	mov	r3, r0
     9a0:	2b00      	cmp	r3, #0
     9a2:	d007      	beq.n	9b4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xb4>
  {
    if (is_done())
     9a4:	68f8      	ldr	r0, [r7, #12]
     9a6:	f001 fc28 	bl	21fa <std::function<bool ()>::operator()() const>
     9aa:	4603      	mov	r3, r0
     9ac:	2b00      	cmp	r3, #0
     9ae:	d0e8      	beq.n	982 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x82>
    {
      status = Status::kSuccess;
     9b0:	2300      	movs	r3, #0
     9b2:	647b      	str	r3, [r7, #68]	; 0x44
      break;
    }
  }
  return status;
     9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     9b6:	4618      	mov	r0, r3
     9b8:	3748      	adds	r7, #72	; 0x48
     9ba:	46bd      	mov	sp, r7
     9bc:	bd80      	pop	{r7, pc}
     9be:	bf00      	nop
     9c0:	10000d30 	.word	0x10000d30

000009c4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>:
///
/// @param timeout - the amount of time to wait.
/// @return always returns Status::kTimedOut
inline Status Wait(std::chrono::nanoseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     9c4:	b480      	push	{r7}
     9c6:	b083      	sub	sp, #12
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
     9cc:	2300      	movs	r3, #0
     9ce:	4618      	mov	r0, r3
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d8:	4770      	bx	lr

000009da <std::function<bool ()>::~function()>:
     9da:	b580      	push	{r7, lr}
     9dc:	b082      	sub	sp, #8
     9de:	af00      	add	r7, sp, #0
     9e0:	6078      	str	r0, [r7, #4]
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	4618      	mov	r0, r3
     9e6:	f7ff fcfd 	bl	3e4 <std::_Function_base::~_Function_base()>
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	4618      	mov	r0, r3
     9ee:	3708      	adds	r7, #8
     9f0:	46bd      	mov	sp, r7
     9f2:	bd80      	pop	{r7, pc}

000009f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:
{
     9f4:	b590      	push	{r4, r7, lr}
     9f6:	b089      	sub	sp, #36	; 0x24
     9f8:	af00      	add	r7, sp, #0
     9fa:	e9c7 0100 	strd	r0, r1, [r7]
  return Wait(timeout, []() -> bool { return false; });
     9fe:	f107 030c 	add.w	r3, r7, #12
     a02:	4611      	mov	r1, r2
     a04:	4618      	mov	r0, r3
     a06:	f001 fc0f 	bl	2228 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>
     a0a:	f107 030c 	add.w	r3, r7, #12
     a0e:	461a      	mov	r2, r3
     a10:	e9d7 0100 	ldrd	r0, r1, [r7]
     a14:	f7ff ff74 	bl	900 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>
     a18:	4604      	mov	r4, r0
     a1a:	f107 030c 	add.w	r3, r7, #12
     a1e:	4618      	mov	r0, r3
     a20:	f7ff ffdb 	bl	9da <std::function<bool ()>::~function()>
     a24:	4623      	mov	r3, r4
}
     a26:	4618      	mov	r0, r3
     a28:	3724      	adds	r7, #36	; 0x24
     a2a:	46bd      	mov	sp, r7
     a2c:	bd90      	pop	{r4, r7, pc}

00000a2e <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:

/// Delay the system for a duration of time
inline void Delay(std::chrono::nanoseconds delay_time)
{
     a2e:	b580      	push	{r7, lr}
     a30:	b082      	sub	sp, #8
     a32:	af00      	add	r7, sp, #0
     a34:	e9c7 0100 	strd	r0, r1, [r7]
  Wait(delay_time);
     a38:	e9d7 0100 	ldrd	r0, r1, [r7]
     a3c:	f7ff ffda 	bl	9f4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
}
     a40:	bf00      	nop
     a42:	3708      	adds	r7, #8
     a44:	46bd      	mov	sp, r7
     a46:	bd80      	pop	{r7, pc}

00000a48 <sjsu::Gpio::Gpio()>:

namespace sjsu
{
/// An abstract interface for General Purpose I/O
/// @ingroup l1_peripheral
class Gpio
     a48:	b480      	push	{r7}
     a4a:	b083      	sub	sp, #12
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
     a50:	4a04      	ldr	r2, [pc, #16]	; (a64 <sjsu::Gpio::Gpio()+0x1c>)
     a52:	687b      	ldr	r3, [r7, #4]
     a54:	601a      	str	r2, [r3, #0]
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	4618      	mov	r0, r3
     a5a:	370c      	adds	r7, #12
     a5c:	46bd      	mov	sp, r7
     a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
     a62:	4770      	bx	lr
     a64:	00008738 	.word	0x00008738

00000a68 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>:
  }
  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin)
     a68:	b590      	push	{r4, r7, lr}
     a6a:	b083      	sub	sp, #12
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]
     a70:	460b      	mov	r3, r1
     a72:	70fb      	strb	r3, [r7, #3]
     a74:	4613      	mov	r3, r2
     a76:	70bb      	strb	r3, [r7, #2]
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	78ba      	ldrb	r2, [r7, #2]
     a7c:	78f9      	ldrb	r1, [r7, #3]
     a7e:	4618      	mov	r0, r3
     a80:	f7ff fce0 	bl	444 <sjsu::Pin::Pin(unsigned char, unsigned char)>
     a84:	4a07      	ldr	r2, [pc, #28]	; (aa4 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)+0x3c>)
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	601a      	str	r2, [r3, #0]
     a8a:	687c      	ldr	r4, [r7, #4]
     a8c:	78bb      	ldrb	r3, [r7, #2]
     a8e:	4618      	mov	r0, r3
     a90:	f000 f8ac 	bl	bec <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>
     a94:	4603      	mov	r3, r0
     a96:	80e3      	strh	r3, [r4, #6]
  {
  }
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	4618      	mov	r0, r3
     a9c:	370c      	adds	r7, #12
     a9e:	46bd      	mov	sp, r7
     aa0:	bd90      	pop	{r4, r7, pc}
     aa2:	bf00      	nop
     aa4:	0000871c 	.word	0x0000871c

00000aa8 <sjsu::lpc17xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     aa8:	b480      	push	{r7}
     aaa:	b083      	sub	sp, #12
     aac:	af00      	add	r7, sp, #0
     aae:	6078      	str	r0, [r7, #4]
     ab0:	bf00      	nop
     ab2:	370c      	adds	r7, #12
     ab4:	46bd      	mov	sp, r7
     ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
     aba:	4770      	bx	lr

00000abc <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     abc:	b590      	push	{r4, r7, lr}
     abe:	b085      	sub	sp, #20
     ac0:	af00      	add	r7, sp, #0
     ac2:	6078      	str	r0, [r7, #4]
     ac4:	460b      	mov	r3, r1
     ac6:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
     ac8:	6878      	ldr	r0, [r7, #4]
     aca:	f000 f8aa 	bl	c22 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     ace:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     ad0:	4b0b      	ldr	r3, [pc, #44]	; (b00 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     ad2:	681b      	ldr	r3, [r3, #0]
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
     ada:	4b09      	ldr	r3, [pc, #36]	; (b00 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     adc:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	78f9      	ldrb	r1, [r7, #3]
     ae2:	88da      	ldrh	r2, [r3, #6]
     ae4:	2300      	movs	r3, #0
     ae6:	f362 030f 	bfi	r3, r2, #0, #16
     aea:	461a      	mov	r2, r3
     aec:	f001 fa6e 	bl	1fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     af0:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
     af2:	68fb      	ldr	r3, [r7, #12]
     af4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
     af8:	bf00      	nop
     afa:	3714      	adds	r7, #20
     afc:	46bd      	mov	sp, r7
     afe:	bd90      	pop	{r4, r7, pc}
     b00:	10000d40 	.word	0x10000d40

00000b04 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
     b04:	b480      	push	{r7}
     b06:	b083      	sub	sp, #12
     b08:	af00      	add	r7, sp, #0
     b0a:	4603      	mov	r3, r0
     b0c:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
     b0e:	79fb      	ldrb	r3, [r7, #7]
}
     b10:	4618      	mov	r0, r3
     b12:	370c      	adds	r7, #12
     b14:	46bd      	mov	sp, r7
     b16:	f85d 7b04 	ldr.w	r7, [sp], #4
     b1a:	4770      	bx	lr

00000b1c <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     b1c:	b5b0      	push	{r4, r5, r7, lr}
     b1e:	b084      	sub	sp, #16
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	460b      	mov	r3, r1
     b26:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
     b28:	6878      	ldr	r0, [r7, #4]
     b2a:	f000 f87a 	bl	c22 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     b2e:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
     b30:	4b0f      	ldr	r3, [pc, #60]	; (b70 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	68fa      	ldr	r2, [r7, #12]
     b36:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
     b3a:	78fb      	ldrb	r3, [r7, #3]
     b3c:	4618      	mov	r0, r3
     b3e:	f7ff ffe1 	bl	b04 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
     b42:	4603      	mov	r3, r0
     b44:	461a      	mov	r2, r3
     b46:	4b0b      	ldr	r3, [pc, #44]	; (b74 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
     b48:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
     b4a:	4b09      	ldr	r3, [pc, #36]	; (b70 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     b4c:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	88da      	ldrh	r2, [r3, #6]
     b52:	2300      	movs	r3, #0
     b54:	f362 030f 	bfi	r3, r2, #0, #16
     b58:	461a      	mov	r2, r3
     b5a:	4628      	mov	r0, r5
     b5c:	f001 fa36 	bl	1fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     b60:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
     b62:	68fb      	ldr	r3, [r7, #12]
     b64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
     b68:	bf00      	nop
     b6a:	3710      	adds	r7, #16
     b6c:	46bd      	mov	sp, r7
     b6e:	bdb0      	pop	{r4, r5, r7, pc}
     b70:	10000d44 	.word	0x10000d44
     b74:	00008264 	.word	0x00008264

00000b78 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
     b78:	b580      	push	{r7, lr}
     b7a:	b082      	sub	sp, #8
     b7c:	af00      	add	r7, sp, #0
     b7e:	6078      	str	r0, [r7, #4]
     b80:	460b      	mov	r3, r1
     b82:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
     b84:	2357      	movs	r3, #87	; 0x57
     b86:	4a04      	ldr	r2, [pc, #16]	; (b98 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
     b88:	4904      	ldr	r1, [pc, #16]	; (b9c <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
     b8a:	4805      	ldr	r0, [pc, #20]	; (ba0 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
     b8c:	f003 ffa4 	bl	4ad8 <printf>
  }
     b90:	bf00      	nop
     b92:	3708      	adds	r7, #8
     b94:	46bd      	mov	sp, r7
     b96:	bd80      	pop	{r7, pc}
     b98:	00008270 	.word	0x00008270
     b9c:	00008268 	.word	0x00008268
     ba0:	000082b0 	.word	0x000082b0

00000ba4 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     ba4:	b5b0      	push	{r4, r5, r7, lr}
     ba6:	b084      	sub	sp, #16
     ba8:	af00      	add	r7, sp, #0
     baa:	6078      	str	r0, [r7, #4]
     bac:	460b      	mov	r3, r1
     bae:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     bb0:	4b0d      	ldr	r3, [pc, #52]	; (be8 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	687a      	ldr	r2, [r7, #4]
     bb6:	7912      	ldrb	r2, [r2, #4]
     bb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
     bbc:	687b      	ldr	r3, [r7, #4]
     bbe:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     bc0:	733b      	strb	r3, [r7, #12]
     bc2:	2301      	movs	r3, #1
     bc4:	737b      	strb	r3, [r7, #13]
     bc6:	4b08      	ldr	r3, [pc, #32]	; (be8 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     bc8:	681c      	ldr	r4, [r3, #0]
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	791b      	ldrb	r3, [r3, #4]
     bce:	461d      	mov	r5, r3
     bd0:	78fb      	ldrb	r3, [r7, #3]
     bd2:	68fa      	ldr	r2, [r7, #12]
     bd4:	4619      	mov	r1, r3
     bd6:	f001 fb51 	bl	227c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
     bda:	4603      	mov	r3, r0
     bdc:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
     be0:	bf00      	nop
     be2:	3710      	adds	r7, #16
     be4:	46bd      	mov	sp, r7
     be6:	bdb0      	pop	{r4, r5, r7, pc}
     be8:	10000d48 	.word	0x10000d48

00000bec <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>:

 private:
  /// Utility function for generating bitmasks for specific pins.
  static constexpr bit::Mask GetPinsBitmask(uint8_t pin)
     bec:	b480      	push	{r7}
     bee:	b085      	sub	sp, #20
     bf0:	af00      	add	r7, sp, #0
     bf2:	4603      	mov	r3, r0
     bf4:	71fb      	strb	r3, [r7, #7]
  {
    return {
      .position = static_cast<uint8_t>((pin * 2) % kNumberOfPins),
     bf6:	79fb      	ldrb	r3, [r7, #7]
     bf8:	005b      	lsls	r3, r3, #1
     bfa:	b2db      	uxtb	r3, r3
     bfc:	f003 031e 	and.w	r3, r3, #30
     c00:	b2db      	uxtb	r3, r3
      .width    = 2,
    };
     c02:	733b      	strb	r3, [r7, #12]
     c04:	2302      	movs	r3, #2
     c06:	737b      	strb	r3, [r7, #13]
     c08:	2300      	movs	r3, #0
     c0a:	7b3a      	ldrb	r2, [r7, #12]
     c0c:	f362 0307 	bfi	r3, r2, #0, #8
     c10:	7b7a      	ldrb	r2, [r7, #13]
     c12:	f362 230f 	bfi	r3, r2, #8, #8
  }
     c16:	4618      	mov	r0, r3
     c18:	3714      	adds	r7, #20
     c1a:	46bd      	mov	sp, r7
     c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c20:	4770      	bx	lr

00000c22 <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
     c22:	b480      	push	{r7}
     c24:	b085      	sub	sp, #20
     c26:	af00      	add	r7, sp, #0
     c28:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	795b      	ldrb	r3, [r3, #5]
     c2e:	2b0f      	cmp	r3, #15
     c30:	d901      	bls.n	c36 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
     c32:	2301      	movs	r3, #1
     c34:	e000      	b.n	c38 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
     c36:	2300      	movs	r3, #0
     c38:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	791b      	ldrb	r3, [r3, #4]
     c3e:	005b      	lsls	r3, r3, #1
     c40:	461a      	mov	r2, r3
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	4413      	add	r3, r2
  }
     c46:	4618      	mov	r0, r3
     c48:	3714      	adds	r7, #20
     c4a:	46bd      	mov	sp, r7
     c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c50:	4770      	bx	lr
     c52:	Address 0x0000000000000c52 is out of bounds.


00000c54 <sjsu::lpc40xx::Gpio::GpioRegister(int)>:
  /// @param port_index - which gpio port to get a pointer of.
  /// @return returns a pointer to a LPC_GPIO_TypeDef pointer internal to this
  /// function. The purpose for the double pointer nature is to allow test code
  /// to re-assign the lookup table contents simply by running this function and
  /// assigning the returned result to what ever block of memory you desire.
  static lpc40xx::LPC_GPIO_TypeDef ** GpioRegister(int port_index)
     c54:	b480      	push	{r7}
     c56:	b083      	sub	sp, #12
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[] = {
        lpc40xx::LPC_GPIO0, lpc40xx::LPC_GPIO1, lpc40xx::LPC_GPIO2,
        lpc40xx::LPC_GPIO3, lpc40xx::LPC_GPIO4, lpc40xx::LPC_GPIO5,
      };
     c5c:	4b12      	ldr	r3, [pc, #72]	; (ca8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     c5e:	681b      	ldr	r3, [r3, #0]
     c60:	f003 0301 	and.w	r3, r3, #1
     c64:	2b00      	cmp	r3, #0
     c66:	d114      	bne.n	c92 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x3e>
     c68:	4a10      	ldr	r2, [pc, #64]	; (cac <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x58>)
     c6a:	4b11      	ldr	r3, [pc, #68]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c6c:	601a      	str	r2, [r3, #0]
     c6e:	4a11      	ldr	r2, [pc, #68]	; (cb4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x60>)
     c70:	4b0f      	ldr	r3, [pc, #60]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c72:	605a      	str	r2, [r3, #4]
     c74:	4a10      	ldr	r2, [pc, #64]	; (cb8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x64>)
     c76:	4b0e      	ldr	r3, [pc, #56]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c78:	609a      	str	r2, [r3, #8]
     c7a:	4a10      	ldr	r2, [pc, #64]	; (cbc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x68>)
     c7c:	4b0c      	ldr	r3, [pc, #48]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c7e:	60da      	str	r2, [r3, #12]
     c80:	4a0f      	ldr	r2, [pc, #60]	; (cc0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x6c>)
     c82:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c84:	611a      	str	r2, [r3, #16]
     c86:	4a0f      	ldr	r2, [pc, #60]	; (cc4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x70>)
     c88:	4b09      	ldr	r3, [pc, #36]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c8a:	615a      	str	r2, [r3, #20]
     c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     c8e:	2201      	movs	r2, #1
     c90:	601a      	str	r2, [r3, #0]
      return &port[port_index];
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	009b      	lsls	r3, r3, #2
     c96:	4a06      	ldr	r2, [pc, #24]	; (cb0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     c98:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[6];
      return &port[port_index];
    }
  }
     c9a:	4618      	mov	r0, r3
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca4:	4770      	bx	lr
     ca6:	bf00      	nop
     ca8:	10001164 	.word	0x10001164
     cac:	20098000 	.word	0x20098000
     cb0:	1000114c 	.word	0x1000114c
     cb4:	20098020 	.word	0x20098020
     cb8:	20098040 	.word	0x20098040
     cbc:	20098060 	.word	0x20098060
     cc0:	20098080 	.word	0x20098080
     cc4:	200980a0 	.word	0x200980a0

00000cc8 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>:
  ///
  /// @param interrupt_index - which interrupt port you want to work with. Only
  ///        0 and 1 are valid.
  /// @return returns a pointer to a GpioInterruptRegisterMap_t object internal
  /// to this function.
  static GpioInterruptRegisterMap_t * InterruptRegister(int interrupt_index)
     cc8:	b480      	push	{r7}
     cca:	b083      	sub	sp, #12
     ccc:	af00      	add	r7, sp, #0
     cce:	6078      	str	r0, [r7, #4]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
        },
      };
     cd0:	4b1a      	ldr	r3, [pc, #104]	; (d3c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	f003 0301 	and.w	r3, r3, #1
     cd8:	2b00      	cmp	r3, #0
     cda:	d122      	bne.n	d22 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x5a>
     cdc:	4b18      	ldr	r3, [pc, #96]	; (d40 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO0IntStatR),
     cde:	4a19      	ldr	r2, [pc, #100]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     ce0:	3204      	adds	r2, #4
      };
     ce2:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO0IntStatF),
     ce4:	4a17      	ldr	r2, [pc, #92]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     ce6:	3208      	adds	r2, #8
      };
     ce8:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO0IntClr),
     cea:	4a16      	ldr	r2, [pc, #88]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     cec:	320c      	adds	r2, #12
      };
     cee:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO0IntEnR),
     cf0:	4a14      	ldr	r2, [pc, #80]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     cf2:	3210      	adds	r2, #16
      };
     cf4:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO0IntEnF),
     cf6:	4a13      	ldr	r2, [pc, #76]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     cf8:	3214      	adds	r2, #20
      };
     cfa:	611a      	str	r2, [r3, #16]
     cfc:	3314      	adds	r3, #20
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO2IntStatR),
     cfe:	4a11      	ldr	r2, [pc, #68]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     d00:	3224      	adds	r2, #36	; 0x24
      };
     d02:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
     d04:	4a0f      	ldr	r2, [pc, #60]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     d06:	3228      	adds	r2, #40	; 0x28
      };
     d08:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
     d0a:	4a0e      	ldr	r2, [pc, #56]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     d0c:	322c      	adds	r2, #44	; 0x2c
      };
     d0e:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
     d10:	4a0c      	ldr	r2, [pc, #48]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     d12:	3230      	adds	r2, #48	; 0x30
      };
     d14:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
     d16:	4a0b      	ldr	r2, [pc, #44]	; (d44 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     d18:	3234      	adds	r2, #52	; 0x34
      };
     d1a:	611a      	str	r2, [r3, #16]
     d1c:	4b07      	ldr	r3, [pc, #28]	; (d3c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     d1e:	2201      	movs	r2, #1
     d20:	601a      	str	r2, [r3, #0]
      return &interrupt[interrupt_index];
     d22:	687a      	ldr	r2, [r7, #4]
     d24:	4613      	mov	r3, r2
     d26:	009b      	lsls	r3, r3, #2
     d28:	4413      	add	r3, r2
     d2a:	009b      	lsls	r3, r3, #2
     d2c:	4a04      	ldr	r2, [pc, #16]	; (d40 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
     d2e:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static GpioInterruptRegisterMap_t interrupt[kInterruptPorts];
      return &interrupt[interrupt_index];
    }
  }
     d30:	4618      	mov	r0, r3
     d32:	370c      	adds	r7, #12
     d34:	46bd      	mov	sp, r7
     d36:	f85d 7b04 	ldr.w	r7, [sp], #4
     d3a:	4770      	bx	lr
     d3c:	10001190 	.word	0x10001190
     d40:	10001168 	.word	0x10001168
     d44:	40028080 	.word	0x40028080

00000d48 <sjsu::lpc40xx::Gpio::InterruptStatus()>:

  /// @return a pointer to the interrupt status register based on the current
  /// building platform.
  static volatile uint32_t * InterruptStatus()
     d48:	b480      	push	{r7}
     d4a:	af00      	add	r7, sp, #0
  {
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      return &lpc40xx::LPC_GPIOINT->IntStatus;
     d4c:	4b02      	ldr	r3, [pc, #8]	; (d58 <sjsu::lpc40xx::Gpio::InterruptStatus()+0x10>)
    else  // Used for unit testing
    {
      static volatile uint32_t status;
      return &status;
    }
  }
     d4e:	4618      	mov	r0, r3
     d50:	46bd      	mov	sp, r7
     d52:	f85d 7b04 	ldr.w	r7, [sp], #4
     d56:	4770      	bx	lr
     d58:	40028080 	.word	0x40028080

00000d5c <sjsu::lpc40xx::Gpio::InterruptHandler()>:

  /// The gpio interrupt handler that calls the attached interrupt callbacks.
  static void InterruptHandler()
     d5c:	b580      	push	{r7, lr}
     d5e:	b084      	sub	sp, #16
     d60:	af00      	add	r7, sp, #0
  {
    int triggered_port;
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      triggered_port = *InterruptStatus() >> 2;
     d62:	f7ff fff1 	bl	d48 <sjsu::lpc40xx::Gpio::InterruptStatus()>
     d66:	4603      	mov	r3, r0
     d68:	681b      	ldr	r3, [r3, #0]
     d6a:	089b      	lsrs	r3, r3, #2
     d6c:	60fb      	str	r3, [r7, #12]
    else
    {
      triggered_port = *InterruptStatus() >> 2;
    }

    auto * interrupt  = InterruptRegister(triggered_port);
     d6e:	68f8      	ldr	r0, [r7, #12]
     d70:	f7ff ffaa 	bl	cc8 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     d74:	60b8      	str	r0, [r7, #8]
    int status        = *interrupt->rising_status | *interrupt->falling_status;
     d76:	68bb      	ldr	r3, [r7, #8]
     d78:	681b      	ldr	r3, [r3, #0]
     d7a:	681a      	ldr	r2, [r3, #0]
     d7c:	68bb      	ldr	r3, [r7, #8]
     d7e:	685b      	ldr	r3, [r3, #4]
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	4313      	orrs	r3, r2
     d84:	607b      	str	r3, [r7, #4]
    int triggered_pin = __builtin_ctz(status);
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	fa93 f3a3 	rbit	r3, r3
     d8c:	fab3 f383 	clz	r3, r3
     d90:	603b      	str	r3, [r7, #0]

    handlers[triggered_port][triggered_pin]();
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	015a      	lsls	r2, r3, #5
     d96:	683b      	ldr	r3, [r7, #0]
     d98:	4413      	add	r3, r2
     d9a:	011b      	lsls	r3, r3, #4
     d9c:	4a0a      	ldr	r2, [pc, #40]	; (dc8 <sjsu::lpc40xx::Gpio::InterruptHandler()+0x6c>)
     d9e:	4413      	add	r3, r2
     da0:	4618      	mov	r0, r3
     da2:	f001 fa8b 	bl	22bc <std::function<void ()>::operator()() const>
    *interrupt->clear |= (1 << triggered_pin);
     da6:	68bb      	ldr	r3, [r7, #8]
     da8:	689b      	ldr	r3, [r3, #8]
     daa:	681a      	ldr	r2, [r3, #0]
     dac:	2101      	movs	r1, #1
     dae:	683b      	ldr	r3, [r7, #0]
     db0:	fa01 f303 	lsl.w	r3, r1, r3
     db4:	4619      	mov	r1, r3
     db6:	68bb      	ldr	r3, [r7, #8]
     db8:	689b      	ldr	r3, [r3, #8]
     dba:	430a      	orrs	r2, r1
     dbc:	601a      	str	r2, [r3, #0]
  }
     dbe:	bf00      	nop
     dc0:	3710      	adds	r7, #16
     dc2:	46bd      	mov	sp, r7
     dc4:	bd80      	pop	{r7, pc}
     dc6:	bf00      	nop
     dc8:	10000d4c 	.word	0x10000d4c

00000dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>:
  /// For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  ///
  /// @param port_number - port number
  /// @param pin_number - pin number
  /// @param pin - pointer to an sjsu::Pin, keep as nullptr to ignore this a
  constexpr Gpio(uint8_t port_number,
     dcc:	b580      	push	{r7, lr}
     dce:	b084      	sub	sp, #16
     dd0:	af00      	add	r7, sp, #0
     dd2:	60f8      	str	r0, [r7, #12]
     dd4:	607b      	str	r3, [r7, #4]
     dd6:	460b      	mov	r3, r1
     dd8:	72fb      	strb	r3, [r7, #11]
     dda:	4613      	mov	r3, r2
     ddc:	72bb      	strb	r3, [r7, #10]
      : kLpc17xxPin(port_number, pin_number),
        kLpc40xxPin(port_number, pin_number),
        pin_obj_(nullptr),
        gpio_port_(nullptr),
        pin_(pin_number),
        interrupt_index_(0)
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	4618      	mov	r0, r3
     de2:	f7ff fe31 	bl	a48 <sjsu::Gpio::Gpio()>
     de6:	4a23      	ldr	r2, [pc, #140]	; (e74 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0xa8>)
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	601a      	str	r2, [r3, #0]
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	3304      	adds	r3, #4
     df0:	7aba      	ldrb	r2, [r7, #10]
     df2:	7af9      	ldrb	r1, [r7, #11]
     df4:	4618      	mov	r0, r3
     df6:	f7ff fe37 	bl	a68 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	330c      	adds	r3, #12
     dfe:	7aba      	ldrb	r2, [r7, #10]
     e00:	7af9      	ldrb	r1, [r7, #11]
     e02:	4618      	mov	r0, r3
     e04:	f7ff fb50 	bl	4a8 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>
     e08:	68fb      	ldr	r3, [r7, #12]
     e0a:	2200      	movs	r2, #0
     e0c:	615a      	str	r2, [r3, #20]
     e0e:	68fb      	ldr	r3, [r7, #12]
     e10:	2200      	movs	r2, #0
     e12:	619a      	str	r2, [r3, #24]
     e14:	68fb      	ldr	r3, [r7, #12]
     e16:	7aba      	ldrb	r2, [r7, #10]
     e18:	771a      	strb	r2, [r3, #28]
     e1a:	68fb      	ldr	r3, [r7, #12]
     e1c:	2200      	movs	r2, #0
     e1e:	775a      	strb	r2, [r3, #29]
  {
    // Assign pin object pointer
    if (pin == nullptr)
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	2b00      	cmp	r3, #0
     e24:	d105      	bne.n	e32 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x66>
    {
      if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
      {
        pin_obj_ = &kLpc40xxPin;
     e26:	68fb      	ldr	r3, [r7, #12]
     e28:	f103 020c 	add.w	r2, r3, #12
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	615a      	str	r2, [r3, #20]
     e30:	e002      	b.n	e38 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x6c>
        pin_obj_ = &sjsu::GetInactive<sjsu::Pin>();
      }
    }
    else
    {
      pin_obj_ = pin;
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	615a      	str	r2, [r3, #20]
    }

    // Assign interrupt_index_ pointer
    if (port_number == 2)
     e38:	7afb      	ldrb	r3, [r7, #11]
     e3a:	2b02      	cmp	r3, #2
     e3c:	d103      	bne.n	e46 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x7a>
    {
      interrupt_index_ = 1;
     e3e:	68fb      	ldr	r3, [r7, #12]
     e40:	2201      	movs	r2, #1
     e42:	775a      	strb	r2, [r3, #29]
     e44:	e009      	b.n	e5a <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else if (port_number == 0)
     e46:	7afb      	ldrb	r3, [r7, #11]
     e48:	2b00      	cmp	r3, #0
     e4a:	d103      	bne.n	e54 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x88>
    {
      interrupt_index_ = 0;
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	2200      	movs	r2, #0
     e50:	775a      	strb	r2, [r3, #29]
     e52:	e002      	b.n	e5a <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else
    {
      interrupt_index_ = kInterruptPorts;
     e54:	68fb      	ldr	r3, [r7, #12]
     e56:	2202      	movs	r2, #2
     e58:	775a      	strb	r2, [r3, #29]
    }

    // Assign gpio port
    gpio_port_ = *GpioRegister(port_number);
     e5a:	7afb      	ldrb	r3, [r7, #11]
     e5c:	4618      	mov	r0, r3
     e5e:	f7ff fef9 	bl	c54 <sjsu::lpc40xx::Gpio::GpioRegister(int)>
     e62:	4603      	mov	r3, r0
     e64:	681a      	ldr	r2, [r3, #0]
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	619a      	str	r2, [r3, #24]
  }
     e6a:	68fb      	ldr	r3, [r7, #12]
     e6c:	4618      	mov	r0, r3
     e6e:	3710      	adds	r7, #16
     e70:	46bd      	mov	sp, r7
     e72:	bd80      	pop	{r7, pc}
     e74:	000086f8 	.word	0x000086f8

00000e78 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  void SetDirection(Direction direction) const override
     e78:	b590      	push	{r4, r7, lr}
     e7a:	b085      	sub	sp, #20
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
     e80:	460b      	mov	r3, r1
     e82:	70fb      	strb	r3, [r7, #3]
  {
    /// Pin function is zero fall pins on the LPC40xx and LPC17xx.
    constexpr uint8_t kGpioFunction = 0;
     e84:	2300      	movs	r3, #0
     e86:	73fb      	strb	r3, [r7, #15]
    pin_obj_->SetPinFunction(kGpioFunction);
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	695b      	ldr	r3, [r3, #20]
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	3304      	adds	r3, #4
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	687a      	ldr	r2, [r7, #4]
     e94:	6952      	ldr	r2, [r2, #20]
     e96:	2100      	movs	r1, #0
     e98:	4610      	mov	r0, r2
     e9a:	4798      	blx	r3

    if (direction == Direction::kInput)
     e9c:	78fb      	ldrb	r3, [r7, #3]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d10d      	bne.n	ebe <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x46>
    {
      gpio_port_->DIR = bit::Clear(gpio_port_->DIR, pin_);
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	699b      	ldr	r3, [r3, #24]
     ea6:	681a      	ldr	r2, [r3, #0]
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	7f1b      	ldrb	r3, [r3, #28]
     eac:	4619      	mov	r1, r3
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	699c      	ldr	r4, [r3, #24]
     eb2:	4610      	mov	r0, r2
     eb4:	f001 fa18 	bl	22e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     eb8:	4603      	mov	r3, r0
     eba:	6023      	str	r3, [r4, #0]
    }
    else
    {
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
    }
  }
     ebc:	e00c      	b.n	ed8 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x60>
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	699b      	ldr	r3, [r3, #24]
     ec2:	681a      	ldr	r2, [r3, #0]
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	7f1b      	ldrb	r3, [r3, #28]
     ec8:	4619      	mov	r1, r3
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	699c      	ldr	r4, [r3, #24]
     ece:	4610      	mov	r0, r2
     ed0:	f001 fa1d 	bl	230e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     ed4:	4603      	mov	r3, r0
     ed6:	6023      	str	r3, [r4, #0]
  }
     ed8:	bf00      	nop
     eda:	3714      	adds	r7, #20
     edc:	46bd      	mov	sp, r7
     ede:	bd90      	pop	{r4, r7, pc}

00000ee0 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  void Set(State output = kHigh) const override
     ee0:	b480      	push	{r7}
     ee2:	b083      	sub	sp, #12
     ee4:	af00      	add	r7, sp, #0
     ee6:	6078      	str	r0, [r7, #4]
     ee8:	460b      	mov	r3, r1
     eea:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     eec:	78fb      	ldrb	r3, [r7, #3]
     eee:	2b01      	cmp	r3, #1
     ef0:	d109      	bne.n	f06 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x26>
    {
      gpio_port_->SET = (1 << pin_);
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	7f1b      	ldrb	r3, [r3, #28]
     ef6:	461a      	mov	r2, r3
     ef8:	2301      	movs	r3, #1
     efa:	fa03 f202 	lsl.w	r2, r3, r2
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	699b      	ldr	r3, [r3, #24]
     f02:	619a      	str	r2, [r3, #24]
    }
    else
    {
      gpio_port_->CLR = (1 << pin_);
    }
  }
     f04:	e008      	b.n	f18 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x38>
      gpio_port_->CLR = (1 << pin_);
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	7f1b      	ldrb	r3, [r3, #28]
     f0a:	461a      	mov	r2, r3
     f0c:	2301      	movs	r3, #1
     f0e:	fa03 f202 	lsl.w	r2, r3, r2
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	699b      	ldr	r3, [r3, #24]
     f16:	61da      	str	r2, [r3, #28]
  }
     f18:	bf00      	nop
     f1a:	370c      	adds	r7, #12
     f1c:	46bd      	mov	sp, r7
     f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
     f22:	4770      	bx	lr

00000f24 <sjsu::lpc40xx::Gpio::Toggle() const>:
  void Toggle() const override
     f24:	b480      	push	{r7}
     f26:	b083      	sub	sp, #12
     f28:	af00      	add	r7, sp, #0
     f2a:	6078      	str	r0, [r7, #4]
  {
    gpio_port_->PIN ^= (1 << pin_);
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	699b      	ldr	r3, [r3, #24]
     f30:	695a      	ldr	r2, [r3, #20]
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	7f1b      	ldrb	r3, [r3, #28]
     f36:	4619      	mov	r1, r3
     f38:	2301      	movs	r3, #1
     f3a:	408b      	lsls	r3, r1
     f3c:	4619      	mov	r1, r3
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	699b      	ldr	r3, [r3, #24]
     f42:	404a      	eors	r2, r1
     f44:	615a      	str	r2, [r3, #20]
  }
     f46:	bf00      	nop
     f48:	370c      	adds	r7, #12
     f4a:	46bd      	mov	sp, r7
     f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f50:	4770      	bx	lr

00000f52 <sjsu::lpc40xx::Gpio::Read() const>:
  bool Read() const override
     f52:	b580      	push	{r7, lr}
     f54:	b082      	sub	sp, #8
     f56:	af00      	add	r7, sp, #0
     f58:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port_->PIN, pin_);
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	699b      	ldr	r3, [r3, #24]
     f5e:	695a      	ldr	r2, [r3, #20]
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	7f1b      	ldrb	r3, [r3, #28]
     f64:	4619      	mov	r1, r3
     f66:	4610      	mov	r0, r2
     f68:	f001 f9e3 	bl	2332 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     f6c:	4603      	mov	r3, r0
  }
     f6e:	4618      	mov	r0, r3
     f70:	3708      	adds	r7, #8
     f72:	46bd      	mov	sp, r7
     f74:	bd80      	pop	{r7, pc}

00000f76 <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     f76:	b480      	push	{r7}
     f78:	b083      	sub	sp, #12
     f7a:	af00      	add	r7, sp, #0
     f7c:	6078      	str	r0, [r7, #4]
  {
    return *pin_obj_;
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	695b      	ldr	r3, [r3, #20]
  }
     f82:	4618      	mov	r0, r3
     f84:	370c      	adds	r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8c:	4770      	bx	lr

00000f8e <std::function<void ()>::~function()>:
     f8e:	b580      	push	{r7, lr}
     f90:	b082      	sub	sp, #8
     f92:	af00      	add	r7, sp, #0
     f94:	6078      	str	r0, [r7, #4]
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	4618      	mov	r0, r3
     f9a:	f7ff fa23 	bl	3e4 <std::_Function_base::~_Function_base()>
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	4618      	mov	r0, r3
     fa2:	3708      	adds	r7, #8
     fa4:	46bd      	mov	sp, r7
     fa6:	bd80      	pop	{r7, pc}

00000fa8 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>:
  struct RegistrationInfo_t
     fa8:	b580      	push	{r7, lr}
     faa:	b082      	sub	sp, #8
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	3304      	adds	r3, #4
     fb4:	4618      	mov	r0, r3
     fb6:	f7ff ffea 	bl	f8e <std::function<void ()>::~function()>
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	4618      	mov	r0, r3
     fbe:	3708      	adds	r7, #8
     fc0:	46bd      	mov	sp, r7
     fc2:	bd80      	pop	{r7, pc}

00000fc4 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>:

  /// Assign the developer's ISR and sets the selected edge that the gpio
  /// interrupt will be triggered on.
  void AttachInterrupt(InterruptCallback callback, Edge edge) override
     fc4:	b5b0      	push	{r4, r5, r7, lr}
     fc6:	b08c      	sub	sp, #48	; 0x30
     fc8:	af00      	add	r7, sp, #0
     fca:	60f8      	str	r0, [r7, #12]
     fcc:	60b9      	str	r1, [r7, #8]
     fce:	4613      	mov	r3, r2
     fd0:	71fb      	strb	r3, [r7, #7]
  {
    if (!IsAValidPort())
     fd2:	68f8      	ldr	r0, [r7, #12]
     fd4:	f000 f8a6 	bl	1124 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     fd8:	4603      	mov	r3, r0
     fda:	f083 0301 	eor.w	r3, r3, #1
     fde:	b2db      	uxtb	r3, r3
     fe0:	2b00      	cmp	r3, #0
     fe2:	d155      	bne.n	1090 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xcc>
          .interrupt_handler        = InterruptHandler,
      });
    }
    else  // For LPC40xx and host tests
    {
      sjsu::InterruptController::GetPlatformController().Enable({
     fe4:	f7ff fa22 	bl	42c <sjsu::InterruptController::GetPlatformController()>
     fe8:	4604      	mov	r4, r0
          .interrupt_request_number = lpc40xx::GPIO_IRQn,
          .interrupt_handler        = InterruptHandler,
      });
     fea:	6823      	ldr	r3, [r4, #0]
     fec:	3304      	adds	r3, #4
     fee:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
     ff0:	2326      	movs	r3, #38	; 0x26
     ff2:	617b      	str	r3, [r7, #20]
     ff4:	f107 0314 	add.w	r3, r7, #20
     ff8:	3304      	adds	r3, #4
     ffa:	4927      	ldr	r1, [pc, #156]	; (1098 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd4>)
     ffc:	4618      	mov	r0, r3
     ffe:	f001 f9af 	bl	2360 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    1002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1006:	62bb      	str	r3, [r7, #40]	; 0x28
    1008:	f107 0314 	add.w	r3, r7, #20
    100c:	4619      	mov	r1, r3
    100e:	4620      	mov	r0, r4
    1010:	47a8      	blx	r5
      });
    1012:	f107 0314 	add.w	r3, r7, #20
    1016:	4618      	mov	r0, r3
    1018:	f7ff ffc6 	bl	fa8 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
    }

    handlers[interrupt_index_][pin_] = callback;
    101c:	68fb      	ldr	r3, [r7, #12]
    101e:	7f5b      	ldrb	r3, [r3, #29]
    1020:	4619      	mov	r1, r3
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	7f1b      	ldrb	r3, [r3, #28]
    1026:	461a      	mov	r2, r3
    1028:	014b      	lsls	r3, r1, #5
    102a:	4413      	add	r3, r2
    102c:	011b      	lsls	r3, r3, #4
    102e:	4a1b      	ldr	r2, [pc, #108]	; (109c <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd8>)
    1030:	4413      	add	r3, r2
    1032:	68b9      	ldr	r1, [r7, #8]
    1034:	4618      	mov	r0, r3
    1036:	f001 f9bd 	bl	23b4 <std::function<void ()>::operator=(std::function<void ()> const&)>

    auto * interrupt = LocalInterruptRegister();
    103a:	68f8      	ldr	r0, [r7, #12]
    103c:	f000 f896 	bl	116c <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
    1040:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeRising)
    1042:	79fb      	ldrb	r3, [r7, #7]
    1044:	2b02      	cmp	r3, #2
    1046:	d002      	beq.n	104e <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0x8a>
    1048:	79fb      	ldrb	r3, [r7, #7]
    104a:	2b00      	cmp	r3, #0
    104c:	d10c      	bne.n	1068 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xa4>
    {
      *interrupt->rising_enable = bit::Set(*interrupt->rising_enable, pin_);
    104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1050:	68db      	ldr	r3, [r3, #12]
    1052:	681a      	ldr	r2, [r3, #0]
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	7f1b      	ldrb	r3, [r3, #28]
    1058:	4619      	mov	r1, r3
    105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    105c:	68dc      	ldr	r4, [r3, #12]
    105e:	4610      	mov	r0, r2
    1060:	f001 f955 	bl	230e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    1064:	4603      	mov	r3, r0
    1066:	6023      	str	r3, [r4, #0]
    }
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeFalling)
    1068:	79fb      	ldrb	r3, [r7, #7]
    106a:	2b02      	cmp	r3, #2
    106c:	d002      	beq.n	1074 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xb0>
    106e:	79fb      	ldrb	r3, [r7, #7]
    1070:	2b01      	cmp	r3, #1
    1072:	d10e      	bne.n	1092 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
    {
      *interrupt->falling_enable = bit::Set(*interrupt->falling_enable, pin_);
    1074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1076:	691b      	ldr	r3, [r3, #16]
    1078:	681a      	ldr	r2, [r3, #0]
    107a:	68fb      	ldr	r3, [r7, #12]
    107c:	7f1b      	ldrb	r3, [r3, #28]
    107e:	4619      	mov	r1, r3
    1080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1082:	691c      	ldr	r4, [r3, #16]
    1084:	4610      	mov	r0, r2
    1086:	f001 f942 	bl	230e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    108a:	4603      	mov	r3, r0
    108c:	6023      	str	r3, [r4, #0]
    108e:	e000      	b.n	1092 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
      return;
    1090:	bf00      	nop
    }
  }
    1092:	3730      	adds	r7, #48	; 0x30
    1094:	46bd      	mov	sp, r7
    1096:	bdb0      	pop	{r4, r5, r7, pc}
    1098:	00000d5d 	.word	0x00000d5d
    109c:	10000d4c 	.word	0x10000d4c

000010a0 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  /// Removes the developer's ISR and clears the selected edge of the gpio
  /// interrupt from being triggered.
  void DetachInterrupt() const override
    10a0:	b590      	push	{r4, r7, lr}
    10a2:	b085      	sub	sp, #20
    10a4:	af00      	add	r7, sp, #0
    10a6:	6078      	str	r0, [r7, #4]
  {
    if (!IsAValidPort())
    10a8:	6878      	ldr	r0, [r7, #4]
    10aa:	f000 f83b 	bl	1124 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
    10ae:	4603      	mov	r3, r0
    10b0:	f083 0301 	eor.w	r3, r3, #1
    10b4:	b2db      	uxtb	r3, r3
    10b6:	2b00      	cmp	r3, #0
    10b8:	d12d      	bne.n	1116 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x76>
    {
      return;
    }

    handlers[interrupt_index_][pin_] = nullptr;
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	7f5b      	ldrb	r3, [r3, #29]
    10be:	4619      	mov	r1, r3
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	7f1b      	ldrb	r3, [r3, #28]
    10c4:	461a      	mov	r2, r3
    10c6:	014b      	lsls	r3, r1, #5
    10c8:	4413      	add	r3, r2
    10ca:	011b      	lsls	r3, r3, #4
    10cc:	4a14      	ldr	r2, [pc, #80]	; (1120 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x80>)
    10ce:	4413      	add	r3, r2
    10d0:	2100      	movs	r1, #0
    10d2:	4618      	mov	r0, r3
    10d4:	f001 f989 	bl	23ea <std::function<void ()>::operator=(decltype(nullptr))>

    auto * interrupt           = LocalInterruptRegister();
    10d8:	6878      	ldr	r0, [r7, #4]
    10da:	f000 f847 	bl	116c <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
    10de:	60f8      	str	r0, [r7, #12]
    *interrupt->rising_enable  = bit::Clear(*interrupt->rising_enable, pin_);
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	68db      	ldr	r3, [r3, #12]
    10e4:	681a      	ldr	r2, [r3, #0]
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	7f1b      	ldrb	r3, [r3, #28]
    10ea:	4619      	mov	r1, r3
    10ec:	68fb      	ldr	r3, [r7, #12]
    10ee:	68dc      	ldr	r4, [r3, #12]
    10f0:	4610      	mov	r0, r2
    10f2:	f001 f8f9 	bl	22e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    10f6:	4603      	mov	r3, r0
    10f8:	6023      	str	r3, [r4, #0]
    *interrupt->falling_enable = bit::Clear(*interrupt->falling_enable, pin_);
    10fa:	68fb      	ldr	r3, [r7, #12]
    10fc:	691b      	ldr	r3, [r3, #16]
    10fe:	681a      	ldr	r2, [r3, #0]
    1100:	687b      	ldr	r3, [r7, #4]
    1102:	7f1b      	ldrb	r3, [r3, #28]
    1104:	4619      	mov	r1, r3
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	691c      	ldr	r4, [r3, #16]
    110a:	4610      	mov	r0, r2
    110c:	f001 f8ec 	bl	22e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    1110:	4603      	mov	r3, r0
    1112:	6023      	str	r3, [r4, #0]
    1114:	e000      	b.n	1118 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x78>
      return;
    1116:	bf00      	nop
  }
    1118:	3714      	adds	r7, #20
    111a:	46bd      	mov	sp, r7
    111c:	bd90      	pop	{r4, r7, pc}
    111e:	bf00      	nop
    1120:	10000d4c 	.word	0x10000d4c

00001124 <sjsu::lpc40xx::Gpio::IsAValidPort() const>:

 private:
  /// Checks if the selected gpio port is valid for external interrupts.
  bool IsAValidPort() const
    1124:	b580      	push	{r7, lr}
    1126:	b084      	sub	sp, #16
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = !(interrupt_index_ == kInterruptPorts);
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	7f5b      	ldrb	r3, [r3, #29]
    1130:	2b02      	cmp	r3, #2
    1132:	bf14      	ite	ne
    1134:	2301      	movne	r3, #1
    1136:	2300      	moveq	r3, #0
    1138:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(
    113a:	7bfb      	ldrb	r3, [r7, #15]
    113c:	f083 0301 	eor.w	r3, r3, #1
    1140:	b2db      	uxtb	r3, r3
    1142:	2b00      	cmp	r3, #0
    1144:	d006      	beq.n	1154 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x30>
    1146:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    114a:	4a05      	ldr	r2, [pc, #20]	; (1160 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x3c>)
    114c:	4905      	ldr	r1, [pc, #20]	; (1164 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x40>)
    114e:	4806      	ldr	r0, [pc, #24]	; (1168 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x44>)
    1150:	f003 fcc2 	bl	4ad8 <printf>
        is_valid,
        "This gpio port cannot be used for External Interrupts. Need "
        "to use GPIOs on Port 0 or 2.");
    return is_valid;
    1154:	7bfb      	ldrb	r3, [r7, #15]
  }
    1156:	4618      	mov	r0, r3
    1158:	3710      	adds	r7, #16
    115a:	46bd      	mov	sp, r7
    115c:	bd80      	pop	{r7, pc}
    115e:	bf00      	nop
    1160:	00008300 	.word	0x00008300
    1164:	000085cc 	.word	0x000085cc
    1168:	00008330 	.word	0x00008330

0000116c <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>:

  GpioInterruptRegisterMap_t * LocalInterruptRegister() const
    116c:	b580      	push	{r7, lr}
    116e:	b082      	sub	sp, #8
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
  {
    return InterruptRegister(interrupt_index_);
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	7f5b      	ldrb	r3, [r3, #29]
    1178:	4618      	mov	r0, r3
    117a:	f7ff fda5 	bl	cc8 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
    117e:	4603      	mov	r3, r0
  }
    1180:	4618      	mov	r0, r3
    1182:	3708      	adds	r7, #8
    1184:	46bd      	mov	sp, r7
    1186:	bd80      	pop	{r7, pc}

00001188 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    1188:	b480      	push	{r7}
    118a:	b083      	sub	sp, #12
    118c:	af00      	add	r7, sp, #0
    118e:	6078      	str	r0, [r7, #4]
	{ return __r; }
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	e9d3 2300 	ldrd	r2, r3, [r3]
    1196:	4610      	mov	r0, r2
    1198:	4619      	mov	r1, r3
    119a:	370c      	adds	r7, #12
    119c:	46bd      	mov	sp, r7
    119e:	f85d 7b04 	ldr.w	r7, [sp], #4
    11a2:	4770      	bx	lr

000011a4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr unit_t(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept :
    11a4:	b590      	push	{r4, r7, lr}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	6039      	str	r1, [r7, #0]
		nls(units::convert<UnitsRhs, Units, T>(rhs.m_value), std::true_type() /*store linear value*/)
    11ae:	687c      	ldr	r4, [r7, #4]
    11b0:	683b      	ldr	r3, [r7, #0]
    11b2:	4618      	mov	r0, r3
    11b4:	f000 f822 	bl	11fc <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    11b8:	eef0 7a40 	vmov.f32	s15, s0
    11bc:	edc7 7a02 	vstr	s15, [r7, #8]
    11c0:	f107 020c 	add.w	r2, r7, #12
    11c4:	f107 0308 	add.w	r3, r7, #8
    11c8:	4619      	mov	r1, r3
    11ca:	4620      	mov	r0, r4
    11cc:	f000 f805 	bl	11da <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>
		}
    11d0:	687b      	ldr	r3, [r7, #4]
    11d2:	4618      	mov	r0, r3
    11d4:	3714      	adds	r7, #20
    11d6:	46bd      	mov	sp, r7
    11d8:	bd90      	pop	{r4, r7, pc}

000011da <units::linear_scale<float>::linear_scale<std::integral_constant<bool, true> >(float const&, std::integral_constant<bool, true>&&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    11da:	b480      	push	{r7}
    11dc:	b085      	sub	sp, #20
    11de:	af00      	add	r7, sp, #0
    11e0:	60f8      	str	r0, [r7, #12]
    11e2:	60b9      	str	r1, [r7, #8]
    11e4:	607a      	str	r2, [r7, #4]
    11e6:	68bb      	ldr	r3, [r7, #8]
    11e8:	681a      	ldr	r2, [r3, #0]
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	601a      	str	r2, [r3, #0]
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	4618      	mov	r0, r3
    11f2:	3714      	adds	r7, #20
    11f4:	46bd      	mov	sp, r7
    11f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    11fa:	4770      	bx	lr

000011fc <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    11fc:	b580      	push	{r7, lr}
    11fe:	b086      	sub	sp, #24
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    1204:	6878      	ldr	r0, [r7, #4]
    1206:	f000 f807 	bl	1218 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    120a:	eef0 7a40 	vmov.f32	s15, s0
	}
    120e:	eeb0 0a67 	vmov.f32	s0, s15
    1212:	3718      	adds	r7, #24
    1214:	46bd      	mov	sp, r7
    1216:	bd80      	pop	{r7, pc}

00001218 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    1218:	b480      	push	{r7}
    121a:	b085      	sub	sp, #20
    121c:	af00      	add	r7, sp, #0
    121e:	60f8      	str	r0, [r7, #12]
    1220:	7239      	strb	r1, [r7, #8]
    1222:	713a      	strb	r2, [r7, #4]
    1224:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	edd3 7a00 	vldr	s15, [r3]
    122c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1244 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    1230:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    1234:	eeb0 0a67 	vmov.f32	s0, s15
    1238:	3714      	adds	r7, #20
    123a:	46bd      	mov	sp, r7
    123c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1240:	4770      	bx	lr
    1242:	bf00      	nop
    1244:	49742400 	.word	0x49742400

00001248 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    1248:	b480      	push	{r7}
    124a:	b083      	sub	sp, #12
    124c:	af00      	add	r7, sp, #0
    124e:	6078      	str	r0, [r7, #4]
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	ee07 3a90 	vmov	s15, r3
    1258:	eeb0 0a67 	vmov.f32	s0, s15
    125c:	370c      	adds	r7, #12
    125e:	46bd      	mov	sp, r7
    1260:	f85d 7b04 	ldr.w	r7, [sp], #4
    1264:	4770      	bx	lr
    1266:	Address 0x0000000000001266 is out of bounds.


00001268 <sjsu::lpc40xx::Spi::Initialize() const>:
  explicit constexpr Spi(const Bus_t & bus) : bus_(bus) {}
  /// This METHOD MUST BE EXECUTED before any other method can be called.
  /// Powers on the peripheral, activates the SSP pins and enables the SSP
  /// peripheral.
  /// See page 601 of user manual UM10562 LPC408x/407x for more details.
  Status Initialize() const override
    1268:	b590      	push	{r4, r7, lr}
    126a:	b085      	sub	sp, #20
    126c:	af00      	add	r7, sp, #0
    126e:	6078      	str	r0, [r7, #4]
  {
    constexpr uint8_t kSpiFormatCode = 0b00;
    1270:	2300      	movs	r3, #0
    1272:	73fb      	strb	r3, [r7, #15]

    // Power up peripheral
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    1274:	f7ff faa6 	bl	7c4 <sjsu::SystemController::GetPlatformController()>
    1278:	4603      	mov	r3, r0
        bus_.power_on_bit);
    127a:	681a      	ldr	r2, [r3, #0]
    127c:	3214      	adds	r2, #20
    127e:	6812      	ldr	r2, [r2, #0]
    1280:	6879      	ldr	r1, [r7, #4]
    1282:	6849      	ldr	r1, [r1, #4]
    1284:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    1286:	4618      	mov	r0, r3
    1288:	4790      	blx	r2
    // Enable SSP pins
    bus_.mosi.SetPinFunction(bus_.pin_function_id);
    128a:	687b      	ldr	r3, [r7, #4]
    128c:	685b      	ldr	r3, [r3, #4]
    128e:	689b      	ldr	r3, [r3, #8]
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	3304      	adds	r3, #4
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	687a      	ldr	r2, [r7, #4]
    1298:	6852      	ldr	r2, [r2, #4]
    129a:	6890      	ldr	r0, [r2, #8]
    129c:	687a      	ldr	r2, [r7, #4]
    129e:	6852      	ldr	r2, [r2, #4]
    12a0:	7d12      	ldrb	r2, [r2, #20]
    12a2:	4611      	mov	r1, r2
    12a4:	4798      	blx	r3
    bus_.miso.SetPinFunction(bus_.pin_function_id);
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	685b      	ldr	r3, [r3, #4]
    12aa:	68db      	ldr	r3, [r3, #12]
    12ac:	681b      	ldr	r3, [r3, #0]
    12ae:	3304      	adds	r3, #4
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	687a      	ldr	r2, [r7, #4]
    12b4:	6852      	ldr	r2, [r2, #4]
    12b6:	68d0      	ldr	r0, [r2, #12]
    12b8:	687a      	ldr	r2, [r7, #4]
    12ba:	6852      	ldr	r2, [r2, #4]
    12bc:	7d12      	ldrb	r2, [r2, #20]
    12be:	4611      	mov	r1, r2
    12c0:	4798      	blx	r3
    bus_.sck.SetPinFunction(bus_.pin_function_id);
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	685b      	ldr	r3, [r3, #4]
    12c6:	691b      	ldr	r3, [r3, #16]
    12c8:	681b      	ldr	r3, [r3, #0]
    12ca:	3304      	adds	r3, #4
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	687a      	ldr	r2, [r7, #4]
    12d0:	6852      	ldr	r2, [r2, #4]
    12d2:	6910      	ldr	r0, [r2, #16]
    12d4:	687a      	ldr	r2, [r7, #4]
    12d6:	6852      	ldr	r2, [r2, #4]
    12d8:	7d12      	ldrb	r2, [r2, #20]
    12da:	4611      	mov	r1, r2
    12dc:	4798      	blx	r3
    // Set SSP frame format to SPI
    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, kSpiFormatCode, ControlRegister0::kFrameBit);
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	685b      	ldr	r3, [r3, #4]
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 = bit::Insert(
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	685b      	ldr	r3, [r3, #4]
    12ea:	681c      	ldr	r4, [r3, #0]
    12ec:	4b1d      	ldr	r3, [pc, #116]	; (1364 <sjsu::lpc40xx::Spi::Initialize() const+0xfc>)
    12ee:	781a      	ldrb	r2, [r3, #0]
    12f0:	785b      	ldrb	r3, [r3, #1]
    12f2:	021b      	lsls	r3, r3, #8
    12f4:	431a      	orrs	r2, r3
    12f6:	2300      	movs	r3, #0
    12f8:	f362 030f 	bfi	r3, r2, #0, #16
    12fc:	461a      	mov	r2, r3
    12fe:	2100      	movs	r1, #0
    1300:	f000 fe64 	bl	1fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1304:	4603      	mov	r3, r0
    1306:	6023      	str	r3, [r4, #0]
    // Set SPI to master mode by clearing
    bus_.registers->CR1 =
        bit::Clear(bus_.registers->CR1, ControlRegister1::kSlaveModeBit);
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	685b      	ldr	r3, [r3, #4]
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	6858      	ldr	r0, [r3, #4]
    bus_.registers->CR1 =
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	685b      	ldr	r3, [r3, #4]
    1314:	681c      	ldr	r4, [r3, #0]
        bit::Clear(bus_.registers->CR1, ControlRegister1::kSlaveModeBit);
    1316:	4b14      	ldr	r3, [pc, #80]	; (1368 <sjsu::lpc40xx::Spi::Initialize() const+0x100>)
    1318:	781a      	ldrb	r2, [r3, #0]
    131a:	785b      	ldrb	r3, [r3, #1]
    131c:	021b      	lsls	r3, r3, #8
    131e:	431a      	orrs	r2, r3
    1320:	2300      	movs	r3, #0
    1322:	f362 030f 	bfi	r3, r2, #0, #16
    1326:	4619      	mov	r1, r3
    1328:	f001 f893 	bl	2452 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    132c:	4603      	mov	r3, r0
    bus_.registers->CR1 =
    132e:	6063      	str	r3, [r4, #4]
    // Enable SSP
    bus_.registers->CR1 =
        bit::Set(bus_.registers->CR1, ControlRegister1::kSpiEnable);
    1330:	687b      	ldr	r3, [r7, #4]
    1332:	685b      	ldr	r3, [r3, #4]
    1334:	681b      	ldr	r3, [r3, #0]
    1336:	6858      	ldr	r0, [r3, #4]
    bus_.registers->CR1 =
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	685b      	ldr	r3, [r3, #4]
    133c:	681c      	ldr	r4, [r3, #0]
        bit::Set(bus_.registers->CR1, ControlRegister1::kSpiEnable);
    133e:	4b0b      	ldr	r3, [pc, #44]	; (136c <sjsu::lpc40xx::Spi::Initialize() const+0x104>)
    1340:	781a      	ldrb	r2, [r3, #0]
    1342:	785b      	ldrb	r3, [r3, #1]
    1344:	021b      	lsls	r3, r3, #8
    1346:	431a      	orrs	r2, r3
    1348:	2300      	movs	r3, #0
    134a:	f362 030f 	bfi	r3, r2, #0, #16
    134e:	4619      	mov	r1, r3
    1350:	f001 f88e 	bl	2470 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1354:	4603      	mov	r3, r0
    bus_.registers->CR1 =
    1356:	6063      	str	r3, [r4, #4]
    return Status::kSuccess;
    1358:	2300      	movs	r3, #0
  }
    135a:	4618      	mov	r0, r3
    135c:	3714      	adds	r7, #20
    135e:	46bd      	mov	sp, r7
    1360:	bd90      	pop	{r4, r7, pc}
    1362:	bf00      	nop
    1364:	0000860c 	.word	0x0000860c
    1368:	00008620 	.word	0x00008620
    136c:	0000861c 	.word	0x0000861c

00001370 <sjsu::lpc40xx::Spi::IsBusBusy() const>:
  }

  /// Checks if the SSP controller is idle.
  /// @returns true if the controller is sending or receiving a data frame and
  /// false if it is idle.
  bool IsBusBusy() const
    1370:	b580      	push	{r7, lr}
    1372:	b082      	sub	sp, #8
    1374:	af00      	add	r7, sp, #0
    1376:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(bus_.registers->SR, StatusRegister::kDataLineBusyBit);
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	685b      	ldr	r3, [r3, #4]
    137c:	681b      	ldr	r3, [r3, #0]
    137e:	68d8      	ldr	r0, [r3, #12]
    1380:	4b07      	ldr	r3, [pc, #28]	; (13a0 <sjsu::lpc40xx::Spi::IsBusBusy() const+0x30>)
    1382:	781a      	ldrb	r2, [r3, #0]
    1384:	785b      	ldrb	r3, [r3, #1]
    1386:	021b      	lsls	r3, r3, #8
    1388:	431a      	orrs	r2, r3
    138a:	2300      	movs	r3, #0
    138c:	f362 030f 	bfi	r3, r2, #0, #16
    1390:	4619      	mov	r1, r3
    1392:	f001 f87c 	bl	248e <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    1396:	4603      	mov	r3, r0
  }
    1398:	4618      	mov	r0, r3
    139a:	3708      	adds	r7, #8
    139c:	46bd      	mov	sp, r7
    139e:	bd80      	pop	{r7, pc}
    13a0:	00008624 	.word	0x00008624

000013a4 <sjsu::lpc40xx::Spi::Transfer(unsigned short) const>:
  /// data register. This functions for both transmitting and
  /// receiving data. It is recommended this region be protected
  /// by a mutex.
  /// @param data - information to be placed in data register
  /// @return - received data from external device
  uint16_t Transfer(uint16_t data) const override
    13a4:	b580      	push	{r7, lr}
    13a6:	b082      	sub	sp, #8
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
    13ac:	460b      	mov	r3, r1
    13ae:	807b      	strh	r3, [r7, #2]
  {
    bus_.registers->DR = data;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	685b      	ldr	r3, [r3, #4]
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	887a      	ldrh	r2, [r7, #2]
    13b8:	609a      	str	r2, [r3, #8]
    while (IsBusBusy())
    13ba:	6878      	ldr	r0, [r7, #4]
    13bc:	f7ff ffd8 	bl	1370 <sjsu::lpc40xx::Spi::IsBusBusy() const>
    13c0:	4603      	mov	r3, r0
    13c2:	2b00      	cmp	r3, #0
    13c4:	d001      	beq.n	13ca <sjsu::lpc40xx::Spi::Transfer(unsigned short) const+0x26>
    {
      continue;
    13c6:	bf00      	nop
    while (IsBusBusy())
    13c8:	e7f7      	b.n	13ba <sjsu::lpc40xx::Spi::Transfer(unsigned short) const+0x16>
    }
    return static_cast<uint16_t>(bus_.registers->DR);
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	685b      	ldr	r3, [r3, #4]
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	689b      	ldr	r3, [r3, #8]
    13d2:	b29b      	uxth	r3, r3
  }
    13d4:	4618      	mov	r0, r3
    13d6:	3708      	adds	r7, #8
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}

000013dc <auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)>:
constexpr auto Value(Enum enum_type_value)
    13dc:	b480      	push	{r7}
    13de:	b083      	sub	sp, #12
    13e0:	af00      	add	r7, sp, #0
    13e2:	4603      	mov	r3, r0
    13e4:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    13e6:	79fb      	ldrb	r3, [r7, #7]
}
    13e8:	4618      	mov	r0, r3
    13ea:	370c      	adds	r7, #12
    13ec:	46bd      	mov	sp, r7
    13ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f2:	4770      	bx	lr

000013f4 <sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const>:

  /// Sets the various modes for the Peripheral
  /// @param size - number of bits per frame
  void SetDataSize(DataSize size) const override
    13f4:	b590      	push	{r4, r7, lr}
    13f6:	b085      	sub	sp, #20
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    13fc:	460b      	mov	r3, r1
    13fe:	70fb      	strb	r3, [r7, #3]
  {
    // NOTE: In UM10562 page 611, you will see that DSS (Data Size Select) is
    // equal to the bit transfer minus 1. So we can add 3 to our DataSize enum
    // to get the appropriate tranfer code.
    constexpr uint8_t kBitTransferCodeOffset = 3;
    1400:	2303      	movs	r3, #3
    1402:	73fb      	strb	r3, [r7, #15]
    uint8_t size_code =
        static_cast<uint8_t>(Value(size) + kBitTransferCodeOffset);
    1404:	78fb      	ldrb	r3, [r7, #3]
    1406:	4618      	mov	r0, r3
    1408:	f7ff ffe8 	bl	13dc <auto sjsu::Value<sjsu::Spi::DataSize>(sjsu::Spi::DataSize)>
    140c:	4603      	mov	r3, r0
    140e:	3303      	adds	r3, #3
    1410:	73bb      	strb	r3, [r7, #14]

    bus_.registers->CR0 =
        bit::Insert(bus_.registers->CR0, size_code, ControlRegister0::kDataBit);
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	685b      	ldr	r3, [r3, #4]
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 =
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	685b      	ldr	r3, [r3, #4]
    141e:	681c      	ldr	r4, [r3, #0]
        bit::Insert(bus_.registers->CR0, size_code, ControlRegister0::kDataBit);
    1420:	4b08      	ldr	r3, [pc, #32]	; (1444 <sjsu::lpc40xx::Spi::SetDataSize(sjsu::Spi::DataSize) const+0x50>)
    1422:	7bb9      	ldrb	r1, [r7, #14]
    1424:	781a      	ldrb	r2, [r3, #0]
    1426:	785b      	ldrb	r3, [r3, #1]
    1428:	021b      	lsls	r3, r3, #8
    142a:	431a      	orrs	r2, r3
    142c:	2300      	movs	r3, #0
    142e:	f362 030f 	bfi	r3, r2, #0, #16
    1432:	461a      	mov	r2, r3
    1434:	f000 fdca 	bl	1fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    1438:	4603      	mov	r3, r0
    bus_.registers->CR0 =
    143a:	6023      	str	r3, [r4, #0]
  }
    143c:	bf00      	nop
    143e:	3714      	adds	r7, #20
    1440:	46bd      	mov	sp, r7
    1442:	bd90      	pop	{r4, r7, pc}
    1444:	00008608 	.word	0x00008608

00001448 <unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const>:
		inline constexpr Ty to() const noexcept
    1448:	b580      	push	{r7, lr}
    144a:	b082      	sub	sp, #8
    144c:	af00      	add	r7, sp, #0
    144e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    1450:	6878      	ldr	r0, [r7, #4]
    1452:	f001 f82b 	bl	24ac <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    1456:	4603      	mov	r3, r0
		}
    1458:	4618      	mov	r0, r3
    145a:	3708      	adds	r7, #8
    145c:	46bd      	mov	sp, r7
    145e:	bd80      	pop	{r7, pc}

00001460 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    1460:	b580      	push	{r7, lr}
    1462:	ed2d 8b02 	vpush	{d8}
    1466:	b084      	sub	sp, #16
    1468:	af00      	add	r7, sp, #0
    146a:	6078      	str	r0, [r7, #4]
    146c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	4618      	mov	r0, r3
    1472:	f7ff fee9 	bl	1248 <units::linear_scale<float>::operator()() const>
    1476:	eeb0 8a40 	vmov.f32	s16, s0
    147a:	683b      	ldr	r3, [r7, #0]
    147c:	4618      	mov	r0, r3
    147e:	f7ff fee3 	bl	1248 <units::linear_scale<float>::operator()() const>
    1482:	eef0 7a40 	vmov.f32	s15, s0
    1486:	edc7 7a03 	vstr	s15, [r7, #12]
    148a:	f107 030c 	add.w	r3, r7, #12
    148e:	4618      	mov	r0, r3
    1490:	f7ff f966 	bl	760 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    1494:	eeb0 7a40 	vmov.f32	s14, s0
    1498:	eec8 7a07 	vdiv.f32	s15, s16, s14
    149c:	f107 0308 	add.w	r3, r7, #8
    14a0:	eeb0 0a67 	vmov.f32	s0, s15
    14a4:	4618      	mov	r0, r3
    14a6:	f000 f807 	bl	14b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    14aa:	68bb      	ldr	r3, [r7, #8]
	}
    14ac:	4618      	mov	r0, r3
    14ae:	3710      	adds	r7, #16
    14b0:	46bd      	mov	sp, r7
    14b2:	ecbd 8b02 	vpop	{d8}
    14b6:	bd80      	pop	{r7, pc}

000014b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    14b8:	b580      	push	{r7, lr}
    14ba:	b082      	sub	sp, #8
    14bc:	af00      	add	r7, sp, #0
    14be:	6078      	str	r0, [r7, #4]
    14c0:	ed87 0a00 	vstr	s0, [r7]
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	463a      	mov	r2, r7
    14c8:	4611      	mov	r1, r2
    14ca:	4618      	mov	r0, r3
    14cc:	f7ff f927 	bl	71e <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	4618      	mov	r0, r3
    14d4:	3708      	adds	r7, #8
    14d6:	46bd      	mov	sp, r7
    14d8:	bd80      	pop	{r7, pc}
    14da:	Address 0x00000000000014da is out of bounds.


000014dc <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const>:
  /// @param positive_clock_on_idle - maintain bus on clock false=low or
  ///        false=high between frames
  /// @param read_miso_on_rising - capture serial data on true=first or
  ///        1=second clock cycle
  /// @param frequency - serial clock rate
  void SetClock(units::frequency::hertz_t frequency,
    14dc:	b590      	push	{r4, r7, lr}
    14de:	b089      	sub	sp, #36	; 0x24
    14e0:	af00      	add	r7, sp, #0
    14e2:	60f8      	str	r0, [r7, #12]
    14e4:	60b9      	str	r1, [r7, #8]
    14e6:	4611      	mov	r1, r2
    14e8:	461a      	mov	r2, r3
    14ea:	460b      	mov	r3, r1
    14ec:	71fb      	strb	r3, [r7, #7]
    14ee:	4613      	mov	r3, r2
    14f0:	71bb      	strb	r3, [r7, #6]
                bool positive_clock_on_idle = false,
                bool read_miso_on_rising    = false) const override
  {
    bus_.registers->CR0 = bit::Insert(bus_.registers->CR0,
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	685b      	ldr	r3, [r3, #4]
    14f6:	681b      	ldr	r3, [r3, #0]
    14f8:	6818      	ldr	r0, [r3, #0]
    14fa:	68fb      	ldr	r3, [r7, #12]
    14fc:	685b      	ldr	r3, [r3, #4]
    14fe:	681c      	ldr	r4, [r3, #0]
    1500:	4b2f      	ldr	r3, [pc, #188]	; (15c0 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xe4>)
    1502:	79f9      	ldrb	r1, [r7, #7]
    1504:	781a      	ldrb	r2, [r3, #0]
    1506:	785b      	ldrb	r3, [r3, #1]
    1508:	021b      	lsls	r3, r3, #8
    150a:	431a      	orrs	r2, r3
    150c:	2300      	movs	r3, #0
    150e:	f362 030f 	bfi	r3, r2, #0, #16
    1512:	461a      	mov	r2, r3
    1514:	f000 feb2 	bl	227c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    1518:	4603      	mov	r3, r0
    151a:	6023      	str	r3, [r4, #0]
                                      positive_clock_on_idle,
                                      ControlRegister0::kPolarityBit);

    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, read_miso_on_rising, ControlRegister0::kPhaseBit);
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	685b      	ldr	r3, [r3, #4]
    1520:	681b      	ldr	r3, [r3, #0]
    1522:	6818      	ldr	r0, [r3, #0]
    bus_.registers->CR0 = bit::Insert(
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	685b      	ldr	r3, [r3, #4]
    1528:	681c      	ldr	r4, [r3, #0]
    152a:	4b26      	ldr	r3, [pc, #152]	; (15c4 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xe8>)
    152c:	79b9      	ldrb	r1, [r7, #6]
    152e:	781a      	ldrb	r2, [r3, #0]
    1530:	785b      	ldrb	r3, [r3, #1]
    1532:	021b      	lsls	r3, r3, #8
    1534:	431a      	orrs	r2, r3
    1536:	2300      	movs	r3, #0
    1538:	f362 030f 	bfi	r3, r2, #0, #16
    153c:	461a      	mov	r2, r3
    153e:	f000 fe9d 	bl	227c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
    1542:	4603      	mov	r3, r0
    1544:	6023      	str	r3, [r4, #0]

    auto system_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    1546:	f7ff f93d 	bl	7c4 <sjsu::SystemController::GetPlatformController()>
    154a:	4602      	mov	r2, r0
            bus_.power_on_bit);
    154c:	68fb      	ldr	r3, [r7, #12]
    154e:	685b      	ldr	r3, [r3, #4]
    1550:	3304      	adds	r3, #4
    1552:	4619      	mov	r1, r3
    1554:	4610      	mov	r0, r2
    1556:	f7ff f941 	bl	7dc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    155a:	4603      	mov	r3, r0
    155c:	617b      	str	r3, [r7, #20]

    uint16_t prescaler = (system_frequency / frequency).to<uint16_t>();
    155e:	f107 0208 	add.w	r2, r7, #8
    1562:	f107 0314 	add.w	r3, r7, #20
    1566:	4611      	mov	r1, r2
    1568:	4618      	mov	r0, r3
    156a:	f7ff ff79 	bl	1460 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    156e:	4603      	mov	r3, r0
    1570:	61bb      	str	r3, [r7, #24]
    1572:	f107 0318 	add.w	r3, r7, #24
    1576:	4618      	mov	r0, r3
    1578:	f7ff ff66 	bl	1448 <unsigned short units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned short, void>() const>
    157c:	4603      	mov	r3, r0
    157e:	83fb      	strh	r3, [r7, #30]
    // Store lower half of prescalar in clock prescalar register
    bus_.registers->CPSR = prescaler & 0xFF;
    1580:	8bfa      	ldrh	r2, [r7, #30]
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	685b      	ldr	r3, [r3, #4]
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	b2d2      	uxtb	r2, r2
    158a:	611a      	str	r2, [r3, #16]
    // Store upper 8 bit half of the prescalar in control register 0
    bus_.registers->CR0 = bit::Insert(
        bus_.registers->CR0, prescaler >> 8, ControlRegister0::kDividerBit);
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	685b      	ldr	r3, [r3, #4]
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	6818      	ldr	r0, [r3, #0]
    1594:	8bfb      	ldrh	r3, [r7, #30]
    bus_.registers->CR0 = bit::Insert(
    1596:	1219      	asrs	r1, r3, #8
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	685b      	ldr	r3, [r3, #4]
    159c:	681c      	ldr	r4, [r3, #0]
    159e:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <sjsu::lpc40xx::Spi::SetClock(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, bool, bool) const+0xec>)
    15a0:	781a      	ldrb	r2, [r3, #0]
    15a2:	785b      	ldrb	r3, [r3, #1]
    15a4:	021b      	lsls	r3, r3, #8
    15a6:	431a      	orrs	r2, r3
    15a8:	2300      	movs	r3, #0
    15aa:	f362 030f 	bfi	r3, r2, #0, #16
    15ae:	461a      	mov	r2, r3
    15b0:	f000 ff98 	bl	24e4 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    15b4:	4603      	mov	r3, r0
    15b6:	6023      	str	r3, [r4, #0]
  }
    15b8:	bf00      	nop
    15ba:	3724      	adds	r7, #36	; 0x24
    15bc:	46bd      	mov	sp, r7
    15be:	bd90      	pop	{r4, r7, pc}
    15c0:	00008610 	.word	0x00008610
    15c4:	00008614 	.word	0x00008614
    15c8:	00008618 	.word	0x00008618

000015cc <sjsu::PixelDisplay::Color_t::IsBlank()>:
      return red == 0 && green == 0 && blue == 0 && alpha == 0;
    }
    /// @returns true if the Color_t definitions is
    ///          { .red = 0, .green = 0, .blue = 0, .alpha = 0} which indicates
    ///           no color and invisible.
    bool IsBlank()
    15cc:	b480      	push	{r7}
    15ce:	b083      	sub	sp, #12
    15d0:	af00      	add	r7, sp, #0
    15d2:	6078      	str	r0, [r7, #4]
    {
      return red == 0 && green == 0 && blue == 0 && alpha == 0;
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	781b      	ldrb	r3, [r3, #0]
    15d8:	2b00      	cmp	r3, #0
    15da:	d10d      	bne.n	15f8 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	785b      	ldrb	r3, [r3, #1]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d109      	bne.n	15f8 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	789b      	ldrb	r3, [r3, #2]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d105      	bne.n	15f8 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	78db      	ldrb	r3, [r3, #3]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d101      	bne.n	15f8 <sjsu::PixelDisplay::Color_t::IsBlank()+0x2c>
    15f4:	2301      	movs	r3, #1
    15f6:	e000      	b.n	15fa <sjsu::PixelDisplay::Color_t::IsBlank()+0x2e>
    15f8:	2300      	movs	r3, #0
    }
    15fa:	4618      	mov	r0, r3
    15fc:	370c      	adds	r7, #12
    15fe:	46bd      	mov	sp, r7
    1600:	f85d 7b04 	ldr.w	r7, [sp], #4
    1604:	4770      	bx	lr

00001606 <sjsu::PixelDisplay::Enable()>:
  /// @returns a color object with the available colors.
  virtual Color_t AvailableColors() = 0;
  /// Configure hardware peripherals and initialize external display hardware
  virtual void Initialize() = 0;
  /// Optional method to turn on display if applicable
  virtual void Enable() {}
    1606:	b480      	push	{r7}
    1608:	b083      	sub	sp, #12
    160a:	af00      	add	r7, sp, #0
    160c:	6078      	str	r0, [r7, #4]
    160e:	bf00      	nop
    1610:	370c      	adds	r7, #12
    1612:	46bd      	mov	sp, r7
    1614:	f85d 7b04 	ldr.w	r7, [sp], #4
    1618:	4770      	bx	lr

0000161a <sjsu::PixelDisplay::Disable()>:
  /// Optional method to turn off display and potentially put it into a low
  /// power mode
  virtual void Disable() {}
    161a:	b480      	push	{r7}
    161c:	b083      	sub	sp, #12
    161e:	af00      	add	r7, sp, #0
    1620:	6078      	str	r0, [r7, #4]
    1622:	bf00      	nop
    1624:	370c      	adds	r7, #12
    1626:	46bd      	mov	sp, r7
    1628:	f85d 7b04 	ldr.w	r7, [sp], #4
    162c:	4770      	bx	lr

0000162e <sjsu::Ssd1306::GetWidth()>:
  constexpr Ssd1306(sjsu::Spi & spi, sjsu::Gpio & cs, sjsu::Gpio & dc)
      : spi_(spi), cs_(cs), dc_(dc), bitmap_{}
  {
  }

  size_t GetWidth() override
    162e:	b480      	push	{r7}
    1630:	b083      	sub	sp, #12
    1632:	af00      	add	r7, sp, #0
    1634:	6078      	str	r0, [r7, #4]
  {
    return kWidth;
    1636:	2380      	movs	r3, #128	; 0x80
  }
    1638:	4618      	mov	r0, r3
    163a:	370c      	adds	r7, #12
    163c:	46bd      	mov	sp, r7
    163e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1642:	4770      	bx	lr

00001644 <sjsu::Ssd1306::GetHeight()>:
  size_t GetHeight() override
    1644:	b480      	push	{r7}
    1646:	b083      	sub	sp, #12
    1648:	af00      	add	r7, sp, #0
    164a:	6078      	str	r0, [r7, #4]
  {
    return kHeight;
    164c:	2340      	movs	r3, #64	; 0x40
  }
    164e:	4618      	mov	r0, r3
    1650:	370c      	adds	r7, #12
    1652:	46bd      	mov	sp, r7
    1654:	f85d 7b04 	ldr.w	r7, [sp], #4
    1658:	4770      	bx	lr

0000165a <sjsu::Ssd1306::AvailableColors()>:
  Color_t AvailableColors() override
    165a:	b480      	push	{r7}
    165c:	b085      	sub	sp, #20
    165e:	af00      	add	r7, sp, #0
    1660:	6078      	str	r0, [r7, #4]
    return Color_t{
      .red   = 0,
      .green = 0,
      .blue  = 0,
      .alpha = 1,
    };
    1662:	2300      	movs	r3, #0
    1664:	733b      	strb	r3, [r7, #12]
    1666:	2300      	movs	r3, #0
    1668:	737b      	strb	r3, [r7, #13]
    166a:	2300      	movs	r3, #0
    166c:	73bb      	strb	r3, [r7, #14]
    166e:	2301      	movs	r3, #1
    1670:	73fb      	strb	r3, [r7, #15]
    1672:	2300      	movs	r3, #0
    1674:	7b3a      	ldrb	r2, [r7, #12]
    1676:	f362 0307 	bfi	r3, r2, #0, #8
    167a:	7b7a      	ldrb	r2, [r7, #13]
    167c:	f362 230f 	bfi	r3, r2, #8, #8
    1680:	7bba      	ldrb	r2, [r7, #14]
    1682:	f362 4317 	bfi	r3, r2, #16, #8
    1686:	7bfa      	ldrb	r2, [r7, #15]
    1688:	f362 631f 	bfi	r3, r2, #24, #8
  }
    168c:	4618      	mov	r0, r3
    168e:	3714      	adds	r7, #20
    1690:	46bd      	mov	sp, r7
    1692:	f85d 7b04 	ldr.w	r7, [sp], #4
    1696:	4770      	bx	lr

00001698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>:

  void Write(uint32_t data, Transaction transaction, size_t size = 1)
    1698:	b580      	push	{r7, lr}
    169a:	b088      	sub	sp, #32
    169c:	af02      	add	r7, sp, #8
    169e:	60f8      	str	r0, [r7, #12]
    16a0:	60b9      	str	r1, [r7, #8]
    16a2:	607a      	str	r2, [r7, #4]
    16a4:	603b      	str	r3, [r7, #0]
  {
    dc_.Set(static_cast<sjsu::Gpio::State>(transaction));
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	68db      	ldr	r3, [r3, #12]
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	3304      	adds	r3, #4
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	68fa      	ldr	r2, [r7, #12]
    16b2:	68d2      	ldr	r2, [r2, #12]
    16b4:	6879      	ldr	r1, [r7, #4]
    16b6:	b2c9      	uxtb	r1, r1
    16b8:	4610      	mov	r0, r2
    16ba:	4798      	blx	r3
    cs_.Set(sjsu::Gpio::State::kLow);
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	689b      	ldr	r3, [r3, #8]
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	3304      	adds	r3, #4
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	68fa      	ldr	r2, [r7, #12]
    16c8:	6892      	ldr	r2, [r2, #8]
    16ca:	2100      	movs	r1, #0
    16cc:	4610      	mov	r0, r2
    16ce:	4798      	blx	r3
    for (size_t i = 0; i < size; i++)
    16d0:	2300      	movs	r3, #0
    16d2:	617b      	str	r3, [r7, #20]
    16d4:	697a      	ldr	r2, [r7, #20]
    16d6:	683b      	ldr	r3, [r7, #0]
    16d8:	429a      	cmp	r2, r3
    16da:	d222      	bcs.n	1722 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x8a>
    {
      uint8_t send = static_cast<uint8_t>(data >> (((size - 1) - i) * 8));
    16dc:	683a      	ldr	r2, [r7, #0]
    16de:	697b      	ldr	r3, [r7, #20]
    16e0:	1ad3      	subs	r3, r2, r3
    16e2:	3b01      	subs	r3, #1
    16e4:	00db      	lsls	r3, r3, #3
    16e6:	68ba      	ldr	r2, [r7, #8]
    16e8:	fa22 f303 	lsr.w	r3, r2, r3
    16ec:	74fb      	strb	r3, [r7, #19]
      if (transaction == Transaction::kCommand)
    16ee:	687b      	ldr	r3, [r7, #4]
    16f0:	2b00      	cmp	r3, #0
    16f2:	d107      	bne.n	1704 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x6c>
      {
        LOG_DEBUG("send = 0x%X", send);
    16f4:	7cfb      	ldrb	r3, [r7, #19]
    16f6:	9300      	str	r3, [sp, #0]
    16f8:	233f      	movs	r3, #63	; 0x3f
    16fa:	4a11      	ldr	r2, [pc, #68]	; (1740 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xa8>)
    16fc:	4911      	ldr	r1, [pc, #68]	; (1744 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xac>)
    16fe:	4812      	ldr	r0, [pc, #72]	; (1748 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0xb0>)
    1700:	f003 f9ea 	bl	4ad8 <printf>
      }
      spi_.Transfer(send);
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	685b      	ldr	r3, [r3, #4]
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	3304      	adds	r3, #4
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	68fa      	ldr	r2, [r7, #12]
    1710:	6852      	ldr	r2, [r2, #4]
    1712:	7cf9      	ldrb	r1, [r7, #19]
    1714:	b289      	uxth	r1, r1
    1716:	4610      	mov	r0, r2
    1718:	4798      	blx	r3
    for (size_t i = 0; i < size; i++)
    171a:	697b      	ldr	r3, [r7, #20]
    171c:	3301      	adds	r3, #1
    171e:	617b      	str	r3, [r7, #20]
    1720:	e7d8      	b.n	16d4 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)+0x3c>
    }
    cs_.Set(sjsu::Gpio::State::kHigh);
    1722:	68fb      	ldr	r3, [r7, #12]
    1724:	689b      	ldr	r3, [r3, #8]
    1726:	681b      	ldr	r3, [r3, #0]
    1728:	3304      	adds	r3, #4
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	68fa      	ldr	r2, [r7, #12]
    172e:	6892      	ldr	r2, [r2, #8]
    1730:	2101      	movs	r1, #1
    1732:	4610      	mov	r0, r2
    1734:	4798      	blx	r3
  }
    1736:	bf00      	nop
    1738:	3718      	adds	r7, #24
    173a:	46bd      	mov	sp, r7
    173c:	bd80      	pop	{r7, pc}
    173e:	bf00      	nop
    1740:	000083c8 	.word	0x000083c8
    1744:	00008670 	.word	0x00008670
    1748:	00008410 	.word	0x00008410

0000174c <sjsu::Ssd1306::Initialize()>:

  void Initialize() override
    174c:	b5b0      	push	{r4, r5, r7, lr}
    174e:	b084      	sub	sp, #16
    1750:	af00      	add	r7, sp, #0
    1752:	6078      	str	r0, [r7, #4]
  {
    cs_.SetDirection(sjsu::Gpio::Direction::kOutput);
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	689b      	ldr	r3, [r3, #8]
    1758:	681b      	ldr	r3, [r3, #0]
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	687a      	ldr	r2, [r7, #4]
    175e:	6892      	ldr	r2, [r2, #8]
    1760:	2101      	movs	r1, #1
    1762:	4610      	mov	r0, r2
    1764:	4798      	blx	r3
    dc_.SetDirection(sjsu::Gpio::Direction::kOutput);
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	68db      	ldr	r3, [r3, #12]
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	687a      	ldr	r2, [r7, #4]
    1770:	68d2      	ldr	r2, [r2, #12]
    1772:	2101      	movs	r1, #1
    1774:	4610      	mov	r0, r2
    1776:	4798      	blx	r3
    cs_.Set(sjsu::Gpio::State::kHigh);
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	689b      	ldr	r3, [r3, #8]
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	3304      	adds	r3, #4
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	687a      	ldr	r2, [r7, #4]
    1784:	6892      	ldr	r2, [r2, #8]
    1786:	2101      	movs	r1, #1
    1788:	4610      	mov	r0, r2
    178a:	4798      	blx	r3
    dc_.Set(sjsu::Gpio::State::kHigh);
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	68db      	ldr	r3, [r3, #12]
    1790:	681b      	ldr	r3, [r3, #0]
    1792:	3304      	adds	r3, #4
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	687a      	ldr	r2, [r7, #4]
    1798:	68d2      	ldr	r2, [r2, #12]
    179a:	2101      	movs	r1, #1
    179c:	4610      	mov	r0, r2
    179e:	4798      	blx	r3

    spi_.Initialize();
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	687a      	ldr	r2, [r7, #4]
    17aa:	6852      	ldr	r2, [r2, #4]
    17ac:	4610      	mov	r0, r2
    17ae:	4798      	blx	r3
    spi_.SetDataSize(sjsu::Spi::DataSize::kEight);
    17b0:	687b      	ldr	r3, [r7, #4]
    17b2:	685b      	ldr	r3, [r3, #4]
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	3308      	adds	r3, #8
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	687a      	ldr	r2, [r7, #4]
    17bc:	6852      	ldr	r2, [r2, #4]
    17be:	2104      	movs	r1, #4
    17c0:	4610      	mov	r0, r2
    17c2:	4798      	blx	r3
    spi_.SetClock(2_MHz);
    17c4:	687b      	ldr	r3, [r7, #4]
    17c6:	685b      	ldr	r3, [r3, #4]
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	330c      	adds	r3, #12
    17cc:	681c      	ldr	r4, [r3, #0]
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	685d      	ldr	r5, [r3, #4]
    17d2:	f04f 0002 	mov.w	r0, #2
    17d6:	f04f 0100 	mov.w	r1, #0
    17da:	f7fe ff79 	bl	6d0 <units::literals::operator"" _MHz(unsigned long long)>
    17de:	4603      	mov	r3, r0
    17e0:	60fb      	str	r3, [r7, #12]
    17e2:	f107 020c 	add.w	r2, r7, #12
    17e6:	f107 0308 	add.w	r3, r7, #8
    17ea:	4611      	mov	r1, r2
    17ec:	4618      	mov	r0, r3
    17ee:	f7ff fcd9 	bl	11a4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    17f2:	2300      	movs	r3, #0
    17f4:	2200      	movs	r2, #0
    17f6:	68b9      	ldr	r1, [r7, #8]
    17f8:	4628      	mov	r0, r5
    17fa:	47a0      	blx	r4

    Clear();
    17fc:	6878      	ldr	r0, [r7, #4]
    17fe:	f000 f895 	bl	192c <sjsu::Ssd1306::Clear()>
    InitializationPanel();
    1802:	6878      	ldr	r0, [r7, #4]
    1804:	f000 f804 	bl	1810 <sjsu::Ssd1306::InitializationPanel()>
  }
    1808:	bf00      	nop
    180a:	3710      	adds	r7, #16
    180c:	46bd      	mov	sp, r7
    180e:	bdb0      	pop	{r4, r5, r7, pc}

00001810 <sjsu::Ssd1306::InitializationPanel()>:

  void InitializationPanel()
    1810:	b580      	push	{r7, lr}
    1812:	b082      	sub	sp, #8
    1814:	af00      	add	r7, sp, #0
    1816:	6078      	str	r0, [r7, #4]
  {
    // This sequence of commands was found in:
    //   datasheets/OLED-display/ER-OLED0.96-1_Series_Datasheet.pdf, page 15

    // turn off oled panel
    Write(0xAE, Transaction::kCommand);
    1818:	2301      	movs	r3, #1
    181a:	2200      	movs	r2, #0
    181c:	21ae      	movs	r1, #174	; 0xae
    181e:	6878      	ldr	r0, [r7, #4]
    1820:	f7ff ff3a 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set display clock divide ratio/oscillator frequency
    // set divide ratio
    Write(0xD5'80, Transaction::kCommand, 2);
    1824:	2302      	movs	r3, #2
    1826:	2200      	movs	r2, #0
    1828:	f24d 5180 	movw	r1, #54656	; 0xd580
    182c:	6878      	ldr	r0, [r7, #4]
    182e:	f7ff ff33 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set multiplex ratio(1 to 64)
    // 1/64 duty
    Write(0xA8'3F, Transaction::kCommand, 2);
    1832:	2302      	movs	r3, #2
    1834:	2200      	movs	r2, #0
    1836:	f64a 013f 	movw	r1, #43071	; 0xa83f
    183a:	6878      	ldr	r0, [r7, #4]
    183c:	f7ff ff2c 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set display offset = not offset
    Write(0xD3'00, Transaction::kCommand, 2);
    1840:	2302      	movs	r3, #2
    1842:	2200      	movs	r2, #0
    1844:	f44f 4153 	mov.w	r1, #54016	; 0xd300
    1848:	6878      	ldr	r0, [r7, #4]
    184a:	f7ff ff25 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set display start line
    Write(0x40, Transaction::kCommand);
    184e:	2301      	movs	r3, #1
    1850:	2200      	movs	r2, #0
    1852:	2140      	movs	r1, #64	; 0x40
    1854:	6878      	ldr	r0, [r7, #4]
    1856:	f7ff ff1f 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Disable Charge Pump
    Write(0x8D'14, Transaction::kCommand, 2);
    185a:	2302      	movs	r3, #2
    185c:	2200      	movs	r2, #0
    185e:	f648 5114 	movw	r1, #36116	; 0x8d14
    1862:	6878      	ldr	r0, [r7, #4]
    1864:	f7ff ff18 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set segment re-map 128 to 0
    Write(0xA1, Transaction::kCommand);
    1868:	2301      	movs	r3, #1
    186a:	2200      	movs	r2, #0
    186c:	21a1      	movs	r1, #161	; 0xa1
    186e:	6878      	ldr	r0, [r7, #4]
    1870:	f7ff ff12 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set COM Output Scan Direction 64 to 0
    Write(0xC8, Transaction::kCommand);
    1874:	2301      	movs	r3, #1
    1876:	2200      	movs	r2, #0
    1878:	21c8      	movs	r1, #200	; 0xc8
    187a:	6878      	ldr	r0, [r7, #4]
    187c:	f7ff ff0c 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set com pins hardware configuration
    Write(0xDA'12, Transaction::kCommand, 2);
    1880:	2302      	movs	r3, #2
    1882:	2200      	movs	r2, #0
    1884:	f64d 2112 	movw	r1, #55826	; 0xda12
    1888:	6878      	ldr	r0, [r7, #4]
    188a:	f7ff ff05 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // set contrast control register
    Write(0x81'CF, Transaction::kCommand, 2);
    188e:	2302      	movs	r3, #2
    1890:	2200      	movs	r2, #0
    1892:	f248 11cf 	movw	r1, #33231	; 0x81cf
    1896:	6878      	ldr	r0, [r7, #4]
    1898:	f7ff fefe 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set pre-charge period
    Write(0xD9'F1, Transaction::kCommand, 2);
    189c:	2302      	movs	r3, #2
    189e:	2200      	movs	r2, #0
    18a0:	f64d 11f1 	movw	r1, #55793	; 0xd9f1
    18a4:	6878      	ldr	r0, [r7, #4]
    18a6:	f7ff fef7 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set Vcomh
    Write(0xDB'40, Transaction::kCommand, 2);
    18aa:	2302      	movs	r3, #2
    18ac:	2200      	movs	r2, #0
    18ae:	f64d 3140 	movw	r1, #56128	; 0xdb40
    18b2:	6878      	ldr	r0, [r7, #4]
    18b4:	f7ff fef0 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    SetHorizontalAddressMode();
    18b8:	6878      	ldr	r0, [r7, #4]
    18ba:	f000 f817 	bl	18ec <sjsu::Ssd1306::SetHorizontalAddressMode()>

    // Enable entire display
    Write(0xA4, Transaction::kCommand);
    18be:	2301      	movs	r3, #1
    18c0:	2200      	movs	r2, #0
    18c2:	21a4      	movs	r1, #164	; 0xa4
    18c4:	6878      	ldr	r0, [r7, #4]
    18c6:	f7ff fee7 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set display to normal colors
    Write(0xA6, Transaction::kCommand);
    18ca:	2301      	movs	r3, #1
    18cc:	2200      	movs	r2, #0
    18ce:	21a6      	movs	r1, #166	; 0xa6
    18d0:	6878      	ldr	r0, [r7, #4]
    18d2:	f7ff fee1 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>

    // Set Display On
    Write(0xAF, Transaction::kCommand);
    18d6:	2301      	movs	r3, #1
    18d8:	2200      	movs	r2, #0
    18da:	21af      	movs	r1, #175	; 0xaf
    18dc:	6878      	ldr	r0, [r7, #4]
    18de:	f7ff fedb 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
  }
    18e2:	bf00      	nop
    18e4:	3708      	adds	r7, #8
    18e6:	46bd      	mov	sp, r7
    18e8:	bd80      	pop	{r7, pc}
    18ea:	Address 0x00000000000018ea is out of bounds.


000018ec <sjsu::Ssd1306::SetHorizontalAddressMode()>:

  void SetHorizontalAddressMode()
    18ec:	b580      	push	{r7, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
  {
    // Set Addressing mode
    // Addressing mode = Horizontal Mode (0b00)
    Write(0x20'00, Transaction::kCommand, 2);
    18f4:	2302      	movs	r3, #2
    18f6:	2200      	movs	r2, #0
    18f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    18fc:	6878      	ldr	r0, [r7, #4]
    18fe:	f7ff fecb 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
    // Set Column Addresses
    // Set Column Address start = Column 0
    // Set Column Address start = Column 127
    Write(0x21'00'7F, Transaction::kCommand, 3);
    1902:	2303      	movs	r3, #3
    1904:	2200      	movs	r2, #0
    1906:	4907      	ldr	r1, [pc, #28]	; (1924 <sjsu::Ssd1306::SetHorizontalAddressMode()+0x38>)
    1908:	6878      	ldr	r0, [r7, #4]
    190a:	f7ff fec5 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
    // Set Page Addresses
    // Set Page Address start = Page 0
    // Set Page Address start = Page 7
    Write(0x22'00'07, Transaction::kCommand, 3);
    190e:	2303      	movs	r3, #3
    1910:	2200      	movs	r2, #0
    1912:	4905      	ldr	r1, [pc, #20]	; (1928 <sjsu::Ssd1306::SetHorizontalAddressMode()+0x3c>)
    1914:	6878      	ldr	r0, [r7, #4]
    1916:	f7ff febf 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
  }
    191a:	bf00      	nop
    191c:	3708      	adds	r7, #8
    191e:	46bd      	mov	sp, r7
    1920:	bd80      	pop	{r7, pc}
    1922:	bf00      	nop
    1924:	0021007f 	.word	0x0021007f
    1928:	00220007 	.word	0x00220007

0000192c <sjsu::Ssd1306::Clear()>:
  /// Clears the internal bitmap_ to zero (or a user defined clear_value)
  void Clear() override
    192c:	b580      	push	{r7, lr}
    192e:	b082      	sub	sp, #8
    1930:	af00      	add	r7, sp, #0
    1932:	6078      	str	r0, [r7, #4]
  {
    memset(bitmap_, 0x00, sizeof(bitmap_));
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	3310      	adds	r3, #16
    1938:	f240 62c1 	movw	r2, #1729	; 0x6c1
    193c:	2100      	movs	r1, #0
    193e:	4618      	mov	r0, r3
    1940:	f006 fc34 	bl	81ac <memset>
  }
    1944:	bf00      	nop
    1946:	3708      	adds	r7, #8
    1948:	46bd      	mov	sp, r7
    194a:	bd80      	pop	{r7, pc}

0000194c <sjsu::Ssd1306::DrawPixel(long, long, sjsu::PixelDisplay::Color_t)>:
  void Fill()
  {
    memset(bitmap_, 0xFF, sizeof(bitmap_));
  }
  void DrawPixel(int32_t x, int32_t y, Color_t color) override
    194c:	b580      	push	{r7, lr}
    194e:	b08c      	sub	sp, #48	; 0x30
    1950:	af00      	add	r7, sp, #0
    1952:	60f8      	str	r0, [r7, #12]
    1954:	60b9      	str	r1, [r7, #8]
    1956:	607a      	str	r2, [r7, #4]
    1958:	603b      	str	r3, [r7, #0]
  {
    // The 3 least significant bits hold the bit position within the byte
    uint32_t bit_position = y & 0b111;
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	f003 0307 	and.w	r3, r3, #7
    1960:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Each byte makes up a vertical column.
    // Shifting by 3, which also divides by 8 (the 8-bits of a column), will
    // be the row that we need to edit.
    uint32_t row = y >> 3;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	10db      	asrs	r3, r3, #3
    1966:	62bb      	str	r3, [r7, #40]	; 0x28
    // Mask to clear the bit
    uint32_t clear_mask = ~(1 << bit_position);
    1968:	2201      	movs	r2, #1
    196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    196c:	fa02 f303 	lsl.w	r3, r2, r3
    1970:	43db      	mvns	r3, r3
    1972:	627b      	str	r3, [r7, #36]	; 0x24
    // Mask to set the bit, if color.alpha != 0
    bool pixel_is_on  = !color.IsBlank();
    1974:	463b      	mov	r3, r7
    1976:	4618      	mov	r0, r3
    1978:	f7ff fe28 	bl	15cc <sjsu::PixelDisplay::Color_t::IsBlank()>
    197c:	4603      	mov	r3, r0
    197e:	f083 0301 	eor.w	r3, r3, #1
    1982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t set_mask = pixel_is_on << bit_position;
    1986:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    198c:	fa02 f303 	lsl.w	r3, r2, r3
    1990:	61fb      	str	r3, [r7, #28]
    // Address of the pixel column to edit
    uint8_t * pixel_column = &(bitmap_[row][x]);
    1992:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1994:	4613      	mov	r3, r2
    1996:	015b      	lsls	r3, r3, #5
    1998:	4413      	add	r3, r2
    199a:	009b      	lsls	r3, r3, #2
    199c:	4413      	add	r3, r2
    199e:	68ba      	ldr	r2, [r7, #8]
    19a0:	4413      	add	r3, r2
    19a2:	3310      	adds	r3, #16
    19a4:	68fa      	ldr	r2, [r7, #12]
    19a6:	4413      	add	r3, r2
    19a8:	61bb      	str	r3, [r7, #24]
    // Read pixel column and update the pixel
    uint32_t result = (*pixel_column & clear_mask) | set_mask;
    19aa:	69bb      	ldr	r3, [r7, #24]
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	461a      	mov	r2, r3
    19b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19b2:	4013      	ands	r3, r2
    19b4:	69fa      	ldr	r2, [r7, #28]
    19b6:	4313      	orrs	r3, r2
    19b8:	617b      	str	r3, [r7, #20]
    // Update pixel with the result of this operation
    *pixel_column = static_cast<uint8_t>(result);
    19ba:	697b      	ldr	r3, [r7, #20]
    19bc:	b2da      	uxtb	r2, r3
    19be:	69bb      	ldr	r3, [r7, #24]
    19c0:	701a      	strb	r2, [r3, #0]
  }
    19c2:	bf00      	nop
    19c4:	3730      	adds	r7, #48	; 0x30
    19c6:	46bd      	mov	sp, r7
    19c8:	bd80      	pop	{r7, pc}

000019ca <sjsu::Ssd1306::Update()>:
  /// Writes internal bitmap_ to the screen
  void Update() override
    19ca:	b580      	push	{r7, lr}
    19cc:	b084      	sub	sp, #16
    19ce:	af00      	add	r7, sp, #0
    19d0:	6078      	str	r0, [r7, #4]
  {
    SetHorizontalAddressMode();
    19d2:	6878      	ldr	r0, [r7, #4]
    19d4:	f7ff ff8a 	bl	18ec <sjsu::Ssd1306::SetHorizontalAddressMode()>
    for (size_t row = 0; row < kRows; row++)
    19d8:	2300      	movs	r3, #0
    19da:	60fb      	str	r3, [r7, #12]
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	2b07      	cmp	r3, #7
    19e0:	d81e      	bhi.n	1a20 <sjsu::Ssd1306::Update()+0x56>
    {
      for (size_t column = 0; column < kColumns; column++)
    19e2:	2300      	movs	r3, #0
    19e4:	60bb      	str	r3, [r7, #8]
    19e6:	68bb      	ldr	r3, [r7, #8]
    19e8:	2b7f      	cmp	r3, #127	; 0x7f
    19ea:	d815      	bhi.n	1a18 <sjsu::Ssd1306::Update()+0x4e>
      {
        Write(bitmap_[row][column], Transaction::kData);
    19ec:	6879      	ldr	r1, [r7, #4]
    19ee:	68fa      	ldr	r2, [r7, #12]
    19f0:	4613      	mov	r3, r2
    19f2:	015b      	lsls	r3, r3, #5
    19f4:	4413      	add	r3, r2
    19f6:	009b      	lsls	r3, r3, #2
    19f8:	4413      	add	r3, r2
    19fa:	18ca      	adds	r2, r1, r3
    19fc:	68bb      	ldr	r3, [r7, #8]
    19fe:	4413      	add	r3, r2
    1a00:	3310      	adds	r3, #16
    1a02:	781b      	ldrb	r3, [r3, #0]
    1a04:	4619      	mov	r1, r3
    1a06:	2301      	movs	r3, #1
    1a08:	2201      	movs	r2, #1
    1a0a:	6878      	ldr	r0, [r7, #4]
    1a0c:	f7ff fe44 	bl	1698 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)>
      for (size_t column = 0; column < kColumns; column++)
    1a10:	68bb      	ldr	r3, [r7, #8]
    1a12:	3301      	adds	r3, #1
    1a14:	60bb      	str	r3, [r7, #8]
    1a16:	e7e6      	b.n	19e6 <sjsu::Ssd1306::Update()+0x1c>
    for (size_t row = 0; row < kRows; row++)
    1a18:	68fb      	ldr	r3, [r7, #12]
    1a1a:	3301      	adds	r3, #1
    1a1c:	60fb      	str	r3, [r7, #12]
    1a1e:	e7dd      	b.n	19dc <sjsu::Ssd1306::Update()+0x12>
      }
    }
  }
    1a20:	bf00      	nop
    1a22:	3710      	adds	r7, #16
    1a24:	46bd      	mov	sp, r7
    1a26:	bd80      	pop	{r7, pc}

00001a28 <sjsu::PixelDisplay::Color_t::Color_t()>:
  struct Color_t
    1a28:	b480      	push	{r7}
    1a2a:	b083      	sub	sp, #12
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	2200      	movs	r2, #0
    1a34:	701a      	strb	r2, [r3, #0]
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	2200      	movs	r2, #0
    1a3a:	705a      	strb	r2, [r3, #1]
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	2200      	movs	r2, #0
    1a40:	709a      	strb	r2, [r3, #2]
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	2200      	movs	r2, #0
    1a46:	70da      	strb	r2, [r3, #3]
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	4618      	mov	r0, r3
    1a4c:	370c      	adds	r7, #12
    1a4e:	46bd      	mov	sp, r7
    1a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a54:	4770      	bx	lr

00001a56 <sjsu::Graphics::Graphics(sjsu::PixelDisplay&)>:
{
 public:
  /// Constructor for a graphics object.
  ///
  /// @param display - reference to a pixel display
  explicit Graphics(PixelDisplay & display)
    1a56:	b590      	push	{r4, r7, lr}
    1a58:	b083      	sub	sp, #12
    1a5a:	af00      	add	r7, sp, #0
    1a5c:	6078      	str	r0, [r7, #4]
    1a5e:	6039      	str	r1, [r7, #0]
      : display_(display), color_(), width_(0), height_(0)
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	683a      	ldr	r2, [r7, #0]
    1a64:	601a      	str	r2, [r3, #0]
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	2200      	movs	r2, #0
    1a6a:	605a      	str	r2, [r3, #4]
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	3304      	adds	r3, #4
    1a70:	4618      	mov	r0, r3
    1a72:	f7ff ffd9 	bl	1a28 <sjsu::PixelDisplay::Color_t::Color_t()>
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	2200      	movs	r2, #0
    1a7a:	609a      	str	r2, [r3, #8]
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	2200      	movs	r2, #0
    1a80:	60da      	str	r2, [r3, #12]
  {
    width_  = display.GetWidth();
    1a82:	683b      	ldr	r3, [r7, #0]
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	6838      	ldr	r0, [r7, #0]
    1a8a:	4798      	blx	r3
    1a8c:	4602      	mov	r2, r0
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	609a      	str	r2, [r3, #8]
    height_ = display.GetHeight();
    1a92:	683b      	ldr	r3, [r7, #0]
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	3304      	adds	r3, #4
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	6838      	ldr	r0, [r7, #0]
    1a9c:	4798      	blx	r3
    1a9e:	4602      	mov	r2, r0
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	60da      	str	r2, [r3, #12]
    color_  = display.AvailableColors();
    1aa4:	683b      	ldr	r3, [r7, #0]
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	3308      	adds	r3, #8
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	687c      	ldr	r4, [r7, #4]
    1aae:	6838      	ldr	r0, [r7, #0]
    1ab0:	4798      	blx	r3
    1ab2:	4603      	mov	r3, r0
    1ab4:	6063      	str	r3, [r4, #4]
  }
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	4618      	mov	r0, r3
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	bd90      	pop	{r4, r7, pc}

00001ac0 <sjsu::Graphics::Initialize()>:

  /// Initialize display hardware.
  void Initialize()
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
  {
    display_.Initialize();
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	330c      	adds	r3, #12
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	687a      	ldr	r2, [r7, #4]
    1ad4:	6812      	ldr	r2, [r2, #0]
    1ad6:	4610      	mov	r0, r2
    1ad8:	4798      	blx	r3
  }
    1ada:	bf00      	nop
    1adc:	3708      	adds	r7, #8
    1ade:	46bd      	mov	sp, r7
    1ae0:	bd80      	pop	{r7, pc}

00001ae2 <sjsu::Graphics::Update()>:

  /// Update the display.
  void Update()
    1ae2:	b580      	push	{r7, lr}
    1ae4:	b082      	sub	sp, #8
    1ae6:	af00      	add	r7, sp, #0
    1ae8:	6078      	str	r0, [r7, #4]
  {
    display_.Update();
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	3320      	adds	r3, #32
    1af2:	681b      	ldr	r3, [r3, #0]
    1af4:	687a      	ldr	r2, [r7, #4]
    1af6:	6812      	ldr	r2, [r2, #0]
    1af8:	4610      	mov	r0, r2
    1afa:	4798      	blx	r3
  }
    1afc:	bf00      	nop
    1afe:	3708      	adds	r7, #8
    1b00:	46bd      	mov	sp, r7
    1b02:	bd80      	pop	{r7, pc}

00001b04 <sjsu::Graphics::Clear()>:
  {
    display_.Disable();
  }

  /// Clears the display.
  void Clear()
    1b04:	b580      	push	{r7, lr}
    1b06:	b082      	sub	sp, #8
    1b08:	af00      	add	r7, sp, #0
    1b0a:	6078      	str	r0, [r7, #4]
  {
    display_.Clear();
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	3318      	adds	r3, #24
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	687a      	ldr	r2, [r7, #4]
    1b18:	6812      	ldr	r2, [r2, #0]
    1b1a:	4610      	mov	r0, r2
    1b1c:	4798      	blx	r3
  }
    1b1e:	bf00      	nop
    1b20:	3708      	adds	r7, #8
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	Address 0x0000000000001b26 is out of bounds.


00001b28 <sjsu::Graphics::DrawCharacter(long, long, char)>:
  /// Draw a character on the display.
  ///
  /// @param x0 - X coordinate to start printing to the screen
  /// @param y0 - Y coordinate to start printing to the screen
  /// @param letter - The character to write to the screen
  void DrawCharacter(int32_t x0, int32_t y0, char letter)
    1b28:	b580      	push	{r7, lr}
    1b2a:	b088      	sub	sp, #32
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	60f8      	str	r0, [r7, #12]
    1b30:	60b9      	str	r1, [r7, #8]
    1b32:	607a      	str	r2, [r7, #4]
    1b34:	70fb      	strb	r3, [r7, #3]
  {
    int32_t letter_position = int32_t{ letter };
    1b36:	78fb      	ldrb	r3, [r7, #3]
    1b38:	617b      	str	r3, [r7, #20]

    PixelDisplay::Color_t foreground = color_;
    1b3a:	68fb      	ldr	r3, [r7, #12]
    1b3c:	685b      	ldr	r3, [r3, #4]
    1b3e:	613b      	str	r3, [r7, #16]

    for (int32_t y = 0; y < 8; y++)
    1b40:	2300      	movs	r3, #0
    1b42:	61fb      	str	r3, [r7, #28]
    1b44:	69fb      	ldr	r3, [r7, #28]
    1b46:	2b07      	cmp	r3, #7
    1b48:	dc26      	bgt.n	1b98 <sjsu::Graphics::DrawCharacter(long, long, char)+0x70>
    {
      for (int32_t x = 0; x < 8; x++)
    1b4a:	2300      	movs	r3, #0
    1b4c:	61bb      	str	r3, [r7, #24]
    1b4e:	69bb      	ldr	r3, [r7, #24]
    1b50:	2b07      	cmp	r3, #7
    1b52:	dc1d      	bgt.n	1b90 <sjsu::Graphics::DrawCharacter(long, long, char)+0x68>
      {
        if (font8x8_basic[letter_position][y] & (1 << x))
    1b54:	4a14      	ldr	r2, [pc, #80]	; (1ba8 <sjsu::Graphics::DrawCharacter(long, long, char)+0x80>)
    1b56:	697b      	ldr	r3, [r7, #20]
    1b58:	00db      	lsls	r3, r3, #3
    1b5a:	441a      	add	r2, r3
    1b5c:	69fb      	ldr	r3, [r7, #28]
    1b5e:	4413      	add	r3, r2
    1b60:	781b      	ldrb	r3, [r3, #0]
    1b62:	461a      	mov	r2, r3
    1b64:	69bb      	ldr	r3, [r7, #24]
    1b66:	fa42 f303 	asr.w	r3, r2, r3
    1b6a:	f003 0301 	and.w	r3, r3, #1
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d00a      	beq.n	1b88 <sjsu::Graphics::DrawCharacter(long, long, char)+0x60>
        {
          DrawPixel(x0 + x, y0 + y);
    1b72:	68ba      	ldr	r2, [r7, #8]
    1b74:	69bb      	ldr	r3, [r7, #24]
    1b76:	4413      	add	r3, r2
    1b78:	4619      	mov	r1, r3
    1b7a:	687a      	ldr	r2, [r7, #4]
    1b7c:	69fb      	ldr	r3, [r7, #28]
    1b7e:	4413      	add	r3, r2
    1b80:	461a      	mov	r2, r3
    1b82:	68f8      	ldr	r0, [r7, #12]
    1b84:	f000 f812 	bl	1bac <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)>
      for (int32_t x = 0; x < 8; x++)
    1b88:	69bb      	ldr	r3, [r7, #24]
    1b8a:	3301      	adds	r3, #1
    1b8c:	61bb      	str	r3, [r7, #24]
    1b8e:	e7de      	b.n	1b4e <sjsu::Graphics::DrawCharacter(long, long, char)+0x26>
    for (int32_t y = 0; y < 8; y++)
    1b90:	69fb      	ldr	r3, [r7, #28]
    1b92:	3301      	adds	r3, #1
    1b94:	61fb      	str	r3, [r7, #28]
    1b96:	e7d5      	b.n	1b44 <sjsu::Graphics::DrawCharacter(long, long, char)+0x1c>
        }
      }
    }
    color_ = foreground;
    1b98:	68fb      	ldr	r3, [r7, #12]
    1b9a:	693a      	ldr	r2, [r7, #16]
    1b9c:	605a      	str	r2, [r3, #4]
  }
    1b9e:	bf00      	nop
    1ba0:	3720      	adds	r7, #32
    1ba2:	46bd      	mov	sp, r7
    1ba4:	bd80      	pop	{r7, pc}
    1ba6:	bf00      	nop
    1ba8:	10000134 	.word	0x10000134

00001bac <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)>:

  /// Put a pixel on a specific position.
  ///
  /// @param x - x coordinate to place the coordinate.
  /// @param y - y coordinate to place the coordinate.
  void DrawPixel(uint32_t x, uint32_t y)
    1bac:	b590      	push	{r4, r7, lr}
    1bae:	b085      	sub	sp, #20
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	60f8      	str	r0, [r7, #12]
    1bb4:	60b9      	str	r1, [r7, #8]
    1bb6:	607a      	str	r2, [r7, #4]
  {
    // Pixels outside of the bounds of the screen will not be drawn.
    if (x <= width_ && y <= height_)
    1bb8:	68fb      	ldr	r3, [r7, #12]
    1bba:	689b      	ldr	r3, [r3, #8]
    1bbc:	68ba      	ldr	r2, [r7, #8]
    1bbe:	429a      	cmp	r2, r3
    1bc0:	d810      	bhi.n	1be4 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)+0x38>
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	68db      	ldr	r3, [r3, #12]
    1bc6:	687a      	ldr	r2, [r7, #4]
    1bc8:	429a      	cmp	r2, r3
    1bca:	d80b      	bhi.n	1be4 <sjsu::Graphics::DrawPixel(unsigned long, unsigned long)+0x38>
    {
      display_.DrawPixel(x, y, color_);
    1bcc:	68fb      	ldr	r3, [r7, #12]
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	681b      	ldr	r3, [r3, #0]
    1bd2:	331c      	adds	r3, #28
    1bd4:	681c      	ldr	r4, [r3, #0]
    1bd6:	68fb      	ldr	r3, [r7, #12]
    1bd8:	6818      	ldr	r0, [r3, #0]
    1bda:	68b9      	ldr	r1, [r7, #8]
    1bdc:	687a      	ldr	r2, [r7, #4]
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	685b      	ldr	r3, [r3, #4]
    1be2:	47a0      	blx	r4
    }
  }
    1be4:	bf00      	nop
    1be6:	3714      	adds	r7, #20
    1be8:	46bd      	mov	sp, r7
    1bea:	bd90      	pop	{r4, r7, pc}

00001bec <sjsu::GraphicalTerminal::Initialize()>:
        graphics_(graphics),
        cache_(cache->buffer)
  {
  }

  void Initialize()
    1bec:	b580      	push	{r7, lr}
    1bee:	b082      	sub	sp, #8
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	6078      	str	r0, [r7, #4]
  {
    graphics_->Initialize();
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	695b      	ldr	r3, [r3, #20]
    1bf8:	4618      	mov	r0, r3
    1bfa:	f7ff ff61 	bl	1ac0 <sjsu::Graphics::Initialize()>
    graphics_->Clear();
    1bfe:	687b      	ldr	r3, [r7, #4]
    1c00:	695b      	ldr	r3, [r3, #20]
    1c02:	4618      	mov	r0, r3
    1c04:	f7ff ff7e 	bl	1b04 <sjsu::Graphics::Clear()>
    graphics_->Update();
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	695b      	ldr	r3, [r3, #20]
    1c0c:	4618      	mov	r0, r3
    1c0e:	f7ff ff68 	bl	1ae2 <sjsu::Graphics::Update()>
  }
    1c12:	bf00      	nop
    1c14:	3708      	adds	r7, #8
    1c16:	46bd      	mov	sp, r7
    1c18:	bd80      	pop	{r7, pc}

00001c1a <sjsu::GraphicalTerminal::printf(char const*, ...)>:

  int printf(const char * format, ...)  // NOLINT
    1c1a:	b40e      	push	{r1, r2, r3}
    1c1c:	b590      	push	{r4, r7, lr}
    1c1e:	b0c6      	sub	sp, #280	; 0x118
    1c20:	af00      	add	r7, sp, #0
    1c22:	1d3b      	adds	r3, r7, #4
    1c24:	6018      	str	r0, [r3, #0]
  {
    char buffer[256];

    va_list args;
    va_start(args, format);
    1c26:	f507 7294 	add.w	r2, r7, #296	; 0x128
    1c2a:	f107 0308 	add.w	r3, r7, #8
    1c2e:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-nonliteral"
    uint32_t characters = vsnprintf(buffer, sizeof(buffer), format, args);
    1c30:	f107 0308 	add.w	r3, r7, #8
    1c34:	f107 000c 	add.w	r0, r7, #12
    1c38:	681b      	ldr	r3, [r3, #0]
    1c3a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    1c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1c42:	f002 ff6b 	bl	4b1c <vsnprintf>
    1c46:	4603      	mov	r3, r0
    1c48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
#pragma GCC diagnostic pop
    va_end(args);

    uint32_t pos = 0;
    1c4c:	2300      	movs	r3, #0
    1c4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    for (; pos < characters; pos++)
    1c52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    1c56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    1c5a:	429a      	cmp	r2, r3
    1c5c:	d253      	bcs.n	1d06 <sjsu::GraphicalTerminal::printf(char const*, ...)+0xec>
    {
      char character = buffer[pos];
    1c5e:	f107 020c 	add.w	r2, r7, #12
    1c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    1c66:	4413      	add	r3, r2
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      switch (character)
    1c6e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
    1c72:	2b0a      	cmp	r3, #10
    1c74:	d10b      	bne.n	1c8e <sjsu::GraphicalTerminal::printf(char const*, ...)+0x74>
      {
        case '\n':
          column_ = 0;
    1c76:	1d3b      	adds	r3, r7, #4
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	2200      	movs	r2, #0
    1c7c:	605a      	str	r2, [r3, #4]
          row_++;
    1c7e:	1d3b      	adds	r3, r7, #4
    1c80:	681b      	ldr	r3, [r3, #0]
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	1c5a      	adds	r2, r3, #1
    1c86:	1d3b      	adds	r3, r7, #4
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	601a      	str	r2, [r3, #0]
          break;
    1c8c:	e035      	b.n	1cfa <sjsu::GraphicalTerminal::printf(char const*, ...)+0xe0>
        default:
          GetChar((row_ + row_start_) % max_rows_, column_) = character;
    1c8e:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
    1c92:	1d3b      	adds	r3, r7, #4
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	681a      	ldr	r2, [r3, #0]
    1c98:	1d3b      	adds	r3, r7, #4
    1c9a:	681b      	ldr	r3, [r3, #0]
    1c9c:	689b      	ldr	r3, [r3, #8]
    1c9e:	4413      	add	r3, r2
    1ca0:	1d3a      	adds	r2, r7, #4
    1ca2:	6812      	ldr	r2, [r2, #0]
    1ca4:	68d2      	ldr	r2, [r2, #12]
    1ca6:	fbb3 f1f2 	udiv	r1, r3, r2
    1caa:	fb02 f201 	mul.w	r2, r2, r1
    1cae:	1a99      	subs	r1, r3, r2
    1cb0:	1d3b      	adds	r3, r7, #4
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	685a      	ldr	r2, [r3, #4]
    1cb6:	1d3b      	adds	r3, r7, #4
    1cb8:	6818      	ldr	r0, [r3, #0]
    1cba:	f000 f8cb 	bl	1e54 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1cbe:	4603      	mov	r3, r0
    1cc0:	4622      	mov	r2, r4
    1cc2:	701a      	strb	r2, [r3, #0]
          column_++;
    1cc4:	1d3b      	adds	r3, r7, #4
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	685b      	ldr	r3, [r3, #4]
    1cca:	1c5a      	adds	r2, r3, #1
    1ccc:	1d3b      	adds	r3, r7, #4
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	605a      	str	r2, [r3, #4]
          if (column_ >= max_columns_)
    1cd2:	1d3b      	adds	r3, r7, #4
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	685a      	ldr	r2, [r3, #4]
    1cd8:	1d3b      	adds	r3, r7, #4
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	691b      	ldr	r3, [r3, #16]
    1cde:	429a      	cmp	r2, r3
    1ce0:	d30a      	bcc.n	1cf8 <sjsu::GraphicalTerminal::printf(char const*, ...)+0xde>
          {
            column_ = 0;
    1ce2:	1d3b      	adds	r3, r7, #4
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	2200      	movs	r2, #0
    1ce8:	605a      	str	r2, [r3, #4]
            row_++;
    1cea:	1d3b      	adds	r3, r7, #4
    1cec:	681b      	ldr	r3, [r3, #0]
    1cee:	681b      	ldr	r3, [r3, #0]
    1cf0:	1c5a      	adds	r2, r3, #1
    1cf2:	1d3b      	adds	r3, r7, #4
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	601a      	str	r2, [r3, #0]
          }
          break;
    1cf8:	bf00      	nop
    for (; pos < characters; pos++)
    1cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    1cfe:	3301      	adds	r3, #1
    1d00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    1d04:	e7a5      	b.n	1c52 <sjsu::GraphicalTerminal::printf(char const*, ...)+0x38>
      }
    }
    Update();
    1d06:	1d3b      	adds	r3, r7, #4
    1d08:	6818      	ldr	r0, [r3, #0]
    1d0a:	f000 f83c 	bl	1d86 <sjsu::GraphicalTerminal::Update()>
    if (row_ >= max_rows_)
    1d0e:	1d3b      	adds	r3, r7, #4
    1d10:	681b      	ldr	r3, [r3, #0]
    1d12:	681a      	ldr	r2, [r3, #0]
    1d14:	1d3b      	adds	r3, r7, #4
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	68db      	ldr	r3, [r3, #12]
    1d1a:	429a      	cmp	r2, r3
    1d1c:	d329      	bcc.n	1d72 <sjsu::GraphicalTerminal::printf(char const*, ...)+0x158>
    {
      row_start_ = (row_start_ + 1) % max_rows_;
    1d1e:	1d3b      	adds	r3, r7, #4
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	689b      	ldr	r3, [r3, #8]
    1d24:	3301      	adds	r3, #1
    1d26:	1d3a      	adds	r2, r7, #4
    1d28:	6812      	ldr	r2, [r2, #0]
    1d2a:	68d2      	ldr	r2, [r2, #12]
    1d2c:	fbb3 f1f2 	udiv	r1, r3, r2
    1d30:	fb02 f201 	mul.w	r2, r2, r1
    1d34:	1a9a      	subs	r2, r3, r2
    1d36:	1d3b      	adds	r3, r7, #4
    1d38:	681b      	ldr	r3, [r3, #0]
    1d3a:	609a      	str	r2, [r3, #8]
      row_       = max_rows_ - 1;
    1d3c:	1d3b      	adds	r3, r7, #4
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	68db      	ldr	r3, [r3, #12]
    1d42:	1e5a      	subs	r2, r3, #1
    1d44:	1d3b      	adds	r3, r7, #4
    1d46:	681b      	ldr	r3, [r3, #0]
    1d48:	601a      	str	r2, [r3, #0]
      ClearRow((row_ + row_start_) % max_rows_);
    1d4a:	1d3b      	adds	r3, r7, #4
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	681a      	ldr	r2, [r3, #0]
    1d50:	1d3b      	adds	r3, r7, #4
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	689b      	ldr	r3, [r3, #8]
    1d56:	4413      	add	r3, r2
    1d58:	1d3a      	adds	r2, r7, #4
    1d5a:	6812      	ldr	r2, [r2, #0]
    1d5c:	68d2      	ldr	r2, [r2, #12]
    1d5e:	fbb3 f1f2 	udiv	r1, r3, r2
    1d62:	fb02 f201 	mul.w	r2, r2, r1
    1d66:	1a9a      	subs	r2, r3, r2
    1d68:	1d3b      	adds	r3, r7, #4
    1d6a:	4611      	mov	r1, r2
    1d6c:	6818      	ldr	r0, [r3, #0]
    1d6e:	f000 f854 	bl	1e1a <sjsu::GraphicalTerminal::ClearRow(unsigned long)>
    }
    return pos;
    1d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  }
    1d76:	4618      	mov	r0, r3
    1d78:	f507 778c 	add.w	r7, r7, #280	; 0x118
    1d7c:	46bd      	mov	sp, r7
    1d7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    1d82:	b003      	add	sp, #12
    1d84:	4770      	bx	lr

00001d86 <sjsu::GraphicalTerminal::Update()>:
  {
    column_ = 0;
    return *this;
  }

  GraphicalTerminal & Update()
    1d86:	b590      	push	{r4, r7, lr}
    1d88:	b087      	sub	sp, #28
    1d8a:	af00      	add	r7, sp, #0
    1d8c:	6078      	str	r0, [r7, #4]
  {
    graphics_->Clear();
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	695b      	ldr	r3, [r3, #20]
    1d92:	4618      	mov	r0, r3
    1d94:	f7ff feb6 	bl	1b04 <sjsu::Graphics::Clear()>
    for (int32_t i = 0; i < static_cast<int32_t>(max_rows_); i++)
    1d98:	2300      	movs	r3, #0
    1d9a:	617b      	str	r3, [r7, #20]
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	68db      	ldr	r3, [r3, #12]
    1da0:	461a      	mov	r2, r3
    1da2:	697b      	ldr	r3, [r7, #20]
    1da4:	4293      	cmp	r3, r2
    1da6:	da2e      	bge.n	1e06 <sjsu::GraphicalTerminal::Update()+0x80>
    {
      for (int32_t j = 0; j < static_cast<int32_t>(max_columns_); j++)
    1da8:	2300      	movs	r3, #0
    1daa:	613b      	str	r3, [r7, #16]
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	691b      	ldr	r3, [r3, #16]
    1db0:	461a      	mov	r2, r3
    1db2:	693b      	ldr	r3, [r7, #16]
    1db4:	4293      	cmp	r3, r2
    1db6:	da22      	bge.n	1dfe <sjsu::GraphicalTerminal::Update()+0x78>
      {
        int32_t x = j * kCharacterWidth;
    1db8:	693b      	ldr	r3, [r7, #16]
    1dba:	00db      	lsls	r3, r3, #3
    1dbc:	60fb      	str	r3, [r7, #12]
        int32_t y = i * kCharacterHeight;
    1dbe:	697b      	ldr	r3, [r7, #20]
    1dc0:	00db      	lsls	r3, r3, #3
    1dc2:	60bb      	str	r3, [r7, #8]
        graphics_->DrawCharacter(
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	695c      	ldr	r4, [r3, #20]
            x, y, GetChar(((i + row_start_) % max_rows_), j));
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	689a      	ldr	r2, [r3, #8]
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	4413      	add	r3, r2
    1dd0:	687a      	ldr	r2, [r7, #4]
    1dd2:	68d2      	ldr	r2, [r2, #12]
    1dd4:	fbb3 f1f2 	udiv	r1, r3, r2
    1dd8:	fb02 f201 	mul.w	r2, r2, r1
    1ddc:	1a9b      	subs	r3, r3, r2
    1dde:	693a      	ldr	r2, [r7, #16]
    1de0:	4619      	mov	r1, r3
    1de2:	6878      	ldr	r0, [r7, #4]
    1de4:	f000 f836 	bl	1e54 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1de8:	4603      	mov	r3, r0
        graphics_->DrawCharacter(
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	68ba      	ldr	r2, [r7, #8]
    1dee:	68f9      	ldr	r1, [r7, #12]
    1df0:	4620      	mov	r0, r4
    1df2:	f7ff fe99 	bl	1b28 <sjsu::Graphics::DrawCharacter(long, long, char)>
      for (int32_t j = 0; j < static_cast<int32_t>(max_columns_); j++)
    1df6:	693b      	ldr	r3, [r7, #16]
    1df8:	3301      	adds	r3, #1
    1dfa:	613b      	str	r3, [r7, #16]
    1dfc:	e7d6      	b.n	1dac <sjsu::GraphicalTerminal::Update()+0x26>
    for (int32_t i = 0; i < static_cast<int32_t>(max_rows_); i++)
    1dfe:	697b      	ldr	r3, [r7, #20]
    1e00:	3301      	adds	r3, #1
    1e02:	617b      	str	r3, [r7, #20]
    1e04:	e7ca      	b.n	1d9c <sjsu::GraphicalTerminal::Update()+0x16>
      }
    }
    graphics_->Update();
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	695b      	ldr	r3, [r3, #20]
    1e0a:	4618      	mov	r0, r3
    1e0c:	f7ff fe69 	bl	1ae2 <sjsu::Graphics::Update()>
    return *this;
    1e10:	687b      	ldr	r3, [r7, #4]
  }
    1e12:	4618      	mov	r0, r3
    1e14:	371c      	adds	r7, #28
    1e16:	46bd      	mov	sp, r7
    1e18:	bd90      	pop	{r4, r7, pc}

00001e1a <sjsu::GraphicalTerminal::ClearRow(unsigned long)>:

  GraphicalTerminal & ClearRow(uint32_t row_location)
    1e1a:	b580      	push	{r7, lr}
    1e1c:	b084      	sub	sp, #16
    1e1e:	af00      	add	r7, sp, #0
    1e20:	6078      	str	r0, [r7, #4]
    1e22:	6039      	str	r1, [r7, #0]
  {
    for (uint32_t i = 0; i < max_columns_; i++)
    1e24:	2300      	movs	r3, #0
    1e26:	60fb      	str	r3, [r7, #12]
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	691b      	ldr	r3, [r3, #16]
    1e2c:	68fa      	ldr	r2, [r7, #12]
    1e2e:	429a      	cmp	r2, r3
    1e30:	d20b      	bcs.n	1e4a <sjsu::GraphicalTerminal::ClearRow(unsigned long)+0x30>
    {
      GetChar(row_location, i) = ' ';
    1e32:	68fa      	ldr	r2, [r7, #12]
    1e34:	6839      	ldr	r1, [r7, #0]
    1e36:	6878      	ldr	r0, [r7, #4]
    1e38:	f000 f80c 	bl	1e54 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>
    1e3c:	4603      	mov	r3, r0
    1e3e:	2220      	movs	r2, #32
    1e40:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < max_columns_; i++)
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	3301      	adds	r3, #1
    1e46:	60fb      	str	r3, [r7, #12]
    1e48:	e7ee      	b.n	1e28 <sjsu::GraphicalTerminal::ClearRow(unsigned long)+0xe>
    }
    return *this;
    1e4a:	687b      	ldr	r3, [r7, #4]
  }
    1e4c:	4618      	mov	r0, r3
    1e4e:	3710      	adds	r7, #16
    1e50:	46bd      	mov	sp, r7
    1e52:	bd80      	pop	{r7, pc}

00001e54 <sjsu::GraphicalTerminal::GetChar(unsigned long, unsigned long)>:
    graphics_->Update();
    return *this;
  }

 private:
  char & GetChar(uint32_t row, uint32_t column)
    1e54:	b480      	push	{r7}
    1e56:	b085      	sub	sp, #20
    1e58:	af00      	add	r7, sp, #0
    1e5a:	60f8      	str	r0, [r7, #12]
    1e5c:	60b9      	str	r1, [r7, #8]
    1e5e:	607a      	str	r2, [r7, #4]
  {
    return cache_[(row * max_columns_) + column];
    1e60:	68fb      	ldr	r3, [r7, #12]
    1e62:	699a      	ldr	r2, [r3, #24]
    1e64:	68fb      	ldr	r3, [r7, #12]
    1e66:	691b      	ldr	r3, [r3, #16]
    1e68:	68b9      	ldr	r1, [r7, #8]
    1e6a:	fb01 f103 	mul.w	r1, r1, r3
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	440b      	add	r3, r1
    1e72:	4413      	add	r3, r2
  }
    1e74:	4618      	mov	r0, r3
    1e76:	3714      	adds	r7, #20
    1e78:	46bd      	mov	sp, r7
    1e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e7e:	4770      	bx	lr

00001e80 <main>:
#include "L3_Application/graphical_terminal.hpp"
#include "utility/log.hpp"
#include "utility/time.hpp"

int main()
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b0b0      	sub	sp, #192	; 0xc0
    1e84:	af02      	add	r7, sp, #8
LOG_INFO("Starting OledPrint Application...");
    1e86:	230b      	movs	r3, #11
    1e88:	4a3f      	ldr	r2, [pc, #252]	; (1f88 <main+0x108>)
    1e8a:	4940      	ldr	r1, [pc, #256]	; (1f8c <main+0x10c>)
    1e8c:	4840      	ldr	r0, [pc, #256]	; (1f90 <main+0x110>)
    1e8e:	f002 fe23 	bl	4ad8 <printf>
  inline static sjsu::lpc40xx::Gpio led2 = sjsu::lpc40xx::Gpio(1, 24);
  inline static sjsu::lpc40xx::Gpio led3 = sjsu::lpc40xx::Gpio(1, 18);

  [[gnu::always_inline]] inline static sjsu::Graphics & Oled()
  {
    static sjsu::lpc40xx::Gpio oled_cs = sjsu::lpc40xx::Gpio(1, 22);
    1e92:	4b40      	ldr	r3, [pc, #256]	; (1f94 <main+0x114>)
    1e94:	681b      	ldr	r3, [r3, #0]
    1e96:	f003 0301 	and.w	r3, r3, #1
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d108      	bne.n	1eb0 <main+0x30>
    1e9e:	2300      	movs	r3, #0
    1ea0:	2216      	movs	r2, #22
    1ea2:	2101      	movs	r1, #1
    1ea4:	483c      	ldr	r0, [pc, #240]	; (1f98 <main+0x118>)
    1ea6:	f7fe ff91 	bl	dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1eaa:	4b3a      	ldr	r3, [pc, #232]	; (1f94 <main+0x114>)
    1eac:	2201      	movs	r2, #1
    1eae:	601a      	str	r2, [r3, #0]
    static sjsu::lpc40xx::Gpio oled_dc = sjsu::lpc40xx::Gpio(1, 25);
    1eb0:	4b3a      	ldr	r3, [pc, #232]	; (1f9c <main+0x11c>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	f003 0301 	and.w	r3, r3, #1
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d108      	bne.n	1ece <main+0x4e>
    1ebc:	2300      	movs	r3, #0
    1ebe:	2219      	movs	r2, #25
    1ec0:	2101      	movs	r1, #1
    1ec2:	4837      	ldr	r0, [pc, #220]	; (1fa0 <main+0x120>)
    1ec4:	f7fe ff82 	bl	dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    1ec8:	4b34      	ldr	r3, [pc, #208]	; (1f9c <main+0x11c>)
    1eca:	2201      	movs	r2, #1
    1ecc:	601a      	str	r2, [r3, #0]
    static sjsu::Ssd1306 oled_display(spi1, oled_cs, oled_dc);
    static sjsu::Graphics oled(oled_display);
    1ece:	4b35      	ldr	r3, [pc, #212]	; (1fa4 <main+0x124>)
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	f003 0301 	and.w	r3, r3, #1
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d106      	bne.n	1ee8 <main+0x68>
    1eda:	4933      	ldr	r1, [pc, #204]	; (1fa8 <main+0x128>)
    1edc:	4833      	ldr	r0, [pc, #204]	; (1fac <main+0x12c>)
    1ede:	f7ff fdba 	bl	1a56 <sjsu::Graphics::Graphics(sjsu::PixelDisplay&)>
    1ee2:	4b30      	ldr	r3, [pc, #192]	; (1fa4 <main+0x124>)
    1ee4:	2201      	movs	r2, #1
    1ee6:	601a      	str	r2, [r3, #0]
    return oled;
    1ee8:	4b30      	ldr	r3, [pc, #192]	; (1fac <main+0x12c>)
  sjsu::Graphics & oled_graphics = sjtwo::Oled();
    1eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  sjsu::TerminalCache_t<
      sjsu::Ssd1306::kHeight / sjsu::GraphicalTerminal::kCharacterHeight,
      sjsu::Ssd1306::kWidth / sjsu::GraphicalTerminal::kCharacterWidth>
      cache;
    1eee:	2300      	movs	r3, #0
    1ef0:	623b      	str	r3, [r7, #32]
    1ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1ef6:	227c      	movs	r2, #124	; 0x7c
    1ef8:	2100      	movs	r1, #0
    1efa:	4618      	mov	r0, r3
    1efc:	f006 f956 	bl	81ac <memset>
  sjsu::GraphicalTerminal oled_terminal(&oled_graphics, &cache);
    1f00:	f107 0220 	add.w	r2, r7, #32
    1f04:	1d3b      	adds	r3, r7, #4
    1f06:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
    1f0a:	4618      	mov	r0, r3
    1f0c:	f000 fafc 	bl	2508 <sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)>

  oled_terminal.Initialize();
    1f10:	1d3b      	adds	r3, r7, #4
    1f12:	4618      	mov	r0, r3
    1f14:	f7ff fe6a 	bl	1bec <sjsu::GraphicalTerminal::Initialize()>

  LOG_INFO("Demonstrating printf capabilities...");
    1f18:	2315      	movs	r3, #21
    1f1a:	4a1b      	ldr	r2, [pc, #108]	; (1f88 <main+0x108>)
    1f1c:	4924      	ldr	r1, [pc, #144]	; (1fb0 <main+0x130>)
    1f1e:	4825      	ldr	r0, [pc, #148]	; (1fb4 <main+0x134>)
    1f20:	f002 fdda 	bl	4ad8 <printf>
  oled_terminal.printf("Vincent Saw\n");
    1f24:	1d3b      	adds	r3, r7, #4
    1f26:	4924      	ldr	r1, [pc, #144]	; (1fb8 <main+0x138>)
    1f28:	4618      	mov	r0, r3
    1f2a:	f7ff fe76 	bl	1c1a <sjsu::GraphicalTerminal::printf(char const*, ...)>
  //oled_terminal.printf("Float: %.1f\nInteger: %d", 234.5, 15);

LOG_INFO("Starting Hello World Application");  
    1f2e:	2319      	movs	r3, #25
    1f30:	4a15      	ldr	r2, [pc, #84]	; (1f88 <main+0x108>)
    1f32:	4922      	ldr	r1, [pc, #136]	; (1fbc <main+0x13c>)
    1f34:	4822      	ldr	r0, [pc, #136]	; (1fc0 <main+0x140>)
    1f36:	f002 fdcf 	bl	4ad8 <printf>
while (true)
  {
    for (uint8_t i = 0; i < 16; i++)
    1f3a:	2300      	movs	r3, #0
    1f3c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    1f40:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
    1f44:	2b0f      	cmp	r3, #15
    1f46:	d8f8      	bhi.n	1f3a <main+0xba>
    {
      LOG_INFO("CMPE030-4 0x%X", i);
    1f48:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
    1f4c:	9300      	str	r3, [sp, #0]
    1f4e:	231e      	movs	r3, #30
    1f50:	4a0d      	ldr	r2, [pc, #52]	; (1f88 <main+0x108>)
    1f52:	491c      	ldr	r1, [pc, #112]	; (1fc4 <main+0x144>)
    1f54:	481c      	ldr	r0, [pc, #112]	; (1fc8 <main+0x148>)
    1f56:	f002 fdbf 	bl	4ad8 <printf>
      sjsu::Delay(500ms);
    1f5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
    1f5e:	4618      	mov	r0, r3
    1f60:	f000 faf4 	bl	254c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>
    1f64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    1f68:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
    1f6c:	4611      	mov	r1, r2
    1f6e:	4618      	mov	r0, r3
    1f70:	f000 fa55 	bl	241e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1f74:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
    1f78:	f7fe fd59 	bl	a2e <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
    for (uint8_t i = 0; i < 16; i++)
    1f7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
    1f80:	3301      	adds	r3, #1
    1f82:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    1f86:	e7db      	b.n	1f40 <main+0xc0>
    1f88:	00008450 	.word	0x00008450
    1f8c:	0000867c 	.word	0x0000867c
    1f90:	0000845c 	.word	0x0000845c
    1f94:	10001238 	.word	0x10001238
    1f98:	10001218 	.word	0x10001218
    1f9c:	1000125c 	.word	0x1000125c
    1fa0:	1000123c 	.word	0x1000123c
    1fa4:	10001270 	.word	0x10001270
    1fa8:	1000053c 	.word	0x1000053c
    1fac:	10001260 	.word	0x10001260
    1fb0:	00008688 	.word	0x00008688
    1fb4:	000084b8 	.word	0x000084b8
    1fb8:	00008518 	.word	0x00008518
    1fbc:	00008694 	.word	0x00008694
    1fc0:	00008528 	.word	0x00008528
    1fc4:	000086a0 	.word	0x000086a0
    1fc8:	00008584 	.word	0x00008584

00001fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1fcc:	b580      	push	{r7, lr}
    1fce:	b084      	sub	sp, #16
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	60f8      	str	r0, [r7, #12]
    1fd4:	460b      	mov	r3, r1
    1fd6:	80ba      	strh	r2, [r7, #4]
    1fd8:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    1fda:	793b      	ldrb	r3, [r7, #4]
    1fdc:	461a      	mov	r2, r3
    1fde:	797b      	ldrb	r3, [r7, #5]
    1fe0:	7af9      	ldrb	r1, [r7, #11]
    1fe2:	68f8      	ldr	r0, [r7, #12]
    1fe4:	f000 fabf 	bl	2566 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    1fe8:	4603      	mov	r3, r0
}
    1fea:	4618      	mov	r0, r3
    1fec:	3710      	adds	r7, #16
    1fee:	46bd      	mov	sp, r7
    1ff0:	bd80      	pop	{r7, pc}

00001ff2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    1ff2:	b580      	push	{r7, lr}
    1ff4:	b084      	sub	sp, #16
    1ff6:	af00      	add	r7, sp, #0
    1ff8:	6078      	str	r0, [r7, #4]
    1ffa:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    1ffc:	687b      	ldr	r3, [r7, #4]
    1ffe:	4618      	mov	r0, r3
    2000:	f7ff f922 	bl	1248 <units::linear_scale<float>::operator()() const>
    2004:	eef0 6a40 	vmov.f32	s13, s0
    2008:	683b      	ldr	r3, [r7, #0]
    200a:	ee07 3a90 	vmov	s15, r3
    200e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    2016:	f107 030c 	add.w	r3, r7, #12
    201a:	eeb0 0a47 	vmov.f32	s0, s14
    201e:	4618      	mov	r0, r3
    2020:	f7fe fb8d 	bl	73e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2024:	68fb      	ldr	r3, [r7, #12]
	}
    2026:	4618      	mov	r0, r3
    2028:	3710      	adds	r7, #16
    202a:	46bd      	mov	sp, r7
    202c:	bd80      	pop	{r7, pc}

0000202e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>:
      operator""us()
    202e:	b580      	push	{r7, lr}
    2030:	b082      	sub	sp, #8
    2032:	af00      	add	r7, sp, #0
    2034:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	4618      	mov	r0, r3
    203a:	f000 fac1 	bl	25c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>
    203e:	bf00      	nop
    2040:	6878      	ldr	r0, [r7, #4]
    2042:	3708      	adds	r7, #8
    2044:	46bd      	mov	sp, r7
    2046:	bd80      	pop	{r7, pc}

00002048 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    2048:	b580      	push	{r7, lr}
    204a:	b084      	sub	sp, #16
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
    2050:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    2052:	f107 0308 	add.w	r3, r7, #8
    2056:	6839      	ldr	r1, [r7, #0]
    2058:	4618      	mov	r0, r3
    205a:	f000 fac5 	bl	25e8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    205e:	f107 0308 	add.w	r3, r7, #8
    2062:	4618      	mov	r0, r3
    2064:	f7fe faec 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    2068:	4602      	mov	r2, r0
    206a:	460b      	mov	r3, r1
    206c:	6879      	ldr	r1, [r7, #4]
    206e:	e9c1 2300 	strd	r2, r3, [r1]
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	4618      	mov	r0, r3
    2076:	3710      	adds	r7, #16
    2078:	46bd      	mov	sp, r7
    207a:	bd80      	pop	{r7, pc}

0000207c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
    207c:	b590      	push	{r4, r7, lr}
    207e:	b083      	sub	sp, #12
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
    2084:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
    2086:	687b      	ldr	r3, [r7, #4]
    2088:	4618      	mov	r0, r3
    208a:	f7fe f99d 	bl	3c8 <std::_Function_base::_Function_base()>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
    208e:	683b      	ldr	r3, [r7, #0]
    2090:	4618      	mov	r0, r3
    2092:	f000 fab8 	bl	2606 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2096:	4603      	mov	r3, r0
    2098:	2b00      	cmp	r3, #0
    209a:	d00f      	beq.n	20bc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    209c:	687c      	ldr	r4, [r7, #4]
    209e:	463b      	mov	r3, r7
    20a0:	4618      	mov	r0, r3
    20a2:	f000 fac0 	bl	2626 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    20a6:	4603      	mov	r3, r0
    20a8:	4619      	mov	r1, r3
    20aa:	4620      	mov	r0, r4
    20ac:	f000 fac6 	bl	263c <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    20b0:	687b      	ldr	r3, [r7, #4]
    20b2:	4a05      	ldr	r2, [pc, #20]	; (20c8 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x4c>)
    20b4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	4a04      	ldr	r2, [pc, #16]	; (20cc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x50>)
    20ba:	609a      	str	r2, [r3, #8]
	  }
      }
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	4618      	mov	r0, r3
    20c0:	370c      	adds	r7, #12
    20c2:	46bd      	mov	sp, r7
    20c4:	bd90      	pop	{r4, r7, pc}
    20c6:	bf00      	nop
    20c8:	00002661 	.word	0x00002661
    20cc:	00002685 	.word	0x00002685

000020d0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>:
	max() noexcept
    20d0:	b580      	push	{r7, lr}
    20d2:	b084      	sub	sp, #16
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    20d8:	f000 faff 	bl	26da <std::chrono::duration_values<long long>::max()>
    20dc:	4602      	mov	r2, r0
    20de:	460b      	mov	r3, r1
    20e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    20e4:	f107 0308 	add.w	r3, r7, #8
    20e8:	4619      	mov	r1, r3
    20ea:	6878      	ldr	r0, [r7, #4]
    20ec:	f7fe fade 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
    20f0:	6878      	ldr	r0, [r7, #4]
    20f2:	3710      	adds	r7, #16
    20f4:	46bd      	mov	sp, r7
    20f6:	bd80      	pop	{r7, pc}

000020f8 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    20f8:	b5b0      	push	{r4, r5, r7, lr}
    20fa:	b086      	sub	sp, #24
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	e9d3 2300 	ldrd	r2, r3, [r3]
    2108:	e9c7 2302 	strd	r2, r3, [r7, #8]
    210c:	f107 0308 	add.w	r3, r7, #8
    2110:	4618      	mov	r0, r3
    2112:	f7fe fa95 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    2116:	4604      	mov	r4, r0
    2118:	460d      	mov	r5, r1
    211a:	683b      	ldr	r3, [r7, #0]
    211c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2120:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2124:	f107 0310 	add.w	r3, r7, #16
    2128:	4618      	mov	r0, r3
    212a:	f7fe fa89 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    212e:	4602      	mov	r2, r0
    2130:	460b      	mov	r3, r1
    2132:	429d      	cmp	r5, r3
    2134:	bf06      	itte	eq
    2136:	4294      	cmpeq	r4, r2
    2138:	2301      	moveq	r3, #1
    213a:	2300      	movne	r3, #0
    213c:	b2db      	uxtb	r3, r3
      }
    213e:	4618      	mov	r0, r3
    2140:	3718      	adds	r7, #24
    2142:	46bd      	mov	sp, r7
    2144:	bdb0      	pop	{r4, r5, r7, pc}

00002146 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    2146:	b580      	push	{r7, lr}
    2148:	b082      	sub	sp, #8
    214a:	af00      	add	r7, sp, #0
    214c:	6078      	str	r0, [r7, #4]
    214e:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    2150:	683b      	ldr	r3, [r7, #0]
    2152:	4618      	mov	r0, r3
    2154:	f7fe f959 	bl	40a <std::_Function_base::_M_empty() const>
    2158:	4603      	mov	r3, r0
    215a:	2b00      	cmp	r3, #0
    215c:	d001      	beq.n	2162 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const+0x1c>
	__throw_bad_function_call();
    215e:	f004 fd4b 	bl	6bf8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    2162:	683b      	ldr	r3, [r7, #0]
    2164:	68db      	ldr	r3, [r3, #12]
    2166:	6839      	ldr	r1, [r7, #0]
    2168:	687a      	ldr	r2, [r7, #4]
    216a:	4610      	mov	r0, r2
    216c:	4798      	blx	r3
    216e:	bf00      	nop
    }
    2170:	6878      	ldr	r0, [r7, #4]
    2172:	3708      	adds	r7, #8
    2174:	46bd      	mov	sp, r7
    2176:	bd80      	pop	{r7, pc}

00002178 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    2178:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    217c:	b08a      	sub	sp, #40	; 0x28
    217e:	af00      	add	r7, sp, #0
    2180:	60f8      	str	r0, [r7, #12]
    2182:	60b9      	str	r1, [r7, #8]
    2184:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    2186:	68bb      	ldr	r3, [r7, #8]
    2188:	e9d3 2300 	ldrd	r2, r3, [r3]
    218c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    2190:	f107 0318 	add.w	r3, r7, #24
    2194:	4618      	mov	r0, r3
    2196:	f7fe fa53 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    219a:	4604      	mov	r4, r0
    219c:	460d      	mov	r5, r1
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    21a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    21a8:	f107 0320 	add.w	r3, r7, #32
    21ac:	4618      	mov	r0, r3
    21ae:	f7fe fa47 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    21b2:	4602      	mov	r2, r0
    21b4:	460b      	mov	r3, r1
    21b6:	eb14 0802 	adds.w	r8, r4, r2
    21ba:	eb45 0903 	adc.w	r9, r5, r3
    21be:	e9c7 8904 	strd	r8, r9, [r7, #16]
    21c2:	f107 0310 	add.w	r3, r7, #16
    21c6:	4619      	mov	r1, r3
    21c8:	68f8      	ldr	r0, [r7, #12]
    21ca:	f7fe fa6f 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    21ce:	68f8      	ldr	r0, [r7, #12]
    21d0:	3728      	adds	r7, #40	; 0x28
    21d2:	46bd      	mov	sp, r7
    21d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

000021d8 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator<=(const duration<_Rep1, _Period1>& __lhs,
    21d8:	b580      	push	{r7, lr}
    21da:	b082      	sub	sp, #8
    21dc:	af00      	add	r7, sp, #0
    21de:	6078      	str	r0, [r7, #4]
    21e0:	6039      	str	r1, [r7, #0]
      { return !(__rhs < __lhs); }
    21e2:	6879      	ldr	r1, [r7, #4]
    21e4:	6838      	ldr	r0, [r7, #0]
    21e6:	f7fe fa39 	bl	65c <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    21ea:	4603      	mov	r3, r0
    21ec:	f083 0301 	eor.w	r3, r3, #1
    21f0:	b2db      	uxtb	r3, r3
    21f2:	4618      	mov	r0, r3
    21f4:	3708      	adds	r7, #8
    21f6:	46bd      	mov	sp, r7
    21f8:	bd80      	pop	{r7, pc}

000021fa <std::function<bool ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    21fa:	b580      	push	{r7, lr}
    21fc:	b082      	sub	sp, #8
    21fe:	af00      	add	r7, sp, #0
    2200:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	4618      	mov	r0, r3
    2206:	f7fe f900 	bl	40a <std::_Function_base::_M_empty() const>
    220a:	4603      	mov	r3, r0
    220c:	2b00      	cmp	r3, #0
    220e:	d001      	beq.n	2214 <std::function<bool ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    2210:	f004 fcf2 	bl	6bf8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	68db      	ldr	r3, [r3, #12]
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	4610      	mov	r0, r2
    221c:	4798      	blx	r3
    221e:	4603      	mov	r3, r0
    }
    2220:	4618      	mov	r0, r3
    2222:	3708      	adds	r7, #8
    2224:	46bd      	mov	sp, r7
    2226:	bd80      	pop	{r7, pc}

00002228 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>:
      function<_Res(_ArgTypes...)>::
    2228:	b590      	push	{r4, r7, lr}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
    2230:	7039      	strb	r1, [r7, #0]
      : _Function_base()
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	4618      	mov	r0, r3
    2236:	f7fe f8c7 	bl	3c8 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    223a:	463b      	mov	r3, r7
    223c:	4618      	mov	r0, r3
    223e:	f000 fa55 	bl	26ec <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>
    2242:	4603      	mov	r3, r0
    2244:	2b00      	cmp	r3, #0
    2246:	d00f      	beq.n	2268 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2248:	687c      	ldr	r4, [r7, #4]
    224a:	463b      	mov	r3, r7
    224c:	4618      	mov	r0, r3
    224e:	f000 fa58 	bl	2702 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    2252:	4603      	mov	r3, r0
    2254:	4619      	mov	r1, r3
    2256:	4620      	mov	r0, r4
    2258:	f000 fa5e 	bl	2718 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>
	    _M_invoker = &_My_handler::_M_invoke;
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	4a05      	ldr	r2, [pc, #20]	; (2274 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x4c>)
    2260:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	4a04      	ldr	r2, [pc, #16]	; (2278 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x50>)
    2266:	609a      	str	r2, [r3, #8]
      }
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	4618      	mov	r0, r3
    226c:	370c      	adds	r7, #12
    226e:	46bd      	mov	sp, r7
    2270:	bd90      	pop	{r4, r7, pc}
    2272:	bf00      	nop
    2274:	0000273d 	.word	0x0000273d
    2278:	0000275d 	.word	0x0000275d

0000227c <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    227c:	b580      	push	{r7, lr}
    227e:	b084      	sub	sp, #16
    2280:	af00      	add	r7, sp, #0
    2282:	60f8      	str	r0, [r7, #12]
    2284:	460b      	mov	r3, r1
    2286:	80ba      	strh	r2, [r7, #4]
    2288:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    228a:	793b      	ldrb	r3, [r7, #4]
    228c:	461a      	mov	r2, r3
    228e:	797b      	ldrb	r3, [r7, #5]
    2290:	7af9      	ldrb	r1, [r7, #11]
    2292:	68f8      	ldr	r0, [r7, #12]
    2294:	f000 fa8d 	bl	27b2 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    2298:	4603      	mov	r3, r0
}
    229a:	4618      	mov	r0, r3
    229c:	3710      	adds	r7, #16
    229e:	46bd      	mov	sp, r7
    22a0:	bd80      	pop	{r7, pc}

000022a2 <std::function<void ()>::function()>:
      function() noexcept
    22a2:	b580      	push	{r7, lr}
    22a4:	b082      	sub	sp, #8
    22a6:	af00      	add	r7, sp, #0
    22a8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	4618      	mov	r0, r3
    22ae:	f7fe f88b 	bl	3c8 <std::_Function_base::_Function_base()>
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	4618      	mov	r0, r3
    22b6:	3708      	adds	r7, #8
    22b8:	46bd      	mov	sp, r7
    22ba:	bd80      	pop	{r7, pc}

000022bc <std::function<void ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    22bc:	b580      	push	{r7, lr}
    22be:	b082      	sub	sp, #8
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	4618      	mov	r0, r3
    22c8:	f7fe f89f 	bl	40a <std::_Function_base::_M_empty() const>
    22cc:	4603      	mov	r3, r0
    22ce:	2b00      	cmp	r3, #0
    22d0:	d001      	beq.n	22d6 <std::function<void ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    22d2:	f004 fc91 	bl	6bf8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	68db      	ldr	r3, [r3, #12]
    22da:	687a      	ldr	r2, [r7, #4]
    22dc:	4610      	mov	r0, r2
    22de:	4798      	blx	r3
    22e0:	bf00      	nop
    }
    22e2:	3708      	adds	r7, #8
    22e4:	46bd      	mov	sp, r7
    22e6:	bd80      	pop	{r7, pc}

000022e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    22e8:	b480      	push	{r7}
    22ea:	b083      	sub	sp, #12
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    22f2:	2201      	movs	r2, #1
    22f4:	683b      	ldr	r3, [r7, #0]
    22f6:	fa02 f303 	lsl.w	r3, r2, r3
    22fa:	43db      	mvns	r3, r3
    22fc:	461a      	mov	r2, r3
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	4013      	ands	r3, r2
}
    2302:	4618      	mov	r0, r3
    2304:	370c      	adds	r7, #12
    2306:	46bd      	mov	sp, r7
    2308:	f85d 7b04 	ldr.w	r7, [sp], #4
    230c:	4770      	bx	lr

0000230e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    230e:	b480      	push	{r7}
    2310:	b083      	sub	sp, #12
    2312:	af00      	add	r7, sp, #0
    2314:	6078      	str	r0, [r7, #4]
    2316:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    2318:	2201      	movs	r2, #1
    231a:	683b      	ldr	r3, [r7, #0]
    231c:	fa02 f303 	lsl.w	r3, r2, r3
    2320:	461a      	mov	r2, r3
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	4313      	orrs	r3, r2
}
    2326:	4618      	mov	r0, r3
    2328:	370c      	adds	r7, #12
    232a:	46bd      	mov	sp, r7
    232c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2330:	4770      	bx	lr

00002332 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    2332:	b480      	push	{r7}
    2334:	b083      	sub	sp, #12
    2336:	af00      	add	r7, sp, #0
    2338:	6078      	str	r0, [r7, #4]
    233a:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    233c:	2201      	movs	r2, #1
    233e:	683b      	ldr	r3, [r7, #0]
    2340:	fa02 f303 	lsl.w	r3, r2, r3
    2344:	461a      	mov	r2, r3
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	4013      	ands	r3, r2
    234a:	2b00      	cmp	r3, #0
    234c:	bf14      	ite	ne
    234e:	2301      	movne	r3, #1
    2350:	2300      	moveq	r3, #0
    2352:	b2db      	uxtb	r3, r3
}
    2354:	4618      	mov	r0, r3
    2356:	370c      	adds	r7, #12
    2358:	46bd      	mov	sp, r7
    235a:	f85d 7b04 	ldr.w	r7, [sp], #4
    235e:	4770      	bx	lr

00002360 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    2360:	b590      	push	{r4, r7, lr}
    2362:	b083      	sub	sp, #12
    2364:	af00      	add	r7, sp, #0
    2366:	6078      	str	r0, [r7, #4]
    2368:	6039      	str	r1, [r7, #0]
      : _Function_base()
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	4618      	mov	r0, r3
    236e:	f7fe f82b 	bl	3c8 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	4618      	mov	r0, r3
    2376:	f000 fa49 	bl	280c <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    237a:	4603      	mov	r3, r0
    237c:	2b00      	cmp	r3, #0
    237e:	d00f      	beq.n	23a0 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2380:	687c      	ldr	r4, [r7, #4]
    2382:	463b      	mov	r3, r7
    2384:	4618      	mov	r0, r3
    2386:	f000 fa51 	bl	282c <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    238a:	4603      	mov	r3, r0
    238c:	4619      	mov	r1, r3
    238e:	4620      	mov	r0, r4
    2390:	f000 fa57 	bl	2842 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	4a05      	ldr	r2, [pc, #20]	; (23ac <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x4c>)
    2398:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	4a04      	ldr	r2, [pc, #16]	; (23b0 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x50>)
    239e:	609a      	str	r2, [r3, #8]
      }
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	4618      	mov	r0, r3
    23a4:	370c      	adds	r7, #12
    23a6:	46bd      	mov	sp, r7
    23a8:	bd90      	pop	{r4, r7, pc}
    23aa:	bf00      	nop
    23ac:	00002867 	.word	0x00002867
    23b0:	00002883 	.word	0x00002883

000023b4 <std::function<void ()>::operator=(std::function<void ()> const&)>:
      operator=(const function& __x)
    23b4:	b580      	push	{r7, lr}
    23b6:	b086      	sub	sp, #24
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
    23bc:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    23be:	f107 0308 	add.w	r3, r7, #8
    23c2:	6839      	ldr	r1, [r7, #0]
    23c4:	4618      	mov	r0, r3
    23c6:	f000 fa87 	bl	28d8 <std::function<void ()>::function(std::function<void ()> const&)>
    23ca:	f107 0308 	add.w	r3, r7, #8
    23ce:	6879      	ldr	r1, [r7, #4]
    23d0:	4618      	mov	r0, r3
    23d2:	f000 faa3 	bl	291c <std::function<void ()>::swap(std::function<void ()>&)>
    23d6:	f107 0308 	add.w	r3, r7, #8
    23da:	4618      	mov	r0, r3
    23dc:	f7fe fdd7 	bl	f8e <std::function<void ()>::~function()>
	return *this;
    23e0:	687b      	ldr	r3, [r7, #4]
      }
    23e2:	4618      	mov	r0, r3
    23e4:	3718      	adds	r7, #24
    23e6:	46bd      	mov	sp, r7
    23e8:	bd80      	pop	{r7, pc}

000023ea <std::function<void ()>::operator=(decltype(nullptr))>:
      operator=(nullptr_t) noexcept
    23ea:	b580      	push	{r7, lr}
    23ec:	b082      	sub	sp, #8
    23ee:	af00      	add	r7, sp, #0
    23f0:	6078      	str	r0, [r7, #4]
    23f2:	6039      	str	r1, [r7, #0]
	if (_M_manager)
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	689b      	ldr	r3, [r3, #8]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d00b      	beq.n	2414 <std::function<void ()>::operator=(decltype(nullptr))+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	689b      	ldr	r3, [r3, #8]
    2400:	6878      	ldr	r0, [r7, #4]
    2402:	6879      	ldr	r1, [r7, #4]
    2404:	2203      	movs	r2, #3
    2406:	4798      	blx	r3
	    _M_manager = nullptr;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	2200      	movs	r2, #0
    240c:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	2200      	movs	r2, #0
    2412:	60da      	str	r2, [r3, #12]
	return *this;
    2414:	687b      	ldr	r3, [r7, #4]
      }
    2416:	4618      	mov	r0, r3
    2418:	3708      	adds	r7, #8
    241a:	46bd      	mov	sp, r7
    241c:	bd80      	pop	{r7, pc}

0000241e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    241e:	b580      	push	{r7, lr}
    2420:	b084      	sub	sp, #16
    2422:	af00      	add	r7, sp, #0
    2424:	6078      	str	r0, [r7, #4]
    2426:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    2428:	f107 0308 	add.w	r3, r7, #8
    242c:	6839      	ldr	r1, [r7, #0]
    242e:	4618      	mov	r0, r3
    2430:	f000 faa3 	bl	297a <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2434:	f107 0308 	add.w	r3, r7, #8
    2438:	4618      	mov	r0, r3
    243a:	f7fe f901 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    243e:	4602      	mov	r2, r0
    2440:	460b      	mov	r3, r1
    2442:	6879      	ldr	r1, [r7, #4]
    2444:	e9c1 2300 	strd	r2, r3, [r1]
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	4618      	mov	r0, r3
    244c:	3710      	adds	r7, #16
    244e:	46bd      	mov	sp, r7
    2450:	bd80      	pop	{r7, pc}

00002452 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
  return Set(target, bitmask.position);
}
/// Operates the same way as the Set(T target, Mask bitmask) function except it
/// clears the bit.
template <typename T>
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    2452:	b580      	push	{r7, lr}
    2454:	b082      	sub	sp, #8
    2456:	af00      	add	r7, sp, #0
    2458:	6078      	str	r0, [r7, #4]
    245a:	8039      	strh	r1, [r7, #0]
{
  return Clear(target, bitmask.position);
    245c:	783b      	ldrb	r3, [r7, #0]
    245e:	4619      	mov	r1, r3
    2460:	6878      	ldr	r0, [r7, #4]
    2462:	f7ff ff41 	bl	22e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    2466:	4603      	mov	r3, r0
}
    2468:	4618      	mov	r0, r3
    246a:	3708      	adds	r7, #8
    246c:	46bd      	mov	sp, r7
    246e:	bd80      	pop	{r7, pc}

00002470 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    2470:	b580      	push	{r7, lr}
    2472:	b082      	sub	sp, #8
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
    2478:	8039      	strh	r1, [r7, #0]
  return Set(target, bitmask.position);
    247a:	783b      	ldrb	r3, [r7, #0]
    247c:	4619      	mov	r1, r3
    247e:	6878      	ldr	r0, [r7, #4]
    2480:	f7ff ff45 	bl	230e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    2484:	4603      	mov	r3, r0
}
    2486:	4618      	mov	r0, r3
    2488:	3708      	adds	r7, #8
    248a:	46bd      	mov	sp, r7
    248c:	bd80      	pop	{r7, pc}

0000248e <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
}
/// @returns the bit in the value at the "position" field of the bitmask. For
/// example, if the passed bitmask has position set to 5, then this function
/// will return the 5th bits value, regardless of the "width" field is.
template <typename T>
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    248e:	b580      	push	{r7, lr}
    2490:	b082      	sub	sp, #8
    2492:	af00      	add	r7, sp, #0
    2494:	6078      	str	r0, [r7, #4]
    2496:	8039      	strh	r1, [r7, #0]
{
  return Read(target, bitmask.position);
    2498:	783b      	ldrb	r3, [r7, #0]
    249a:	4619      	mov	r1, r3
    249c:	6878      	ldr	r0, [r7, #4]
    249e:	f7ff ff48 	bl	2332 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    24a2:	4603      	mov	r3, r0
}
    24a4:	4618      	mov	r0, r3
    24a6:	3708      	adds	r7, #8
    24a8:	46bd      	mov	sp, r7
    24aa:	bd80      	pop	{r7, pc}

000024ac <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr operator Ty() const noexcept
    24ac:	b580      	push	{r7, lr}
    24ae:	b084      	sub	sp, #16
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	4618      	mov	r0, r3
    24b8:	f7fe fec6 	bl	1248 <units::linear_scale<float>::operator()() const>
    24bc:	eef0 7a40 	vmov.f32	s15, s0
    24c0:	edc7 7a03 	vstr	s15, [r7, #12]
    24c4:	f107 030c 	add.w	r3, r7, #12
    24c8:	4618      	mov	r0, r3
    24ca:	f000 fa48 	bl	295e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    24ce:	eef0 7a40 	vmov.f32	s15, s0
    24d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    24d6:	ee17 3a90 	vmov	r3, s15
    24da:	b29b      	uxth	r3, r3
		}
    24dc:	4618      	mov	r0, r3
    24de:	3710      	adds	r7, #16
    24e0:	46bd      	mov	sp, r7
    24e2:	bd80      	pop	{r7, pc}

000024e4 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    24e4:	b580      	push	{r7, lr}
    24e6:	b084      	sub	sp, #16
    24e8:	af00      	add	r7, sp, #0
    24ea:	60f8      	str	r0, [r7, #12]
    24ec:	60b9      	str	r1, [r7, #8]
    24ee:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    24f0:	793b      	ldrb	r3, [r7, #4]
    24f2:	461a      	mov	r2, r3
    24f4:	797b      	ldrb	r3, [r7, #5]
    24f6:	68b9      	ldr	r1, [r7, #8]
    24f8:	68f8      	ldr	r0, [r7, #12]
    24fa:	f000 fa4d 	bl	2998 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    24fe:	4603      	mov	r3, r0
}
    2500:	4618      	mov	r0, r3
    2502:	3710      	adds	r7, #16
    2504:	46bd      	mov	sp, r7
    2506:	bd80      	pop	{r7, pc}

00002508 <sjsu::GraphicalTerminal::GraphicalTerminal<8ul, 16ul>(sjsu::Graphics*, sjsu::TerminalCache_t<8ul, 16ul>*)>:
  explicit GraphicalTerminal(Graphics * graphics,
    2508:	b480      	push	{r7}
    250a:	b085      	sub	sp, #20
    250c:	af00      	add	r7, sp, #0
    250e:	60f8      	str	r0, [r7, #12]
    2510:	60b9      	str	r1, [r7, #8]
    2512:	607a      	str	r2, [r7, #4]
        cache_(cache->buffer)
    2514:	68fb      	ldr	r3, [r7, #12]
    2516:	2200      	movs	r2, #0
    2518:	601a      	str	r2, [r3, #0]
    251a:	68fb      	ldr	r3, [r7, #12]
    251c:	2200      	movs	r2, #0
    251e:	605a      	str	r2, [r3, #4]
    2520:	68fb      	ldr	r3, [r7, #12]
    2522:	2200      	movs	r2, #0
    2524:	609a      	str	r2, [r3, #8]
    2526:	68fb      	ldr	r3, [r7, #12]
    2528:	2208      	movs	r2, #8
    252a:	60da      	str	r2, [r3, #12]
    252c:	68fb      	ldr	r3, [r7, #12]
    252e:	2210      	movs	r2, #16
    2530:	611a      	str	r2, [r3, #16]
    2532:	68fb      	ldr	r3, [r7, #12]
    2534:	68ba      	ldr	r2, [r7, #8]
    2536:	615a      	str	r2, [r3, #20]
    2538:	687a      	ldr	r2, [r7, #4]
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	619a      	str	r2, [r3, #24]
  }
    253e:	68fb      	ldr	r3, [r7, #12]
    2540:	4618      	mov	r0, r3
    2542:	3714      	adds	r7, #20
    2544:	46bd      	mov	sp, r7
    2546:	f85d 7b04 	ldr.w	r7, [sp], #4
    254a:	4770      	bx	lr

0000254c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>:
      operator""ms()
    254c:	b580      	push	{r7, lr}
    254e:	b082      	sub	sp, #8
    2550:	af00      	add	r7, sp, #0
    2552:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	4618      	mov	r0, r3
    2558:	f000 fa4a 	bl	29f0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>
    255c:	bf00      	nop
    255e:	6878      	ldr	r0, [r7, #4]
    2560:	3708      	adds	r7, #8
    2562:	46bd      	mov	sp, r7
    2564:	bd80      	pop	{r7, pc}

00002566 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2566:	b480      	push	{r7}
    2568:	b089      	sub	sp, #36	; 0x24
    256a:	af00      	add	r7, sp, #0
    256c:	60f8      	str	r0, [r7, #12]
    256e:	607a      	str	r2, [r7, #4]
    2570:	603b      	str	r3, [r7, #0]
    2572:	460b      	mov	r3, r1
    2574:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    257a:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    257c:	2320      	movs	r3, #32
    257e:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    2580:	683b      	ldr	r3, [r7, #0]
    2582:	f1c3 0320 	rsb	r3, r3, #32
    2586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    258a:	fa22 f303 	lsr.w	r3, r2, r3
    258e:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    2590:	697a      	ldr	r2, [r7, #20]
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	fa02 f303 	lsl.w	r3, r2, r3
    2598:	43db      	mvns	r3, r3
    259a:	68fa      	ldr	r2, [r7, #12]
    259c:	4013      	ands	r3, r2
    259e:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    25a0:	7afa      	ldrb	r2, [r7, #11]
    25a2:	697b      	ldr	r3, [r7, #20]
    25a4:	401a      	ands	r2, r3
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	fa02 f303 	lsl.w	r3, r2, r3
    25ac:	68fa      	ldr	r2, [r7, #12]
    25ae:	4313      	orrs	r3, r2
    25b0:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    25b2:	68fb      	ldr	r3, [r7, #12]
}
    25b4:	4618      	mov	r0, r3
    25b6:	3724      	adds	r7, #36	; 0x24
    25b8:	46bd      	mov	sp, r7
    25ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    25be:	4770      	bx	lr

000025c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    25c0:	b580      	push	{r7, lr}
    25c2:	b084      	sub	sp, #16
    25c4:	af00      	add	r7, sp, #0
    25c6:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    25c8:	f04f 0201 	mov.w	r2, #1
    25cc:	f04f 0300 	mov.w	r3, #0
    25d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    25d4:	f107 0308 	add.w	r3, r7, #8
    25d8:	4619      	mov	r1, r3
    25da:	6878      	ldr	r0, [r7, #4]
    25dc:	f000 fa1c 	bl	2a18 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    25e0:	6878      	ldr	r0, [r7, #4]
    25e2:	3710      	adds	r7, #16
    25e4:	46bd      	mov	sp, r7
    25e6:	bd80      	pop	{r7, pc}

000025e8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    25e8:	b580      	push	{r7, lr}
    25ea:	b082      	sub	sp, #8
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
    25f0:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	6839      	ldr	r1, [r7, #0]
    25f6:	4618      	mov	r0, r3
    25f8:	f000 fa2e 	bl	2a58 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    25fc:	bf00      	nop
      }
    25fe:	6878      	ldr	r0, [r7, #4]
    2600:	3708      	adds	r7, #8
    2602:	46bd      	mov	sp, r7
    2604:	bd80      	pop	{r7, pc}

00002606 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    2606:	b480      	push	{r7}
    2608:	b083      	sub	sp, #12
    260a:	af00      	add	r7, sp, #0
    260c:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    260e:	687b      	ldr	r3, [r7, #4]
    2610:	2b00      	cmp	r3, #0
    2612:	bf14      	ite	ne
    2614:	2301      	movne	r3, #1
    2616:	2300      	moveq	r3, #0
    2618:	b2db      	uxtb	r3, r3
    261a:	4618      	mov	r0, r3
    261c:	370c      	adds	r7, #12
    261e:	46bd      	mov	sp, r7
    2620:	f85d 7b04 	ldr.w	r7, [sp], #4
    2624:	4770      	bx	lr

00002626 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    2626:	b480      	push	{r7}
    2628:	b083      	sub	sp, #12
    262a:	af00      	add	r7, sp, #0
    262c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	4618      	mov	r0, r3
    2632:	370c      	adds	r7, #12
    2634:	46bd      	mov	sp, r7
    2636:	f85d 7b04 	ldr.w	r7, [sp], #4
    263a:	4770      	bx	lr

0000263c <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    263c:	b590      	push	{r4, r7, lr}
    263e:	b085      	sub	sp, #20
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    2644:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    2646:	6838      	ldr	r0, [r7, #0]
    2648:	f7ff ffed 	bl	2626 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    264c:	4603      	mov	r3, r0
    264e:	4622      	mov	r2, r4
    2650:	4619      	mov	r1, r3
    2652:	6878      	ldr	r0, [r7, #4]
    2654:	f000 fa3a 	bl	2acc <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>
    2658:	bf00      	nop
    265a:	3714      	adds	r7, #20
    265c:	46bd      	mov	sp, r7
    265e:	bd90      	pop	{r4, r7, pc}

00002660 <std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    2660:	b580      	push	{r7, lr}
    2662:	b082      	sub	sp, #8
    2664:	af00      	add	r7, sp, #0
    2666:	6078      	str	r0, [r7, #4]
    2668:	6039      	str	r1, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
    266a:	6838      	ldr	r0, [r7, #0]
    266c:	f000 fa47 	bl	2afe <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    2670:	4603      	mov	r3, r0
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	687a      	ldr	r2, [r7, #4]
    2676:	4610      	mov	r0, r2
    2678:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
    267a:	bf00      	nop
      }
    267c:	6878      	ldr	r0, [r7, #4]
    267e:	3708      	adds	r7, #8
    2680:	46bd      	mov	sp, r7
    2682:	bd80      	pop	{r7, pc}

00002684 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2684:	b5b0      	push	{r4, r5, r7, lr}
    2686:	b086      	sub	sp, #24
    2688:	af00      	add	r7, sp, #0
    268a:	60f8      	str	r0, [r7, #12]
    268c:	60b9      	str	r1, [r7, #8]
    268e:	4613      	mov	r3, r2
    2690:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    2692:	79fb      	ldrb	r3, [r7, #7]
    2694:	2b03      	cmp	r3, #3
    2696:	d016      	beq.n	26c6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2698:	2b03      	cmp	r3, #3
    269a:	dc19      	bgt.n	26d0 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    269c:	2b01      	cmp	r3, #1
    269e:	d002      	beq.n	26a6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    26a0:	2b02      	cmp	r3, #2
    26a2:	d00a      	beq.n	26ba <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    26a4:	e014      	b.n	26d0 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    26a6:	68b8      	ldr	r0, [r7, #8]
    26a8:	f000 fa29 	bl	2afe <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    26ac:	4604      	mov	r4, r0
    26ae:	68f8      	ldr	r0, [r7, #12]
    26b0:	f000 fa35 	bl	2b1e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>
    26b4:	4603      	mov	r3, r0
    26b6:	601c      	str	r4, [r3, #0]
	      break;
    26b8:	e00a      	b.n	26d0 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    26ba:	462a      	mov	r2, r5
    26bc:	68b9      	ldr	r1, [r7, #8]
    26be:	68f8      	ldr	r0, [r7, #12]
    26c0:	f000 fa39 	bl	2b36 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    26c4:	e004      	b.n	26d0 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    26c6:	4621      	mov	r1, r4
    26c8:	68f8      	ldr	r0, [r7, #12]
    26ca:	f000 fa4d 	bl	2b68 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    26ce:	bf00      	nop
	  return false;
    26d0:	2300      	movs	r3, #0
	}
    26d2:	4618      	mov	r0, r3
    26d4:	3718      	adds	r7, #24
    26d6:	46bd      	mov	sp, r7
    26d8:	bdb0      	pop	{r4, r5, r7, pc}

000026da <std::chrono::duration_values<long long>::max()>:
	max() noexcept
    26da:	b580      	push	{r7, lr}
    26dc:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    26de:	f7fd fe51 	bl	384 <std::numeric_limits<long long>::max()>
    26e2:	4602      	mov	r2, r0
    26e4:	460b      	mov	r3, r1
    26e6:	4610      	mov	r0, r2
    26e8:	4619      	mov	r1, r3
    26ea:	bd80      	pop	{r7, pc}

000026ec <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>:
	  _M_not_empty_function(const _Tp&)
    26ec:	b480      	push	{r7}
    26ee:	b083      	sub	sp, #12
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
	  { return true; }
    26f4:	2301      	movs	r3, #1
    26f6:	4618      	mov	r0, r3
    26f8:	370c      	adds	r7, #12
    26fa:	46bd      	mov	sp, r7
    26fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2700:	4770      	bx	lr

00002702 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>:
    move(_Tp&& __t) noexcept
    2702:	b480      	push	{r7}
    2704:	b083      	sub	sp, #12
    2706:	af00      	add	r7, sp, #0
    2708:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	4618      	mov	r0, r3
    270e:	370c      	adds	r7, #12
    2710:	46bd      	mov	sp, r7
    2712:	f85d 7b04 	ldr.w	r7, [sp], #4
    2716:	4770      	bx	lr

00002718 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    2718:	b590      	push	{r4, r7, lr}
    271a:	b085      	sub	sp, #20
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
    2720:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    2722:	6838      	ldr	r0, [r7, #0]
    2724:	f7ff ffed 	bl	2702 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    2728:	4603      	mov	r3, r0
    272a:	4622      	mov	r2, r4
    272c:	4619      	mov	r1, r3
    272e:	6878      	ldr	r0, [r7, #4]
    2730:	f000 fa82 	bl	2c38 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>
    2734:	bf00      	nop
    2736:	3714      	adds	r7, #20
    2738:	46bd      	mov	sp, r7
    273a:	bd90      	pop	{r4, r7, pc}

0000273c <std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    273c:	b580      	push	{r7, lr}
    273e:	b082      	sub	sp, #8
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
	return (*_Base::_M_get_pointer(__functor))(
    2744:	6878      	ldr	r0, [r7, #4]
    2746:	f000 fa8c 	bl	2c62 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
    274a:	4603      	mov	r3, r0
    274c:	4618      	mov	r0, r3
    274e:	f7fe f939 	bl	9c4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>
    2752:	4603      	mov	r3, r0
      }
    2754:	4618      	mov	r0, r3
    2756:	3708      	adds	r7, #8
    2758:	46bd      	mov	sp, r7
    275a:	bd80      	pop	{r7, pc}

0000275c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    275c:	b5b0      	push	{r4, r5, r7, lr}
    275e:	b086      	sub	sp, #24
    2760:	af00      	add	r7, sp, #0
    2762:	60f8      	str	r0, [r7, #12]
    2764:	60b9      	str	r1, [r7, #8]
    2766:	4613      	mov	r3, r2
    2768:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    276a:	79fb      	ldrb	r3, [r7, #7]
    276c:	2b03      	cmp	r3, #3
    276e:	d016      	beq.n	279e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x42>
    2770:	2b03      	cmp	r3, #3
    2772:	dc19      	bgt.n	27a8 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
    2774:	2b01      	cmp	r3, #1
    2776:	d002      	beq.n	277e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x22>
    2778:	2b02      	cmp	r3, #2
    277a:	d00a      	beq.n	2792 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x36>
    277c:	e014      	b.n	27a8 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    277e:	68b8      	ldr	r0, [r7, #8]
    2780:	f000 fa6f 	bl	2c62 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
    2784:	4604      	mov	r4, r0
    2786:	68f8      	ldr	r0, [r7, #12]
    2788:	f000 fa7b 	bl	2c82 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>
    278c:	4603      	mov	r3, r0
    278e:	601c      	str	r4, [r3, #0]
	      break;
    2790:	e00a      	b.n	27a8 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    2792:	462a      	mov	r2, r5
    2794:	68b9      	ldr	r1, [r7, #8]
    2796:	68f8      	ldr	r0, [r7, #12]
    2798:	f000 fa7f 	bl	2c9a <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>
	      break;
    279c:	e004      	b.n	27a8 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    279e:	4621      	mov	r1, r4
    27a0:	68f8      	ldr	r0, [r7, #12]
    27a2:	f000 fa8f 	bl	2cc4 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    27a6:	bf00      	nop
	  return false;
    27a8:	2300      	movs	r3, #0
	}
    27aa:	4618      	mov	r0, r3
    27ac:	3718      	adds	r7, #24
    27ae:	46bd      	mov	sp, r7
    27b0:	bdb0      	pop	{r4, r5, r7, pc}

000027b2 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    27b2:	b480      	push	{r7}
    27b4:	b089      	sub	sp, #36	; 0x24
    27b6:	af00      	add	r7, sp, #0
    27b8:	60f8      	str	r0, [r7, #12]
    27ba:	607a      	str	r2, [r7, #4]
    27bc:	603b      	str	r3, [r7, #0]
    27be:	460b      	mov	r3, r1
    27c0:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    27c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    27c6:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    27c8:	2320      	movs	r3, #32
    27ca:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    27cc:	683b      	ldr	r3, [r7, #0]
    27ce:	f1c3 0320 	rsb	r3, r3, #32
    27d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27d6:	fa22 f303 	lsr.w	r3, r2, r3
    27da:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    27dc:	697a      	ldr	r2, [r7, #20]
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	fa02 f303 	lsl.w	r3, r2, r3
    27e4:	43db      	mvns	r3, r3
    27e6:	68fa      	ldr	r2, [r7, #12]
    27e8:	4013      	ands	r3, r2
    27ea:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    27ec:	7afa      	ldrb	r2, [r7, #11]
    27ee:	697b      	ldr	r3, [r7, #20]
    27f0:	401a      	ands	r2, r3
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	fa02 f303 	lsl.w	r3, r2, r3
    27f8:	68fa      	ldr	r2, [r7, #12]
    27fa:	4313      	orrs	r3, r2
    27fc:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    27fe:	68fb      	ldr	r3, [r7, #12]
}
    2800:	4618      	mov	r0, r3
    2802:	3724      	adds	r7, #36	; 0x24
    2804:	46bd      	mov	sp, r7
    2806:	f85d 7b04 	ldr.w	r7, [sp], #4
    280a:	4770      	bx	lr

0000280c <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    280c:	b480      	push	{r7}
    280e:	b083      	sub	sp, #12
    2810:	af00      	add	r7, sp, #0
    2812:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    2814:	687b      	ldr	r3, [r7, #4]
    2816:	2b00      	cmp	r3, #0
    2818:	bf14      	ite	ne
    281a:	2301      	movne	r3, #1
    281c:	2300      	moveq	r3, #0
    281e:	b2db      	uxtb	r3, r3
    2820:	4618      	mov	r0, r3
    2822:	370c      	adds	r7, #12
    2824:	46bd      	mov	sp, r7
    2826:	f85d 7b04 	ldr.w	r7, [sp], #4
    282a:	4770      	bx	lr

0000282c <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
    move(_Tp&& __t) noexcept
    282c:	b480      	push	{r7}
    282e:	b083      	sub	sp, #12
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	4618      	mov	r0, r3
    2838:	370c      	adds	r7, #12
    283a:	46bd      	mov	sp, r7
    283c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2840:	4770      	bx	lr

00002842 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    2842:	b590      	push	{r4, r7, lr}
    2844:	b085      	sub	sp, #20
    2846:	af00      	add	r7, sp, #0
    2848:	6078      	str	r0, [r7, #4]
    284a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    284c:	6838      	ldr	r0, [r7, #0]
    284e:	f7ff ffed 	bl	282c <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2852:	4603      	mov	r3, r0
    2854:	4622      	mov	r2, r4
    2856:	4619      	mov	r1, r3
    2858:	6878      	ldr	r0, [r7, #4]
    285a:	f000 fa3f 	bl	2cdc <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    285e:	bf00      	nop
    2860:	3714      	adds	r7, #20
    2862:	46bd      	mov	sp, r7
    2864:	bd90      	pop	{r4, r7, pc}

00002866 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    2866:	b580      	push	{r7, lr}
    2868:	b082      	sub	sp, #8
    286a:	af00      	add	r7, sp, #0
    286c:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
    286e:	6878      	ldr	r0, [r7, #4]
    2870:	f000 fa4d 	bl	2d0e <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    2874:	4603      	mov	r3, r0
    2876:	681b      	ldr	r3, [r3, #0]
    2878:	4798      	blx	r3
      }
    287a:	bf00      	nop
    287c:	3708      	adds	r7, #8
    287e:	46bd      	mov	sp, r7
    2880:	bd80      	pop	{r7, pc}

00002882 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2882:	b5b0      	push	{r4, r5, r7, lr}
    2884:	b086      	sub	sp, #24
    2886:	af00      	add	r7, sp, #0
    2888:	60f8      	str	r0, [r7, #12]
    288a:	60b9      	str	r1, [r7, #8]
    288c:	4613      	mov	r3, r2
    288e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    2890:	79fb      	ldrb	r3, [r7, #7]
    2892:	2b03      	cmp	r3, #3
    2894:	d016      	beq.n	28c4 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2896:	2b03      	cmp	r3, #3
    2898:	dc19      	bgt.n	28ce <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    289a:	2b01      	cmp	r3, #1
    289c:	d002      	beq.n	28a4 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    289e:	2b02      	cmp	r3, #2
    28a0:	d00a      	beq.n	28b8 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    28a2:	e014      	b.n	28ce <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    28a4:	68b8      	ldr	r0, [r7, #8]
    28a6:	f000 fa32 	bl	2d0e <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    28aa:	4604      	mov	r4, r0
    28ac:	68f8      	ldr	r0, [r7, #12]
    28ae:	f000 fa3e 	bl	2d2e <void (**&std::_Any_data::_M_access<void (**)()>())()>
    28b2:	4603      	mov	r3, r0
    28b4:	601c      	str	r4, [r3, #0]
	      break;
    28b6:	e00a      	b.n	28ce <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    28b8:	462a      	mov	r2, r5
    28ba:	68b9      	ldr	r1, [r7, #8]
    28bc:	68f8      	ldr	r0, [r7, #12]
    28be:	f000 fa42 	bl	2d46 <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    28c2:	e004      	b.n	28ce <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    28c4:	4621      	mov	r1, r4
    28c6:	68f8      	ldr	r0, [r7, #12]
    28c8:	f000 fa56 	bl	2d78 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    28cc:	bf00      	nop
	  return false;
    28ce:	2300      	movs	r3, #0
	}
    28d0:	4618      	mov	r0, r3
    28d2:	3718      	adds	r7, #24
    28d4:	46bd      	mov	sp, r7
    28d6:	bdb0      	pop	{r4, r5, r7, pc}

000028d8 <std::function<void ()>::function(std::function<void ()> const&)>:
    function<_Res(_ArgTypes...)>::
    28d8:	b580      	push	{r7, lr}
    28da:	b082      	sub	sp, #8
    28dc:	af00      	add	r7, sp, #0
    28de:	6078      	str	r0, [r7, #4]
    28e0:	6039      	str	r1, [r7, #0]
    : _Function_base()
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	4618      	mov	r0, r3
    28e6:	f7fd fd6f 	bl	3c8 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    28ea:	6838      	ldr	r0, [r7, #0]
    28ec:	f000 fa50 	bl	2d90 <std::function<void ()>::operator bool() const>
    28f0:	4603      	mov	r3, r0
    28f2:	2b00      	cmp	r3, #0
    28f4:	d00d      	beq.n	2912 <std::function<void ()>::function(std::function<void ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    28f6:	683b      	ldr	r3, [r7, #0]
    28f8:	689b      	ldr	r3, [r3, #8]
    28fa:	6878      	ldr	r0, [r7, #4]
    28fc:	6839      	ldr	r1, [r7, #0]
    28fe:	2202      	movs	r2, #2
    2900:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2902:	683b      	ldr	r3, [r7, #0]
    2904:	68da      	ldr	r2, [r3, #12]
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    290a:	683b      	ldr	r3, [r7, #0]
    290c:	689a      	ldr	r2, [r3, #8]
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	609a      	str	r2, [r3, #8]
    }
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	4618      	mov	r0, r3
    2916:	3708      	adds	r7, #8
    2918:	46bd      	mov	sp, r7
    291a:	bd80      	pop	{r7, pc}

0000291c <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    291c:	b580      	push	{r7, lr}
    291e:	b082      	sub	sp, #8
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
    2924:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	683a      	ldr	r2, [r7, #0]
    292a:	4611      	mov	r1, r2
    292c:	4618      	mov	r0, r3
    292e:	f000 f932 	bl	2b96 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	f103 0208 	add.w	r2, r3, #8
    2938:	683b      	ldr	r3, [r7, #0]
    293a:	3308      	adds	r3, #8
    293c:	4619      	mov	r1, r3
    293e:	4610      	mov	r0, r2
    2940:	f000 f95b 	bl	2bfa <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	f103 020c 	add.w	r2, r3, #12
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	330c      	adds	r3, #12
    294e:	4619      	mov	r1, r3
    2950:	4610      	mov	r0, r2
    2952:	f000 fa38 	bl	2dc6 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    2956:	bf00      	nop
    2958:	3708      	adds	r7, #8
    295a:	46bd      	mov	sp, r7
    295c:	bd80      	pop	{r7, pc}

0000295e <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    295e:	b580      	push	{r7, lr}
    2960:	b086      	sub	sp, #24
    2962:	af00      	add	r7, sp, #0
    2964:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2966:	6878      	ldr	r0, [r7, #4]
    2968:	f000 fa4c 	bl	2e04 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    296c:	eef0 7a40 	vmov.f32	s15, s0
	}
    2970:	eeb0 0a67 	vmov.f32	s0, s15
    2974:	3718      	adds	r7, #24
    2976:	46bd      	mov	sp, r7
    2978:	bd80      	pop	{r7, pc}

0000297a <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    297a:	b580      	push	{r7, lr}
    297c:	b082      	sub	sp, #8
    297e:	af00      	add	r7, sp, #0
    2980:	6078      	str	r0, [r7, #4]
    2982:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	6839      	ldr	r1, [r7, #0]
    2988:	4618      	mov	r0, r3
    298a:	f000 fa4d 	bl	2e28 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    298e:	bf00      	nop
      }
    2990:	6878      	ldr	r0, [r7, #4]
    2992:	3708      	adds	r7, #8
    2994:	46bd      	mov	sp, r7
    2996:	bd80      	pop	{r7, pc}

00002998 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2998:	b480      	push	{r7}
    299a:	b089      	sub	sp, #36	; 0x24
    299c:	af00      	add	r7, sp, #0
    299e:	60f8      	str	r0, [r7, #12]
    29a0:	60b9      	str	r1, [r7, #8]
    29a2:	607a      	str	r2, [r7, #4]
    29a4:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    29a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29aa:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    29ac:	2320      	movs	r3, #32
    29ae:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    29b0:	683b      	ldr	r3, [r7, #0]
    29b2:	f1c3 0320 	rsb	r3, r3, #32
    29b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    29ba:	fa22 f303 	lsr.w	r3, r2, r3
    29be:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    29c0:	697a      	ldr	r2, [r7, #20]
    29c2:	687b      	ldr	r3, [r7, #4]
    29c4:	fa02 f303 	lsl.w	r3, r2, r3
    29c8:	43db      	mvns	r3, r3
    29ca:	68fa      	ldr	r2, [r7, #12]
    29cc:	4013      	ands	r3, r2
    29ce:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    29d0:	68ba      	ldr	r2, [r7, #8]
    29d2:	697b      	ldr	r3, [r7, #20]
    29d4:	401a      	ands	r2, r3
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	fa02 f303 	lsl.w	r3, r2, r3
    29dc:	68fa      	ldr	r2, [r7, #12]
    29de:	4313      	orrs	r3, r2
    29e0:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    29e2:	68fb      	ldr	r3, [r7, #12]
}
    29e4:	4618      	mov	r0, r3
    29e6:	3724      	adds	r7, #36	; 0x24
    29e8:	46bd      	mov	sp, r7
    29ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ee:	4770      	bx	lr

000029f0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    29f0:	b580      	push	{r7, lr}
    29f2:	b084      	sub	sp, #16
    29f4:	af00      	add	r7, sp, #0
    29f6:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    29f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    29fc:	f04f 0300 	mov.w	r3, #0
    2a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    2a04:	f107 0308 	add.w	r3, r7, #8
    2a08:	4619      	mov	r1, r3
    2a0a:	6878      	ldr	r0, [r7, #4]
    2a0c:	f7fd fec8 	bl	7a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    2a10:	6878      	ldr	r0, [r7, #4]
    2a12:	3710      	adds	r7, #16
    2a14:	46bd      	mov	sp, r7
    2a16:	bd80      	pop	{r7, pc}

00002a18 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    2a18:	b480      	push	{r7}
    2a1a:	b083      	sub	sp, #12
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	6078      	str	r0, [r7, #4]
    2a20:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    2a22:	683b      	ldr	r3, [r7, #0]
    2a24:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a28:	6879      	ldr	r1, [r7, #4]
    2a2a:	e9c1 2300 	strd	r2, r3, [r1]
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	4618      	mov	r0, r3
    2a32:	370c      	adds	r7, #12
    2a34:	46bd      	mov	sp, r7
    2a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a3a:	4770      	bx	lr

00002a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    2a3c:	b480      	push	{r7}
    2a3e:	b083      	sub	sp, #12
    2a40:	af00      	add	r7, sp, #0
    2a42:	6078      	str	r0, [r7, #4]
	{ return __r; }
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a4a:	4610      	mov	r0, r2
    2a4c:	4619      	mov	r1, r3
    2a4e:	370c      	adds	r7, #12
    2a50:	46bd      	mov	sp, r7
    2a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a56:	4770      	bx	lr

00002a58 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    2a58:	b5b0      	push	{r4, r5, r7, lr}
    2a5a:	b084      	sub	sp, #16
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	6078      	str	r0, [r7, #4]
    2a60:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    2a62:	6838      	ldr	r0, [r7, #0]
    2a64:	f7ff ffea 	bl	2a3c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2a68:	4602      	mov	r2, r0
    2a6a:	460b      	mov	r3, r1
    2a6c:	f04f 0400 	mov.w	r4, #0
    2a70:	f04f 0500 	mov.w	r5, #0
    2a74:	015d      	lsls	r5, r3, #5
    2a76:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    2a7a:	0154      	lsls	r4, r2, #5
    2a7c:	4622      	mov	r2, r4
    2a7e:	462b      	mov	r3, r5
    2a80:	1a12      	subs	r2, r2, r0
    2a82:	eb63 0301 	sbc.w	r3, r3, r1
    2a86:	f04f 0400 	mov.w	r4, #0
    2a8a:	f04f 0500 	mov.w	r5, #0
    2a8e:	009d      	lsls	r5, r3, #2
    2a90:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    2a94:	0094      	lsls	r4, r2, #2
    2a96:	4622      	mov	r2, r4
    2a98:	462b      	mov	r3, r5
    2a9a:	1812      	adds	r2, r2, r0
    2a9c:	eb41 0303 	adc.w	r3, r1, r3
    2aa0:	f04f 0000 	mov.w	r0, #0
    2aa4:	f04f 0100 	mov.w	r1, #0
    2aa8:	00d9      	lsls	r1, r3, #3
    2aaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
    2aae:	00d0      	lsls	r0, r2, #3
    2ab0:	4602      	mov	r2, r0
    2ab2:	460b      	mov	r3, r1
    2ab4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    2ab8:	f107 0308 	add.w	r3, r7, #8
    2abc:	4619      	mov	r1, r3
    2abe:	6878      	ldr	r0, [r7, #4]
    2ac0:	f7fd fdf4 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    2ac4:	6878      	ldr	r0, [r7, #4]
    2ac6:	3710      	adds	r7, #16
    2ac8:	46bd      	mov	sp, r7
    2aca:	bdb0      	pop	{r4, r5, r7, pc}

00002acc <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2acc:	b590      	push	{r4, r7, lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	af00      	add	r7, sp, #0
    2ad2:	60f8      	str	r0, [r7, #12]
    2ad4:	60b9      	str	r1, [r7, #8]
    2ad6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2ad8:	68b8      	ldr	r0, [r7, #8]
    2ada:	f7ff fda4 	bl	2626 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    2ade:	4603      	mov	r3, r0
    2ae0:	681c      	ldr	r4, [r3, #0]
    2ae2:	68f8      	ldr	r0, [r7, #12]
    2ae4:	f7fd fc5a 	bl	39c <std::_Any_data::_M_access()>
    2ae8:	4603      	mov	r3, r0
    2aea:	4619      	mov	r1, r3
    2aec:	2004      	movs	r0, #4
    2aee:	f7fd fc3d 	bl	36c <operator new(unsigned int, void*)>
    2af2:	4603      	mov	r3, r0
    2af4:	601c      	str	r4, [r3, #0]
    2af6:	bf00      	nop
    2af8:	3714      	adds	r7, #20
    2afa:	46bd      	mov	sp, r7
    2afc:	bd90      	pop	{r4, r7, pc}

00002afe <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2afe:	b580      	push	{r7, lr}
    2b00:	b084      	sub	sp, #16
    2b02:	af00      	add	r7, sp, #0
    2b04:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2b06:	6878      	ldr	r0, [r7, #4]
    2b08:	f000 f9d1 	bl	2eae <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2b0c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2b0e:	68f8      	ldr	r0, [r7, #12]
    2b10:	f000 f9d9 	bl	2ec6 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>
    2b14:	4603      	mov	r3, r0
	}
    2b16:	4618      	mov	r0, r3
    2b18:	3710      	adds	r7, #16
    2b1a:	46bd      	mov	sp, r7
    2b1c:	bd80      	pop	{r7, pc}

00002b1e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>:
      _M_access()
    2b1e:	b580      	push	{r7, lr}
    2b20:	b082      	sub	sp, #8
    2b22:	af00      	add	r7, sp, #0
    2b24:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2b26:	6878      	ldr	r0, [r7, #4]
    2b28:	f7fd fc38 	bl	39c <std::_Any_data::_M_access()>
    2b2c:	4603      	mov	r3, r0
    2b2e:	4618      	mov	r0, r3
    2b30:	3708      	adds	r7, #8
    2b32:	46bd      	mov	sp, r7
    2b34:	bd80      	pop	{r7, pc}

00002b36 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2b36:	b590      	push	{r4, r7, lr}
    2b38:	b085      	sub	sp, #20
    2b3a:	af00      	add	r7, sp, #0
    2b3c:	60f8      	str	r0, [r7, #12]
    2b3e:	60b9      	str	r1, [r7, #8]
    2b40:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2b42:	68b8      	ldr	r0, [r7, #8]
    2b44:	f000 f9b3 	bl	2eae <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2b48:	4603      	mov	r3, r0
    2b4a:	681c      	ldr	r4, [r3, #0]
    2b4c:	68f8      	ldr	r0, [r7, #12]
    2b4e:	f7fd fc25 	bl	39c <std::_Any_data::_M_access()>
    2b52:	4603      	mov	r3, r0
    2b54:	4619      	mov	r1, r3
    2b56:	2004      	movs	r0, #4
    2b58:	f7fd fc08 	bl	36c <operator new(unsigned int, void*)>
    2b5c:	4603      	mov	r3, r0
    2b5e:	601c      	str	r4, [r3, #0]
	}
    2b60:	bf00      	nop
    2b62:	3714      	adds	r7, #20
    2b64:	46bd      	mov	sp, r7
    2b66:	bd90      	pop	{r4, r7, pc}

00002b68 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2b68:	b580      	push	{r7, lr}
    2b6a:	b082      	sub	sp, #8
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	6078      	str	r0, [r7, #4]
    2b70:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2b72:	6878      	ldr	r0, [r7, #4]
    2b74:	f000 f9b2 	bl	2edc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>
	}
    2b78:	bf00      	nop
    2b7a:	3708      	adds	r7, #8
    2b7c:	46bd      	mov	sp, r7
    2b7e:	bd80      	pop	{r7, pc}

00002b80 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    2b80:	b480      	push	{r7}
    2b82:	b083      	sub	sp, #12
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	4618      	mov	r0, r3
    2b8c:	370c      	adds	r7, #12
    2b8e:	46bd      	mov	sp, r7
    2b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b94:	4770      	bx	lr

00002b96 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    2b96:	b580      	push	{r7, lr}
    2b98:	b084      	sub	sp, #16
    2b9a:	af00      	add	r7, sp, #0
    2b9c:	6078      	str	r0, [r7, #4]
    2b9e:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2ba0:	6878      	ldr	r0, [r7, #4]
    2ba2:	f7ff ffed 	bl	2b80 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2ba6:	4602      	mov	r2, r0
    2ba8:	f107 0308 	add.w	r3, r7, #8
    2bac:	e892 0003 	ldmia.w	r2, {r0, r1}
    2bb0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    2bb4:	6838      	ldr	r0, [r7, #0]
    2bb6:	f7ff ffe3 	bl	2b80 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2bba:	4602      	mov	r2, r0
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
    2bc2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    2bc6:	f107 0308 	add.w	r3, r7, #8
    2bca:	4618      	mov	r0, r3
    2bcc:	f7ff ffd8 	bl	2b80 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    2bd0:	4602      	mov	r2, r0
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
    2bd8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    2bdc:	bf00      	nop
    2bde:	3710      	adds	r7, #16
    2be0:	46bd      	mov	sp, r7
    2be2:	bd80      	pop	{r7, pc}

00002be4 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    2be4:	b480      	push	{r7}
    2be6:	b083      	sub	sp, #12
    2be8:	af00      	add	r7, sp, #0
    2bea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	4618      	mov	r0, r3
    2bf0:	370c      	adds	r7, #12
    2bf2:	46bd      	mov	sp, r7
    2bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bf8:	4770      	bx	lr

00002bfa <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    2bfa:	b580      	push	{r7, lr}
    2bfc:	b084      	sub	sp, #16
    2bfe:	af00      	add	r7, sp, #0
    2c00:	6078      	str	r0, [r7, #4]
    2c02:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2c04:	6878      	ldr	r0, [r7, #4]
    2c06:	f7ff ffed 	bl	2be4 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2c0a:	4603      	mov	r3, r0
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    2c10:	6838      	ldr	r0, [r7, #0]
    2c12:	f7ff ffe7 	bl	2be4 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2c16:	4603      	mov	r3, r0
    2c18:	681a      	ldr	r2, [r3, #0]
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2c1e:	f107 030c 	add.w	r3, r7, #12
    2c22:	4618      	mov	r0, r3
    2c24:	f7ff ffde 	bl	2be4 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2c28:	4603      	mov	r3, r0
    2c2a:	681a      	ldr	r2, [r3, #0]
    2c2c:	683b      	ldr	r3, [r7, #0]
    2c2e:	601a      	str	r2, [r3, #0]
    }
    2c30:	bf00      	nop
    2c32:	3710      	adds	r7, #16
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}

00002c38 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2c38:	b580      	push	{r7, lr}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	60f8      	str	r0, [r7, #12]
    2c40:	60b9      	str	r1, [r7, #8]
    2c42:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2c44:	68b8      	ldr	r0, [r7, #8]
    2c46:	f7ff fd5c 	bl	2702 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    2c4a:	68f8      	ldr	r0, [r7, #12]
    2c4c:	f7fd fba6 	bl	39c <std::_Any_data::_M_access()>
    2c50:	4603      	mov	r3, r0
    2c52:	4619      	mov	r1, r3
    2c54:	2001      	movs	r0, #1
    2c56:	f7fd fb89 	bl	36c <operator new(unsigned int, void*)>
    2c5a:	bf00      	nop
    2c5c:	3710      	adds	r7, #16
    2c5e:	46bd      	mov	sp, r7
    2c60:	bd80      	pop	{r7, pc}

00002c62 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2c62:	b580      	push	{r7, lr}
    2c64:	b084      	sub	sp, #16
    2c66:	af00      	add	r7, sp, #0
    2c68:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2c6a:	6878      	ldr	r0, [r7, #4]
    2c6c:	f000 f942 	bl	2ef4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    2c70:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2c72:	68f8      	ldr	r0, [r7, #12]
    2c74:	f000 f94a 	bl	2f0c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>
    2c78:	4603      	mov	r3, r0
	}
    2c7a:	4618      	mov	r0, r3
    2c7c:	3710      	adds	r7, #16
    2c7e:	46bd      	mov	sp, r7
    2c80:	bd80      	pop	{r7, pc}

00002c82 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>:
      _M_access()
    2c82:	b580      	push	{r7, lr}
    2c84:	b082      	sub	sp, #8
    2c86:	af00      	add	r7, sp, #0
    2c88:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2c8a:	6878      	ldr	r0, [r7, #4]
    2c8c:	f7fd fb86 	bl	39c <std::_Any_data::_M_access()>
    2c90:	4603      	mov	r3, r0
    2c92:	4618      	mov	r0, r3
    2c94:	3708      	adds	r7, #8
    2c96:	46bd      	mov	sp, r7
    2c98:	bd80      	pop	{r7, pc}

00002c9a <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2c9a:	b580      	push	{r7, lr}
    2c9c:	b084      	sub	sp, #16
    2c9e:	af00      	add	r7, sp, #0
    2ca0:	60f8      	str	r0, [r7, #12]
    2ca2:	60b9      	str	r1, [r7, #8]
    2ca4:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2ca6:	68b8      	ldr	r0, [r7, #8]
    2ca8:	f000 f924 	bl	2ef4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    2cac:	68f8      	ldr	r0, [r7, #12]
    2cae:	f7fd fb75 	bl	39c <std::_Any_data::_M_access()>
    2cb2:	4603      	mov	r3, r0
    2cb4:	4619      	mov	r1, r3
    2cb6:	2001      	movs	r0, #1
    2cb8:	f7fd fb58 	bl	36c <operator new(unsigned int, void*)>
	}
    2cbc:	bf00      	nop
    2cbe:	3710      	adds	r7, #16
    2cc0:	46bd      	mov	sp, r7
    2cc2:	bd80      	pop	{r7, pc}

00002cc4 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b082      	sub	sp, #8
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
    2ccc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2cce:	6878      	ldr	r0, [r7, #4]
    2cd0:	f000 f927 	bl	2f22 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>
	}
    2cd4:	bf00      	nop
    2cd6:	3708      	adds	r7, #8
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}

00002cdc <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2cdc:	b590      	push	{r4, r7, lr}
    2cde:	b085      	sub	sp, #20
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	60f8      	str	r0, [r7, #12]
    2ce4:	60b9      	str	r1, [r7, #8]
    2ce6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2ce8:	68b8      	ldr	r0, [r7, #8]
    2cea:	f7ff fd9f 	bl	282c <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2cee:	4603      	mov	r3, r0
    2cf0:	681c      	ldr	r4, [r3, #0]
    2cf2:	68f8      	ldr	r0, [r7, #12]
    2cf4:	f7fd fb52 	bl	39c <std::_Any_data::_M_access()>
    2cf8:	4603      	mov	r3, r0
    2cfa:	4619      	mov	r1, r3
    2cfc:	2004      	movs	r0, #4
    2cfe:	f7fd fb35 	bl	36c <operator new(unsigned int, void*)>
    2d02:	4603      	mov	r3, r0
    2d04:	601c      	str	r4, [r3, #0]
    2d06:	bf00      	nop
    2d08:	3714      	adds	r7, #20
    2d0a:	46bd      	mov	sp, r7
    2d0c:	bd90      	pop	{r4, r7, pc}

00002d0e <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2d0e:	b580      	push	{r7, lr}
    2d10:	b084      	sub	sp, #16
    2d12:	af00      	add	r7, sp, #0
    2d14:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2d16:	6878      	ldr	r0, [r7, #4]
    2d18:	f000 f90f 	bl	2f3a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2d1c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2d1e:	68f8      	ldr	r0, [r7, #12]
    2d20:	f000 f917 	bl	2f52 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    2d24:	4603      	mov	r3, r0
	}
    2d26:	4618      	mov	r0, r3
    2d28:	3710      	adds	r7, #16
    2d2a:	46bd      	mov	sp, r7
    2d2c:	bd80      	pop	{r7, pc}

00002d2e <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    2d2e:	b580      	push	{r7, lr}
    2d30:	b082      	sub	sp, #8
    2d32:	af00      	add	r7, sp, #0
    2d34:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2d36:	6878      	ldr	r0, [r7, #4]
    2d38:	f7fd fb30 	bl	39c <std::_Any_data::_M_access()>
    2d3c:	4603      	mov	r3, r0
    2d3e:	4618      	mov	r0, r3
    2d40:	3708      	adds	r7, #8
    2d42:	46bd      	mov	sp, r7
    2d44:	bd80      	pop	{r7, pc}

00002d46 <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2d46:	b590      	push	{r4, r7, lr}
    2d48:	b085      	sub	sp, #20
    2d4a:	af00      	add	r7, sp, #0
    2d4c:	60f8      	str	r0, [r7, #12]
    2d4e:	60b9      	str	r1, [r7, #8]
    2d50:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    2d52:	68b8      	ldr	r0, [r7, #8]
    2d54:	f000 f8f1 	bl	2f3a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2d58:	4603      	mov	r3, r0
    2d5a:	681c      	ldr	r4, [r3, #0]
    2d5c:	68f8      	ldr	r0, [r7, #12]
    2d5e:	f7fd fb1d 	bl	39c <std::_Any_data::_M_access()>
    2d62:	4603      	mov	r3, r0
    2d64:	4619      	mov	r1, r3
    2d66:	2004      	movs	r0, #4
    2d68:	f7fd fb00 	bl	36c <operator new(unsigned int, void*)>
    2d6c:	4603      	mov	r3, r0
    2d6e:	601c      	str	r4, [r3, #0]
	}
    2d70:	bf00      	nop
    2d72:	3714      	adds	r7, #20
    2d74:	46bd      	mov	sp, r7
    2d76:	bd90      	pop	{r4, r7, pc}

00002d78 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2d78:	b580      	push	{r7, lr}
    2d7a:	b082      	sub	sp, #8
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
    2d80:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f000 f8f0 	bl	2f68 <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    2d88:	bf00      	nop
    2d8a:	3708      	adds	r7, #8
    2d8c:	46bd      	mov	sp, r7
    2d8e:	bd80      	pop	{r7, pc}

00002d90 <std::function<void ()>::operator bool() const>:
      explicit operator bool() const noexcept
    2d90:	b580      	push	{r7, lr}
    2d92:	b082      	sub	sp, #8
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	4618      	mov	r0, r3
    2d9c:	f7fd fb35 	bl	40a <std::_Function_base::_M_empty() const>
    2da0:	4603      	mov	r3, r0
    2da2:	f083 0301 	eor.w	r3, r3, #1
    2da6:	b2db      	uxtb	r3, r3
    2da8:	4618      	mov	r0, r3
    2daa:	3708      	adds	r7, #8
    2dac:	46bd      	mov	sp, r7
    2dae:	bd80      	pop	{r7, pc}

00002db0 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    2db0:	b480      	push	{r7}
    2db2:	b083      	sub	sp, #12
    2db4:	af00      	add	r7, sp, #0
    2db6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	4618      	mov	r0, r3
    2dbc:	370c      	adds	r7, #12
    2dbe:	46bd      	mov	sp, r7
    2dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dc4:	4770      	bx	lr

00002dc6 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    2dc6:	b580      	push	{r7, lr}
    2dc8:	b084      	sub	sp, #16
    2dca:	af00      	add	r7, sp, #0
    2dcc:	6078      	str	r0, [r7, #4]
    2dce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    2dd0:	6878      	ldr	r0, [r7, #4]
    2dd2:	f7ff ffed 	bl	2db0 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2dd6:	4603      	mov	r3, r0
    2dd8:	681b      	ldr	r3, [r3, #0]
    2dda:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    2ddc:	6838      	ldr	r0, [r7, #0]
    2dde:	f7ff ffe7 	bl	2db0 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2de2:	4603      	mov	r3, r0
    2de4:	681a      	ldr	r2, [r3, #0]
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2dea:	f107 030c 	add.w	r3, r7, #12
    2dee:	4618      	mov	r0, r3
    2df0:	f7ff ffde 	bl	2db0 <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    2df4:	4603      	mov	r3, r0
    2df6:	681a      	ldr	r2, [r3, #0]
    2df8:	683b      	ldr	r3, [r7, #0]
    2dfa:	601a      	str	r2, [r3, #0]
    }
    2dfc:	bf00      	nop
    2dfe:	3710      	adds	r7, #16
    2e00:	46bd      	mov	sp, r7
    2e02:	bd80      	pop	{r7, pc}

00002e04 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2e04:	b480      	push	{r7}
    2e06:	b085      	sub	sp, #20
    2e08:	af00      	add	r7, sp, #0
    2e0a:	60f8      	str	r0, [r7, #12]
    2e0c:	7239      	strb	r1, [r7, #8]
    2e0e:	713a      	strb	r2, [r7, #4]
    2e10:	703b      	strb	r3, [r7, #0]
			return value;
    2e12:	68fb      	ldr	r3, [r7, #12]
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	ee07 3a90 	vmov	s15, r3
		}
    2e1a:	eeb0 0a67 	vmov.f32	s0, s15
    2e1e:	3714      	adds	r7, #20
    2e20:	46bd      	mov	sp, r7
    2e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e26:	4770      	bx	lr

00002e28 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    2e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    2e2c:	b084      	sub	sp, #16
    2e2e:	af00      	add	r7, sp, #0
    2e30:	6078      	str	r0, [r7, #4]
    2e32:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    2e34:	6838      	ldr	r0, [r7, #0]
    2e36:	f7fe f9a7 	bl	1188 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    2e3a:	4604      	mov	r4, r0
    2e3c:	460d      	mov	r5, r1
    2e3e:	4622      	mov	r2, r4
    2e40:	462b      	mov	r3, r5
    2e42:	f04f 0000 	mov.w	r0, #0
    2e46:	f04f 0100 	mov.w	r1, #0
    2e4a:	0159      	lsls	r1, r3, #5
    2e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
    2e50:	0150      	lsls	r0, r2, #5
    2e52:	4602      	mov	r2, r0
    2e54:	460b      	mov	r3, r1
    2e56:	1b12      	subs	r2, r2, r4
    2e58:	eb63 0305 	sbc.w	r3, r3, r5
    2e5c:	f04f 0000 	mov.w	r0, #0
    2e60:	f04f 0100 	mov.w	r1, #0
    2e64:	0259      	lsls	r1, r3, #9
    2e66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
    2e6a:	0250      	lsls	r0, r2, #9
    2e6c:	4602      	mov	r2, r0
    2e6e:	460b      	mov	r3, r1
    2e70:	1912      	adds	r2, r2, r4
    2e72:	eb45 0303 	adc.w	r3, r5, r3
    2e76:	f04f 0000 	mov.w	r0, #0
    2e7a:	f04f 0100 	mov.w	r1, #0
    2e7e:	0199      	lsls	r1, r3, #6
    2e80:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    2e84:	0190      	lsls	r0, r2, #6
    2e86:	1a80      	subs	r0, r0, r2
    2e88:	eb61 0103 	sbc.w	r1, r1, r3
    2e8c:	eb10 0804 	adds.w	r8, r0, r4
    2e90:	eb41 0905 	adc.w	r9, r1, r5
    2e94:	e9c7 8902 	strd	r8, r9, [r7, #8]
    2e98:	f107 0308 	add.w	r3, r7, #8
    2e9c:	4619      	mov	r1, r3
    2e9e:	6878      	ldr	r0, [r7, #4]
    2ea0:	f7fd fc04 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	3710      	adds	r7, #16
    2ea8:	46bd      	mov	sp, r7
    2eaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00002eae <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>:
      _M_access() const
    2eae:	b580      	push	{r7, lr}
    2eb0:	b082      	sub	sp, #8
    2eb2:	af00      	add	r7, sp, #0
    2eb4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2eb6:	6878      	ldr	r0, [r7, #4]
    2eb8:	f7fd fa7b 	bl	3b2 <std::_Any_data::_M_access() const>
    2ebc:	4603      	mov	r3, r0
    2ebe:	4618      	mov	r0, r3
    2ec0:	3708      	adds	r7, #8
    2ec2:	46bd      	mov	sp, r7
    2ec4:	bd80      	pop	{r7, pc}

00002ec6 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2ec6:	b480      	push	{r7}
    2ec8:	b083      	sub	sp, #12
    2eca:	af00      	add	r7, sp, #0
    2ecc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	4618      	mov	r0, r3
    2ed2:	370c      	adds	r7, #12
    2ed4:	46bd      	mov	sp, r7
    2ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eda:	4770      	bx	lr

00002edc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>:
      _M_access()
    2edc:	b580      	push	{r7, lr}
    2ede:	b082      	sub	sp, #8
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2ee4:	6878      	ldr	r0, [r7, #4]
    2ee6:	f7fd fa59 	bl	39c <std::_Any_data::_M_access()>
    2eea:	4603      	mov	r3, r0
    2eec:	4618      	mov	r0, r3
    2eee:	3708      	adds	r7, #8
    2ef0:	46bd      	mov	sp, r7
    2ef2:	bd80      	pop	{r7, pc}

00002ef4 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>:
      _M_access() const
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2efc:	6878      	ldr	r0, [r7, #4]
    2efe:	f7fd fa58 	bl	3b2 <std::_Any_data::_M_access() const>
    2f02:	4603      	mov	r3, r0
    2f04:	4618      	mov	r0, r3
    2f06:	3708      	adds	r7, #8
    2f08:	46bd      	mov	sp, r7
    2f0a:	bd80      	pop	{r7, pc}

00002f0c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2f0c:	b480      	push	{r7}
    2f0e:	b083      	sub	sp, #12
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	4618      	mov	r0, r3
    2f18:	370c      	adds	r7, #12
    2f1a:	46bd      	mov	sp, r7
    2f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f20:	4770      	bx	lr

00002f22 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>:
      _M_access()
    2f22:	b580      	push	{r7, lr}
    2f24:	b082      	sub	sp, #8
    2f26:	af00      	add	r7, sp, #0
    2f28:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2f2a:	6878      	ldr	r0, [r7, #4]
    2f2c:	f7fd fa36 	bl	39c <std::_Any_data::_M_access()>
    2f30:	4603      	mov	r3, r0
    2f32:	4618      	mov	r0, r3
    2f34:	3708      	adds	r7, #8
    2f36:	46bd      	mov	sp, r7
    2f38:	bd80      	pop	{r7, pc}

00002f3a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    2f3a:	b580      	push	{r7, lr}
    2f3c:	b082      	sub	sp, #8
    2f3e:	af00      	add	r7, sp, #0
    2f40:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2f42:	6878      	ldr	r0, [r7, #4]
    2f44:	f7fd fa35 	bl	3b2 <std::_Any_data::_M_access() const>
    2f48:	4603      	mov	r3, r0
    2f4a:	4618      	mov	r0, r3
    2f4c:	3708      	adds	r7, #8
    2f4e:	46bd      	mov	sp, r7
    2f50:	bd80      	pop	{r7, pc}

00002f52 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2f52:	b480      	push	{r7}
    2f54:	b083      	sub	sp, #12
    2f56:	af00      	add	r7, sp, #0
    2f58:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	4618      	mov	r0, r3
    2f5e:	370c      	adds	r7, #12
    2f60:	46bd      	mov	sp, r7
    2f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f66:	4770      	bx	lr

00002f68 <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2f70:	6878      	ldr	r0, [r7, #4]
    2f72:	f7fd fa13 	bl	39c <std::_Any_data::_M_access()>
    2f76:	4603      	mov	r3, r0
    2f78:	4618      	mov	r0, r3
    2f7a:	3708      	adds	r7, #8
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bd80      	pop	{r7, pc}

00002f80 <__tcf_0>:
  inline static InterruptCallback handlers[kInterruptPorts][kPinCount];
    2f80:	b590      	push	{r4, r7, lr}
    2f82:	b083      	sub	sp, #12
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
    2f88:	4c05      	ldr	r4, [pc, #20]	; (2fa0 <__tcf_0+0x20>)
    2f8a:	4b06      	ldr	r3, [pc, #24]	; (2fa4 <__tcf_0+0x24>)
    2f8c:	429c      	cmp	r4, r3
    2f8e:	d004      	beq.n	2f9a <__tcf_0+0x1a>
    2f90:	3c10      	subs	r4, #16
    2f92:	4620      	mov	r0, r4
    2f94:	f7fd fffb 	bl	f8e <std::function<void ()>::~function()>
    2f98:	e7f7      	b.n	2f8a <__tcf_0+0xa>
    2f9a:	370c      	adds	r7, #12
    2f9c:	46bd      	mov	sp, r7
    2f9e:	bd90      	pop	{r4, r7, pc}
    2fa0:	1000114c 	.word	0x1000114c
    2fa4:	10000d4c 	.word	0x10000d4c

00002fa8 <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return -1;
}
    2fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fac:	b082      	sub	sp, #8
    2fae:	af00      	add	r7, sp, #0
    2fb0:	6078      	str	r0, [r7, #4]
    2fb2:	6039      	str	r1, [r7, #0]
    2fb4:	687b      	ldr	r3, [r7, #4]
    2fb6:	2b01      	cmp	r3, #1
    2fb8:	f040 80fc 	bne.w	31b4 <__static_initialization_and_destruction_0(int, int)+0x20c>
    2fbc:	683b      	ldr	r3, [r7, #0]
    2fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2fc2:	4293      	cmp	r3, r2
    2fc4:	f040 80f6 	bne.w	31b4 <__static_initialization_and_destruction_0(int, int)+0x20c>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    2fc8:	4b7d      	ldr	r3, [pc, #500]	; (31c0 <__static_initialization_and_destruction_0(int, int)+0x218>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	f003 0301 	and.w	r3, r3, #1
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d105      	bne.n	2fe0 <__static_initialization_and_destruction_0(int, int)+0x38>
    2fd4:	4b7a      	ldr	r3, [pc, #488]	; (31c0 <__static_initialization_and_destruction_0(int, int)+0x218>)
    2fd6:	2201      	movs	r2, #1
    2fd8:	601a      	str	r2, [r3, #0]
    2fda:	4a7a      	ldr	r2, [pc, #488]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    2fdc:	4b7a      	ldr	r3, [pc, #488]	; (31c8 <__static_initialization_and_destruction_0(int, int)+0x220>)
    2fde:	601a      	str	r2, [r3, #0]
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    2fe0:	4b7a      	ldr	r3, [pc, #488]	; (31cc <__static_initialization_and_destruction_0(int, int)+0x224>)
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	f003 0301 	and.w	r3, r3, #1
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d10b      	bne.n	3004 <__static_initialization_and_destruction_0(int, int)+0x5c>
    2fec:	4b77      	ldr	r3, [pc, #476]	; (31cc <__static_initialization_and_destruction_0(int, int)+0x224>)
    2fee:	2201      	movs	r2, #1
    2ff0:	601a      	str	r2, [r3, #0]
    2ff2:	4977      	ldr	r1, [pc, #476]	; (31d0 <__static_initialization_and_destruction_0(int, int)+0x228>)
    2ff4:	4877      	ldr	r0, [pc, #476]	; (31d4 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    2ff6:	f7ff f841 	bl	207c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2ffa:	4a77      	ldr	r2, [pc, #476]	; (31d8 <__static_initialization_and_destruction_0(int, int)+0x230>)
    2ffc:	4977      	ldr	r1, [pc, #476]	; (31dc <__static_initialization_and_destruction_0(int, int)+0x234>)
    2ffe:	4875      	ldr	r0, [pc, #468]	; (31d4 <__static_initialization_and_destruction_0(int, int)+0x22c>)
    3000:	f003 fdf2 	bl	6be8 <__aeabi_atexit>
  inline static volatile PinTable_t * function_map =
    3004:	4b76      	ldr	r3, [pc, #472]	; (31e0 <__static_initialization_and_destruction_0(int, int)+0x238>)
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	f003 0301 	and.w	r3, r3, #1
    300c:	2b00      	cmp	r3, #0
    300e:	d106      	bne.n	301e <__static_initialization_and_destruction_0(int, int)+0x76>
    3010:	4b73      	ldr	r3, [pc, #460]	; (31e0 <__static_initialization_and_destruction_0(int, int)+0x238>)
    3012:	2201      	movs	r2, #1
    3014:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    3016:	4b6b      	ldr	r3, [pc, #428]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3018:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    301a:	4b72      	ldr	r3, [pc, #456]	; (31e4 <__static_initialization_and_destruction_0(int, int)+0x23c>)
    301c:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    301e:	4b72      	ldr	r3, [pc, #456]	; (31e8 <__static_initialization_and_destruction_0(int, int)+0x240>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	f003 0301 	and.w	r3, r3, #1
    3026:	2b00      	cmp	r3, #0
    3028:	d106      	bne.n	3038 <__static_initialization_and_destruction_0(int, int)+0x90>
    302a:	4b6f      	ldr	r3, [pc, #444]	; (31e8 <__static_initialization_and_destruction_0(int, int)+0x240>)
    302c:	2201      	movs	r2, #1
    302e:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    3030:	4b64      	ldr	r3, [pc, #400]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    3032:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    3034:	4a6d      	ldr	r2, [pc, #436]	; (31ec <__static_initialization_and_destruction_0(int, int)+0x244>)
    3036:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    3038:	4b6d      	ldr	r3, [pc, #436]	; (31f0 <__static_initialization_and_destruction_0(int, int)+0x248>)
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	f003 0301 	and.w	r3, r3, #1
    3040:	2b00      	cmp	r3, #0
    3042:	d106      	bne.n	3052 <__static_initialization_and_destruction_0(int, int)+0xaa>
    3044:	4b6a      	ldr	r3, [pc, #424]	; (31f0 <__static_initialization_and_destruction_0(int, int)+0x248>)
    3046:	2201      	movs	r2, #1
    3048:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    304a:	4b5e      	ldr	r3, [pc, #376]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x21c>)
    304c:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    304e:	4a69      	ldr	r2, [pc, #420]	; (31f4 <__static_initialization_and_destruction_0(int, int)+0x24c>)
    3050:	6013      	str	r3, [r2, #0]
    3052:	4b69      	ldr	r3, [pc, #420]	; (31f8 <__static_initialization_and_destruction_0(int, int)+0x250>)
    3054:	681b      	ldr	r3, [r3, #0]
    3056:	f003 0301 	and.w	r3, r3, #1
    305a:	2b00      	cmp	r3, #0
    305c:	d11a      	bne.n	3094 <__static_initialization_and_destruction_0(int, int)+0xec>
    305e:	4b66      	ldr	r3, [pc, #408]	; (31f8 <__static_initialization_and_destruction_0(int, int)+0x250>)
    3060:	2201      	movs	r2, #1
    3062:	601a      	str	r2, [r3, #0]
    3064:	4b65      	ldr	r3, [pc, #404]	; (31fc <__static_initialization_and_destruction_0(int, int)+0x254>)
    3066:	2401      	movs	r4, #1
    3068:	4698      	mov	r8, r3
    306a:	2c00      	cmp	r4, #0
    306c:	db0d      	blt.n	308a <__static_initialization_and_destruction_0(int, int)+0xe2>
    306e:	4646      	mov	r6, r8
    3070:	251f      	movs	r5, #31
    3072:	2d00      	cmp	r5, #0
    3074:	db05      	blt.n	3082 <__static_initialization_and_destruction_0(int, int)+0xda>
    3076:	4630      	mov	r0, r6
    3078:	f7ff f913 	bl	22a2 <std::function<void ()>::function()>
    307c:	3610      	adds	r6, #16
    307e:	3d01      	subs	r5, #1
    3080:	e7f7      	b.n	3072 <__static_initialization_and_destruction_0(int, int)+0xca>
    3082:	f508 7800 	add.w	r8, r8, #512	; 0x200
    3086:	3c01      	subs	r4, #1
    3088:	e7ef      	b.n	306a <__static_initialization_and_destruction_0(int, int)+0xc2>
    308a:	4a53      	ldr	r2, [pc, #332]	; (31d8 <__static_initialization_and_destruction_0(int, int)+0x230>)
    308c:	495c      	ldr	r1, [pc, #368]	; (3200 <__static_initialization_and_destruction_0(int, int)+0x258>)
    308e:	2000      	movs	r0, #0
    3090:	f003 fdaa 	bl	6be8 <__aeabi_atexit>
  {
    static constexpr bit::Mask kDivider = bit::CreateMaskFromRange(0, 4);
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    3094:	4b5b      	ldr	r3, [pc, #364]	; (3204 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	f003 0301 	and.w	r3, r3, #1
    309c:	2b00      	cmp	r3, #0
    309e:	d105      	bne.n	30ac <__static_initialization_and_destruction_0(int, int)+0x104>
    30a0:	4b58      	ldr	r3, [pc, #352]	; (3204 <__static_initialization_and_destruction_0(int, int)+0x25c>)
    30a2:	2201      	movs	r2, #1
    30a4:	601a      	str	r2, [r3, #0]
    30a6:	4a58      	ldr	r2, [pc, #352]	; (3208 <__static_initialization_and_destruction_0(int, int)+0x260>)
    30a8:	4b58      	ldr	r3, [pc, #352]	; (320c <__static_initialization_and_destruction_0(int, int)+0x264>)
    30aa:	601a      	str	r2, [r3, #0]
    inline static Transaction_t transaction_i2c2;

   public:
    // UM10562: Chapter 7: LPC408x/407x I/O configuration page 133
    /// Definition for I2C bus 0 for LPC40xx.
    inline static const Bus_t kI2c0 = {
    30ac:	4b58      	ldr	r3, [pc, #352]	; (3210 <__static_initialization_and_destruction_0(int, int)+0x268>)
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	f003 0301 	and.w	r3, r3, #1
    30b4:	2b00      	cmp	r3, #0
    30b6:	d105      	bne.n	30c4 <__static_initialization_and_destruction_0(int, int)+0x11c>
    30b8:	4b55      	ldr	r3, [pc, #340]	; (3210 <__static_initialization_and_destruction_0(int, int)+0x268>)
    30ba:	2201      	movs	r2, #1
    30bc:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C0_IRQn,
      .transaction     = transaction_i2c0,
      .sda_pin         = kI2c0SdaPin,
      .scl_pin         = kI2c0SclPin,
      .pin_function_id = 0b010,
    };
    30be:	4a55      	ldr	r2, [pc, #340]	; (3214 <__static_initialization_and_destruction_0(int, int)+0x26c>)
    30c0:	4b55      	ldr	r3, [pc, #340]	; (3218 <__static_initialization_and_destruction_0(int, int)+0x270>)
    30c2:	601a      	str	r2, [r3, #0]

    /// Definition for I2C bus 1 for LPC40xx.
    inline static const Bus_t kI2c1 = {
    30c4:	4b55      	ldr	r3, [pc, #340]	; (321c <__static_initialization_and_destruction_0(int, int)+0x274>)
    30c6:	681b      	ldr	r3, [r3, #0]
    30c8:	f003 0301 	and.w	r3, r3, #1
    30cc:	2b00      	cmp	r3, #0
    30ce:	d105      	bne.n	30dc <__static_initialization_and_destruction_0(int, int)+0x134>
    30d0:	4b52      	ldr	r3, [pc, #328]	; (321c <__static_initialization_and_destruction_0(int, int)+0x274>)
    30d2:	2201      	movs	r2, #1
    30d4:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C1_IRQn,
      .transaction     = transaction_i2c1,
      .sda_pin         = kI2c1SdaPin,
      .scl_pin         = kI2c1SclPin,
      .pin_function_id = 0b011,
    };
    30d6:	4a52      	ldr	r2, [pc, #328]	; (3220 <__static_initialization_and_destruction_0(int, int)+0x278>)
    30d8:	4b52      	ldr	r3, [pc, #328]	; (3224 <__static_initialization_and_destruction_0(int, int)+0x27c>)
    30da:	601a      	str	r2, [r3, #0]

    /// Definition for I2C bus 2 for LPC40xx.
    inline static const Bus_t kI2c2 = {
    30dc:	4b52      	ldr	r3, [pc, #328]	; (3228 <__static_initialization_and_destruction_0(int, int)+0x280>)
    30de:	681b      	ldr	r3, [r3, #0]
    30e0:	f003 0301 	and.w	r3, r3, #1
    30e4:	2b00      	cmp	r3, #0
    30e6:	d105      	bne.n	30f4 <__static_initialization_and_destruction_0(int, int)+0x14c>
    30e8:	4b4f      	ldr	r3, [pc, #316]	; (3228 <__static_initialization_and_destruction_0(int, int)+0x280>)
    30ea:	2201      	movs	r2, #1
    30ec:	601a      	str	r2, [r3, #0]
      .irq_number      = I2C2_IRQn,
      .transaction     = transaction_i2c2,
      .sda_pin         = kI2c2SdaPin,
      .scl_pin         = kI2c2SclPin,
      .pin_function_id = 0b010,
    };
    30ee:	4a4f      	ldr	r2, [pc, #316]	; (322c <__static_initialization_and_destruction_0(int, int)+0x284>)
    30f0:	4b4f      	ldr	r3, [pc, #316]	; (3230 <__static_initialization_and_destruction_0(int, int)+0x288>)
    30f2:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi0 = {
    30f4:	4b4f      	ldr	r3, [pc, #316]	; (3234 <__static_initialization_and_destruction_0(int, int)+0x28c>)
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	f003 0301 	and.w	r3, r3, #1
    30fc:	2b00      	cmp	r3, #0
    30fe:	d105      	bne.n	310c <__static_initialization_and_destruction_0(int, int)+0x164>
    3100:	4b4c      	ldr	r3, [pc, #304]	; (3234 <__static_initialization_and_destruction_0(int, int)+0x28c>)
    3102:	2201      	movs	r2, #1
    3104:	601a      	str	r2, [r3, #0]
    };
    3106:	4a4c      	ldr	r2, [pc, #304]	; (3238 <__static_initialization_and_destruction_0(int, int)+0x290>)
    3108:	4b4c      	ldr	r3, [pc, #304]	; (323c <__static_initialization_and_destruction_0(int, int)+0x294>)
    310a:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi1 = {
    310c:	4b4c      	ldr	r3, [pc, #304]	; (3240 <__static_initialization_and_destruction_0(int, int)+0x298>)
    310e:	681b      	ldr	r3, [r3, #0]
    3110:	f003 0301 	and.w	r3, r3, #1
    3114:	2b00      	cmp	r3, #0
    3116:	d105      	bne.n	3124 <__static_initialization_and_destruction_0(int, int)+0x17c>
    3118:	4b49      	ldr	r3, [pc, #292]	; (3240 <__static_initialization_and_destruction_0(int, int)+0x298>)
    311a:	2201      	movs	r2, #1
    311c:	601a      	str	r2, [r3, #0]
    };
    311e:	4a49      	ldr	r2, [pc, #292]	; (3244 <__static_initialization_and_destruction_0(int, int)+0x29c>)
    3120:	4b49      	ldr	r3, [pc, #292]	; (3248 <__static_initialization_and_destruction_0(int, int)+0x2a0>)
    3122:	601a      	str	r2, [r3, #0]
    inline static const Bus_t kSpi2 = {
    3124:	4b49      	ldr	r3, [pc, #292]	; (324c <__static_initialization_and_destruction_0(int, int)+0x2a4>)
    3126:	681b      	ldr	r3, [r3, #0]
    3128:	f003 0301 	and.w	r3, r3, #1
    312c:	2b00      	cmp	r3, #0
    312e:	d105      	bne.n	313c <__static_initialization_and_destruction_0(int, int)+0x194>
    3130:	4b46      	ldr	r3, [pc, #280]	; (324c <__static_initialization_and_destruction_0(int, int)+0x2a4>)
    3132:	2201      	movs	r2, #1
    3134:	601a      	str	r2, [r3, #0]
    };
    3136:	4a46      	ldr	r2, [pc, #280]	; (3250 <__static_initialization_and_destruction_0(int, int)+0x2a8>)
    3138:	4b46      	ldr	r3, [pc, #280]	; (3254 <__static_initialization_and_destruction_0(int, int)+0x2ac>)
    313a:	601a      	str	r2, [r3, #0]
  inline static sjsu::lpc40xx::Gpio led0 = sjsu::lpc40xx::Gpio(2, 3);
    313c:	4b46      	ldr	r3, [pc, #280]	; (3258 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	f003 0301 	and.w	r3, r3, #1
    3144:	2b00      	cmp	r3, #0
    3146:	d108      	bne.n	315a <__static_initialization_and_destruction_0(int, int)+0x1b2>
    3148:	4b43      	ldr	r3, [pc, #268]	; (3258 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
    314a:	2201      	movs	r2, #1
    314c:	601a      	str	r2, [r3, #0]
    314e:	2300      	movs	r3, #0
    3150:	2203      	movs	r2, #3
    3152:	2102      	movs	r1, #2
    3154:	4841      	ldr	r0, [pc, #260]	; (325c <__static_initialization_and_destruction_0(int, int)+0x2b4>)
    3156:	f7fd fe39 	bl	dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led1 = sjsu::lpc40xx::Gpio(1, 26);
    315a:	4b41      	ldr	r3, [pc, #260]	; (3260 <__static_initialization_and_destruction_0(int, int)+0x2b8>)
    315c:	681b      	ldr	r3, [r3, #0]
    315e:	f003 0301 	and.w	r3, r3, #1
    3162:	2b00      	cmp	r3, #0
    3164:	d108      	bne.n	3178 <__static_initialization_and_destruction_0(int, int)+0x1d0>
    3166:	4b3e      	ldr	r3, [pc, #248]	; (3260 <__static_initialization_and_destruction_0(int, int)+0x2b8>)
    3168:	2201      	movs	r2, #1
    316a:	601a      	str	r2, [r3, #0]
    316c:	2300      	movs	r3, #0
    316e:	221a      	movs	r2, #26
    3170:	2101      	movs	r1, #1
    3172:	483c      	ldr	r0, [pc, #240]	; (3264 <__static_initialization_and_destruction_0(int, int)+0x2bc>)
    3174:	f7fd fe2a 	bl	dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led2 = sjsu::lpc40xx::Gpio(1, 24);
    3178:	4b3b      	ldr	r3, [pc, #236]	; (3268 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	f003 0301 	and.w	r3, r3, #1
    3180:	2b00      	cmp	r3, #0
    3182:	d108      	bne.n	3196 <__static_initialization_and_destruction_0(int, int)+0x1ee>
    3184:	4b38      	ldr	r3, [pc, #224]	; (3268 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    3186:	2201      	movs	r2, #1
    3188:	601a      	str	r2, [r3, #0]
    318a:	2300      	movs	r3, #0
    318c:	2218      	movs	r2, #24
    318e:	2101      	movs	r1, #1
    3190:	4836      	ldr	r0, [pc, #216]	; (326c <__static_initialization_and_destruction_0(int, int)+0x2c4>)
    3192:	f7fd fe1b 	bl	dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
  inline static sjsu::lpc40xx::Gpio led3 = sjsu::lpc40xx::Gpio(1, 18);
    3196:	4b36      	ldr	r3, [pc, #216]	; (3270 <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    3198:	681b      	ldr	r3, [r3, #0]
    319a:	f003 0301 	and.w	r3, r3, #1
    319e:	2b00      	cmp	r3, #0
    31a0:	d108      	bne.n	31b4 <__static_initialization_and_destruction_0(int, int)+0x20c>
    31a2:	4b33      	ldr	r3, [pc, #204]	; (3270 <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    31a4:	2201      	movs	r2, #1
    31a6:	601a      	str	r2, [r3, #0]
    31a8:	2300      	movs	r3, #0
    31aa:	2212      	movs	r2, #18
    31ac:	2101      	movs	r1, #1
    31ae:	4831      	ldr	r0, [pc, #196]	; (3274 <__static_initialization_and_destruction_0(int, int)+0x2cc>)
    31b0:	f7fd fe0c 	bl	dcc <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    31b4:	bf00      	nop
    31b6:	3708      	adds	r7, #8
    31b8:	46bd      	mov	sp, r7
    31ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31be:	bf00      	nop
    31c0:	10001274 	.word	0x10001274
    31c4:	4002c000 	.word	0x4002c000
    31c8:	10000d20 	.word	0x10000d20
    31cc:	10001278 	.word	0x10001278
    31d0:	0000089d 	.word	0x0000089d
    31d4:	10000d30 	.word	0x10000d30
    31d8:	10000000 	.word	0x10000000
    31dc:	000008e5 	.word	0x000008e5
    31e0:	1000127c 	.word	0x1000127c
    31e4:	10000d40 	.word	0x10000d40
    31e8:	10001280 	.word	0x10001280
    31ec:	10000d44 	.word	0x10000d44
    31f0:	10001284 	.word	0x10001284
    31f4:	10000d48 	.word	0x10000d48
    31f8:	10001288 	.word	0x10001288
    31fc:	10000d4c 	.word	0x10000d4c
    3200:	00002f81 	.word	0x00002f81
    3204:	1000128c 	.word	0x1000128c
    3208:	400fc000 	.word	0x400fc000
    320c:	10001194 	.word	0x10001194
    3210:	10001290 	.word	0x10001290
    3214:	4001c000 	.word	0x4001c000
    3218:	10000098 	.word	0x10000098
    321c:	10001294 	.word	0x10001294
    3220:	4005c000 	.word	0x4005c000
    3224:	100000b4 	.word	0x100000b4
    3228:	10001298 	.word	0x10001298
    322c:	400a0000 	.word	0x400a0000
    3230:	100000d0 	.word	0x100000d0
    3234:	1000129c 	.word	0x1000129c
    3238:	40088000 	.word	0x40088000
    323c:	100000ec 	.word	0x100000ec
    3240:	100012a0 	.word	0x100012a0
    3244:	40030000 	.word	0x40030000
    3248:	10000104 	.word	0x10000104
    324c:	100012a4 	.word	0x100012a4
    3250:	400ac000 	.word	0x400ac000
    3254:	1000011c 	.word	0x1000011c
    3258:	100012a8 	.word	0x100012a8
    325c:	10001198 	.word	0x10001198
    3260:	100012ac 	.word	0x100012ac
    3264:	100011b8 	.word	0x100011b8
    3268:	100012b0 	.word	0x100012b0
    326c:	100011d8 	.word	0x100011d8
    3270:	100012b4 	.word	0x100012b4
    3274:	100011f8 	.word	0x100011f8

00003278 <_GLOBAL__sub_I_main>:
    3278:	b580      	push	{r7, lr}
    327a:	af00      	add	r7, sp, #0
    327c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3280:	2001      	movs	r0, #1
    3282:	f7ff fe91 	bl	2fa8 <__static_initialization_and_destruction_0(int, int)>
    3286:	bd80      	pop	{r7, pc}

00003288 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    3288:	b580      	push	{r7, lr}
    328a:	b086      	sub	sp, #24
    328c:	af02      	add	r7, sp, #8
    328e:	6078      	str	r0, [r7, #4]
    3290:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    3292:	683a      	ldr	r2, [r7, #0]
    3294:	f107 030c 	add.w	r3, r7, #12
    3298:	9300      	str	r3, [sp, #0]
    329a:	2300      	movs	r3, #0
    329c:	2100      	movs	r1, #0
    329e:	6878      	ldr	r0, [r7, #4]
    32a0:	f004 f9aa 	bl	75f8 <_Unwind_VRS_Get>
      return val;
    32a4:	68fb      	ldr	r3, [r7, #12]
    }
    32a6:	4618      	mov	r0, r3
    32a8:	3710      	adds	r7, #16
    32aa:	46bd      	mov	sp, r7
    32ac:	bd80      	pop	{r7, pc}
    32ae:	Address 0x00000000000032ae is out of bounds.


000032b0 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    32b0:	b580      	push	{r7, lr}
    32b2:	b084      	sub	sp, #16
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
    32b8:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    32ba:	683b      	ldr	r3, [r7, #0]
    32bc:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    32be:	210f      	movs	r1, #15
    32c0:	6878      	ldr	r0, [r7, #4]
    32c2:	f7ff ffe1 	bl	3288 <_Unwind_GetGR>
    32c6:	4603      	mov	r3, r0
    32c8:	f023 0301 	bic.w	r3, r3, #1
    32cc:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    32ce:	68fb      	ldr	r3, [r7, #12]
    32d0:	6819      	ldr	r1, [r3, #0]
         address - config::kBacktraceAddressOffset);
    32d2:	68bb      	ldr	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    32d4:	3b04      	subs	r3, #4
    32d6:	461a      	mov	r2, r3
    32d8:	4806      	ldr	r0, [pc, #24]	; (32f4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    32da:	f001 fbfd 	bl	4ad8 <printf>
  (*depth)++;
    32de:	68fb      	ldr	r3, [r7, #12]
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	1c5a      	adds	r2, r3, #1
    32e4:	68fb      	ldr	r3, [r7, #12]
    32e6:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    32e8:	2300      	movs	r3, #0
}
    32ea:	4618      	mov	r0, r3
    32ec:	3710      	adds	r7, #16
    32ee:	46bd      	mov	sp, r7
    32f0:	bd80      	pop	{r7, pc}
    32f2:	bf00      	nop
    32f4:	0000878c 	.word	0x0000878c

000032f8 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    32f8:	b580      	push	{r7, lr}
    32fa:	b084      	sub	sp, #16
    32fc:	af00      	add	r7, sp, #0
    32fe:	6078      	str	r0, [r7, #4]
    3300:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    3302:	683b      	ldr	r3, [r7, #0]
    3304:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    3306:	210f      	movs	r1, #15
    3308:	6878      	ldr	r0, [r7, #4]
    330a:	f7ff ffbd 	bl	3288 <_Unwind_GetGR>
    330e:	4603      	mov	r3, r0
    3310:	f023 0301 	bic.w	r3, r3, #1
    3314:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    3316:	68bb      	ldr	r3, [r7, #8]
    3318:	3b04      	subs	r3, #4
    331a:	4619      	mov	r1, r3
    331c:	4806      	ldr	r0, [pc, #24]	; (3338 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    331e:	f001 fbdb 	bl	4ad8 <printf>
  (*depth)++;
    3322:	68fb      	ldr	r3, [r7, #12]
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	1c5a      	adds	r2, r3, #1
    3328:	68fb      	ldr	r3, [r7, #12]
    332a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    332c:	2300      	movs	r3, #0
}
    332e:	4618      	mov	r0, r3
    3330:	3710      	adds	r7, #16
    3332:	46bd      	mov	sp, r7
    3334:	bd80      	pop	{r7, pc}
    3336:	bf00      	nop
    3338:	0000879c 	.word	0x0000879c

0000333c <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    333c:	b580      	push	{r7, lr}
    333e:	b084      	sub	sp, #16
    3340:	af00      	add	r7, sp, #0
    3342:	4603      	mov	r3, r0
    3344:	6039      	str	r1, [r7, #0]
    3346:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    3348:	2300      	movs	r3, #0
    334a:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    334c:	f107 030c 	add.w	r3, r7, #12
    3350:	4619      	mov	r1, r3
    3352:	4817      	ldr	r0, [pc, #92]	; (33b0 <sjsu::debug::PrintBacktrace(bool, void*)+0x74>)
    3354:	f004 fd2e 	bl	7db4 <_Unwind_Backtrace>
    if (final_address)
    3358:	683b      	ldr	r3, [r7, #0]
    335a:	2b00      	cmp	r3, #0
    335c:	d005      	beq.n	336a <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    335e:	68fb      	ldr	r3, [r7, #12]
    3360:	683a      	ldr	r2, [r7, #0]
    3362:	4619      	mov	r1, r3
    3364:	4813      	ldr	r0, [pc, #76]	; (33b4 <sjsu::debug::PrintBacktrace(bool, void*)+0x78>)
    3366:	f001 fbb7 	bl	4ad8 <printf>
    }

    if (show_make_command)
    336a:	79fb      	ldrb	r3, [r7, #7]
    336c:	2b00      	cmp	r3, #0
    336e:	d01b      	beq.n	33a8 <sjsu::debug::PrintBacktrace(bool, void*)+0x6c>
    {
      printf("\nRun: the following command in your project directory");
    3370:	4811      	ldr	r0, [pc, #68]	; (33b8 <sjsu::debug::PrintBacktrace(bool, void*)+0x7c>)
    3372:	f001 fbb1 	bl	4ad8 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    3376:	4811      	ldr	r0, [pc, #68]	; (33bc <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    3378:	f001 fbae 	bl	4ad8 <printf>
      printf("make stacktrace TRACES=\"");
    337c:	4810      	ldr	r0, [pc, #64]	; (33c0 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    337e:	f001 fbab 	bl	4ad8 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    3382:	f107 030c 	add.w	r3, r7, #12
    3386:	4619      	mov	r1, r3
    3388:	480e      	ldr	r0, [pc, #56]	; (33c4 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    338a:	f004 fd13 	bl	7db4 <_Unwind_Backtrace>
      if (final_address)
    338e:	683b      	ldr	r3, [r7, #0]
    3390:	2b00      	cmp	r3, #0
    3392:	d003      	beq.n	339c <sjsu::debug::PrintBacktrace(bool, void*)+0x60>
      {
        printf("0x%p ", final_address);
    3394:	6839      	ldr	r1, [r7, #0]
    3396:	480c      	ldr	r0, [pc, #48]	; (33c8 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    3398:	f001 fb9e 	bl	4ad8 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    339c:	480b      	ldr	r0, [pc, #44]	; (33cc <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    339e:	f001 fb9b 	bl	4ad8 <printf>
      printf(
    33a2:	480b      	ldr	r0, [pc, #44]	; (33d0 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    33a4:	f000 fa3a 	bl	381c <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    33a8:	bf00      	nop
    33aa:	3710      	adds	r7, #16
    33ac:	46bd      	mov	sp, r7
    33ae:	bd80      	pop	{r7, pc}
    33b0:	000032b1 	.word	0x000032b1
    33b4:	000087a4 	.word	0x000087a4
    33b8:	000087b0 	.word	0x000087b0
    33bc:	000087e8 	.word	0x000087e8
    33c0:	000087f4 	.word	0x000087f4
    33c4:	000032f9 	.word	0x000032f9
    33c8:	00008810 	.word	0x00008810
    33cc:	00008818 	.word	0x00008818
    33d0:	00008820 	.word	0x00008820

000033d4 <sjsu::Halt()>:
/// Halt system by putting it into infinite loop
inline void Halt()
{
    33d4:	b480      	push	{r7}
    33d6:	af00      	add	r7, sp, #0
  while (true)
  {
    continue;
    33d8:	bf00      	nop
  while (true)
    33da:	e7fd      	b.n	33d8 <sjsu::Halt()+0x4>

000033dc <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return static_cast<uint8_t>(config::kTaskSchedulerSize + 1);
};
}  // namespace rtos
}  // namespace sjsu
    33dc:	b580      	push	{r7, lr}
    33de:	b082      	sub	sp, #8
    33e0:	af00      	add	r7, sp, #0
    33e2:	6078      	str	r0, [r7, #4]
    33e4:	6039      	str	r1, [r7, #0]
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	2b01      	cmp	r3, #1
    33ea:	d116      	bne.n	341a <__static_initialization_and_destruction_0(int, int)+0x3e>
    33ec:	683b      	ldr	r3, [r7, #0]
    33ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    33f2:	4293      	cmp	r3, r2
    33f4:	d111      	bne.n	341a <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    33f6:	4b0b      	ldr	r3, [pc, #44]	; (3424 <__static_initialization_and_destruction_0(int, int)+0x48>)
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	f003 0301 	and.w	r3, r3, #1
    33fe:	2b00      	cmp	r3, #0
    3400:	d10b      	bne.n	341a <__static_initialization_and_destruction_0(int, int)+0x3e>
    3402:	4b08      	ldr	r3, [pc, #32]	; (3424 <__static_initialization_and_destruction_0(int, int)+0x48>)
    3404:	2201      	movs	r2, #1
    3406:	601a      	str	r2, [r3, #0]
    3408:	4907      	ldr	r1, [pc, #28]	; (3428 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    340a:	4808      	ldr	r0, [pc, #32]	; (342c <__static_initialization_and_destruction_0(int, int)+0x50>)
    340c:	f7fe fe36 	bl	207c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    3410:	4a07      	ldr	r2, [pc, #28]	; (3430 <__static_initialization_and_destruction_0(int, int)+0x54>)
    3412:	4908      	ldr	r1, [pc, #32]	; (3434 <__static_initialization_and_destruction_0(int, int)+0x58>)
    3414:	4805      	ldr	r0, [pc, #20]	; (342c <__static_initialization_and_destruction_0(int, int)+0x50>)
    3416:	f003 fbe7 	bl	6be8 <__aeabi_atexit>
    341a:	bf00      	nop
    341c:	3708      	adds	r7, #8
    341e:	46bd      	mov	sp, r7
    3420:	bd80      	pop	{r7, pc}
    3422:	bf00      	nop
    3424:	10001278 	.word	0x10001278
    3428:	0000089d 	.word	0x0000089d
    342c:	10000d30 	.word	0x10000d30
    3430:	10000000 	.word	0x10000000
    3434:	000008e5 	.word	0x000008e5

00003438 <_GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv>:
    3438:	b580      	push	{r7, lr}
    343a:	af00      	add	r7, sp, #0
    343c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3440:	2001      	movs	r0, #1
    3442:	f7ff ffcb 	bl	33dc <__static_initialization_and_destruction_0(int, int)>
    3446:	bd80      	pop	{r7, pc}

00003448 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    3448:	b480      	push	{r7}
    344a:	b087      	sub	sp, #28
    344c:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    344e:	2300      	movs	r3, #0
    3450:	617b      	str	r3, [r7, #20]
    3452:	697a      	ldr	r2, [r7, #20]
    3454:	4613      	mov	r3, r2
    3456:	005b      	lsls	r3, r3, #1
    3458:	4413      	add	r3, r2
    345a:	009b      	lsls	r3, r3, #2
    345c:	4a1f      	ldr	r2, [pc, #124]	; (34dc <sjsu::InitializeDataSection()+0x94>)
    345e:	4413      	add	r3, r2
    3460:	4a1f      	ldr	r2, [pc, #124]	; (34e0 <sjsu::InitializeDataSection()+0x98>)
    3462:	4293      	cmp	r3, r2
    3464:	d233      	bcs.n	34ce <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    3466:	491d      	ldr	r1, [pc, #116]	; (34dc <sjsu::InitializeDataSection()+0x94>)
    3468:	697a      	ldr	r2, [r7, #20]
    346a:	4613      	mov	r3, r2
    346c:	005b      	lsls	r3, r3, #1
    346e:	4413      	add	r3, r2
    3470:	009b      	lsls	r3, r3, #2
    3472:	440b      	add	r3, r1
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    3478:	4918      	ldr	r1, [pc, #96]	; (34dc <sjsu::InitializeDataSection()+0x94>)
    347a:	697a      	ldr	r2, [r7, #20]
    347c:	4613      	mov	r3, r2
    347e:	005b      	lsls	r3, r3, #1
    3480:	4413      	add	r3, r2
    3482:	009b      	lsls	r3, r3, #2
    3484:	440b      	add	r3, r1
    3486:	685b      	ldr	r3, [r3, #4]
    3488:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    348a:	4914      	ldr	r1, [pc, #80]	; (34dc <sjsu::InitializeDataSection()+0x94>)
    348c:	697a      	ldr	r2, [r7, #20]
    348e:	4613      	mov	r3, r2
    3490:	005b      	lsls	r3, r3, #1
    3492:	4413      	add	r3, r2
    3494:	009b      	lsls	r3, r3, #2
    3496:	440b      	add	r3, r1
    3498:	3308      	adds	r3, #8
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    349e:	2300      	movs	r3, #0
    34a0:	613b      	str	r3, [r7, #16]
    34a2:	693a      	ldr	r2, [r7, #16]
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	429a      	cmp	r2, r3
    34a8:	d20d      	bcs.n	34c6 <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    34aa:	693b      	ldr	r3, [r7, #16]
    34ac:	009b      	lsls	r3, r3, #2
    34ae:	68fa      	ldr	r2, [r7, #12]
    34b0:	441a      	add	r2, r3
    34b2:	693b      	ldr	r3, [r7, #16]
    34b4:	009b      	lsls	r3, r3, #2
    34b6:	68b9      	ldr	r1, [r7, #8]
    34b8:	440b      	add	r3, r1
    34ba:	6812      	ldr	r2, [r2, #0]
    34bc:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    34be:	693b      	ldr	r3, [r7, #16]
    34c0:	3301      	adds	r3, #1
    34c2:	613b      	str	r3, [r7, #16]
    34c4:	e7ed      	b.n	34a2 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    34c6:	697b      	ldr	r3, [r7, #20]
    34c8:	3301      	adds	r3, #1
    34ca:	617b      	str	r3, [r7, #20]
    34cc:	e7c1      	b.n	3452 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    34ce:	bf00      	nop
    34d0:	371c      	adds	r7, #28
    34d2:	46bd      	mov	sp, r7
    34d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    34d8:	4770      	bx	lr
    34da:	bf00      	nop
    34dc:	000000e4 	.word	0x000000e4
    34e0:	000000fc 	.word	0x000000fc

000034e4 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    34e4:	b480      	push	{r7}
    34e6:	b085      	sub	sp, #20
    34e8:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    34ea:	2300      	movs	r3, #0
    34ec:	60fb      	str	r3, [r7, #12]
    34ee:	68fb      	ldr	r3, [r7, #12]
    34f0:	00db      	lsls	r3, r3, #3
    34f2:	4a15      	ldr	r2, [pc, #84]	; (3548 <sjsu::InitializeBssSection()+0x64>)
    34f4:	4413      	add	r3, r2
    34f6:	4a15      	ldr	r2, [pc, #84]	; (354c <sjsu::InitializeBssSection()+0x68>)
    34f8:	4293      	cmp	r3, r2
    34fa:	d21e      	bcs.n	353a <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    34fc:	4a12      	ldr	r2, [pc, #72]	; (3548 <sjsu::InitializeBssSection()+0x64>)
    34fe:	68fb      	ldr	r3, [r7, #12]
    3500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3504:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    3506:	4a10      	ldr	r2, [pc, #64]	; (3548 <sjsu::InitializeBssSection()+0x64>)
    3508:	68fb      	ldr	r3, [r7, #12]
    350a:	00db      	lsls	r3, r3, #3
    350c:	4413      	add	r3, r2
    350e:	685b      	ldr	r3, [r3, #4]
    3510:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    3512:	2300      	movs	r3, #0
    3514:	60bb      	str	r3, [r7, #8]
    3516:	68ba      	ldr	r2, [r7, #8]
    3518:	683b      	ldr	r3, [r7, #0]
    351a:	429a      	cmp	r2, r3
    351c:	d209      	bcs.n	3532 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    351e:	68bb      	ldr	r3, [r7, #8]
    3520:	009b      	lsls	r3, r3, #2
    3522:	687a      	ldr	r2, [r7, #4]
    3524:	4413      	add	r3, r2
    3526:	2200      	movs	r2, #0
    3528:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    352a:	68bb      	ldr	r3, [r7, #8]
    352c:	3301      	adds	r3, #1
    352e:	60bb      	str	r3, [r7, #8]
    3530:	e7f1      	b.n	3516 <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    3532:	68fb      	ldr	r3, [r7, #12]
    3534:	3301      	adds	r3, #1
    3536:	60fb      	str	r3, [r7, #12]
    3538:	e7d9      	b.n	34ee <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    353a:	bf00      	nop
    353c:	3714      	adds	r7, #20
    353e:	46bd      	mov	sp, r7
    3540:	f85d 7b04 	ldr.w	r7, [sp], #4
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	000000fc 	.word	0x000000fc
    354c:	0000010c 	.word	0x0000010c

00003550 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    3550:	b580      	push	{r7, lr}
    3552:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    3554:	f7ff ff78 	bl	3448 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    3558:	f7ff ffc4 	bl	34e4 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    355c:	f004 fdf4 	bl	8148 <__libc_init_array>
}
    3560:	bf00      	nop
    3562:	bd80      	pop	{r7, pc}

00003564 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    3564:	b580      	push	{r7, lr}
    3566:	b08c      	sub	sp, #48	; 0x30
    3568:	af02      	add	r7, sp, #8
    356a:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	681b      	ldr	r3, [r3, #0]
    3570:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	685b      	ldr	r3, [r3, #4]
    3576:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	689b      	ldr	r3, [r3, #8]
    357c:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    357e:	687b      	ldr	r3, [r7, #4]
    3580:	68db      	ldr	r3, [r3, #12]
    3582:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	691b      	ldr	r3, [r3, #16]
    3588:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	695b      	ldr	r3, [r3, #20]
    358e:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	699b      	ldr	r3, [r3, #24]
    3594:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	69db      	ldr	r3, [r3, #28]
    359a:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    359c:	480f      	ldr	r0, [pc, #60]	; (35dc <GetRegistersFromStack+0x78>)
    359e:	f001 fa9b 	bl	4ad8 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    35a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    35a4:	6a3a      	ldr	r2, [r7, #32]
    35a6:	69f8      	ldr	r0, [r7, #28]
    35a8:	69bb      	ldr	r3, [r7, #24]
    35aa:	9300      	str	r3, [sp, #0]
    35ac:	4603      	mov	r3, r0
    35ae:	480c      	ldr	r0, [pc, #48]	; (35e0 <GetRegistersFromStack+0x7c>)
    35b0:	f001 fa92 	bl	4ad8 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    35b4:	6979      	ldr	r1, [r7, #20]
    35b6:	693a      	ldr	r2, [r7, #16]
    35b8:	68f8      	ldr	r0, [r7, #12]
    35ba:	68bb      	ldr	r3, [r7, #8]
    35bc:	9300      	str	r3, [sp, #0]
    35be:	4603      	mov	r3, r0
    35c0:	4808      	ldr	r0, [pc, #32]	; (35e4 <GetRegistersFromStack+0x80>)
    35c2:	f001 fa89 	bl	4ad8 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	4619      	mov	r1, r3
    35ca:	2001      	movs	r0, #1
    35cc:	f7ff feb6 	bl	333c <sjsu::debug::PrintBacktrace(bool, void*)>
    // When the following line is hit, the variables contain the register values
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
    35d0:	f7ff ff00 	bl	33d4 <sjsu::Halt()>
  }
    35d4:	bf00      	nop
    35d6:	3728      	adds	r7, #40	; 0x28
    35d8:	46bd      	mov	sp, r7
    35da:	bd80      	pop	{r7, pc}
    35dc:	00008f30 	.word	0x00008f30
    35e0:	00008f5c 	.word	0x00008f5c
    35e4:	00008f90 	.word	0x00008f90

000035e8 <ArmHardFaultHandler>:

  void ArmHardFaultHandler(void)
  {
    35e8:	b480      	push	{r7}
    35ea:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    35ec:	f01e 0f04 	tst.w	lr, #4
    35f0:	bf0c      	ite	eq
    35f2:	f3ef 8008 	mrseq	r0, MSP
    35f6:	f3ef 8009 	mrsne	r0, PSP
    35fa:	6981      	ldr	r1, [r0, #24]
    35fc:	4a00      	ldr	r2, [pc, #0]	; (3600 <handler2_address_const>)
    35fe:	4710      	bx	r2

00003600 <handler2_address_const>:
    3600:	00003565 	.word	0x00003565
    }
  }
    3604:	bf00      	nop
    3606:	46bd      	mov	sp, r7
    3608:	f85d 7b04 	ldr.w	r7, [sp], #4
    360c:	4770      	bx	lr
    360e:	Address 0x000000000000360e is out of bounds.


00003610 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    3610:	b580      	push	{r7, lr}
    3612:	b084      	sub	sp, #16
    3614:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    3616:	4b1a      	ldr	r3, [pc, #104]	; (3680 <ArmResetHandler+0x70>)
    3618:	60fb      	str	r3, [r7, #12]
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    361e:	683b      	ldr	r3, [r7, #0]
    3620:	f383 8809 	msr	PSP, r3
}
    3624:	bf00      	nop
    3626:	68fb      	ldr	r3, [r7, #12]
    3628:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	f383 8808 	msr	MSP, r3
}
    3630:	bf00      	nop
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    3632:	f7ff ff8d 	bl	3550 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    3636:	4b13      	ldr	r3, [pc, #76]	; (3684 <ArmResetHandler+0x74>)
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	f003 0301 	and.w	r3, r3, #1
    363e:	2b00      	cmp	r3, #0
    3640:	bf14      	ite	ne
    3642:	2301      	movne	r3, #1
    3644:	2300      	moveq	r3, #0
    3646:	b2db      	uxtb	r3, r3
    3648:	2b00      	cmp	r3, #0
    364a:	d001      	beq.n	3650 <ArmResetHandler+0x40>
      {
          trace_initialize();  // Enable debug tracing
    364c:	f001 fa7c 	bl	4b48 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    3650:	f002 fd24 	bl	609c <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    3654:	f7fe fc14 	bl	1e80 <main>
    3658:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    365a:	68bb      	ldr	r3, [r7, #8]
    365c:	2b00      	cmp	r3, #0
    365e:	db04      	blt.n	366a <ArmResetHandler+0x5a>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    3660:	68b9      	ldr	r1, [r7, #8]
    3662:	4809      	ldr	r0, [pc, #36]	; (3688 <ArmResetHandler+0x78>)
    3664:	f001 fa38 	bl	4ad8 <printf>
    3668:	e003      	b.n	3672 <ArmResetHandler+0x62>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    366a:	68b9      	ldr	r1, [r7, #8]
    366c:	4807      	ldr	r0, [pc, #28]	; (368c <ArmResetHandler+0x7c>)
    366e:	f001 fa33 	bl	4ad8 <printf>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    sjsu::Halt();
    3672:	f7ff feaf 	bl	33d4 <sjsu::Halt()>
  }
    3676:	bf00      	nop
    3678:	3710      	adds	r7, #16
    367a:	46bd      	mov	sp, r7
    367c:	bd80      	pop	{r7, pc}
    367e:	bf00      	nop
    3680:	10010000 	.word	0x10010000
    3684:	e000edf0 	.word	0xe000edf0
    3688:	00008fc8 	.word	0x00008fc8
    368c:	00008ffc 	.word	0x00008ffc

00003690 <__static_initialization_and_destruction_0(int, int)>:

}  // extern "C"
    3690:	b580      	push	{r7, lr}
    3692:	b082      	sub	sp, #8
    3694:	af00      	add	r7, sp, #0
    3696:	6078      	str	r0, [r7, #4]
    3698:	6039      	str	r1, [r7, #0]
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	2b01      	cmp	r3, #1
    369e:	d116      	bne.n	36ce <__static_initialization_and_destruction_0(int, int)+0x3e>
    36a0:	683b      	ldr	r3, [r7, #0]
    36a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    36a6:	4293      	cmp	r3, r2
    36a8:	d111      	bne.n	36ce <__static_initialization_and_destruction_0(int, int)+0x3e>
    36aa:	4b0b      	ldr	r3, [pc, #44]	; (36d8 <__static_initialization_and_destruction_0(int, int)+0x48>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	f003 0301 	and.w	r3, r3, #1
    36b2:	2b00      	cmp	r3, #0
    36b4:	d10b      	bne.n	36ce <__static_initialization_and_destruction_0(int, int)+0x3e>
    36b6:	4b08      	ldr	r3, [pc, #32]	; (36d8 <__static_initialization_and_destruction_0(int, int)+0x48>)
    36b8:	2201      	movs	r2, #1
    36ba:	601a      	str	r2, [r3, #0]
    36bc:	4907      	ldr	r1, [pc, #28]	; (36dc <__static_initialization_and_destruction_0(int, int)+0x4c>)
    36be:	4808      	ldr	r0, [pc, #32]	; (36e0 <__static_initialization_and_destruction_0(int, int)+0x50>)
    36c0:	f7fe fcdc 	bl	207c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    36c4:	4a07      	ldr	r2, [pc, #28]	; (36e4 <__static_initialization_and_destruction_0(int, int)+0x54>)
    36c6:	4908      	ldr	r1, [pc, #32]	; (36e8 <__static_initialization_and_destruction_0(int, int)+0x58>)
    36c8:	4805      	ldr	r0, [pc, #20]	; (36e0 <__static_initialization_and_destruction_0(int, int)+0x50>)
    36ca:	f003 fa8d 	bl	6be8 <__aeabi_atexit>
    36ce:	bf00      	nop
    36d0:	3708      	adds	r7, #8
    36d2:	46bd      	mov	sp, r7
    36d4:	bd80      	pop	{r7, pc}
    36d6:	bf00      	nop
    36d8:	10001278 	.word	0x10001278
    36dc:	0000089d 	.word	0x0000089d
    36e0:	10000d30 	.word	0x10000d30
    36e4:	10000000 	.word	0x10000000
    36e8:	000008e5 	.word	0x000008e5

000036ec <_GLOBAL__sub_I_GetRegistersFromStack>:
    36ec:	b580      	push	{r7, lr}
    36ee:	af00      	add	r7, sp, #0
    36f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    36f4:	2001      	movs	r0, #1
    36f6:	f7ff ffcb 	bl	3690 <__static_initialization_and_destruction_0(int, int)>
    36fa:	bd80      	pop	{r7, pc}

000036fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    36fc:	b580      	push	{r7, lr}
    36fe:	b084      	sub	sp, #16
    3700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3702:	4b28      	ldr	r3, [pc, #160]	; (37a4 <vTaskSwitchContext+0xa8>)
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	2b00      	cmp	r3, #0
    3708:	d003      	beq.n	3712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    370a:	4b27      	ldr	r3, [pc, #156]	; (37a8 <vTaskSwitchContext+0xac>)
    370c:	2201      	movs	r2, #1
    370e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3710:	e043      	b.n	379a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    3712:	4b25      	ldr	r3, [pc, #148]	; (37a8 <vTaskSwitchContext+0xac>)
    3714:	2200      	movs	r2, #0
    3716:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    3718:	f002 fcb6 	bl	6088 <ThreadRuntimeCounter>
    371c:	4603      	mov	r3, r0
    371e:	4a23      	ldr	r2, [pc, #140]	; (37ac <vTaskSwitchContext+0xb0>)
    3720:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    3722:	4b22      	ldr	r3, [pc, #136]	; (37ac <vTaskSwitchContext+0xb0>)
    3724:	681a      	ldr	r2, [r3, #0]
    3726:	4b22      	ldr	r3, [pc, #136]	; (37b0 <vTaskSwitchContext+0xb4>)
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	429a      	cmp	r2, r3
    372c:	d909      	bls.n	3742 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    372e:	4b21      	ldr	r3, [pc, #132]	; (37b4 <vTaskSwitchContext+0xb8>)
    3730:	681b      	ldr	r3, [r3, #0]
    3732:	6d59      	ldr	r1, [r3, #84]	; 0x54
    3734:	4a1d      	ldr	r2, [pc, #116]	; (37ac <vTaskSwitchContext+0xb0>)
    3736:	6810      	ldr	r0, [r2, #0]
    3738:	4a1d      	ldr	r2, [pc, #116]	; (37b0 <vTaskSwitchContext+0xb4>)
    373a:	6812      	ldr	r2, [r2, #0]
    373c:	1a82      	subs	r2, r0, r2
    373e:	440a      	add	r2, r1
    3740:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    3742:	4b1a      	ldr	r3, [pc, #104]	; (37ac <vTaskSwitchContext+0xb0>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	4a1a      	ldr	r2, [pc, #104]	; (37b0 <vTaskSwitchContext+0xb4>)
    3748:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    374a:	4b1b      	ldr	r3, [pc, #108]	; (37b8 <vTaskSwitchContext+0xbc>)
    374c:	681b      	ldr	r3, [r3, #0]
    374e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	fab3 f383 	clz	r3, r3
    3756:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    3758:	78fb      	ldrb	r3, [r7, #3]
    375a:	f1c3 031f 	rsb	r3, r3, #31
    375e:	60fb      	str	r3, [r7, #12]
    3760:	68fa      	ldr	r2, [r7, #12]
    3762:	4613      	mov	r3, r2
    3764:	009b      	lsls	r3, r3, #2
    3766:	4413      	add	r3, r2
    3768:	009b      	lsls	r3, r3, #2
    376a:	4a14      	ldr	r2, [pc, #80]	; (37bc <vTaskSwitchContext+0xc0>)
    376c:	4413      	add	r3, r2
    376e:	60bb      	str	r3, [r7, #8]
    3770:	68bb      	ldr	r3, [r7, #8]
    3772:	685b      	ldr	r3, [r3, #4]
    3774:	685a      	ldr	r2, [r3, #4]
    3776:	68bb      	ldr	r3, [r7, #8]
    3778:	605a      	str	r2, [r3, #4]
    377a:	68bb      	ldr	r3, [r7, #8]
    377c:	685a      	ldr	r2, [r3, #4]
    377e:	68bb      	ldr	r3, [r7, #8]
    3780:	3308      	adds	r3, #8
    3782:	429a      	cmp	r2, r3
    3784:	d104      	bne.n	3790 <vTaskSwitchContext+0x94>
    3786:	68bb      	ldr	r3, [r7, #8]
    3788:	685b      	ldr	r3, [r3, #4]
    378a:	685a      	ldr	r2, [r3, #4]
    378c:	68bb      	ldr	r3, [r7, #8]
    378e:	605a      	str	r2, [r3, #4]
    3790:	68bb      	ldr	r3, [r7, #8]
    3792:	685b      	ldr	r3, [r3, #4]
    3794:	68db      	ldr	r3, [r3, #12]
    3796:	4a07      	ldr	r2, [pc, #28]	; (37b4 <vTaskSwitchContext+0xb8>)
    3798:	6013      	str	r3, [r2, #0]
}
    379a:	bf00      	nop
    379c:	3710      	adds	r7, #16
    379e:	46bd      	mov	sp, r7
    37a0:	bd80      	pop	{r7, pc}
    37a2:	bf00      	nop
    37a4:	10001328 	.word	0x10001328
    37a8:	10001324 	.word	0x10001324
    37ac:	10001330 	.word	0x10001330
    37b0:	1000132c 	.word	0x1000132c
    37b4:	100012b8 	.word	0x100012b8
    37b8:	10001320 	.word	0x10001320
    37bc:	100012bc 	.word	0x100012bc

000037c0 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    37c0:	b480      	push	{r7}
    37c2:	af00      	add	r7, sp, #0
    return 1;
    37c4:	2301      	movs	r3, #1
  }
    37c6:	4618      	mov	r0, r3
    37c8:	46bd      	mov	sp, r7
    37ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    37ce:	4770      	bx	lr

000037d0 <_kill>:

  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    37d0:	b480      	push	{r7}
    37d2:	b083      	sub	sp, #12
    37d4:	af00      	add	r7, sp, #0
    37d6:	6078      	str	r0, [r7, #4]
    37d8:	6039      	str	r1, [r7, #0]
    return -1;
    37da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    37de:	4618      	mov	r0, r3
    37e0:	370c      	adds	r7, #12
    37e2:	46bd      	mov	sp, r7
    37e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e8:	4770      	bx	lr
    37ea:	Address 0x00000000000037ea is out of bounds.


000037ec <_write>:
    return previous_heap_position;
  }

  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    37ec:	b580      	push	{r7, lr}
    37ee:	b084      	sub	sp, #16
    37f0:	af00      	add	r7, sp, #0
    37f2:	60f8      	str	r0, [r7, #12]
    37f4:	60b9      	str	r1, [r7, #8]
    37f6:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	4619      	mov	r1, r3
    37fc:	68b8      	ldr	r0, [r7, #8]
    37fe:	f001 f9aa 	bl	4b56 <trace_write>
    return sjsu::newlib::out(ptr, length);
    3802:	4b05      	ldr	r3, [pc, #20]	; (3818 <_write+0x2c>)
    3804:	681b      	ldr	r3, [r3, #0]
    3806:	687a      	ldr	r2, [r7, #4]
    3808:	4611      	mov	r1, r2
    380a:	68b8      	ldr	r0, [r7, #8]
    380c:	4798      	blx	r3
    380e:	4603      	mov	r3, r0
  }
    3810:	4618      	mov	r0, r3
    3812:	3710      	adds	r7, #16
    3814:	46bd      	mov	sp, r7
    3816:	bd80      	pop	{r7, pc}
    3818:	10000c10 	.word	0x10000c10

0000381c <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    381c:	b580      	push	{r7, lr}
    381e:	b084      	sub	sp, #16
    3820:	af00      	add	r7, sp, #0
    3822:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    3824:	6878      	ldr	r0, [r7, #4]
    3826:	f004 fd0d 	bl	8244 <strlen>
    382a:	4603      	mov	r3, r0
    382c:	60fb      	str	r3, [r7, #12]
    int result        = 0;
    382e:	2300      	movs	r3, #0
    3830:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    3832:	68fa      	ldr	r2, [r7, #12]
    3834:	6879      	ldr	r1, [r7, #4]
    3836:	2000      	movs	r0, #0
    3838:	f7ff ffd8 	bl	37ec <_write>
    383c:	4602      	mov	r2, r0
    383e:	68bb      	ldr	r3, [r7, #8]
    3840:	4413      	add	r3, r2
    3842:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    3844:	2201      	movs	r2, #1
    3846:	4906      	ldr	r1, [pc, #24]	; (3860 <puts+0x44>)
    3848:	2000      	movs	r0, #0
    384a:	f7ff ffcf 	bl	37ec <_write>
    384e:	4602      	mov	r2, r0
    3850:	68bb      	ldr	r3, [r7, #8]
    3852:	4413      	add	r3, r2
    3854:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    3856:	68bb      	ldr	r3, [r7, #8]
  }
    3858:	4618      	mov	r0, r3
    385a:	3710      	adds	r7, #16
    385c:	46bd      	mov	sp, r7
    385e:	bd80      	pop	{r7, pc}
    3860:	00009030 	.word	0x00009030

00003864 <_exit>:

  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    3864:	b480      	push	{r7}
    3866:	b083      	sub	sp, #12
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    386c:	bf00      	nop
    while (1)
    386e:	e7fd      	b.n	386c <_exit+0x8>

00003870 <_out_buffer(char, void*, unsigned int, unsigned int)>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    3870:	b480      	push	{r7}
    3872:	b085      	sub	sp, #20
    3874:	af00      	add	r7, sp, #0
    3876:	60b9      	str	r1, [r7, #8]
    3878:	607a      	str	r2, [r7, #4]
    387a:	603b      	str	r3, [r7, #0]
    387c:	4603      	mov	r3, r0
    387e:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
    3880:	687a      	ldr	r2, [r7, #4]
    3882:	683b      	ldr	r3, [r7, #0]
    3884:	429a      	cmp	r2, r3
    3886:	d204      	bcs.n	3892 <_out_buffer(char, void*, unsigned int, unsigned int)+0x22>
    ((char*)buffer)[idx] = character;
    3888:	68ba      	ldr	r2, [r7, #8]
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	4413      	add	r3, r2
    388e:	7bfa      	ldrb	r2, [r7, #15]
    3890:	701a      	strb	r2, [r3, #0]
  }
}
    3892:	bf00      	nop
    3894:	3714      	adds	r7, #20
    3896:	46bd      	mov	sp, r7
    3898:	f85d 7b04 	ldr.w	r7, [sp], #4
    389c:	4770      	bx	lr

0000389e <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    389e:	b580      	push	{r7, lr}
    38a0:	b088      	sub	sp, #32
    38a2:	af00      	add	r7, sp, #0
    38a4:	60b9      	str	r1, [r7, #8]
    38a6:	607a      	str	r2, [r7, #4]
    38a8:	603b      	str	r3, [r7, #0]
    38aa:	4603      	mov	r3, r0
    38ac:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    38ae:	23fe      	movs	r3, #254	; 0xfe
    38b0:	61fb      	str	r3, [r7, #28]
  size_t proper_index = idx % (string_limit);
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	69fa      	ldr	r2, [r7, #28]
    38b6:	fbb3 f2f2 	udiv	r2, r3, r2
    38ba:	69f9      	ldr	r1, [r7, #28]
    38bc:	fb01 f202 	mul.w	r2, r1, r2
    38c0:	1a9b      	subs	r3, r3, r2
    38c2:	61bb      	str	r3, [r7, #24]
  ((char*)buffer)[proper_index] = character;
    38c4:	68ba      	ldr	r2, [r7, #8]
    38c6:	69bb      	ldr	r3, [r7, #24]
    38c8:	4413      	add	r3, r2
    38ca:	7bfa      	ldrb	r2, [r7, #15]
    38cc:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    38ce:	7bfb      	ldrb	r3, [r7, #15]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d106      	bne.n	38e2 <_out_chunk(char, void*, unsigned int, unsigned int)+0x44>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    38d4:	69bb      	ldr	r3, [r7, #24]
    38d6:	461a      	mov	r2, r3
    38d8:	68b9      	ldr	r1, [r7, #8]
    38da:	2001      	movs	r0, #1
    38dc:	f7ff ff86 	bl	37ec <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    38e0:	e012      	b.n	3908 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
  } else if (proper_index + 1 == string_limit) {
    38e2:	69bb      	ldr	r3, [r7, #24]
    38e4:	3301      	adds	r3, #1
    38e6:	69fa      	ldr	r2, [r7, #28]
    38e8:	429a      	cmp	r2, r3
    38ea:	d10d      	bne.n	3908 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
    size_t last_character = string_limit + 1;
    38ec:	69fb      	ldr	r3, [r7, #28]
    38ee:	3301      	adds	r3, #1
    38f0:	617b      	str	r3, [r7, #20]
    ((char*)buffer)[last_character] = '\0';
    38f2:	68ba      	ldr	r2, [r7, #8]
    38f4:	697b      	ldr	r3, [r7, #20]
    38f6:	4413      	add	r3, r2
    38f8:	2200      	movs	r2, #0
    38fa:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    38fc:	697b      	ldr	r3, [r7, #20]
    38fe:	461a      	mov	r2, r3
    3900:	68b9      	ldr	r1, [r7, #8]
    3902:	2001      	movs	r0, #1
    3904:	f7ff ff72 	bl	37ec <_write>
}
    3908:	bf00      	nop
    390a:	3720      	adds	r7, #32
    390c:	46bd      	mov	sp, r7
    390e:	bd80      	pop	{r7, pc}

00003910 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	60b9      	str	r1, [r7, #8]
    3918:	607a      	str	r2, [r7, #4]
    391a:	603b      	str	r3, [r7, #0]
    391c:	4603      	mov	r3, r0
    391e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3920:	bf00      	nop
    3922:	3714      	adds	r7, #20
    3924:	46bd      	mov	sp, r7
    3926:	f85d 7b04 	ldr.w	r7, [sp], #4
    392a:	4770      	bx	lr

0000392c <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    392c:	b480      	push	{r7}
    392e:	b085      	sub	sp, #20
    3930:	af00      	add	r7, sp, #0
    3932:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	60fb      	str	r3, [r7, #12]
    3938:	68fb      	ldr	r3, [r7, #12]
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	2b00      	cmp	r3, #0
    393e:	d003      	beq.n	3948 <_strlen(char const*)+0x1c>
    3940:	68fb      	ldr	r3, [r7, #12]
    3942:	3301      	adds	r3, #1
    3944:	60fb      	str	r3, [r7, #12]
    3946:	e7f7      	b.n	3938 <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    3948:	68fa      	ldr	r2, [r7, #12]
    394a:	687b      	ldr	r3, [r7, #4]
    394c:	1ad3      	subs	r3, r2, r3
}
    394e:	4618      	mov	r0, r3
    3950:	3714      	adds	r7, #20
    3952:	46bd      	mov	sp, r7
    3954:	f85d 7b04 	ldr.w	r7, [sp], #4
    3958:	4770      	bx	lr

0000395a <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    395a:	b480      	push	{r7}
    395c:	b083      	sub	sp, #12
    395e:	af00      	add	r7, sp, #0
    3960:	4603      	mov	r3, r0
    3962:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    3964:	79fb      	ldrb	r3, [r7, #7]
    3966:	2b2f      	cmp	r3, #47	; 0x2f
    3968:	d904      	bls.n	3974 <_is_digit(char)+0x1a>
    396a:	79fb      	ldrb	r3, [r7, #7]
    396c:	2b39      	cmp	r3, #57	; 0x39
    396e:	d801      	bhi.n	3974 <_is_digit(char)+0x1a>
    3970:	2301      	movs	r3, #1
    3972:	e000      	b.n	3976 <_is_digit(char)+0x1c>
    3974:	2300      	movs	r3, #0
}
    3976:	4618      	mov	r0, r3
    3978:	370c      	adds	r7, #12
    397a:	46bd      	mov	sp, r7
    397c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3980:	4770      	bx	lr

00003982 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    3982:	b580      	push	{r7, lr}
    3984:	b084      	sub	sp, #16
    3986:	af00      	add	r7, sp, #0
    3988:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    398a:	2300      	movs	r3, #0
    398c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	4618      	mov	r0, r3
    3996:	f7ff ffe0 	bl	395a <_is_digit(char)>
    399a:	4603      	mov	r3, r0
    399c:	2b00      	cmp	r3, #0
    399e:	d00f      	beq.n	39c0 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    39a0:	68fa      	ldr	r2, [r7, #12]
    39a2:	4613      	mov	r3, r2
    39a4:	009b      	lsls	r3, r3, #2
    39a6:	4413      	add	r3, r2
    39a8:	005b      	lsls	r3, r3, #1
    39aa:	4618      	mov	r0, r3
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	681b      	ldr	r3, [r3, #0]
    39b0:	1c59      	adds	r1, r3, #1
    39b2:	687a      	ldr	r2, [r7, #4]
    39b4:	6011      	str	r1, [r2, #0]
    39b6:	781b      	ldrb	r3, [r3, #0]
    39b8:	4403      	add	r3, r0
    39ba:	3b30      	subs	r3, #48	; 0x30
    39bc:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    39be:	e7e6      	b.n	398e <_atoi(char const**)+0xc>
  }
  return i;
    39c0:	68fb      	ldr	r3, [r7, #12]
}
    39c2:	4618      	mov	r0, r3
    39c4:	3710      	adds	r7, #16
    39c6:	46bd      	mov	sp, r7
    39c8:	bd80      	pop	{r7, pc}

000039ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    39ca:	b590      	push	{r4, r7, lr}
    39cc:	b089      	sub	sp, #36	; 0x24
    39ce:	af00      	add	r7, sp, #0
    39d0:	60f8      	str	r0, [r7, #12]
    39d2:	60b9      	str	r1, [r7, #8]
    39d4:	607a      	str	r2, [r7, #4]
    39d6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    39dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    39de:	f003 0302 	and.w	r3, r3, #2
    39e2:	2b00      	cmp	r3, #0
    39e4:	d10e      	bne.n	3a04 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    39e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    39e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    39ea:	429a      	cmp	r2, r3
    39ec:	d20a      	bcs.n	3a04 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    39ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39f0:	2b1f      	cmp	r3, #31
    39f2:	d807      	bhi.n	3a04 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    39f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39f6:	1c5a      	adds	r2, r3, #1
    39f8:	637a      	str	r2, [r7, #52]	; 0x34
    39fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39fc:	4413      	add	r3, r2
    39fe:	2230      	movs	r2, #48	; 0x30
    3a00:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a02:	e7eb      	b.n	39dc <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a06:	f003 0302 	and.w	r3, r3, #2
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d113      	bne.n	3a36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a10:	f003 0301 	and.w	r3, r3, #1
    3a14:	2b00      	cmp	r3, #0
    3a16:	d00e      	beq.n	3a36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3a1c:	429a      	cmp	r2, r3
    3a1e:	d20a      	bcs.n	3a36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a22:	2b1f      	cmp	r3, #31
    3a24:	d807      	bhi.n	3a36 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    3a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a28:	1c5a      	adds	r2, r3, #1
    3a2a:	637a      	str	r2, [r7, #52]	; 0x34
    3a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a2e:	4413      	add	r3, r2
    3a30:	2230      	movs	r2, #48	; 0x30
    3a32:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a34:	e7e6      	b.n	3a04 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a38:	f003 0310 	and.w	r3, r3, #16
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d058      	beq.n	3af2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3a46:	2b00      	cmp	r3, #0
    3a48:	d116      	bne.n	3a78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d013      	beq.n	3a78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a54:	429a      	cmp	r2, r3
    3a56:	d003      	beq.n	3a60 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    3a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3a5c:	429a      	cmp	r2, r3
    3a5e:	d10b      	bne.n	3a78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    3a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a62:	3b01      	subs	r3, #1
    3a64:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    3a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d005      	beq.n	3a78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    3a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a6e:	2b10      	cmp	r3, #16
    3a70:	d102      	bne.n	3a78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    3a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a74:	3b01      	subs	r3, #1
    3a76:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a7a:	2b10      	cmp	r3, #16
    3a7c:	d10f      	bne.n	3a9e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    3a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a80:	f003 0320 	and.w	r3, r3, #32
    3a84:	2b00      	cmp	r3, #0
    3a86:	d10a      	bne.n	3a9e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    3a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a8a:	2b1f      	cmp	r3, #31
    3a8c:	d807      	bhi.n	3a9e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    3a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a90:	1c5a      	adds	r2, r3, #1
    3a92:	637a      	str	r2, [r7, #52]	; 0x34
    3a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a96:	4413      	add	r3, r2
    3a98:	2278      	movs	r2, #120	; 0x78
    3a9a:	701a      	strb	r2, [r3, #0]
    3a9c:	e01f      	b.n	3ade <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3aa0:	2b10      	cmp	r3, #16
    3aa2:	d10f      	bne.n	3ac4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    3aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3aa6:	f003 0320 	and.w	r3, r3, #32
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d00a      	beq.n	3ac4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    3aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ab0:	2b1f      	cmp	r3, #31
    3ab2:	d807      	bhi.n	3ac4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    3ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ab6:	1c5a      	adds	r2, r3, #1
    3ab8:	637a      	str	r2, [r7, #52]	; 0x34
    3aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3abc:	4413      	add	r3, r2
    3abe:	2258      	movs	r2, #88	; 0x58
    3ac0:	701a      	strb	r2, [r3, #0]
    3ac2:	e00c      	b.n	3ade <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ac6:	2b02      	cmp	r3, #2
    3ac8:	d109      	bne.n	3ade <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    3aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3acc:	2b1f      	cmp	r3, #31
    3ace:	d806      	bhi.n	3ade <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    3ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ad2:	1c5a      	adds	r2, r3, #1
    3ad4:	637a      	str	r2, [r7, #52]	; 0x34
    3ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3ad8:	4413      	add	r3, r2
    3ada:	2262      	movs	r2, #98	; 0x62
    3adc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ae0:	2b1f      	cmp	r3, #31
    3ae2:	d806      	bhi.n	3af2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    3ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ae6:	1c5a      	adds	r2, r3, #1
    3ae8:	637a      	str	r2, [r7, #52]	; 0x34
    3aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3aec:	4413      	add	r3, r2
    3aee:	2230      	movs	r2, #48	; 0x30
    3af0:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3af4:	2b00      	cmp	r3, #0
    3af6:	d014      	beq.n	3b22 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3afc:	429a      	cmp	r2, r3
    3afe:	d110      	bne.n	3b22 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3b00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3b04:	2b00      	cmp	r3, #0
    3b06:	d109      	bne.n	3b1c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b0a:	f003 0304 	and.w	r3, r3, #4
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d104      	bne.n	3b1c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b14:	f003 0308 	and.w	r3, r3, #8
    3b18:	2b00      	cmp	r3, #0
    3b1a:	d002      	beq.n	3b22 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    3b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b1e:	3b01      	subs	r3, #1
    3b20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b24:	2b1f      	cmp	r3, #31
    3b26:	d824      	bhi.n	3b72 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    3b28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d007      	beq.n	3b40 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    3b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b32:	1c5a      	adds	r2, r3, #1
    3b34:	637a      	str	r2, [r7, #52]	; 0x34
    3b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b38:	4413      	add	r3, r2
    3b3a:	222d      	movs	r2, #45	; 0x2d
    3b3c:	701a      	strb	r2, [r3, #0]
    3b3e:	e018      	b.n	3b72 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    3b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b42:	f003 0304 	and.w	r3, r3, #4
    3b46:	2b00      	cmp	r3, #0
    3b48:	d007      	beq.n	3b5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b4c:	1c5a      	adds	r2, r3, #1
    3b4e:	637a      	str	r2, [r7, #52]	; 0x34
    3b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b52:	4413      	add	r3, r2
    3b54:	222b      	movs	r2, #43	; 0x2b
    3b56:	701a      	strb	r2, [r3, #0]
    3b58:	e00b      	b.n	3b72 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    3b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b5c:	f003 0308 	and.w	r3, r3, #8
    3b60:	2b00      	cmp	r3, #0
    3b62:	d006      	beq.n	3b72 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    3b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b66:	1c5a      	adds	r2, r3, #1
    3b68:	637a      	str	r2, [r7, #52]	; 0x34
    3b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b6c:	4413      	add	r3, r2
    3b6e:	2220      	movs	r2, #32
    3b70:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b74:	f003 0302 	and.w	r3, r3, #2
    3b78:	2b00      	cmp	r3, #0
    3b7a:	d116      	bne.n	3baa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    3b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b7e:	f003 0301 	and.w	r3, r3, #1
    3b82:	2b00      	cmp	r3, #0
    3b84:	d111      	bne.n	3baa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    3b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b88:	61fb      	str	r3, [r7, #28]
    3b8a:	69fa      	ldr	r2, [r7, #28]
    3b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b8e:	429a      	cmp	r2, r3
    3b90:	d20b      	bcs.n	3baa <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    3b92:	68fc      	ldr	r4, [r7, #12]
    3b94:	687a      	ldr	r2, [r7, #4]
    3b96:	1c53      	adds	r3, r2, #1
    3b98:	607b      	str	r3, [r7, #4]
    3b9a:	683b      	ldr	r3, [r7, #0]
    3b9c:	68b9      	ldr	r1, [r7, #8]
    3b9e:	2020      	movs	r0, #32
    3ba0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    3ba2:	69fb      	ldr	r3, [r7, #28]
    3ba4:	3301      	adds	r3, #1
    3ba6:	61fb      	str	r3, [r7, #28]
    3ba8:	e7ef      	b.n	3b8a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3baa:	2300      	movs	r3, #0
    3bac:	61bb      	str	r3, [r7, #24]
    3bae:	69ba      	ldr	r2, [r7, #24]
    3bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3bb2:	429a      	cmp	r2, r3
    3bb4:	d211      	bcs.n	3bda <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3bb6:	68fc      	ldr	r4, [r7, #12]
    3bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3bba:	69bb      	ldr	r3, [r7, #24]
    3bbc:	1ad3      	subs	r3, r2, r3
    3bbe:	3b01      	subs	r3, #1
    3bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3bc2:	4413      	add	r3, r2
    3bc4:	7818      	ldrb	r0, [r3, #0]
    3bc6:	687a      	ldr	r2, [r7, #4]
    3bc8:	1c53      	adds	r3, r2, #1
    3bca:	607b      	str	r3, [r7, #4]
    3bcc:	683b      	ldr	r3, [r7, #0]
    3bce:	68b9      	ldr	r1, [r7, #8]
    3bd0:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3bd2:	69bb      	ldr	r3, [r7, #24]
    3bd4:	3301      	adds	r3, #1
    3bd6:	61bb      	str	r3, [r7, #24]
    3bd8:	e7e9      	b.n	3bae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3bdc:	f003 0302 	and.w	r3, r3, #2
    3be0:	2b00      	cmp	r3, #0
    3be2:	d00e      	beq.n	3c02 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    3be4:	687a      	ldr	r2, [r7, #4]
    3be6:	697b      	ldr	r3, [r7, #20]
    3be8:	1ad3      	subs	r3, r2, r3
    3bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3bec:	429a      	cmp	r2, r3
    3bee:	d908      	bls.n	3c02 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    3bf0:	68fc      	ldr	r4, [r7, #12]
    3bf2:	687a      	ldr	r2, [r7, #4]
    3bf4:	1c53      	adds	r3, r2, #1
    3bf6:	607b      	str	r3, [r7, #4]
    3bf8:	683b      	ldr	r3, [r7, #0]
    3bfa:	68b9      	ldr	r1, [r7, #8]
    3bfc:	2020      	movs	r0, #32
    3bfe:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3c00:	e7f0      	b.n	3be4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    3c02:	687b      	ldr	r3, [r7, #4]
}
    3c04:	4618      	mov	r0, r3
    3c06:	3724      	adds	r7, #36	; 0x24
    3c08:	46bd      	mov	sp, r7
    3c0a:	bd90      	pop	{r4, r7, pc}

00003c0c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b096      	sub	sp, #88	; 0x58
    3c10:	af08      	add	r7, sp, #32
    3c12:	60f8      	str	r0, [r7, #12]
    3c14:	60b9      	str	r1, [r7, #8]
    3c16:	607a      	str	r2, [r7, #4]
    3c18:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3c1a:	2300      	movs	r3, #0
    3c1c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c20:	2b00      	cmp	r3, #0
    3c22:	d103      	bne.n	3c2c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    3c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c26:	f023 0310 	bic.w	r3, r3, #16
    3c2a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3c32:	2b00      	cmp	r3, #0
    3c34:	d002      	beq.n	3c3c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    3c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d034      	beq.n	3ca6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    3c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3c40:	fbb3 f2f2 	udiv	r2, r3, r2
    3c44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3c46:	fb01 f202 	mul.w	r2, r1, r2
    3c4a:	1a9b      	subs	r3, r3, r2
    3c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3c54:	2b09      	cmp	r3, #9
    3c56:	d804      	bhi.n	3c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    3c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3c5c:	3330      	adds	r3, #48	; 0x30
    3c5e:	b2da      	uxtb	r2, r3
    3c60:	e00d      	b.n	3c7e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    3c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c64:	f003 0320 	and.w	r3, r3, #32
    3c68:	2b00      	cmp	r3, #0
    3c6a:	d001      	beq.n	3c70 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    3c6c:	2241      	movs	r2, #65	; 0x41
    3c6e:	e000      	b.n	3c72 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    3c70:	2261      	movs	r2, #97	; 0x61
    3c72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3c76:	4413      	add	r3, r2
    3c78:	b2db      	uxtb	r3, r3
    3c7a:	3b0a      	subs	r3, #10
    3c7c:	b2da      	uxtb	r2, r3
    3c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c80:	1c59      	adds	r1, r3, #1
    3c82:	6379      	str	r1, [r7, #52]	; 0x34
    3c84:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3c88:	440b      	add	r3, r1
    3c8a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c92:	fbb2 f3f3 	udiv	r3, r2, r3
    3c96:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d003      	beq.n	3ca6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    3c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ca0:	2b1f      	cmp	r3, #31
    3ca2:	d800      	bhi.n	3ca6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    3ca4:	e7ca      	b.n	3c3c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ca8:	9306      	str	r3, [sp, #24]
    3caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3cac:	9305      	str	r3, [sp, #20]
    3cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cb0:	9304      	str	r3, [sp, #16]
    3cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cb4:	9303      	str	r3, [sp, #12]
    3cb6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    3cba:	9302      	str	r3, [sp, #8]
    3cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3cbe:	9301      	str	r3, [sp, #4]
    3cc0:	f107 0310 	add.w	r3, r7, #16
    3cc4:	9300      	str	r3, [sp, #0]
    3cc6:	683b      	ldr	r3, [r7, #0]
    3cc8:	687a      	ldr	r2, [r7, #4]
    3cca:	68b9      	ldr	r1, [r7, #8]
    3ccc:	68f8      	ldr	r0, [r7, #12]
    3cce:	f7ff fe7c 	bl	39ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3cd2:	4603      	mov	r3, r0
}
    3cd4:	4618      	mov	r0, r3
    3cd6:	3738      	adds	r7, #56	; 0x38
    3cd8:	46bd      	mov	sp, r7
    3cda:	bd80      	pop	{r7, pc}

00003cdc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b096      	sub	sp, #88	; 0x58
    3ce0:	af08      	add	r7, sp, #32
    3ce2:	60f8      	str	r0, [r7, #12]
    3ce4:	60b9      	str	r1, [r7, #8]
    3ce6:	607a      	str	r2, [r7, #4]
    3ce8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3cea:	2300      	movs	r3, #0
    3cec:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3cf2:	4313      	orrs	r3, r2
    3cf4:	d103      	bne.n	3cfe <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    3cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3cf8:	f023 0310 	bic.w	r3, r3, #16
    3cfc:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3d04:	2b00      	cmp	r3, #0
    3d06:	d003      	beq.n	3d10 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    3d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3d0c:	4313      	orrs	r3, r2
    3d0e:	d039      	beq.n	3d84 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
      const char digit = (char)(value % base);
    3d10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    3d18:	f003 f932 	bl	6f80 <__aeabi_uldivmod>
    3d1c:	4613      	mov	r3, r2
    3d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3d26:	2b09      	cmp	r3, #9
    3d28:	d804      	bhi.n	3d34 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x58>
    3d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3d2e:	3330      	adds	r3, #48	; 0x30
    3d30:	b2da      	uxtb	r2, r3
    3d32:	e00d      	b.n	3d50 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
    3d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3d36:	f003 0320 	and.w	r3, r3, #32
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d001      	beq.n	3d42 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x66>
    3d3e:	2241      	movs	r2, #65	; 0x41
    3d40:	e000      	b.n	3d44 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    3d42:	2261      	movs	r2, #97	; 0x61
    3d44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3d48:	4413      	add	r3, r2
    3d4a:	b2db      	uxtb	r3, r3
    3d4c:	3b0a      	subs	r3, #10
    3d4e:	b2da      	uxtb	r2, r3
    3d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d52:	1c59      	adds	r1, r3, #1
    3d54:	6379      	str	r1, [r7, #52]	; 0x34
    3d56:	f107 0138 	add.w	r1, r7, #56	; 0x38
    3d5a:	440b      	add	r3, r1
    3d5c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    3d60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    3d64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3d68:	f003 f90a 	bl	6f80 <__aeabi_uldivmod>
    3d6c:	4602      	mov	r2, r0
    3d6e:	460b      	mov	r3, r1
    3d70:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3d74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3d78:	4313      	orrs	r3, r2
    3d7a:	d003      	beq.n	3d84 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    3d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d7e:	2b1f      	cmp	r3, #31
    3d80:	d800      	bhi.n	3d84 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
    3d82:	e7c5      	b.n	3d10 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3d86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3d88:	9206      	str	r2, [sp, #24]
    3d8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    3d8c:	9205      	str	r2, [sp, #20]
    3d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3d90:	9204      	str	r2, [sp, #16]
    3d92:	9303      	str	r3, [sp, #12]
    3d94:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    3d98:	9302      	str	r3, [sp, #8]
    3d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d9c:	9301      	str	r3, [sp, #4]
    3d9e:	f107 0310 	add.w	r3, r7, #16
    3da2:	9300      	str	r3, [sp, #0]
    3da4:	683b      	ldr	r3, [r7, #0]
    3da6:	687a      	ldr	r2, [r7, #4]
    3da8:	68b9      	ldr	r1, [r7, #8]
    3daa:	68f8      	ldr	r0, [r7, #12]
    3dac:	f7ff fe0d 	bl	39ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3db0:	4603      	mov	r3, r0
}
    3db2:	4618      	mov	r0, r3
    3db4:	3738      	adds	r7, #56	; 0x38
    3db6:	46bd      	mov	sp, r7
    3db8:	bd80      	pop	{r7, pc}
    3dba:	Address 0x0000000000003dba is out of bounds.


00003dbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    3dbc:	b590      	push	{r4, r7, lr}
    3dbe:	b09b      	sub	sp, #108	; 0x6c
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6178      	str	r0, [r7, #20]
    3dc4:	6139      	str	r1, [r7, #16]
    3dc6:	60fa      	str	r2, [r7, #12]
    3dc8:	60bb      	str	r3, [r7, #8]
    3dca:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    3dce:	68fb      	ldr	r3, [r7, #12]
    3dd0:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
    3dd6:	f002 ff25 	bl	6c24 <__aeabi_d2f>
    3dda:	4603      	mov	r3, r0
    3ddc:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    3dde:	2300      	movs	r3, #0
    3de0:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    3de2:	f04f 0300 	mov.w	r3, #0
    3de6:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    3de8:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    3dec:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    3dee:	2300      	movs	r3, #0
    3df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3df4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e00:	d50a      	bpl.n	3e18 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3e02:	2301      	movs	r3, #1
    3e04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    3e08:	ed9f 7aab 	vldr	s14, [pc, #684]	; 40b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    3e0c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3e10:	ee77 7a67 	vsub.f32	s15, s14, s15
    3e14:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    3e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3e20:	2b00      	cmp	r3, #0
    3e22:	d101      	bne.n	3e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3e24:	2306      	movs	r3, #6
    3e26:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e2a:	2b1f      	cmp	r3, #31
    3e2c:	d80f      	bhi.n	3e4e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    3e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e30:	2b09      	cmp	r3, #9
    3e32:	d90c      	bls.n	3e4e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3e36:	1c5a      	adds	r2, r3, #1
    3e38:	663a      	str	r2, [r7, #96]	; 0x60
    3e3a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3e3e:	4413      	add	r3, r2
    3e40:	2230      	movs	r2, #48	; 0x30
    3e42:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    3e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e48:	3b01      	subs	r3, #1
    3e4a:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    3e4c:	e7ec      	b.n	3e28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    3e4e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3e56:	ee17 3a90 	vmov	r3, s15
    3e5a:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    3e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e5e:	ee07 3a90 	vmov	s15, r3
    3e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3e66:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
    3e6e:	4a93      	ldr	r2, [pc, #588]	; (40bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e72:	009b      	lsls	r3, r3, #2
    3e74:	4413      	add	r3, r2
    3e76:	edd3 7a00 	vldr	s15, [r3]
    3e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
    3e7e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    3e82:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3e8a:	ee17 3a90 	vmov	r3, s15
    3e8e:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    3e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e92:	ee07 3a90 	vmov	s15, r3
    3e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3e9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    3e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
    3ea2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    3ea6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3eaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3eae:	eef4 7ac7 	vcmpe.f32	s15, s14
    3eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3eb6:	dd18      	ble.n	3eea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    3eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eba:	3301      	adds	r3, #1
    3ebc:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    3ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ec0:	ee07 3a90 	vmov	s15, r3
    3ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    3ec8:	4a7c      	ldr	r2, [pc, #496]	; (40bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    3eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3ecc:	009b      	lsls	r3, r3, #2
    3ece:	4413      	add	r3, r2
    3ed0:	edd3 7a00 	vldr	s15, [r3]
    3ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3edc:	db19      	blt.n	3f12 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    3ede:	2300      	movs	r3, #0
    3ee0:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3ee4:	3301      	adds	r3, #1
    3ee6:	65bb      	str	r3, [r7, #88]	; 0x58
    3ee8:	e013      	b.n	3f12 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3eea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3eee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3ef2:	eef4 7a47 	vcmp.f32	s15, s14
    3ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3efa:	d10a      	bne.n	3f12 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    3efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3efe:	2b00      	cmp	r3, #0
    3f00:	d004      	beq.n	3f0c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f04:	f003 0301 	and.w	r3, r3, #1
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d002      	beq.n	3f12 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    3f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f0e:	3301      	adds	r3, #1
    3f10:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3f12:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3f16:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 40c0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    3f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
    3f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f22:	dd01      	ble.n	3f28 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3f24:	2300      	movs	r3, #0
    3f26:	e166      	b.n	41f6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    3f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d129      	bne.n	3f82 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    3f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f30:	ee07 3a90 	vmov	s15, r3
    3f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f38:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
    3f40:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3f44:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3f48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
    3f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f54:	dd03      	ble.n	3f5e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    3f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f58:	3301      	adds	r3, #1
    3f5a:	65bb      	str	r3, [r7, #88]	; 0x58
    3f5c:	e062      	b.n	4024 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    3f5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3f62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3f66:	eef4 7a47 	vcmp.f32	s15, s14
    3f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f6e:	d159      	bne.n	4024 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    3f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f72:	f003 0301 	and.w	r3, r3, #1
    3f76:	2b00      	cmp	r3, #0
    3f78:	d054      	beq.n	4024 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    3f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3f7c:	3301      	adds	r3, #1
    3f7e:	65bb      	str	r3, [r7, #88]	; 0x58
    3f80:	e050      	b.n	4024 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    3f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3f84:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3f88:	2b1f      	cmp	r3, #31
    3f8a:	d828      	bhi.n	3fde <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    3f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3f8e:	3b01      	subs	r3, #1
    3f90:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    3f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
    3f94:	4b4b      	ldr	r3, [pc, #300]	; (40c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3f96:	fba3 2301 	umull	r2, r3, r3, r1
    3f9a:	08da      	lsrs	r2, r3, #3
    3f9c:	4613      	mov	r3, r2
    3f9e:	009b      	lsls	r3, r3, #2
    3fa0:	4413      	add	r3, r2
    3fa2:	005b      	lsls	r3, r3, #1
    3fa4:	1aca      	subs	r2, r1, r3
    3fa6:	b2d3      	uxtb	r3, r2
    3fa8:	3330      	adds	r3, #48	; 0x30
    3faa:	b2d9      	uxtb	r1, r3
    3fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fae:	1c5a      	adds	r2, r3, #1
    3fb0:	663a      	str	r2, [r7, #96]	; 0x60
    3fb2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3fb6:	4413      	add	r3, r2
    3fb8:	460a      	mov	r2, r1
    3fba:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    3fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fc0:	4a40      	ldr	r2, [pc, #256]	; (40c4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3fc2:	fba2 2303 	umull	r2, r3, r2, r3
    3fc6:	08db      	lsrs	r3, r3, #3
    3fc8:	657b      	str	r3, [r7, #84]	; 0x54
    3fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fcc:	2b00      	cmp	r3, #0
    3fce:	bf0c      	ite	eq
    3fd0:	2301      	moveq	r3, #1
    3fd2:	2300      	movne	r3, #0
    3fd4:	b2db      	uxtb	r3, r3
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d100      	bne.n	3fdc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3fda:	e7d4      	b.n	3f86 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    3fdc:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3fe0:	2b1f      	cmp	r3, #31
    3fe2:	d806      	bhi.n	3ff2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3fe6:	1e5a      	subs	r2, r3, #1
    3fe8:	653a      	str	r2, [r7, #80]	; 0x50
    3fea:	2b00      	cmp	r3, #0
    3fec:	d001      	beq.n	3ff2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3fee:	2301      	movs	r3, #1
    3ff0:	e000      	b.n	3ff4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3ff2:	2300      	movs	r3, #0
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d009      	beq.n	400c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    3ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3ffa:	1c5a      	adds	r2, r3, #1
    3ffc:	663a      	str	r2, [r7, #96]	; 0x60
    3ffe:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4002:	4413      	add	r3, r2
    4004:	2230      	movs	r2, #48	; 0x30
    4006:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    400a:	e7e8      	b.n	3fde <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    400c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    400e:	2b1f      	cmp	r3, #31
    4010:	d808      	bhi.n	4024 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    4012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4014:	1c5a      	adds	r2, r3, #1
    4016:	663a      	str	r2, [r7, #96]	; 0x60
    4018:	f107 0268 	add.w	r2, r7, #104	; 0x68
    401c:	4413      	add	r3, r2
    401e:	222e      	movs	r2, #46	; 0x2e
    4020:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4026:	2b1f      	cmp	r3, #31
    4028:	d829      	bhi.n	407e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    402a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    402c:	4b26      	ldr	r3, [pc, #152]	; (40c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    402e:	fb83 1302 	smull	r1, r3, r3, r2
    4032:	1099      	asrs	r1, r3, #2
    4034:	17d3      	asrs	r3, r2, #31
    4036:	1ac9      	subs	r1, r1, r3
    4038:	460b      	mov	r3, r1
    403a:	009b      	lsls	r3, r3, #2
    403c:	440b      	add	r3, r1
    403e:	005b      	lsls	r3, r3, #1
    4040:	1ad1      	subs	r1, r2, r3
    4042:	b2cb      	uxtb	r3, r1
    4044:	3330      	adds	r3, #48	; 0x30
    4046:	b2d9      	uxtb	r1, r3
    4048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    404a:	1c5a      	adds	r2, r3, #1
    404c:	663a      	str	r2, [r7, #96]	; 0x60
    404e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4052:	4413      	add	r3, r2
    4054:	460a      	mov	r2, r1
    4056:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    405a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    405c:	4a1a      	ldr	r2, [pc, #104]	; (40c8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    405e:	fb82 1203 	smull	r1, r2, r2, r3
    4062:	1092      	asrs	r2, r2, #2
    4064:	17db      	asrs	r3, r3, #31
    4066:	1ad3      	subs	r3, r2, r3
    4068:	65bb      	str	r3, [r7, #88]	; 0x58
    406a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    406c:	2b00      	cmp	r3, #0
    406e:	bf0c      	ite	eq
    4070:	2301      	moveq	r3, #1
    4072:	2300      	movne	r3, #0
    4074:	b2db      	uxtb	r3, r3
    4076:	2b00      	cmp	r3, #0
    4078:	d100      	bne.n	407c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    407a:	e7d3      	b.n	4024 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    407c:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    407e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4082:	f003 0302 	and.w	r3, r3, #2
    4086:	2b00      	cmp	r3, #0
    4088:	d120      	bne.n	40cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    408a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    408e:	f003 0301 	and.w	r3, r3, #1
    4092:	2b00      	cmp	r3, #0
    4094:	d01a      	beq.n	40cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    4096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    409a:	429a      	cmp	r2, r3
    409c:	d216      	bcs.n	40cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    409e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40a0:	2b1f      	cmp	r3, #31
    40a2:	d813      	bhi.n	40cc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    40a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40a6:	1c5a      	adds	r2, r3, #1
    40a8:	663a      	str	r2, [r7, #96]	; 0x60
    40aa:	f107 0268 	add.w	r2, r7, #104	; 0x68
    40ae:	4413      	add	r3, r2
    40b0:	2230      	movs	r2, #48	; 0x30
    40b2:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    40b6:	e7e2      	b.n	407e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    40b8:	00000000 	.word	0x00000000
    40bc:	00009034 	.word	0x00009034
    40c0:	4f000000 	.word	0x4f000000
    40c4:	cccccccd 	.word	0xcccccccd
    40c8:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    40cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    40ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    40d0:	429a      	cmp	r2, r3
    40d2:	d112      	bne.n	40fa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    40d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    40d8:	2b00      	cmp	r3, #0
    40da:	d10b      	bne.n	40f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    40dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    40e0:	f003 0304 	and.w	r3, r3, #4
    40e4:	2b00      	cmp	r3, #0
    40e6:	d105      	bne.n	40f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    40e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    40ec:	f003 0308 	and.w	r3, r3, #8
    40f0:	2b00      	cmp	r3, #0
    40f2:	d002      	beq.n	40fa <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    40f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40f6:	3b01      	subs	r3, #1
    40f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    40fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    40fc:	2b1f      	cmp	r3, #31
    40fe:	d82c      	bhi.n	415a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    4100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    4104:	2b00      	cmp	r3, #0
    4106:	d009      	beq.n	411c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    4108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    410a:	1c5a      	adds	r2, r3, #1
    410c:	663a      	str	r2, [r7, #96]	; 0x60
    410e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4112:	4413      	add	r3, r2
    4114:	222d      	movs	r2, #45	; 0x2d
    4116:	f803 2c50 	strb.w	r2, [r3, #-80]
    411a:	e01e      	b.n	415a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    411c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4120:	f003 0304 	and.w	r3, r3, #4
    4124:	2b00      	cmp	r3, #0
    4126:	d009      	beq.n	413c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    4128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    412a:	1c5a      	adds	r2, r3, #1
    412c:	663a      	str	r2, [r7, #96]	; 0x60
    412e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4132:	4413      	add	r3, r2
    4134:	222b      	movs	r2, #43	; 0x2b
    4136:	f803 2c50 	strb.w	r2, [r3, #-80]
    413a:	e00e      	b.n	415a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    413c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    4140:	f003 0308 	and.w	r3, r3, #8
    4144:	2b00      	cmp	r3, #0
    4146:	d008      	beq.n	415a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    4148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    414a:	1c5a      	adds	r2, r3, #1
    414c:	663a      	str	r2, [r7, #96]	; 0x60
    414e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    4152:	4413      	add	r3, r2
    4154:	2220      	movs	r2, #32
    4156:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    415a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    415e:	f003 0302 	and.w	r3, r3, #2
    4162:	2b00      	cmp	r3, #0
    4164:	d117      	bne.n	4196 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    4166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    416a:	f003 0301 	and.w	r3, r3, #1
    416e:	2b00      	cmp	r3, #0
    4170:	d111      	bne.n	4196 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    4172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4174:	64fb      	str	r3, [r7, #76]	; 0x4c
    4176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    417a:	429a      	cmp	r2, r3
    417c:	d20b      	bcs.n	4196 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    417e:	697c      	ldr	r4, [r7, #20]
    4180:	68fa      	ldr	r2, [r7, #12]
    4182:	1c53      	adds	r3, r2, #1
    4184:	60fb      	str	r3, [r7, #12]
    4186:	68bb      	ldr	r3, [r7, #8]
    4188:	6939      	ldr	r1, [r7, #16]
    418a:	2020      	movs	r0, #32
    418c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4190:	3301      	adds	r3, #1
    4192:	64fb      	str	r3, [r7, #76]	; 0x4c
    4194:	e7ef      	b.n	4176 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    4196:	2300      	movs	r3, #0
    4198:	64bb      	str	r3, [r7, #72]	; 0x48
    419a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    419c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    419e:	429a      	cmp	r2, r3
    41a0:	d213      	bcs.n	41ca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    41a2:	697c      	ldr	r4, [r7, #20]
    41a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    41a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41a8:	1ad3      	subs	r3, r2, r3
    41aa:	3b01      	subs	r3, #1
    41ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
    41b0:	4413      	add	r3, r2
    41b2:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    41b6:	68fa      	ldr	r2, [r7, #12]
    41b8:	1c53      	adds	r3, r2, #1
    41ba:	60fb      	str	r3, [r7, #12]
    41bc:	68bb      	ldr	r3, [r7, #8]
    41be:	6939      	ldr	r1, [r7, #16]
    41c0:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    41c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41c4:	3301      	adds	r3, #1
    41c6:	64bb      	str	r3, [r7, #72]	; 0x48
    41c8:	e7e7      	b.n	419a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    41ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    41ce:	f003 0302 	and.w	r3, r3, #2
    41d2:	2b00      	cmp	r3, #0
    41d4:	d00e      	beq.n	41f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    41d6:	68fa      	ldr	r2, [r7, #12]
    41d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    41da:	1ad3      	subs	r3, r2, r3
    41dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    41de:	429a      	cmp	r2, r3
    41e0:	d908      	bls.n	41f4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    41e2:	697c      	ldr	r4, [r7, #20]
    41e4:	68fa      	ldr	r2, [r7, #12]
    41e6:	1c53      	adds	r3, r2, #1
    41e8:	60fb      	str	r3, [r7, #12]
    41ea:	68bb      	ldr	r3, [r7, #8]
    41ec:	6939      	ldr	r1, [r7, #16]
    41ee:	2020      	movs	r0, #32
    41f0:	47a0      	blx	r4
    while (idx - start_idx < width) {
    41f2:	e7f0      	b.n	41d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    41f4:	68fb      	ldr	r3, [r7, #12]
}
    41f6:	4618      	mov	r0, r3
    41f8:	376c      	adds	r7, #108	; 0x6c
    41fa:	46bd      	mov	sp, r7
    41fc:	bd90      	pop	{r4, r7, pc}
    41fe:	bf00      	nop

00004200 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    4200:	b5b0      	push	{r4, r5, r7, lr}
    4202:	b0a0      	sub	sp, #128	; 0x80
    4204:	af0a      	add	r7, sp, #40	; 0x28
    4206:	60f8      	str	r0, [r7, #12]
    4208:	60b9      	str	r1, [r7, #8]
    420a:	607a      	str	r2, [r7, #4]
    420c:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    420e:	2300      	movs	r3, #0
    4210:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    4212:	68bb      	ldr	r3, [r7, #8]
    4214:	2b00      	cmp	r3, #0
    4216:	d101      	bne.n	421c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    4218:	4ba2      	ldr	r3, [pc, #648]	; (44a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    421a:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    421c:	683b      	ldr	r3, [r7, #0]
    421e:	781b      	ldrb	r3, [r3, #0]
    4220:	2b00      	cmp	r3, #0
    4222:	f000 8446 	beq.w	4ab2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    4226:	683b      	ldr	r3, [r7, #0]
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	2b25      	cmp	r3, #37	; 0x25
    422c:	d00d      	beq.n	424a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    422e:	68fc      	ldr	r4, [r7, #12]
    4230:	683b      	ldr	r3, [r7, #0]
    4232:	7818      	ldrb	r0, [r3, #0]
    4234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4236:	1c53      	adds	r3, r2, #1
    4238:	647b      	str	r3, [r7, #68]	; 0x44
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	68b9      	ldr	r1, [r7, #8]
    423e:	47a0      	blx	r4
      format++;
    4240:	683b      	ldr	r3, [r7, #0]
    4242:	3301      	adds	r3, #1
    4244:	603b      	str	r3, [r7, #0]
      continue;
    4246:	f000 bc32 	b.w	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
    }
    else {
      // yes, evaluate it
      format++;
    424a:	683b      	ldr	r3, [r7, #0]
    424c:	3301      	adds	r3, #1
    424e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    4250:	2300      	movs	r3, #0
    4252:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    4254:	683b      	ldr	r3, [r7, #0]
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	3b20      	subs	r3, #32
    425a:	2b10      	cmp	r3, #16
    425c:	d856      	bhi.n	430c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    425e:	a201      	add	r2, pc, #4	; (adr r2, 4264 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    4260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4264:	000042e5 	.word	0x000042e5
    4268:	0000430d 	.word	0x0000430d
    426c:	0000430d 	.word	0x0000430d
    4270:	000042f9 	.word	0x000042f9
    4274:	0000430d 	.word	0x0000430d
    4278:	0000430d 	.word	0x0000430d
    427c:	0000430d 	.word	0x0000430d
    4280:	0000430d 	.word	0x0000430d
    4284:	0000430d 	.word	0x0000430d
    4288:	0000430d 	.word	0x0000430d
    428c:	0000430d 	.word	0x0000430d
    4290:	000042d1 	.word	0x000042d1
    4294:	0000430d 	.word	0x0000430d
    4298:	000042bd 	.word	0x000042bd
    429c:	0000430d 	.word	0x0000430d
    42a0:	0000430d 	.word	0x0000430d
    42a4:	000042a9 	.word	0x000042a9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    42a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42aa:	f043 0301 	orr.w	r3, r3, #1
    42ae:	657b      	str	r3, [r7, #84]	; 0x54
    42b0:	683b      	ldr	r3, [r7, #0]
    42b2:	3301      	adds	r3, #1
    42b4:	603b      	str	r3, [r7, #0]
    42b6:	2301      	movs	r3, #1
    42b8:	64bb      	str	r3, [r7, #72]	; 0x48
    42ba:	e02a      	b.n	4312 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    42bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42be:	f043 0302 	orr.w	r3, r3, #2
    42c2:	657b      	str	r3, [r7, #84]	; 0x54
    42c4:	683b      	ldr	r3, [r7, #0]
    42c6:	3301      	adds	r3, #1
    42c8:	603b      	str	r3, [r7, #0]
    42ca:	2301      	movs	r3, #1
    42cc:	64bb      	str	r3, [r7, #72]	; 0x48
    42ce:	e020      	b.n	4312 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    42d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42d2:	f043 0304 	orr.w	r3, r3, #4
    42d6:	657b      	str	r3, [r7, #84]	; 0x54
    42d8:	683b      	ldr	r3, [r7, #0]
    42da:	3301      	adds	r3, #1
    42dc:	603b      	str	r3, [r7, #0]
    42de:	2301      	movs	r3, #1
    42e0:	64bb      	str	r3, [r7, #72]	; 0x48
    42e2:	e016      	b.n	4312 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    42e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42e6:	f043 0308 	orr.w	r3, r3, #8
    42ea:	657b      	str	r3, [r7, #84]	; 0x54
    42ec:	683b      	ldr	r3, [r7, #0]
    42ee:	3301      	adds	r3, #1
    42f0:	603b      	str	r3, [r7, #0]
    42f2:	2301      	movs	r3, #1
    42f4:	64bb      	str	r3, [r7, #72]	; 0x48
    42f6:	e00c      	b.n	4312 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    42f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    42fa:	f043 0310 	orr.w	r3, r3, #16
    42fe:	657b      	str	r3, [r7, #84]	; 0x54
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	3301      	adds	r3, #1
    4304:	603b      	str	r3, [r7, #0]
    4306:	2301      	movs	r3, #1
    4308:	64bb      	str	r3, [r7, #72]	; 0x48
    430a:	e002      	b.n	4312 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    430c:	2300      	movs	r3, #0
    430e:	64bb      	str	r3, [r7, #72]	; 0x48
    4310:	bf00      	nop
      }
    } while (n);
    4312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4314:	2b00      	cmp	r3, #0
    4316:	d000      	beq.n	431a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    4318:	e79c      	b.n	4254 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    431a:	2300      	movs	r3, #0
    431c:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    431e:	683b      	ldr	r3, [r7, #0]
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	4618      	mov	r0, r3
    4324:	f7ff fb19 	bl	395a <_is_digit(char)>
    4328:	4603      	mov	r3, r0
    432a:	2b00      	cmp	r3, #0
    432c:	d005      	beq.n	433a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    432e:	463b      	mov	r3, r7
    4330:	4618      	mov	r0, r3
    4332:	f7ff fb26 	bl	3982 <_atoi(char const**)>
    4336:	6538      	str	r0, [r7, #80]	; 0x50
    4338:	e018      	b.n	436c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    433a:	683b      	ldr	r3, [r7, #0]
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	2b2a      	cmp	r3, #42	; 0x2a
    4340:	d114      	bne.n	436c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    4342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4344:	1d1a      	adds	r2, r3, #4
    4346:	66ba      	str	r2, [r7, #104]	; 0x68
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    434e:	2b00      	cmp	r3, #0
    4350:	da07      	bge.n	4362 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    4352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4354:	f043 0302 	orr.w	r3, r3, #2
    4358:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    435c:	425b      	negs	r3, r3
    435e:	653b      	str	r3, [r7, #80]	; 0x50
    4360:	e001      	b.n	4366 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    4362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4364:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	3301      	adds	r3, #1
    436a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    436c:	2300      	movs	r3, #0
    436e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    4370:	683b      	ldr	r3, [r7, #0]
    4372:	781b      	ldrb	r3, [r3, #0]
    4374:	2b2e      	cmp	r3, #46	; 0x2e
    4376:	d124      	bne.n	43c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    4378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    437a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    437e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	3301      	adds	r3, #1
    4384:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	781b      	ldrb	r3, [r3, #0]
    438a:	4618      	mov	r0, r3
    438c:	f7ff fae5 	bl	395a <_is_digit(char)>
    4390:	4603      	mov	r3, r0
    4392:	2b00      	cmp	r3, #0
    4394:	d005      	beq.n	43a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    4396:	463b      	mov	r3, r7
    4398:	4618      	mov	r0, r3
    439a:	f7ff faf2 	bl	3982 <_atoi(char const**)>
    439e:	64f8      	str	r0, [r7, #76]	; 0x4c
    43a0:	e00f      	b.n	43c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    43a2:	683b      	ldr	r3, [r7, #0]
    43a4:	781b      	ldrb	r3, [r3, #0]
    43a6:	2b2a      	cmp	r3, #42	; 0x2a
    43a8:	d10b      	bne.n	43c2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    43aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    43ac:	1d1a      	adds	r2, r3, #4
    43ae:	66ba      	str	r2, [r7, #104]	; 0x68
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    43b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    43ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    43bc:	683b      	ldr	r3, [r7, #0]
    43be:	3301      	adds	r3, #1
    43c0:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    43c2:	683b      	ldr	r3, [r7, #0]
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	3b68      	subs	r3, #104	; 0x68
    43c8:	2b12      	cmp	r3, #18
    43ca:	d867      	bhi.n	449c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    43cc:	a201      	add	r2, pc, #4	; (adr r2, 43d4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    43ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43d2:	bf00      	nop
    43d4:	00004447 	.word	0x00004447
    43d8:	0000449d 	.word	0x0000449d
    43dc:	0000447d 	.word	0x0000447d
    43e0:	0000449d 	.word	0x0000449d
    43e4:	00004421 	.word	0x00004421
    43e8:	0000449d 	.word	0x0000449d
    43ec:	0000449d 	.word	0x0000449d
    43f0:	0000449d 	.word	0x0000449d
    43f4:	0000449d 	.word	0x0000449d
    43f8:	0000449d 	.word	0x0000449d
    43fc:	0000449d 	.word	0x0000449d
    4400:	0000449d 	.word	0x0000449d
    4404:	0000446d 	.word	0x0000446d
    4408:	0000449d 	.word	0x0000449d
    440c:	0000449d 	.word	0x0000449d
    4410:	0000449d 	.word	0x0000449d
    4414:	0000449d 	.word	0x0000449d
    4418:	0000449d 	.word	0x0000449d
    441c:	0000448d 	.word	0x0000448d
      case 'l' :
        flags |= FLAGS_LONG;
    4420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4426:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4428:	683b      	ldr	r3, [r7, #0]
    442a:	3301      	adds	r3, #1
    442c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    442e:	683b      	ldr	r3, [r7, #0]
    4430:	781b      	ldrb	r3, [r3, #0]
    4432:	2b6c      	cmp	r3, #108	; 0x6c
    4434:	d134      	bne.n	44a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    4436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    443c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    443e:	683b      	ldr	r3, [r7, #0]
    4440:	3301      	adds	r3, #1
    4442:	603b      	str	r3, [r7, #0]
        }
        break;
    4444:	e02c      	b.n	44a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    4446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    444c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    444e:	683b      	ldr	r3, [r7, #0]
    4450:	3301      	adds	r3, #1
    4452:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    4454:	683b      	ldr	r3, [r7, #0]
    4456:	781b      	ldrb	r3, [r3, #0]
    4458:	2b68      	cmp	r3, #104	; 0x68
    445a:	d125      	bne.n	44a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    445c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4462:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    4464:	683b      	ldr	r3, [r7, #0]
    4466:	3301      	adds	r3, #1
    4468:	603b      	str	r3, [r7, #0]
        }
        break;
    446a:	e01d      	b.n	44a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    446e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4472:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4474:	683b      	ldr	r3, [r7, #0]
    4476:	3301      	adds	r3, #1
    4478:	603b      	str	r3, [r7, #0]
        break;
    447a:	e016      	b.n	44aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    447c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    447e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4482:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4484:	683b      	ldr	r3, [r7, #0]
    4486:	3301      	adds	r3, #1
    4488:	603b      	str	r3, [r7, #0]
        break;
    448a:	e00e      	b.n	44aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    448c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    448e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4492:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    4494:	683b      	ldr	r3, [r7, #0]
    4496:	3301      	adds	r3, #1
    4498:	603b      	str	r3, [r7, #0]
        break;
    449a:	e006      	b.n	44aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    449c:	bf00      	nop
    449e:	e004      	b.n	44aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    44a0:	bf00      	nop
    44a2:	e002      	b.n	44aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    44a4:	00003911 	.word	0x00003911
        break;
    44a8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    44aa:	683b      	ldr	r3, [r7, #0]
    44ac:	781b      	ldrb	r3, [r3, #0]
    44ae:	3b25      	subs	r3, #37	; 0x25
    44b0:	2b53      	cmp	r3, #83	; 0x53
    44b2:	f200 82ef 	bhi.w	4a94 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x894>
    44b6:	a201      	add	r2, pc, #4	; (adr r2, 44bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    44b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    44bc:	00004a7d 	.word	0x00004a7d
    44c0:	00004a95 	.word	0x00004a95
    44c4:	00004a95 	.word	0x00004a95
    44c8:	00004a95 	.word	0x00004a95
    44cc:	00004a95 	.word	0x00004a95
    44d0:	00004a95 	.word	0x00004a95
    44d4:	00004a95 	.word	0x00004a95
    44d8:	00004a95 	.word	0x00004a95
    44dc:	00004a95 	.word	0x00004a95
    44e0:	00004a95 	.word	0x00004a95
    44e4:	00004a95 	.word	0x00004a95
    44e8:	00004a95 	.word	0x00004a95
    44ec:	00004a95 	.word	0x00004a95
    44f0:	00004a95 	.word	0x00004a95
    44f4:	00004a95 	.word	0x00004a95
    44f8:	00004a95 	.word	0x00004a95
    44fc:	00004a95 	.word	0x00004a95
    4500:	00004a95 	.word	0x00004a95
    4504:	00004a95 	.word	0x00004a95
    4508:	00004a95 	.word	0x00004a95
    450c:	00004a95 	.word	0x00004a95
    4510:	00004a95 	.word	0x00004a95
    4514:	00004a95 	.word	0x00004a95
    4518:	00004a95 	.word	0x00004a95
    451c:	00004a95 	.word	0x00004a95
    4520:	00004a95 	.word	0x00004a95
    4524:	00004a95 	.word	0x00004a95
    4528:	00004a95 	.word	0x00004a95
    452c:	00004a95 	.word	0x00004a95
    4530:	00004a95 	.word	0x00004a95
    4534:	00004a95 	.word	0x00004a95
    4538:	00004a95 	.word	0x00004a95
    453c:	00004a95 	.word	0x00004a95
    4540:	0000489b 	.word	0x0000489b
    4544:	00004a95 	.word	0x00004a95
    4548:	00004a95 	.word	0x00004a95
    454c:	00004a95 	.word	0x00004a95
    4550:	00004a95 	.word	0x00004a95
    4554:	00004a95 	.word	0x00004a95
    4558:	00004a95 	.word	0x00004a95
    455c:	00004a95 	.word	0x00004a95
    4560:	00004a95 	.word	0x00004a95
    4564:	00004a95 	.word	0x00004a95
    4568:	00004a95 	.word	0x00004a95
    456c:	00004a95 	.word	0x00004a95
    4570:	00004a95 	.word	0x00004a95
    4574:	00004a95 	.word	0x00004a95
    4578:	00004a95 	.word	0x00004a95
    457c:	00004a95 	.word	0x00004a95
    4580:	00004a95 	.word	0x00004a95
    4584:	00004a95 	.word	0x00004a95
    4588:	0000460d 	.word	0x0000460d
    458c:	00004a95 	.word	0x00004a95
    4590:	00004a95 	.word	0x00004a95
    4594:	00004a95 	.word	0x00004a95
    4598:	00004a95 	.word	0x00004a95
    459c:	00004a95 	.word	0x00004a95
    45a0:	00004a95 	.word	0x00004a95
    45a4:	00004a95 	.word	0x00004a95
    45a8:	00004a95 	.word	0x00004a95
    45ac:	00004a95 	.word	0x00004a95
    45b0:	0000460d 	.word	0x0000460d
    45b4:	000048d7 	.word	0x000048d7
    45b8:	0000460d 	.word	0x0000460d
    45bc:	00004a95 	.word	0x00004a95
    45c0:	0000489b 	.word	0x0000489b
    45c4:	00004a95 	.word	0x00004a95
    45c8:	00004a95 	.word	0x00004a95
    45cc:	0000460d 	.word	0x0000460d
    45d0:	00004a95 	.word	0x00004a95
    45d4:	00004a95 	.word	0x00004a95
    45d8:	00004a95 	.word	0x00004a95
    45dc:	00004a95 	.word	0x00004a95
    45e0:	00004a95 	.word	0x00004a95
    45e4:	0000460d 	.word	0x0000460d
    45e8:	00004a35 	.word	0x00004a35
    45ec:	00004a95 	.word	0x00004a95
    45f0:	00004a95 	.word	0x00004a95
    45f4:	0000495f 	.word	0x0000495f
    45f8:	00004a95 	.word	0x00004a95
    45fc:	0000460d 	.word	0x0000460d
    4600:	00004a95 	.word	0x00004a95
    4604:	00004a95 	.word	0x00004a95
    4608:	0000460d 	.word	0x0000460d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    460c:	683b      	ldr	r3, [r7, #0]
    460e:	781b      	ldrb	r3, [r3, #0]
    4610:	2b78      	cmp	r3, #120	; 0x78
    4612:	d003      	beq.n	461c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	781b      	ldrb	r3, [r3, #0]
    4618:	2b58      	cmp	r3, #88	; 0x58
    461a:	d102      	bne.n	4622 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    461c:	2310      	movs	r3, #16
    461e:	643b      	str	r3, [r7, #64]	; 0x40
    4620:	e013      	b.n	464a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    4622:	683b      	ldr	r3, [r7, #0]
    4624:	781b      	ldrb	r3, [r3, #0]
    4626:	2b6f      	cmp	r3, #111	; 0x6f
    4628:	d102      	bne.n	4630 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    462a:	2308      	movs	r3, #8
    462c:	643b      	str	r3, [r7, #64]	; 0x40
    462e:	e00c      	b.n	464a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    4630:	683b      	ldr	r3, [r7, #0]
    4632:	781b      	ldrb	r3, [r3, #0]
    4634:	2b62      	cmp	r3, #98	; 0x62
    4636:	d102      	bne.n	463e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    4638:	2302      	movs	r3, #2
    463a:	643b      	str	r3, [r7, #64]	; 0x40
    463c:	e005      	b.n	464a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    463e:	230a      	movs	r3, #10
    4640:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    4642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4644:	f023 0310 	bic.w	r3, r3, #16
    4648:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    464a:	683b      	ldr	r3, [r7, #0]
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	2b58      	cmp	r3, #88	; 0x58
    4650:	d103      	bne.n	465a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    4652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4654:	f043 0320 	orr.w	r3, r3, #32
    4658:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    465a:	683b      	ldr	r3, [r7, #0]
    465c:	781b      	ldrb	r3, [r3, #0]
    465e:	2b69      	cmp	r3, #105	; 0x69
    4660:	d007      	beq.n	4672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    4662:	683b      	ldr	r3, [r7, #0]
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	2b64      	cmp	r3, #100	; 0x64
    4668:	d003      	beq.n	4672 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    466a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    466c:	f023 030c 	bic.w	r3, r3, #12
    4670:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    4672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4678:	2b00      	cmp	r3, #0
    467a:	d003      	beq.n	4684 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    467c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    467e:	f023 0301 	bic.w	r3, r3, #1
    4682:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    4684:	683b      	ldr	r3, [r7, #0]
    4686:	781b      	ldrb	r3, [r3, #0]
    4688:	2b69      	cmp	r3, #105	; 0x69
    468a:	d004      	beq.n	4696 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    468c:	683b      	ldr	r3, [r7, #0]
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	2b64      	cmp	r3, #100	; 0x64
    4692:	f040 808e 	bne.w	47b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    4696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4698:	f403 7300 	and.w	r3, r3, #512	; 0x200
    469c:	2b00      	cmp	r3, #0
    469e:	d02f      	beq.n	4700 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x500>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    46a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    46a2:	3307      	adds	r3, #7
    46a4:	f023 0307 	bic.w	r3, r3, #7
    46a8:	f103 0208 	add.w	r2, r3, #8
    46ac:	66ba      	str	r2, [r7, #104]	; 0x68
    46ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    46b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    46b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    46ba:	2a00      	cmp	r2, #0
    46bc:	f173 0100 	sbcs.w	r1, r3, #0
    46c0:	da02      	bge.n	46c8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    46c2:	4252      	negs	r2, r2
    46c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    46c8:	4610      	mov	r0, r2
    46ca:	4619      	mov	r1, r3
    46cc:	697b      	ldr	r3, [r7, #20]
    46ce:	0fdb      	lsrs	r3, r3, #31
    46d0:	b2dc      	uxtb	r4, r3
    46d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46d4:	461a      	mov	r2, r3
    46d6:	f04f 0300 	mov.w	r3, #0
    46da:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    46dc:	9508      	str	r5, [sp, #32]
    46de:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    46e0:	9507      	str	r5, [sp, #28]
    46e2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    46e4:	9506      	str	r5, [sp, #24]
    46e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    46ea:	9402      	str	r4, [sp, #8]
    46ec:	e9cd 0100 	strd	r0, r1, [sp]
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    46f4:	68b9      	ldr	r1, [r7, #8]
    46f6:	68f8      	ldr	r0, [r7, #12]
    46f8:	f7ff faf0 	bl	3cdc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    46fc:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    46fe:	e0c8      	b.n	4892 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          else if (flags & FLAGS_LONG) {
    4700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4702:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4706:	2b00      	cmp	r3, #0
    4708:	d01e      	beq.n	4748 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x548>
            const long value = va_arg(va, long);
    470a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    470c:	1d1a      	adds	r2, r3, #4
    470e:	66ba      	str	r2, [r7, #104]	; 0x68
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4714:	69fb      	ldr	r3, [r7, #28]
    4716:	2b00      	cmp	r3, #0
    4718:	bfb8      	it	lt
    471a:	425b      	neglt	r3, r3
    471c:	4619      	mov	r1, r3
    471e:	69fb      	ldr	r3, [r7, #28]
    4720:	0fdb      	lsrs	r3, r3, #31
    4722:	b2db      	uxtb	r3, r3
    4724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4726:	9205      	str	r2, [sp, #20]
    4728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    472a:	9204      	str	r2, [sp, #16]
    472c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    472e:	9203      	str	r2, [sp, #12]
    4730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4732:	9202      	str	r2, [sp, #8]
    4734:	9301      	str	r3, [sp, #4]
    4736:	9100      	str	r1, [sp, #0]
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    473c:	68b9      	ldr	r1, [r7, #8]
    473e:	68f8      	ldr	r0, [r7, #12]
    4740:	f7ff fa64 	bl	3c0c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4744:	6478      	str	r0, [r7, #68]	; 0x44
          }
    4746:	e0a4      	b.n	4892 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    4748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    474e:	2b00      	cmp	r3, #0
    4750:	d005      	beq.n	475e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55e>
    4752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4754:	1d1a      	adds	r2, r3, #4
    4756:	66ba      	str	r2, [r7, #104]	; 0x68
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	b2db      	uxtb	r3, r3
    475c:	e00e      	b.n	477c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4760:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4764:	2b00      	cmp	r3, #0
    4766:	d005      	beq.n	4774 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x574>
    4768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    476a:	1d1a      	adds	r2, r3, #4
    476c:	66ba      	str	r2, [r7, #104]	; 0x68
    476e:	681b      	ldr	r3, [r3, #0]
    4770:	b21b      	sxth	r3, r3
    4772:	e003      	b.n	477c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    4774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4776:	1d1a      	adds	r2, r3, #4
    4778:	66ba      	str	r2, [r7, #104]	; 0x68
    477a:	681b      	ldr	r3, [r3, #0]
    477c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    477e:	6a3b      	ldr	r3, [r7, #32]
    4780:	2b00      	cmp	r3, #0
    4782:	bfb8      	it	lt
    4784:	425b      	neglt	r3, r3
    4786:	4619      	mov	r1, r3
    4788:	6a3b      	ldr	r3, [r7, #32]
    478a:	0fdb      	lsrs	r3, r3, #31
    478c:	b2db      	uxtb	r3, r3
    478e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4790:	9205      	str	r2, [sp, #20]
    4792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4794:	9204      	str	r2, [sp, #16]
    4796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4798:	9203      	str	r2, [sp, #12]
    479a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    479c:	9202      	str	r2, [sp, #8]
    479e:	9301      	str	r3, [sp, #4]
    47a0:	9100      	str	r1, [sp, #0]
    47a2:	687b      	ldr	r3, [r7, #4]
    47a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    47a6:	68b9      	ldr	r1, [r7, #8]
    47a8:	68f8      	ldr	r0, [r7, #12]
    47aa:	f7ff fa2f 	bl	3c0c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    47ae:	6478      	str	r0, [r7, #68]	; 0x44
          }
    47b0:	e06f      	b.n	4892 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    47b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    47b8:	2b00      	cmp	r3, #0
    47ba:	d020      	beq.n	47fe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    47bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    47be:	3307      	adds	r3, #7
    47c0:	f023 0307 	bic.w	r3, r3, #7
    47c4:	f103 0208 	add.w	r2, r3, #8
    47c8:	66ba      	str	r2, [r7, #104]	; 0x68
    47ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    47ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
    47d0:	4608      	mov	r0, r1
    47d2:	f04f 0100 	mov.w	r1, #0
    47d6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    47d8:	9408      	str	r4, [sp, #32]
    47da:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    47dc:	9407      	str	r4, [sp, #28]
    47de:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    47e0:	9406      	str	r4, [sp, #24]
    47e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    47e6:	2100      	movs	r1, #0
    47e8:	9102      	str	r1, [sp, #8]
    47ea:	e9cd 2300 	strd	r2, r3, [sp]
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    47f2:	68b9      	ldr	r1, [r7, #8]
    47f4:	68f8      	ldr	r0, [r7, #12]
    47f6:	f7ff fa71 	bl	3cdc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    47fa:	6478      	str	r0, [r7, #68]	; 0x44
    47fc:	e049      	b.n	4892 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
#endif
          }
          else if (flags & FLAGS_LONG) {
    47fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4800:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4804:	2b00      	cmp	r3, #0
    4806:	d016      	beq.n	4836 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x636>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    4808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    480a:	1d1a      	adds	r2, r3, #4
    480c:	66ba      	str	r2, [r7, #104]	; 0x68
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4812:	9205      	str	r2, [sp, #20]
    4814:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4816:	9204      	str	r2, [sp, #16]
    4818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    481a:	9203      	str	r2, [sp, #12]
    481c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    481e:	9202      	str	r2, [sp, #8]
    4820:	2200      	movs	r2, #0
    4822:	9201      	str	r2, [sp, #4]
    4824:	9300      	str	r3, [sp, #0]
    4826:	687b      	ldr	r3, [r7, #4]
    4828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    482a:	68b9      	ldr	r1, [r7, #8]
    482c:	68f8      	ldr	r0, [r7, #12]
    482e:	f7ff f9ed 	bl	3c0c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4832:	6478      	str	r0, [r7, #68]	; 0x44
    4834:	e02d      	b.n	4892 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    4836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4838:	f003 0340 	and.w	r3, r3, #64	; 0x40
    483c:	2b00      	cmp	r3, #0
    483e:	d005      	beq.n	484c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64c>
    4840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4842:	1d1a      	adds	r2, r3, #4
    4844:	66ba      	str	r2, [r7, #104]	; 0x68
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	b2db      	uxtb	r3, r3
    484a:	e00e      	b.n	486a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    484c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4852:	2b00      	cmp	r3, #0
    4854:	d005      	beq.n	4862 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x662>
    4856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4858:	1d1a      	adds	r2, r3, #4
    485a:	66ba      	str	r2, [r7, #104]	; 0x68
    485c:	681b      	ldr	r3, [r3, #0]
    485e:	b29b      	uxth	r3, r3
    4860:	e003      	b.n	486a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    4862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4864:	1d1a      	adds	r2, r3, #4
    4866:	66ba      	str	r2, [r7, #104]	; 0x68
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    486c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    486e:	9305      	str	r3, [sp, #20]
    4870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4872:	9304      	str	r3, [sp, #16]
    4874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4876:	9303      	str	r3, [sp, #12]
    4878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    487a:	9302      	str	r3, [sp, #8]
    487c:	2300      	movs	r3, #0
    487e:	9301      	str	r3, [sp, #4]
    4880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4882:	9300      	str	r3, [sp, #0]
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4888:	68b9      	ldr	r1, [r7, #8]
    488a:	68f8      	ldr	r0, [r7, #12]
    488c:	f7ff f9be 	bl	3c0c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4890:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    4892:	683b      	ldr	r3, [r7, #0]
    4894:	3301      	adds	r3, #1
    4896:	603b      	str	r3, [r7, #0]
        break;
    4898:	e109      	b.n	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    489a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    489c:	3307      	adds	r3, #7
    489e:	f023 0307 	bic.w	r3, r3, #7
    48a2:	f103 0208 	add.w	r2, r3, #8
    48a6:	66ba      	str	r2, [r7, #104]	; 0x68
    48a8:	ed93 7b00 	vldr	d7, [r3]
    48ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48ae:	9302      	str	r3, [sp, #8]
    48b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    48b2:	9301      	str	r3, [sp, #4]
    48b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    48b6:	9300      	str	r3, [sp, #0]
    48b8:	eeb0 0a47 	vmov.f32	s0, s14
    48bc:	eef0 0a67 	vmov.f32	s1, s15
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    48c4:	68b9      	ldr	r1, [r7, #8]
    48c6:	68f8      	ldr	r0, [r7, #12]
    48c8:	f7ff fa78 	bl	3dbc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    48cc:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    48ce:	683b      	ldr	r3, [r7, #0]
    48d0:	3301      	adds	r3, #1
    48d2:	603b      	str	r3, [r7, #0]
        break;
    48d4:	e0eb      	b.n	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    48d6:	2301      	movs	r3, #1
    48d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    48da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    48dc:	f003 0302 	and.w	r3, r3, #2
    48e0:	2b00      	cmp	r3, #0
    48e2:	d113      	bne.n	490c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
          while (l++ < width) {
    48e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    48e6:	1c5a      	adds	r2, r3, #1
    48e8:	63fa      	str	r2, [r7, #60]	; 0x3c
    48ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    48ec:	429a      	cmp	r2, r3
    48ee:	bf8c      	ite	hi
    48f0:	2301      	movhi	r3, #1
    48f2:	2300      	movls	r3, #0
    48f4:	b2db      	uxtb	r3, r3
    48f6:	2b00      	cmp	r3, #0
    48f8:	d008      	beq.n	490c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
            out(' ', buffer, idx++, maxlen);
    48fa:	68fc      	ldr	r4, [r7, #12]
    48fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    48fe:	1c53      	adds	r3, r2, #1
    4900:	647b      	str	r3, [r7, #68]	; 0x44
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	68b9      	ldr	r1, [r7, #8]
    4906:	2020      	movs	r0, #32
    4908:	47a0      	blx	r4
          while (l++ < width) {
    490a:	e7eb      	b.n	48e4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    490c:	68fc      	ldr	r4, [r7, #12]
    490e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4910:	1d1a      	adds	r2, r3, #4
    4912:	66ba      	str	r2, [r7, #104]	; 0x68
    4914:	681b      	ldr	r3, [r3, #0]
    4916:	b2d8      	uxtb	r0, r3
    4918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    491a:	1c53      	adds	r3, r2, #1
    491c:	647b      	str	r3, [r7, #68]	; 0x44
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	68b9      	ldr	r1, [r7, #8]
    4922:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    4924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4926:	f003 0302 	and.w	r3, r3, #2
    492a:	2b00      	cmp	r3, #0
    492c:	d013      	beq.n	4956 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
          while (l++ < width) {
    492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4930:	1c5a      	adds	r2, r3, #1
    4932:	63fa      	str	r2, [r7, #60]	; 0x3c
    4934:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4936:	429a      	cmp	r2, r3
    4938:	bf8c      	ite	hi
    493a:	2301      	movhi	r3, #1
    493c:	2300      	movls	r3, #0
    493e:	b2db      	uxtb	r3, r3
    4940:	2b00      	cmp	r3, #0
    4942:	d008      	beq.n	4956 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
            out(' ', buffer, idx++, maxlen);
    4944:	68fc      	ldr	r4, [r7, #12]
    4946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4948:	1c53      	adds	r3, r2, #1
    494a:	647b      	str	r3, [r7, #68]	; 0x44
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	68b9      	ldr	r1, [r7, #8]
    4950:	2020      	movs	r0, #32
    4952:	47a0      	blx	r4
          while (l++ < width) {
    4954:	e7eb      	b.n	492e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72e>
          }
        }
        format++;
    4956:	683b      	ldr	r3, [r7, #0]
    4958:	3301      	adds	r3, #1
    495a:	603b      	str	r3, [r7, #0]
        break;
    495c:	e0a7      	b.n	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    495e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4960:	1d1a      	adds	r2, r3, #4
    4962:	66ba      	str	r2, [r7, #104]	; 0x68
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    4968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    496a:	f7fe ffdf 	bl	392c <_strlen(char const*)>
    496e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    4970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4976:	2b00      	cmp	r3, #0
    4978:	d007      	beq.n	498a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x78a>
          l = (l < precision ? l : precision);
    497a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    497e:	429a      	cmp	r2, r3
    4980:	d201      	bcs.n	4986 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    4982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4984:	e000      	b.n	4988 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
    4986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4988:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    498a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    498c:	f003 0302 	and.w	r3, r3, #2
    4990:	2b00      	cmp	r3, #0
    4992:	d113      	bne.n	49bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
          while (l++ < width) {
    4994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4996:	1c5a      	adds	r2, r3, #1
    4998:	637a      	str	r2, [r7, #52]	; 0x34
    499a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    499c:	429a      	cmp	r2, r3
    499e:	bf8c      	ite	hi
    49a0:	2301      	movhi	r3, #1
    49a2:	2300      	movls	r3, #0
    49a4:	b2db      	uxtb	r3, r3
    49a6:	2b00      	cmp	r3, #0
    49a8:	d008      	beq.n	49bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
            out(' ', buffer, idx++, maxlen);
    49aa:	68fc      	ldr	r4, [r7, #12]
    49ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    49ae:	1c53      	adds	r3, r2, #1
    49b0:	647b      	str	r3, [r7, #68]	; 0x44
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	68b9      	ldr	r1, [r7, #8]
    49b6:	2020      	movs	r0, #32
    49b8:	47a0      	blx	r4
          while (l++ < width) {
    49ba:	e7eb      	b.n	4994 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    49bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	2b00      	cmp	r3, #0
    49c2:	d00b      	beq.n	49dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    49c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    49c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    49ca:	2b00      	cmp	r3, #0
    49cc:	d004      	beq.n	49d8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d8>
    49ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    49d0:	1e5a      	subs	r2, r3, #1
    49d2:	64fa      	str	r2, [r7, #76]	; 0x4c
    49d4:	2b00      	cmp	r3, #0
    49d6:	d001      	beq.n	49dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    49d8:	2301      	movs	r3, #1
    49da:	e000      	b.n	49de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7de>
    49dc:	2300      	movs	r3, #0
    49de:	2b00      	cmp	r3, #0
    49e0:	d00b      	beq.n	49fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7fa>
          out(*(p++), buffer, idx++, maxlen);
    49e2:	68fc      	ldr	r4, [r7, #12]
    49e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    49e6:	1c5a      	adds	r2, r3, #1
    49e8:	63ba      	str	r2, [r7, #56]	; 0x38
    49ea:	7818      	ldrb	r0, [r3, #0]
    49ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    49ee:	1c53      	adds	r3, r2, #1
    49f0:	647b      	str	r3, [r7, #68]	; 0x44
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	68b9      	ldr	r1, [r7, #8]
    49f6:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    49f8:	e7e0      	b.n	49bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    49fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    49fc:	f003 0302 	and.w	r3, r3, #2
    4a00:	2b00      	cmp	r3, #0
    4a02:	d013      	beq.n	4a2c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
          while (l++ < width) {
    4a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a06:	1c5a      	adds	r2, r3, #1
    4a08:	637a      	str	r2, [r7, #52]	; 0x34
    4a0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4a0c:	429a      	cmp	r2, r3
    4a0e:	bf8c      	ite	hi
    4a10:	2301      	movhi	r3, #1
    4a12:	2300      	movls	r3, #0
    4a14:	b2db      	uxtb	r3, r3
    4a16:	2b00      	cmp	r3, #0
    4a18:	d008      	beq.n	4a2c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
            out(' ', buffer, idx++, maxlen);
    4a1a:	68fc      	ldr	r4, [r7, #12]
    4a1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a1e:	1c53      	adds	r3, r2, #1
    4a20:	647b      	str	r3, [r7, #68]	; 0x44
    4a22:	687b      	ldr	r3, [r7, #4]
    4a24:	68b9      	ldr	r1, [r7, #8]
    4a26:	2020      	movs	r0, #32
    4a28:	47a0      	blx	r4
          while (l++ < width) {
    4a2a:	e7eb      	b.n	4a04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x804>
          }
        }
        format++;
    4a2c:	683b      	ldr	r3, [r7, #0]
    4a2e:	3301      	adds	r3, #1
    4a30:	603b      	str	r3, [r7, #0]
        break;
    4a32:	e03c      	b.n	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4a34:	2308      	movs	r3, #8
    4a36:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    4a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a3a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    4a3e:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    4a40:	2300      	movs	r3, #0
    4a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4a48:	1d1a      	adds	r2, r3, #4
    4a4a:	66ba      	str	r2, [r7, #104]	; 0x68
    4a4c:	681b      	ldr	r3, [r3, #0]
    4a4e:	461a      	mov	r2, r3
    4a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4a52:	9305      	str	r3, [sp, #20]
    4a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4a56:	9304      	str	r3, [sp, #16]
    4a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4a5a:	9303      	str	r3, [sp, #12]
    4a5c:	2310      	movs	r3, #16
    4a5e:	9302      	str	r3, [sp, #8]
    4a60:	2300      	movs	r3, #0
    4a62:	9301      	str	r3, [sp, #4]
    4a64:	9200      	str	r2, [sp, #0]
    4a66:	687b      	ldr	r3, [r7, #4]
    4a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a6a:	68b9      	ldr	r1, [r7, #8]
    4a6c:	68f8      	ldr	r0, [r7, #12]
    4a6e:	f7ff f8cd 	bl	3c0c <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    4a72:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    4a74:	683b      	ldr	r3, [r7, #0]
    4a76:	3301      	adds	r3, #1
    4a78:	603b      	str	r3, [r7, #0]
        break;
    4a7a:	e018      	b.n	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    4a7c:	68fc      	ldr	r4, [r7, #12]
    4a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a80:	1c53      	adds	r3, r2, #1
    4a82:	647b      	str	r3, [r7, #68]	; 0x44
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	68b9      	ldr	r1, [r7, #8]
    4a88:	2025      	movs	r0, #37	; 0x25
    4a8a:	47a0      	blx	r4
        format++;
    4a8c:	683b      	ldr	r3, [r7, #0]
    4a8e:	3301      	adds	r3, #1
    4a90:	603b      	str	r3, [r7, #0]
        break;
    4a92:	e00c      	b.n	4aae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>

      default :
        out(*format, buffer, idx++, maxlen);
    4a94:	68fc      	ldr	r4, [r7, #12]
    4a96:	683b      	ldr	r3, [r7, #0]
    4a98:	7818      	ldrb	r0, [r3, #0]
    4a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4a9c:	1c53      	adds	r3, r2, #1
    4a9e:	647b      	str	r3, [r7, #68]	; 0x44
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	68b9      	ldr	r1, [r7, #8]
    4aa4:	47a0      	blx	r4
        format++;
    4aa6:	683b      	ldr	r3, [r7, #0]
    4aa8:	3301      	adds	r3, #1
    4aaa:	603b      	str	r3, [r7, #0]
        break;
    4aac:	bf00      	nop
  while (*format)
    4aae:	f7ff bbb5 	b.w	421c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    4ab2:	68fc      	ldr	r4, [r7, #12]
    4ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	429a      	cmp	r2, r3
    4aba:	d302      	bcc.n	4ac2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c2>
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	1e5a      	subs	r2, r3, #1
    4ac0:	e000      	b.n	4ac4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c4>
    4ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	68b9      	ldr	r1, [r7, #8]
    4ac8:	2000      	movs	r0, #0
    4aca:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    4acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    4ace:	4618      	mov	r0, r3
    4ad0:	3758      	adds	r7, #88	; 0x58
    4ad2:	46bd      	mov	sp, r7
    4ad4:	bdb0      	pop	{r4, r5, r7, pc}
    4ad6:	bf00      	nop

00004ad8 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    4ad8:	b40f      	push	{r0, r1, r2, r3}
    4ada:	b580      	push	{r7, lr}
    4adc:	b0c4      	sub	sp, #272	; 0x110
    4ade:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    4ae0:	f507 738a 	add.w	r3, r7, #276	; 0x114
    4ae4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    4ae8:	4639      	mov	r1, r7
    4aea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    4aee:	9300      	str	r3, [sp, #0]
    4af0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    4af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4af8:	4807      	ldr	r0, [pc, #28]	; (4b18 <printf+0x40>)
    4afa:	f7ff fb81 	bl	4200 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4afe:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    4b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    4b06:	4618      	mov	r0, r3
    4b08:	f507 7784 	add.w	r7, r7, #264	; 0x108
    4b0c:	46bd      	mov	sp, r7
    4b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    4b12:	b004      	add	sp, #16
    4b14:	4770      	bx	lr
    4b16:	bf00      	nop
    4b18:	0000389f 	.word	0x0000389f

00004b1c <vsnprintf>:
  return ret;
}


int vsnprintf(char* buffer, size_t count, const char* format, va_list va)
{
    4b1c:	b580      	push	{r7, lr}
    4b1e:	b086      	sub	sp, #24
    4b20:	af02      	add	r7, sp, #8
    4b22:	60f8      	str	r0, [r7, #12]
    4b24:	60b9      	str	r1, [r7, #8]
    4b26:	607a      	str	r2, [r7, #4]
    4b28:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    4b2a:	683b      	ldr	r3, [r7, #0]
    4b2c:	9300      	str	r3, [sp, #0]
    4b2e:	687b      	ldr	r3, [r7, #4]
    4b30:	68ba      	ldr	r2, [r7, #8]
    4b32:	68f9      	ldr	r1, [r7, #12]
    4b34:	4803      	ldr	r0, [pc, #12]	; (4b44 <vsnprintf+0x28>)
    4b36:	f7ff fb63 	bl	4200 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4b3a:	4603      	mov	r3, r0
}
    4b3c:	4618      	mov	r0, r3
    4b3e:	3710      	adds	r7, #16
    4b40:	46bd      	mov	sp, r7
    4b42:	bd80      	pop	{r7, pc}
    4b44:	00003871 	.word	0x00003871

00004b48 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    4b48:	b480      	push	{r7}
    4b4a:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    4b4c:	bf00      	nop
    4b4e:	46bd      	mov	sp, r7
    4b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b54:	4770      	bx	lr

00004b56 <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    4b56:	b580      	push	{r7, lr}
    4b58:	b082      	sub	sp, #8
    4b5a:	af00      	add	r7, sp, #0
    4b5c:	6078      	str	r0, [r7, #4]
    4b5e:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    4b60:	6839      	ldr	r1, [r7, #0]
    4b62:	6878      	ldr	r0, [r7, #4]
    4b64:	f000 f806 	bl	4b74 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    4b68:	4603      	mov	r3, r0
    4b6a:	bf00      	nop
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    4b6c:	4618      	mov	r0, r3
    4b6e:	3708      	adds	r7, #8
    4b70:	46bd      	mov	sp, r7
    4b72:	bd80      	pop	{r7, pc}

00004b74 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    4b74:	b5b0      	push	{r4, r5, r7, lr}
    4b76:	b08c      	sub	sp, #48	; 0x30
    4b78:	af00      	add	r7, sp, #0
    4b7a:	6078      	str	r0, [r7, #4]
    4b7c:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    4b7e:	4b2c      	ldr	r3, [pc, #176]	; (4c30 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xbc>)
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	f003 0301 	and.w	r3, r3, #1
    4b86:	2b00      	cmp	r3, #0
    4b88:	bf0c      	ite	eq
    4b8a:	2301      	moveq	r3, #1
    4b8c:	2300      	movne	r3, #0
    4b8e:	b2db      	uxtb	r3, r3
    4b90:	2b00      	cmp	r3, #0
    4b92:	d001      	beq.n	4b98 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    4b94:	683b      	ldr	r3, [r7, #0]
    4b96:	e047      	b.n	4c28 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    4b98:	4b26      	ldr	r3, [pc, #152]	; (4c34 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d11d      	bne.n	4bdc <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    4ba0:	4b25      	ldr	r3, [pc, #148]	; (4c38 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    4ba2:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    4ba4:	2304      	movs	r3, #4
    4ba6:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    4ba8:	2303      	movs	r3, #3
    4baa:	613b      	str	r3, [r7, #16]
    4bac:	2301      	movs	r3, #1
    4bae:	62bb      	str	r3, [r7, #40]	; 0x28
    4bb0:	f107 0308 	add.w	r3, r7, #8
    4bb4:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    4bb6:	6abc      	ldr	r4, [r7, #40]	; 0x28
    4bb8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    4bba:	4620      	mov	r0, r4
    4bbc:	4629      	mov	r1, r5
    4bbe:	beab      	bkpt	0x00ab
    4bc0:	4604      	mov	r4, r0
    4bc2:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    4bc4:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    4bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    4bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4bce:	d102      	bne.n	4bd6 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    4bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bd4:	e028      	b.n	4c28 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

      handle = ret;
    4bd6:	4a17      	ldr	r2, [pc, #92]	; (4c34 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bda:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    4bdc:	4b15      	ldr	r3, [pc, #84]	; (4c34 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    4be6:	683b      	ldr	r3, [r7, #0]
    4be8:	613b      	str	r3, [r7, #16]
    4bea:	2305      	movs	r3, #5
    4bec:	61fb      	str	r3, [r7, #28]
    4bee:	f107 0308 	add.w	r3, r7, #8
    4bf2:	61bb      	str	r3, [r7, #24]
  );
    4bf4:	69fc      	ldr	r4, [r7, #28]
    4bf6:	69bd      	ldr	r5, [r7, #24]
    4bf8:	4620      	mov	r0, r4
    4bfa:	4629      	mov	r1, r5
    4bfc:	beab      	bkpt	0x00ab
    4bfe:	4604      	mov	r4, r0
    4c00:	617c      	str	r4, [r7, #20]
  return value;
    4c02:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    4c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    4c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4c0c:	d102      	bne.n	4c14 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    4c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c12:	e009      	b.n	4c28 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    4c14:	683b      	ldr	r3, [r7, #0]
    4c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4c18:	429a      	cmp	r2, r3
    4c1a:	d102      	bne.n	4c22 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xae>
    return -1;
    4c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c20:	e002      	b.n	4c28 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    4c22:	683a      	ldr	r2, [r7, #0]
    4c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c26:	1ad3      	subs	r3, r2, r3
}
    4c28:	4618      	mov	r0, r3
    4c2a:	3730      	adds	r7, #48	; 0x30
    4c2c:	46bd      	mov	sp, r7
    4c2e:	bdb0      	pop	{r4, r5, r7, pc}
    4c30:	e000edf0 	.word	0xe000edf0
    4c34:	10001334 	.word	0x10001334
    4c38:	0000905c 	.word	0x0000905c

00004c3c <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    4c3c:	b480      	push	{r7}
    4c3e:	b083      	sub	sp, #12
    4c40:	af00      	add	r7, sp, #0
    4c42:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    4c44:	4b0c      	ldr	r3, [pc, #48]	; (4c78 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	68da      	ldr	r2, [r3, #12]
    4c4a:	4b0b      	ldr	r3, [pc, #44]	; (4c78 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4c4c:	681b      	ldr	r3, [r3, #0]
    4c4e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4c52:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    4c54:	4b09      	ldr	r3, [pc, #36]	; (4c7c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	2200      	movs	r2, #0
    4c5a:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    4c5c:	4b07      	ldr	r3, [pc, #28]	; (4c7c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	4b06      	ldr	r3, [pc, #24]	; (4c7c <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4c64:	681b      	ldr	r3, [r3, #0]
    4c66:	f042 0201 	orr.w	r2, r2, #1
    4c6a:	601a      	str	r2, [r3, #0]
  }
    4c6c:	bf00      	nop
    4c6e:	370c      	adds	r7, #12
    4c70:	46bd      	mov	sp, r7
    4c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c76:	4770      	bx	lr
    4c78:	10000c1c 	.word	0x10000c1c
    4c7c:	10000c18 	.word	0x10000c18

00004c80 <sjsu::cortex::DwtCounter::GetCount()>:

  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    4c80:	b480      	push	{r7}
    4c82:	b083      	sub	sp, #12
    4c84:	af00      	add	r7, sp, #0
    4c86:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    4c88:	4b04      	ldr	r3, [pc, #16]	; (4c9c <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    4c8a:	681b      	ldr	r3, [r3, #0]
    4c8c:	685b      	ldr	r3, [r3, #4]
  }
    4c8e:	4618      	mov	r0, r3
    4c90:	370c      	adds	r7, #12
    4c92:	46bd      	mov	sp, r7
    4c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c98:	4770      	bx	lr
    4c9a:	bf00      	nop
    4c9c:	10000c18 	.word	0x10000c18

00004ca0 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    4ca0:	b480      	push	{r7}
    4ca2:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    4ca4:	f8df 001c 	ldr.w	r0, [pc, #28]	; 4cc4 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    4ca8:	6801      	ldr	r1, [r0, #0]
    4caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4cae:	6001      	str	r1, [r0, #0]
    4cb0:	f3bf 8f4f 	dsb	sy
    4cb4:	f3bf 8f6f 	isb	sy
  }
}
    4cb8:	bf00      	nop
    4cba:	46bd      	mov	sp, r7
    4cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc0:	4770      	bx	lr
    4cc2:	0000      	.short	0x0000
    4cc4:	e000ed88 	.word	0xe000ed88

00004cc8 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>:
  static void SetPlatformController(InterruptController * interrupt_controller)
    4cc8:	b480      	push	{r7}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
    platform_interrupt_controller = interrupt_controller;
    4cd0:	4a04      	ldr	r2, [pc, #16]	; (4ce4 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)+0x1c>)
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	6013      	str	r3, [r2, #0]
  }
    4cd6:	bf00      	nop
    4cd8:	370c      	adds	r7, #12
    4cda:	46bd      	mov	sp, r7
    4cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ce0:	4770      	bx	lr
    4ce2:	bf00      	nop
    4ce4:	10000d1c 	.word	0x10000d1c

00004ce8 <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    4ce8:	b580      	push	{r7, lr}
    4cea:	b084      	sub	sp, #16
    4cec:	af00      	add	r7, sp, #0
    4cee:	e9c7 0100 	strd	r0, r1, [r7]
    4cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
    4cf6:	f002 f8ad 	bl	6e54 <__aeabi_ul2f>
    4cfa:	4602      	mov	r2, r0
    4cfc:	f107 030c 	add.w	r3, r7, #12
    4d00:	ee00 2a10 	vmov	s0, r2
    4d04:	4618      	mov	r0, r3
    4d06:	f7fb fd1a 	bl	73e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4d0a:	68fb      	ldr	r3, [r7, #12]
    4d0c:	4618      	mov	r0, r3
    4d0e:	3710      	adds	r7, #16
    4d10:	46bd      	mov	sp, r7
    4d12:	bd80      	pop	{r7, pc}

00004d14 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4d14:	b580      	push	{r7, lr}
    4d16:	b086      	sub	sp, #24
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4d1c:	6878      	ldr	r0, [r7, #4]
    4d1e:	f000 f807 	bl	4d30 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4d22:	eef0 7a40 	vmov.f32	s15, s0
	}
    4d26:	eeb0 0a67 	vmov.f32	s0, s15
    4d2a:	3718      	adds	r7, #24
    4d2c:	46bd      	mov	sp, r7
    4d2e:	bd80      	pop	{r7, pc}

00004d30 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4d30:	b480      	push	{r7}
    4d32:	b085      	sub	sp, #20
    4d34:	af00      	add	r7, sp, #0
    4d36:	60f8      	str	r0, [r7, #12]
    4d38:	7239      	strb	r1, [r7, #8]
    4d3a:	713a      	strb	r2, [r7, #4]
    4d3c:	703b      	strb	r3, [r7, #0]
			return value;
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	ee07 3a90 	vmov	s15, r3
		}
    4d46:	eeb0 0a67 	vmov.f32	s0, s15
    4d4a:	3714      	adds	r7, #20
    4d4c:	46bd      	mov	sp, r7
    4d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d52:	4770      	bx	lr

00004d54 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4d54:	b580      	push	{r7, lr}
    4d56:	b086      	sub	sp, #24
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4d5c:	6878      	ldr	r0, [r7, #4]
    4d5e:	f000 f807 	bl	4d70 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4d62:	eef0 7a40 	vmov.f32	s15, s0
	}
    4d66:	eeb0 0a67 	vmov.f32	s0, s15
    4d6a:	3718      	adds	r7, #24
    4d6c:	46bd      	mov	sp, r7
    4d6e:	bd80      	pop	{r7, pc}

00004d70 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4d70:	b480      	push	{r7}
    4d72:	b085      	sub	sp, #20
    4d74:	af00      	add	r7, sp, #0
    4d76:	60f8      	str	r0, [r7, #12]
    4d78:	7239      	strb	r1, [r7, #8]
    4d7a:	713a      	strb	r2, [r7, #4]
    4d7c:	703b      	strb	r3, [r7, #0]
			return value;
    4d7e:	68fb      	ldr	r3, [r7, #12]
    4d80:	681b      	ldr	r3, [r3, #0]
    4d82:	ee07 3a90 	vmov	s15, r3
		}
    4d86:	eeb0 0a67 	vmov.f32	s0, s15
    4d8a:	3714      	adds	r7, #20
    4d8c:	46bd      	mov	sp, r7
    4d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d92:	4770      	bx	lr

00004d94 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4d94:	b580      	push	{r7, lr}
    4d96:	ed2d 8b02 	vpush	{d8}
    4d9a:	b082      	sub	sp, #8
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
    4da0:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	ed93 8a00 	vldr	s16, [r3]
    4da8:	683b      	ldr	r3, [r7, #0]
    4daa:	4618      	mov	r0, r3
    4dac:	f7ff ffd2 	bl	4d54 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4db0:	eef0 7a40 	vmov.f32	s15, s0
    4db4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dbc:	bf94      	ite	ls
    4dbe:	2301      	movls	r3, #1
    4dc0:	2300      	movhi	r3, #0
    4dc2:	b2db      	uxtb	r3, r3
		}
    4dc4:	4618      	mov	r0, r3
    4dc6:	3708      	adds	r7, #8
    4dc8:	46bd      	mov	sp, r7
    4dca:	ecbd 8b02 	vpop	{d8}
    4dce:	bd80      	pop	{r7, pc}

00004dd0 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>:
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b082      	sub	sp, #8
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    4dd8:	6879      	ldr	r1, [r7, #4]
    4dda:	4803      	ldr	r0, [pc, #12]	; (4de8 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)+0x18>)
    4ddc:	f001 f9d0 	bl	6180 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
}
    4de0:	bf00      	nop
    4de2:	3708      	adds	r7, #8
    4de4:	46bd      	mov	sp, r7
    4de6:	bd80      	pop	{r7, pc}
    4de8:	10000d30 	.word	0x10000d30

00004dec <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>:
  static void SetPlatformController(SystemController * system_controller)
    4dec:	b480      	push	{r7}
    4dee:	b083      	sub	sp, #12
    4df0:	af00      	add	r7, sp, #0
    4df2:	6078      	str	r0, [r7, #4]
    platform_system_controller = system_controller;
    4df4:	4a04      	ldr	r2, [pc, #16]	; (4e08 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)+0x1c>)
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	6013      	str	r3, [r2, #0]
  }
    4dfa:	bf00      	nop
    4dfc:	370c      	adds	r7, #12
    4dfe:	46bd      	mov	sp, r7
    4e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e04:	4770      	bx	lr
    4e06:	bf00      	nop
    4e08:	10000d24 	.word	0x10000d24

00004e0c <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }

  /// System timer interrupt handler.
  static void SystemTimerHandler()
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b084      	sub	sp, #16
    4e10:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    millisecond_count += 1ms;
    4e12:	f107 0308 	add.w	r3, r7, #8
    4e16:	4618      	mov	r0, r3
    4e18:	f001 f9db 	bl	61d2 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    4e1c:	f107 0208 	add.w	r2, r7, #8
    4e20:	463b      	mov	r3, r7
    4e22:	4611      	mov	r1, r2
    4e24:	4618      	mov	r0, r3
    4e26:	f7fd fafa 	bl	241e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    4e2a:	463b      	mov	r3, r7
    4e2c:	4619      	mov	r1, r3
    4e2e:	4808      	ldr	r0, [pc, #32]	; (4e50 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4e30:	f7fb fd1d 	bl	86e <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    if (callback)
    4e34:	4807      	ldr	r0, [pc, #28]	; (4e54 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4e36:	f7fd ffab 	bl	2d90 <std::function<void ()>::operator bool() const>
    4e3a:	4603      	mov	r3, r0
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d002      	beq.n	4e46 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x3a>
    {
      callback();
    4e40:	4804      	ldr	r0, [pc, #16]	; (4e54 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4e42:	f7fd fa3b 	bl	22bc <std::function<void ()>::operator()() const>
    }
  }
    4e46:	bf00      	nop
    4e48:	3710      	adds	r7, #16
    4e4a:	46bd      	mov	sp, r7
    4e4c:	bd80      	pop	{r7, pc}
    4e4e:	bf00      	nop
    4e50:	10001348 	.word	0x10001348
    4e54:	10001338 	.word	0x10001338

00004e58 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
    4e58:	b580      	push	{r7, lr}
    4e5a:	b084      	sub	sp, #16
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	60f8      	str	r0, [r7, #12]
    4e60:	60b9      	str	r1, [r7, #8]
    4e62:	607a      	str	r2, [r7, #4]
      { return __d * __s; }
    4e64:	68fb      	ldr	r3, [r7, #12]
    4e66:	68ba      	ldr	r2, [r7, #8]
    4e68:	6879      	ldr	r1, [r7, #4]
    4e6a:	4618      	mov	r0, r3
    4e6c:	f000 f805 	bl	4e7a <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4e70:	bf00      	nop
    4e72:	68f8      	ldr	r0, [r7, #12]
    4e74:	3710      	adds	r7, #16
    4e76:	46bd      	mov	sp, r7
    4e78:	bd80      	pop	{r7, pc}

00004e7a <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4e7a:	b5b0      	push	{r4, r5, r7, lr}
    4e7c:	b088      	sub	sp, #32
    4e7e:	af00      	add	r7, sp, #0
    4e80:	60f8      	str	r0, [r7, #12]
    4e82:	60b9      	str	r1, [r7, #8]
    4e84:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() * __s);
    4e86:	68bb      	ldr	r3, [r7, #8]
    4e88:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4e90:	f107 0318 	add.w	r3, r7, #24
    4e94:	4618      	mov	r0, r3
    4e96:	f7fb fbd3 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	461a      	mov	r2, r3
    4ea0:	f04f 0300 	mov.w	r3, #0
    4ea4:	fb02 f501 	mul.w	r5, r2, r1
    4ea8:	fb00 f403 	mul.w	r4, r0, r3
    4eac:	442c      	add	r4, r5
    4eae:	fba0 2302 	umull	r2, r3, r0, r2
    4eb2:	18e1      	adds	r1, r4, r3
    4eb4:	460b      	mov	r3, r1
    4eb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4eba:	f107 0310 	add.w	r3, r7, #16
    4ebe:	4619      	mov	r1, r3
    4ec0:	68f8      	ldr	r0, [r7, #12]
    4ec2:	f7fb fbf3 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4ec6:	68f8      	ldr	r0, [r7, #12]
    4ec8:	3720      	adds	r7, #32
    4eca:	46bd      	mov	sp, r7
    4ecc:	bdb0      	pop	{r4, r5, r7, pc}

00004ece <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    4ece:	b580      	push	{r7, lr}
    4ed0:	b088      	sub	sp, #32
    4ed2:	af00      	add	r7, sp, #0
    4ed4:	60f8      	str	r0, [r7, #12]
    4ed6:	60b9      	str	r1, [r7, #8]
    4ed8:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() / __s);
    4eda:	68bb      	ldr	r3, [r7, #8]
    4edc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ee0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4ee4:	f107 0318 	add.w	r3, r7, #24
    4ee8:	4618      	mov	r0, r3
    4eea:	f7fb fba9 	bl	640 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    4eee:	687b      	ldr	r3, [r7, #4]
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	461a      	mov	r2, r3
    4ef4:	f04f 0300 	mov.w	r3, #0
    4ef8:	f001 fff2 	bl	6ee0 <__aeabi_ldivmod>
    4efc:	4602      	mov	r2, r0
    4efe:	460b      	mov	r3, r1
    4f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4f04:	f107 0310 	add.w	r3, r7, #16
    4f08:	4619      	mov	r1, r3
    4f0a:	68f8      	ldr	r0, [r7, #12]
    4f0c:	f7fb fbce 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4f10:	68f8      	ldr	r0, [r7, #12]
    4f12:	3720      	adds	r7, #32
    4f14:	46bd      	mov	sp, r7
    4f16:	bd80      	pop	{r7, pc}

00004f18 <sjsu::cortex::SystemTimer::GetCount()>:

  /// @return returns the current system_timer counter value.
  static std::chrono::nanoseconds GetCount()
    4f18:	b580      	push	{r7, lr}
    4f1a:	b08c      	sub	sp, #48	; 0x30
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	6078      	str	r0, [r7, #4]
  {
    // Capture all count variables at this instant.
    uint32_t high_speed_ticks = dwt_counter.GetCount();
    4f20:	4816      	ldr	r0, [pc, #88]	; (4f7c <sjsu::cortex::SystemTimer::GetCount()+0x64>)
    4f22:	f7ff fead 	bl	4c80 <sjsu::cortex::DwtCounter::GetCount()>
    4f26:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto current_millis_count = millisecond_count;
    4f28:	4b15      	ldr	r3, [pc, #84]	; (4f80 <sjsu::cortex::SystemTimer::GetCount()+0x68>)
    4f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f2e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Get rid of the portion of the dwt tick count that is above 1ms.
    // We only want the information about the ticks that is below 1ms, since we
    // get the 1ms count from the SysTick timer interrupt.
    uint32_t sub_millis_ticks = (high_speed_ticks % ticks_per_millisecond);
    4f32:	4b14      	ldr	r3, [pc, #80]	; (4f84 <sjsu::cortex::SystemTimer::GetCount()+0x6c>)
    4f34:	681a      	ldr	r2, [r3, #0]
    4f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4f38:	fbb3 f1f2 	udiv	r1, r3, r2
    4f3c:	fb02 f201 	mul.w	r2, r2, r1
    4f40:	1a9b      	subs	r3, r3, r2
    4f42:	61fb      	str	r3, [r7, #28]
    // Perform the conversion from ticks to nanoseconds
    auto nanoseconds_unscaled = (sub_millis_ticks * nanoseconds_per_tick);
    4f44:	f107 0310 	add.w	r3, r7, #16
    4f48:	f107 011c 	add.w	r1, r7, #28
    4f4c:	4a0e      	ldr	r2, [pc, #56]	; (4f88 <sjsu::cortex::SystemTimer::GetCount()+0x70>)
    4f4e:	4618      	mov	r0, r3
    4f50:	f7ff ff82 	bl	4e58 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    // Nanoseconds per tick is actually scaled up by the kFixedPointScaling
    // factor, meaning it needs to be divided by that value to get the correct
    // nanosecond_uptime.
    auto nanoseconds_uptime_scaled = nanoseconds_unscaled / kFixedPointScaling;
    4f54:	f107 0308 	add.w	r3, r7, #8
    4f58:	f107 0110 	add.w	r1, r7, #16
    4f5c:	4a0b      	ldr	r2, [pc, #44]	; (4f8c <sjsu::cortex::SystemTimer::GetCount()+0x74>)
    4f5e:	4618      	mov	r0, r3
    4f60:	f7ff ffb5 	bl	4ece <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>

    // Result is simply the uptime milliseconds (represented in nanoseconds) +
    // the added nanoseconds
    return current_millis_count + nanoseconds_uptime_scaled;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	f107 0208 	add.w	r2, r7, #8
    4f6a:	f107 0120 	add.w	r1, r7, #32
    4f6e:	4618      	mov	r0, r3
    4f70:	f7fd f902 	bl	2178 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  }
    4f74:	6878      	ldr	r0, [r7, #4]
    4f76:	3730      	adds	r7, #48	; 0x30
    4f78:	46bd      	mov	sp, r7
    4f7a:	bd80      	pop	{r7, pc}
    4f7c:	10001350 	.word	0x10001350
    4f80:	10001348 	.word	0x10001348
    4f84:	10000c30 	.word	0x10000c30
    4f88:	10000c28 	.word	0x10000c28
    4f8c:	000097a8 	.word	0x000097a8

00004f90 <sjsu::cortex::SystemTimer::Initialize() const>:
  /// Constructor for ARM Cortex M system timer.
  ///
  /// @param priority - the interrupt priority of
  explicit constexpr SystemTimer(uint8_t priority = -1) : priority_(priority) {}

  void Initialize() const override
    4f90:	b590      	push	{r4, r7, lr}
    4f92:	b08b      	sub	sp, #44	; 0x2c
    4f94:	af00      	add	r7, sp, #0
    4f96:	60f8      	str	r0, [r7, #12]
  {
    dwt_counter.Initialize();
    4f98:	481c      	ldr	r0, [pc, #112]	; (500c <sjsu::cortex::SystemTimer::Initialize() const+0x7c>)
    4f9a:	f7ff fe4f 	bl	4c3c <sjsu::cortex::DwtCounter::Initialize()>

    auto system_frequency = SystemController::GetPlatformController()
    4f9e:	f7fb fc11 	bl	7c4 <sjsu::SystemController::GetPlatformController()>
    4fa2:	4603      	mov	r3, r0
                                .GetSystemFrequency()
    4fa4:	681a      	ldr	r2, [r3, #0]
    4fa6:	320c      	adds	r2, #12
    4fa8:	6812      	ldr	r2, [r2, #0]
    4faa:	4618      	mov	r0, r3
    4fac:	4790      	blx	r2
    4fae:	4603      	mov	r3, r0
    4fb0:	617b      	str	r3, [r7, #20]
                                .to<uint32_t>();
    4fb2:	f107 0314 	add.w	r3, r7, #20
    4fb6:	4618      	mov	r0, r3
    4fb8:	f001 f918 	bl	61ec <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4fbc:	4603      	mov	r3, r0
    4fbe:	613b      	str	r3, [r7, #16]

    ticks_per_millisecond = system_frequency / 1000 /* ms/s */;
    4fc0:	693b      	ldr	r3, [r7, #16]
    4fc2:	4a13      	ldr	r2, [pc, #76]	; (5010 <sjsu::cortex::SystemTimer::Initialize() const+0x80>)
    4fc4:	fba2 2303 	umull	r2, r3, r2, r3
    4fc8:	099b      	lsrs	r3, r3, #6
    4fca:	4a12      	ldr	r2, [pc, #72]	; (5014 <sjsu::cortex::SystemTimer::Initialize() const+0x84>)
    4fcc:	6013      	str	r3, [r2, #0]
    nanoseconds_per_tick =
        (kFixedPointScaling * 1'000'000'000ns) / system_frequency;
    4fce:	f107 0320 	add.w	r3, r7, #32
    4fd2:	4618      	mov	r0, r3
    4fd4:	f001 f916 	bl	6204 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    4fd8:	f107 0318 	add.w	r3, r7, #24
    4fdc:	f107 0220 	add.w	r2, r7, #32
    4fe0:	490d      	ldr	r1, [pc, #52]	; (5018 <sjsu::cortex::SystemTimer::Initialize() const+0x88>)
    4fe2:	4618      	mov	r0, r3
    4fe4:	f7ff ff38 	bl	4e58 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    4fe8:	4c0c      	ldr	r4, [pc, #48]	; (501c <sjsu::cortex::SystemTimer::Initialize() const+0x8c>)
    4fea:	463b      	mov	r3, r7
    4fec:	f107 0210 	add.w	r2, r7, #16
    4ff0:	f107 0118 	add.w	r1, r7, #24
    4ff4:	4618      	mov	r0, r3
    4ff6:	f7ff ff6a 	bl	4ece <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
    4ffe:	e9c4 2300 	strd	r2, r3, [r4]
  }
    5002:	bf00      	nop
    5004:	372c      	adds	r7, #44	; 0x2c
    5006:	46bd      	mov	sp, r7
    5008:	bd90      	pop	{r4, r7, pc}
    500a:	bf00      	nop
    500c:	10001350 	.word	0x10001350
    5010:	10624dd3 	.word	0x10624dd3
    5014:	10000c30 	.word	0x10000c30
    5018:	000097a8 	.word	0x000097a8
    501c:	10000c28 	.word	0x10000c28

00005020 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const>:

  void SetCallback(InterruptCallback isr) const override
    5020:	b580      	push	{r7, lr}
    5022:	b082      	sub	sp, #8
    5024:	af00      	add	r7, sp, #0
    5026:	6078      	str	r0, [r7, #4]
    5028:	6039      	str	r1, [r7, #0]
  {
    callback = isr;
    502a:	6839      	ldr	r1, [r7, #0]
    502c:	4803      	ldr	r0, [pc, #12]	; (503c <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const+0x1c>)
    502e:	f7fd f9c1 	bl	23b4 <std::function<void ()>::operator=(std::function<void ()> const&)>
  }
    5032:	bf00      	nop
    5034:	3708      	adds	r7, #8
    5036:	46bd      	mov	sp, r7
    5038:	bd80      	pop	{r7, pc}
    503a:	bf00      	nop
    503c:	10001338 	.word	0x10001338

00005040 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    5040:	b5b0      	push	{r4, r5, r7, lr}
    5042:	b08a      	sub	sp, #40	; 0x28
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    5048:	2304      	movs	r3, #4
    504a:	627b      	str	r3, [r7, #36]	; 0x24

    if (sys_tick->LOAD != 0)
    504c:	4b1d      	ldr	r3, [pc, #116]	; (50c4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	685b      	ldr	r3, [r3, #4]
    5052:	2b00      	cmp	r3, #0
    5054:	bf14      	ite	ne
    5056:	2301      	movne	r3, #1
    5058:	2300      	moveq	r3, #0
    505a:	b2db      	uxtb	r3, r3
    505c:	2b00      	cmp	r3, #0
    505e:	d02c      	beq.n	50ba <sjsu::cortex::SystemTimer::StartTimer() const+0x7a>
    {
      // The interrupt handler must be registered before you starting the timer
      // by setting the Enable counter flag in the CTRL register.
      // Otherwise, the handler may not be set by the time the first tick
      // interrupt occurs.
      sjsu::InterruptController::GetPlatformController().Enable({
    5060:	f7fb f9e4 	bl	42c <sjsu::InterruptController::GetPlatformController()>
    5064:	4604      	mov	r4, r0
          .interrupt_request_number = cortex::SysTick_IRQn,
          .interrupt_handler        = SystemTimerHandler,
          .priority                 = priority_,
      });
    5066:	6823      	ldr	r3, [r4, #0]
    5068:	3304      	adds	r3, #4
    506a:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
    506c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5070:	60bb      	str	r3, [r7, #8]
    5072:	f107 0308 	add.w	r3, r7, #8
    5076:	3304      	adds	r3, #4
    5078:	4913      	ldr	r1, [pc, #76]	; (50c8 <sjsu::cortex::SystemTimer::StartTimer() const+0x88>)
    507a:	4618      	mov	r0, r3
    507c:	f7fd f970 	bl	2360 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
          .priority                 = priority_,
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	791b      	ldrb	r3, [r3, #4]
      sjsu::InterruptController::GetPlatformController().Enable({
    5084:	61fb      	str	r3, [r7, #28]
    5086:	f107 0308 	add.w	r3, r7, #8
    508a:	4619      	mov	r1, r3
    508c:	4620      	mov	r0, r4
    508e:	47a8      	blx	r5
      });
    5090:	f107 0308 	add.w	r3, r7, #8
    5094:	4618      	mov	r0, r3
    5096:	f7fb ff87 	bl	fa8 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
      // Set all flags required to enable the counter
      uint32_t ctrl_mask = (1 << ControlBitMap::kTickInterupt) |
    509a:	2307      	movs	r3, #7
    509c:	623b      	str	r3, [r7, #32]
                           (1 << ControlBitMap::kEnableCounter) |
                           (1 << ControlBitMap::kClkSource);
      // Set the system tick counter to start immediately
      sys_tick->VAL = 0;
    509e:	4b09      	ldr	r3, [pc, #36]	; (50c4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	2200      	movs	r2, #0
    50a4:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= ctrl_mask;
    50a6:	4b07      	ldr	r3, [pc, #28]	; (50c4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    50a8:	681b      	ldr	r3, [r3, #0]
    50aa:	6819      	ldr	r1, [r3, #0]
    50ac:	4b05      	ldr	r3, [pc, #20]	; (50c4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	6a3a      	ldr	r2, [r7, #32]
    50b2:	430a      	orrs	r2, r1
    50b4:	601a      	str	r2, [r3, #0]

      status = Status::kSuccess;
    50b6:	2300      	movs	r3, #0
    50b8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return status;
    50ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
    50bc:	4618      	mov	r0, r3
    50be:	3728      	adds	r7, #40	; 0x28
    50c0:	46bd      	mov	sp, r7
    50c2:	bdb0      	pop	{r4, r5, r7, pc}
    50c4:	10000c20 	.word	0x10000c20
    50c8:	00004e0d 	.word	0x00004e0d

000050cc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    50cc:	b580      	push	{r7, lr}
    50ce:	b082      	sub	sp, #8
    50d0:	af00      	add	r7, sp, #0
    50d2:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    50d4:	6878      	ldr	r0, [r7, #4]
    50d6:	f001 f8a2 	bl	621e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    50da:	4603      	mov	r3, r0
	}
    50dc:	4618      	mov	r0, r3
    50de:	3708      	adds	r7, #8
    50e0:	46bd      	mov	sp, r7
    50e2:	bd80      	pop	{r7, pc}

000050e4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    50e4:	b580      	push	{r7, lr}
    50e6:	b084      	sub	sp, #16
    50e8:	af00      	add	r7, sp, #0
    50ea:	6078      	str	r0, [r7, #4]
    50ec:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    50ee:	687b      	ldr	r3, [r7, #4]
    50f0:	4618      	mov	r0, r3
    50f2:	f7fc f8a9 	bl	1248 <units::linear_scale<float>::operator()() const>
    50f6:	eeb0 7a40 	vmov.f32	s14, s0
    50fa:	683b      	ldr	r3, [r7, #0]
    50fc:	ee07 3a90 	vmov	s15, r3
    5100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5104:	ee77 7a67 	vsub.f32	s15, s14, s15
    5108:	f107 030c 	add.w	r3, r7, #12
    510c:	eeb0 0a67 	vmov.f32	s0, s15
    5110:	4618      	mov	r0, r3
    5112:	f7fc f9d1 	bl	14b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5116:	68fb      	ldr	r3, [r7, #12]
	}
    5118:	4618      	mov	r0, r3
    511a:	3710      	adds	r7, #16
    511c:	46bd      	mov	sp, r7
    511e:	bd80      	pop	{r7, pc}

00005120 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    5120:	b580      	push	{r7, lr}
    5122:	b082      	sub	sp, #8
    5124:	af00      	add	r7, sp, #0
    5126:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    5128:	6878      	ldr	r0, [r7, #4]
    512a:	f000 f805 	bl	5138 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    512e:	4603      	mov	r3, r0
	}
    5130:	4618      	mov	r0, r3
    5132:	3708      	adds	r7, #8
    5134:	46bd      	mov	sp, r7
    5136:	bd80      	pop	{r7, pc}

00005138 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    5138:	b580      	push	{r7, lr}
    513a:	b082      	sub	sp, #8
    513c:	af00      	add	r7, sp, #0
    513e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	4618      	mov	r0, r3
    5144:	f7fc f880 	bl	1248 <units::linear_scale<float>::operator()() const>
    5148:	eef0 7a40 	vmov.f32	s15, s0
    514c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5150:	ee17 3a90 	vmov	r3, s15
		}
    5154:	4618      	mov	r0, r3
    5156:	3708      	adds	r7, #8
    5158:	46bd      	mov	sp, r7
    515a:	bd80      	pop	{r7, pc}

0000515c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    515c:	b590      	push	{r4, r7, lr}
    515e:	b089      	sub	sp, #36	; 0x24
    5160:	af00      	add	r7, sp, #0
    5162:	6078      	str	r0, [r7, #4]
    5164:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    5166:	f04f 0001 	mov.w	r0, #1
    516a:	f04f 0100 	mov.w	r1, #0
    516e:	f7ff fdbb 	bl	4ce8 <units::literals::operator"" _Hz(unsigned long long)>
    5172:	4603      	mov	r3, r0
    5174:	60fb      	str	r3, [r7, #12]
    5176:	f107 020c 	add.w	r2, r7, #12
    517a:	463b      	mov	r3, r7
    517c:	4611      	mov	r1, r2
    517e:	4618      	mov	r0, r3
    5180:	f7ff fe08 	bl	4d94 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    5184:	4603      	mov	r3, r0
    5186:	2b00      	cmp	r3, #0
    5188:	d002      	beq.n	5190 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    518a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    518e:	e040      	b.n	5212 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb6>
    }

    units::frequency::hertz_t system_frequency =
        sjsu::SystemController::GetPlatformController().GetSystemFrequency();
    5190:	f7fb fb18 	bl	7c4 <sjsu::SystemController::GetPlatformController()>
    5194:	4603      	mov	r3, r0
    5196:	681a      	ldr	r2, [r3, #0]
    5198:	320c      	adds	r2, #12
    519a:	6812      	ldr	r2, [r2, #0]
    519c:	4618      	mov	r0, r3
    519e:	4790      	blx	r2
    51a0:	4603      	mov	r3, r0
    51a2:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    51a4:	463a      	mov	r2, r7
    51a6:	f107 0308 	add.w	r3, r7, #8
    51aa:	4611      	mov	r1, r2
    51ac:	4618      	mov	r0, r3
    51ae:	f7fc f957 	bl	1460 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    51b2:	4603      	mov	r3, r0
    51b4:	617b      	str	r3, [r7, #20]
    51b6:	f107 0314 	add.w	r3, r7, #20
    51ba:	2101      	movs	r1, #1
    51bc:	4618      	mov	r0, r3
    51be:	f7ff ff91 	bl	50e4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    51c2:	4603      	mov	r3, r0
    51c4:	613b      	str	r3, [r7, #16]
    51c6:	f107 0310 	add.w	r3, r7, #16
    51ca:	4618      	mov	r0, r3
    51cc:	f7ff ff7e 	bl	50cc <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    51d0:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    51d2:	f107 0308 	add.w	r3, r7, #8
    51d6:	4618      	mov	r0, r3
    51d8:	f7ff ffa2 	bl	5120 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    51dc:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    51de:	463b      	mov	r3, r7
    51e0:	4618      	mov	r0, r3
    51e2:	f7ff ff9d 	bl	5120 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    51e6:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    51e8:	fbb4 f2f3 	udiv	r2, r4, r3
    51ec:	fb03 f302 	mul.w	r3, r3, r2
    51f0:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    51f2:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    51f4:	69fb      	ldr	r3, [r7, #28]
    51f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    51fa:	d305      	bcc.n	5208 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xac>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    51fc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5200:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    5202:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    5206:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    5208:	4b04      	ldr	r3, [pc, #16]	; (521c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	69fa      	ldr	r2, [r7, #28]
    520e:	605a      	str	r2, [r3, #4]
    return remainder;
    5210:	69bb      	ldr	r3, [r7, #24]
  }
    5212:	4618      	mov	r0, r3
    5214:	3724      	adds	r7, #36	; 0x24
    5216:	46bd      	mov	sp, r7
    5218:	bd90      	pop	{r4, r7, pc}
    521a:	bf00      	nop
    521c:	10000c20 	.word	0x10000c20

00005220 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5220:	b580      	push	{r7, lr}
    5222:	b086      	sub	sp, #24
    5224:	af00      	add	r7, sp, #0
    5226:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5228:	6878      	ldr	r0, [r7, #4]
    522a:	f000 f807 	bl	523c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    522e:	eef0 7a40 	vmov.f32	s15, s0
	}
    5232:	eeb0 0a67 	vmov.f32	s0, s15
    5236:	3718      	adds	r7, #24
    5238:	46bd      	mov	sp, r7
    523a:	bd80      	pop	{r7, pc}

0000523c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    523c:	b480      	push	{r7}
    523e:	b085      	sub	sp, #20
    5240:	af00      	add	r7, sp, #0
    5242:	60f8      	str	r0, [r7, #12]
    5244:	7239      	strb	r1, [r7, #8]
    5246:	713a      	strb	r2, [r7, #4]
    5248:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    524a:	68fb      	ldr	r3, [r7, #12]
    524c:	edd3 7a00 	vldr	s15, [r3]
    5250:	ed9f 7a05 	vldr	s14, [pc, #20]	; 5268 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    5254:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    5258:	eeb0 0a67 	vmov.f32	s0, s15
    525c:	3714      	adds	r7, #20
    525e:	46bd      	mov	sp, r7
    5260:	f85d 7b04 	ldr.w	r7, [sp], #4
    5264:	4770      	bx	lr
    5266:	bf00      	nop
    5268:	49742400 	.word	0x49742400

0000526c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetSystemClockFrequency(
    526c:	b580      	push	{r7, lr}
    526e:	b084      	sub	sp, #16
    5270:	af00      	add	r7, sp, #0
    5272:	6078      	str	r0, [r7, #4]
    5274:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    5276:	2100      	movs	r1, #0
    5278:	6878      	ldr	r0, [r7, #4]
    527a:	f000 f8e3 	bl	5444 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    527e:	f04f 000c 	mov.w	r0, #12
    5282:	f04f 0100 	mov.w	r1, #0
    5286:	f7fb fa23 	bl	6d0 <units::literals::operator"" _MHz(unsigned long long)>
    528a:	4603      	mov	r3, r0
    528c:	60bb      	str	r3, [r7, #8]
    528e:	f107 0208 	add.w	r2, r7, #8
    5292:	463b      	mov	r3, r7
    5294:	4611      	mov	r1, r2
    5296:	4618      	mov	r0, r3
    5298:	f000 f982 	bl	55a0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    529c:	4603      	mov	r3, r0
    529e:	2b00      	cmp	r3, #0
    52a0:	d00f      	beq.n	52c2 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    52a2:	4b16      	ldr	r3, [pc, #88]	; (52fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    52a4:	683a      	ldr	r2, [r7, #0]
    52a6:	6819      	ldr	r1, [r3, #0]
    52a8:	6878      	ldr	r0, [r7, #4]
    52aa:	f000 fa95 	bl	57d8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    52ae:	2101      	movs	r1, #1
    52b0:	6878      	ldr	r0, [r7, #4]
    52b2:	f000 f8eb 	bl	548c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    52b6:	463b      	mov	r3, r7
    52b8:	4619      	mov	r1, r3
    52ba:	4811      	ldr	r0, [pc, #68]	; (5300 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    52bc:	f000 ffca 	bl	6254 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    52c0:	e007      	b.n	52d2 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    52c2:	2100      	movs	r1, #0
    52c4:	6878      	ldr	r0, [r7, #4]
    52c6:	f000 f8e1 	bl	548c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    52ca:	490e      	ldr	r1, [pc, #56]	; (5304 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    52cc:	480c      	ldr	r0, [pc, #48]	; (5300 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    52ce:	f000 ffc1 	bl	6254 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    52d2:	2101      	movs	r1, #1
    52d4:	6878      	ldr	r0, [r7, #4]
    52d6:	f000 fae3 	bl	58a0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    52da:	23ff      	movs	r3, #255	; 0xff
    52dc:	733b      	strb	r3, [r7, #12]
    52de:	f107 030c 	add.w	r3, r7, #12
    52e2:	2201      	movs	r2, #1
    52e4:	4619      	mov	r1, r3
    52e6:	6878      	ldr	r0, [r7, #4]
    52e8:	f000 f80e 	bl	5308 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    52ec:	2100      	movs	r1, #0
    52ee:	6878      	ldr	r0, [r7, #4]
    52f0:	f000 fb14 	bl	591c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    52f4:	bf00      	nop
    52f6:	3710      	adds	r7, #16
    52f8:	46bd      	mov	sp, r7
    52fa:	bd80      	pop	{r7, pc}
    52fc:	000097ac 	.word	0x000097ac
    5300:	10000c34 	.word	0x10000c34
    5304:	000097b0 	.word	0x000097b0

00005308 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    5308:	b580      	push	{r7, lr}
    530a:	b084      	sub	sp, #16
    530c:	af00      	add	r7, sp, #0
    530e:	60f8      	str	r0, [r7, #12]
    5310:	60b9      	str	r1, [r7, #8]
    5312:	4613      	mov	r3, r2
    5314:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    5316:	79fb      	ldrb	r3, [r7, #7]
    5318:	2b04      	cmp	r3, #4
    531a:	d90e      	bls.n	533a <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x32>
    531c:	23b2      	movs	r3, #178	; 0xb2
    531e:	4a0b      	ldr	r2, [pc, #44]	; (534c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    5320:	490b      	ldr	r1, [pc, #44]	; (5350 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    5322:	480c      	ldr	r0, [pc, #48]	; (5354 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    5324:	f7ff fbd8 	bl	4ad8 <printf>
    5328:	480b      	ldr	r0, [pc, #44]	; (5358 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    532a:	f7fe fa77 	bl	381c <puts>
    532e:	2100      	movs	r1, #0
    5330:	2001      	movs	r0, #1
    5332:	f7fe f803 	bl	333c <sjsu::debug::PrintBacktrace(bool, void*)>
    5336:	f7fe f84d 	bl	33d4 <sjsu::Halt()>
    system_controller->PCLKSEL = peripheral_divider;
    533a:	4b08      	ldr	r3, [pc, #32]	; (535c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    533c:	681b      	ldr	r3, [r3, #0]
    533e:	79fa      	ldrb	r2, [r7, #7]
    5340:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    5344:	bf00      	nop
    5346:	3710      	adds	r7, #16
    5348:	46bd      	mov	sp, r7
    534a:	bd80      	pop	{r7, pc}
    534c:	00009150 	.word	0x00009150
    5350:	000097cc 	.word	0x000097cc
    5354:	000091d4 	.word	0x000091d4
    5358:	00009274 	.word	0x00009274
    535c:	10001194 	.word	0x10001194

00005360 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    5360:	b480      	push	{r7}
    5362:	b083      	sub	sp, #12
    5364:	af00      	add	r7, sp, #0
    5366:	6078      	str	r0, [r7, #4]
    5368:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    536a:	4b05      	ldr	r3, [pc, #20]	; (5380 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    536c:	681b      	ldr	r3, [r3, #0]
    536e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    5372:	4618      	mov	r0, r3
    5374:	370c      	adds	r7, #12
    5376:	46bd      	mov	sp, r7
    5378:	f85d 7b04 	ldr.w	r7, [sp], #4
    537c:	4770      	bx	lr
    537e:	bf00      	nop
    5380:	10001194 	.word	0x10001194

00005384 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    5384:	b480      	push	{r7}
    5386:	b083      	sub	sp, #12
    5388:	af00      	add	r7, sp, #0
    538a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    538c:	4b03      	ldr	r3, [pc, #12]	; (539c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    538e:	681b      	ldr	r3, [r3, #0]
  }
    5390:	4618      	mov	r0, r3
    5392:	370c      	adds	r7, #12
    5394:	46bd      	mov	sp, r7
    5396:	f85d 7b04 	ldr.w	r7, [sp], #4
    539a:	4770      	bx	lr
    539c:	10000c34 	.word	0x10000c34

000053a0 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    53a0:	b480      	push	{r7}
    53a2:	b085      	sub	sp, #20
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
    53a8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    53aa:	4b0b      	ldr	r3, [pc, #44]	; (53d8 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    53b2:	683a      	ldr	r2, [r7, #0]
    53b4:	7812      	ldrb	r2, [r2, #0]
    53b6:	4611      	mov	r1, r2
    53b8:	2201      	movs	r2, #1
    53ba:	408a      	lsls	r2, r1
    53bc:	4013      	ands	r3, r2
    53be:	2b00      	cmp	r3, #0
    53c0:	bf14      	ite	ne
    53c2:	2301      	movne	r3, #1
    53c4:	2300      	moveq	r3, #0
    53c6:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    53c8:	7bfb      	ldrb	r3, [r7, #15]
  }
    53ca:	4618      	mov	r0, r3
    53cc:	3714      	adds	r7, #20
    53ce:	46bd      	mov	sp, r7
    53d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d4:	4770      	bx	lr
    53d6:	bf00      	nop
    53d8:	10001194 	.word	0x10001194

000053dc <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    53dc:	b590      	push	{r4, r7, lr}
    53de:	b083      	sub	sp, #12
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
    53e4:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    53e6:	4b09      	ldr	r3, [pc, #36]	; (540c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    53ee:	683b      	ldr	r3, [r7, #0]
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	4619      	mov	r1, r3
    system_controller->PCONP =
    53f4:	4b05      	ldr	r3, [pc, #20]	; (540c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    53f6:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    53f8:	4610      	mov	r0, r2
    53fa:	f7fc ff88 	bl	230e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    53fe:	4603      	mov	r3, r0
    system_controller->PCONP =
    5400:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    5404:	bf00      	nop
    5406:	370c      	adds	r7, #12
    5408:	46bd      	mov	sp, r7
    540a:	bd90      	pop	{r4, r7, pc}
    540c:	10001194 	.word	0x10001194

00005410 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    5410:	b590      	push	{r4, r7, lr}
    5412:	b083      	sub	sp, #12
    5414:	af00      	add	r7, sp, #0
    5416:	6078      	str	r0, [r7, #4]
    5418:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    541a:	4b09      	ldr	r3, [pc, #36]	; (5440 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    5422:	683b      	ldr	r3, [r7, #0]
    5424:	781b      	ldrb	r3, [r3, #0]
    5426:	4619      	mov	r1, r3
    system_controller->PCONP =
    5428:	4b05      	ldr	r3, [pc, #20]	; (5440 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    542a:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    542c:	4610      	mov	r0, r2
    542e:	f7fc ff5b 	bl	22e8 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    5432:	4603      	mov	r3, r0
    system_controller->PCONP =
    5434:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    5438:	bf00      	nop
    543a:	370c      	adds	r7, #12
    543c:	46bd      	mov	sp, r7
    543e:	bd90      	pop	{r4, r7, pc}
    5440:	10001194 	.word	0x10001194

00005444 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    5444:	b590      	push	{r4, r7, lr}
    5446:	b083      	sub	sp, #12
    5448:	af00      	add	r7, sp, #0
    544a:	6078      	str	r0, [r7, #4]
    544c:	460b      	mov	r3, r1
    544e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    5450:	4b0c      	ldr	r3, [pc, #48]	; (5484 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    5458:	8879      	ldrh	r1, [r7, #2]
    545a:	4b0a      	ldr	r3, [pc, #40]	; (5484 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    545c:	681c      	ldr	r4, [r3, #0]
    545e:	4b0a      	ldr	r3, [pc, #40]	; (5488 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    5460:	781a      	ldrb	r2, [r3, #0]
    5462:	785b      	ldrb	r3, [r3, #1]
    5464:	021b      	lsls	r3, r3, #8
    5466:	431a      	orrs	r2, r3
    5468:	2300      	movs	r3, #0
    546a:	f362 030f 	bfi	r3, r2, #0, #16
    546e:	461a      	mov	r2, r3
    5470:	f000 ff03 	bl	627a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5474:	4603      	mov	r3, r0
    5476:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    547a:	bf00      	nop
    547c:	370c      	adds	r7, #12
    547e:	46bd      	mov	sp, r7
    5480:	bd90      	pop	{r4, r7, pc}
    5482:	bf00      	nop
    5484:	10001194 	.word	0x10001194
    5488:	000097b4 	.word	0x000097b4

0000548c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    548c:	b590      	push	{r4, r7, lr}
    548e:	b083      	sub	sp, #12
    5490:	af00      	add	r7, sp, #0
    5492:	6078      	str	r0, [r7, #4]
    5494:	460b      	mov	r3, r1
    5496:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    5498:	4b0c      	ldr	r3, [pc, #48]	; (54cc <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    54a0:	8879      	ldrh	r1, [r7, #2]
    54a2:	4b0a      	ldr	r3, [pc, #40]	; (54cc <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    54a4:	681c      	ldr	r4, [r3, #0]
    54a6:	4b0a      	ldr	r3, [pc, #40]	; (54d0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    54a8:	781a      	ldrb	r2, [r3, #0]
    54aa:	785b      	ldrb	r3, [r3, #1]
    54ac:	021b      	lsls	r3, r3, #8
    54ae:	431a      	orrs	r2, r3
    54b0:	2300      	movs	r3, #0
    54b2:	f362 030f 	bfi	r3, r2, #0, #16
    54b6:	461a      	mov	r2, r3
    54b8:	f000 fedf 	bl	627a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    54bc:	4603      	mov	r3, r0
    54be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    54c2:	bf00      	nop
    54c4:	370c      	adds	r7, #12
    54c6:	46bd      	mov	sp, r7
    54c8:	bd90      	pop	{r4, r7, pc}
    54ca:	bf00      	nop
    54cc:	10001194 	.word	0x10001194
    54d0:	000097c0 	.word	0x000097c0

000054d4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    54d4:	b590      	push	{r4, r7, lr}
    54d6:	b083      	sub	sp, #12
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
    54dc:	460b      	mov	r3, r1
    54de:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    54e0:	4b0c      	ldr	r3, [pc, #48]	; (5514 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    54e8:	8879      	ldrh	r1, [r7, #2]
    54ea:	4b0a      	ldr	r3, [pc, #40]	; (5514 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    54ec:	681c      	ldr	r4, [r3, #0]
    54ee:	4b0a      	ldr	r3, [pc, #40]	; (5518 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    54f0:	781a      	ldrb	r2, [r3, #0]
    54f2:	785b      	ldrb	r3, [r3, #1]
    54f4:	021b      	lsls	r3, r3, #8
    54f6:	431a      	orrs	r2, r3
    54f8:	2300      	movs	r3, #0
    54fa:	f362 030f 	bfi	r3, r2, #0, #16
    54fe:	461a      	mov	r2, r3
    5500:	f000 febb 	bl	627a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5504:	4603      	mov	r3, r0
    5506:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    550a:	bf00      	nop
    550c:	370c      	adds	r7, #12
    550e:	46bd      	mov	sp, r7
    5510:	bd90      	pop	{r4, r7, pc}
    5512:	bf00      	nop
    5514:	10001194 	.word	0x10001194
    5518:	000097c4 	.word	0x000097c4

0000551c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    551c:	b590      	push	{r4, r7, lr}
    551e:	b083      	sub	sp, #12
    5520:	af00      	add	r7, sp, #0
    5522:	6078      	str	r0, [r7, #4]
    5524:	460b      	mov	r3, r1
    5526:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    5528:	4b0c      	ldr	r3, [pc, #48]	; (555c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    5530:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    5532:	4b0a      	ldr	r3, [pc, #40]	; (555c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    5534:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    5536:	4b0a      	ldr	r3, [pc, #40]	; (5560 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    5538:	781a      	ldrb	r2, [r3, #0]
    553a:	785b      	ldrb	r3, [r3, #1]
    553c:	021b      	lsls	r3, r3, #8
    553e:	431a      	orrs	r2, r3
    5540:	2300      	movs	r3, #0
    5542:	f362 030f 	bfi	r3, r2, #0, #16
    5546:	461a      	mov	r2, r3
    5548:	f000 fe97 	bl	627a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    554c:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    554e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    5552:	bf00      	nop
    5554:	370c      	adds	r7, #12
    5556:	46bd      	mov	sp, r7
    5558:	bd90      	pop	{r4, r7, pc}
    555a:	bf00      	nop
    555c:	10001194 	.word	0x10001194
    5560:	000097c8 	.word	0x000097c8

00005564 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    5564:	b580      	push	{r7, lr}
    5566:	ed2d 8b02 	vpush	{d8}
    556a:	b082      	sub	sp, #8
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
    5570:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    5572:	687b      	ldr	r3, [r7, #4]
    5574:	ed93 8a00 	vldr	s16, [r3]
    5578:	683b      	ldr	r3, [r7, #0]
    557a:	4618      	mov	r0, r3
    557c:	f7ff fbca 	bl	4d14 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5580:	eef0 7a40 	vmov.f32	s15, s0
    5584:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    558c:	bf4c      	ite	mi
    558e:	2301      	movmi	r3, #1
    5590:	2300      	movpl	r3, #0
    5592:	b2db      	uxtb	r3, r3
		}
    5594:	4618      	mov	r0, r3
    5596:	3708      	adds	r7, #8
    5598:	46bd      	mov	sp, r7
    559a:	ecbd 8b02 	vpop	{d8}
    559e:	bd80      	pop	{r7, pc}

000055a0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    55a0:	b580      	push	{r7, lr}
    55a2:	ed2d 8b02 	vpush	{d8}
    55a6:	b082      	sub	sp, #8
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
    55ac:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	ed93 8a00 	vldr	s16, [r3]
    55b4:	683b      	ldr	r3, [r7, #0]
    55b6:	4618      	mov	r0, r3
    55b8:	f7ff fbac 	bl	4d14 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    55bc:	eef0 7a40 	vmov.f32	s15, s0
    55c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
    55c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55c8:	bfcc      	ite	gt
    55ca:	2301      	movgt	r3, #1
    55cc:	2300      	movle	r3, #0
    55ce:	b2db      	uxtb	r3, r3
		}
    55d0:	4618      	mov	r0, r3
    55d2:	3708      	adds	r7, #8
    55d4:	46bd      	mov	sp, r7
    55d6:	ecbd 8b02 	vpop	{d8}
    55da:	bd80      	pop	{r7, pc}

000055dc <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    55dc:	b580      	push	{r7, lr}
    55de:	b082      	sub	sp, #8
    55e0:	af00      	add	r7, sp, #0
    55e2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    55e4:	6878      	ldr	r0, [r7, #4]
    55e6:	f000 f805 	bl	55f4 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    55ea:	4603      	mov	r3, r0
		}
    55ec:	4618      	mov	r0, r3
    55ee:	3708      	adds	r7, #8
    55f0:	46bd      	mov	sp, r7
    55f2:	bd80      	pop	{r7, pc}

000055f4 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    55f4:	b580      	push	{r7, lr}
    55f6:	b082      	sub	sp, #8
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	4618      	mov	r0, r3
    5600:	f7fb fe22 	bl	1248 <units::linear_scale<float>::operator()() const>
    5604:	eef0 7a40 	vmov.f32	s15, s0
    5608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    560c:	ee17 3a90 	vmov	r3, s15
		}
    5610:	4618      	mov	r0, r3
    5612:	3708      	adds	r7, #8
    5614:	46bd      	mov	sp, r7
    5616:	bd80      	pop	{r7, pc}

00005618 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    5618:	b580      	push	{r7, lr}
    561a:	b082      	sub	sp, #8
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    5620:	687b      	ldr	r3, [r7, #4]
    5622:	4618      	mov	r0, r3
    5624:	f7fb fe10 	bl	1248 <units::linear_scale<float>::operator()() const>
    5628:	eef0 7a40 	vmov.f32	s15, s0
    562c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5630:	ee17 3a90 	vmov	r3, s15
    5634:	b29b      	uxth	r3, r3
		}
    5636:	4618      	mov	r0, r3
    5638:	3708      	adds	r7, #8
    563a:	46bd      	mov	sp, r7
    563c:	bd80      	pop	{r7, pc}
    563e:	Address 0x000000000000563e is out of bounds.


00005640 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    5640:	b590      	push	{r4, r7, lr}
    5642:	b08d      	sub	sp, #52	; 0x34
    5644:	af00      	add	r7, sp, #0
    5646:	60f8      	str	r0, [r7, #12]
    5648:	60b9      	str	r1, [r7, #8]
    564a:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    564c:	f44f 70c0 	mov.w	r0, #384	; 0x180
    5650:	f04f 0100 	mov.w	r1, #0
    5654:	f7fb f83c 	bl	6d0 <units::literals::operator"" _MHz(unsigned long long)>
    5658:	4603      	mov	r3, r0
    565a:	613b      	str	r3, [r7, #16]
    565c:	f107 0210 	add.w	r2, r7, #16
    5660:	1d3b      	adds	r3, r7, #4
    5662:	4611      	mov	r1, r2
    5664:	4618      	mov	r0, r3
    5666:	f7ff ff7d 	bl	5564 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    566a:	4603      	mov	r3, r0
    566c:	f083 0301 	eor.w	r3, r3, #1
    5670:	b2db      	uxtb	r3, r3
    5672:	2b00      	cmp	r3, #0
    5674:	d114      	bne.n	56a0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    5676:	f04f 000c 	mov.w	r0, #12
    567a:	f04f 0100 	mov.w	r1, #0
    567e:	f7fb f827 	bl	6d0 <units::literals::operator"" _MHz(unsigned long long)>
    5682:	4603      	mov	r3, r0
    5684:	617b      	str	r3, [r7, #20]
    5686:	f107 0214 	add.w	r2, r7, #20
    568a:	1d3b      	adds	r3, r7, #4
    568c:	4611      	mov	r1, r2
    568e:	4618      	mov	r0, r3
    5690:	f7ff ff86 	bl	55a0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    5694:	4603      	mov	r3, r0
    5696:	f083 0301 	eor.w	r3, r3, #1
    569a:	b2db      	uxtb	r3, r3
    569c:	2b00      	cmp	r3, #0
    569e:	d001      	beq.n	56a4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    56a0:	2301      	movs	r3, #1
    56a2:	e000      	b.n	56a6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    56a4:	2300      	movs	r3, #0
    56a6:	2b00      	cmp	r3, #0
    56a8:	d00e      	beq.n	56c8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x88>
    56aa:	23f4      	movs	r3, #244	; 0xf4
    56ac:	4a44      	ldr	r2, [pc, #272]	; (57c0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    56ae:	4945      	ldr	r1, [pc, #276]	; (57c4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    56b0:	4845      	ldr	r0, [pc, #276]	; (57c8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    56b2:	f7ff fa11 	bl	4ad8 <printf>
    56b6:	4845      	ldr	r0, [pc, #276]	; (57cc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    56b8:	f7fe f8b0 	bl	381c <puts>
    56bc:	2100      	movs	r1, #0
    56be:	2001      	movs	r0, #1
    56c0:	f7fd fe3c 	bl	333c <sjsu::debug::PrintBacktrace(bool, void*)>
    56c4:	f7fd fe86 	bl	33d4 <sjsu::Halt()>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    56c8:	2301      	movs	r3, #1
    56ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    56ce:	1d3b      	adds	r3, r7, #4
    56d0:	4618      	mov	r0, r3
    56d2:	f7ff ff83 	bl	55dc <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    56d6:	4604      	mov	r4, r0
    56d8:	f107 0308 	add.w	r3, r7, #8
    56dc:	4618      	mov	r0, r3
    56de:	f7ff ff7d 	bl	55dc <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    56e2:	4603      	mov	r3, r0
    56e4:	fbb4 f2f3 	udiv	r2, r4, r3
    56e8:	fb03 f302 	mul.w	r3, r3, r2
    56ec:	1ae3      	subs	r3, r4, r3
    56ee:	2b00      	cmp	r3, #0
    56f0:	bf14      	ite	ne
    56f2:	2301      	movne	r3, #1
    56f4:	2300      	moveq	r3, #0
    56f6:	b2db      	uxtb	r3, r3
    56f8:	2b00      	cmp	r3, #0
    56fa:	d017      	beq.n	572c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xec>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    56fc:	f107 0208 	add.w	r2, r7, #8
    5700:	1d3b      	adds	r3, r7, #4
    5702:	4611      	mov	r1, r2
    5704:	4618      	mov	r0, r3
    5706:	f000 fdca 	bl	629e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    570a:	4603      	mov	r3, r0
    570c:	61fb      	str	r3, [r7, #28]
    570e:	f107 031c 	add.w	r3, r7, #28
    5712:	2101      	movs	r1, #1
    5714:	4618      	mov	r0, r3
    5716:	f000 fdee 	bl	62f6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    571a:	4603      	mov	r3, r0
    571c:	61bb      	str	r3, [r7, #24]
    571e:	f107 0318 	add.w	r3, r7, #24
    5722:	4618      	mov	r0, r3
    5724:	f000 fd7b 	bl	621e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5728:	62b8      	str	r0, [r7, #40]	; 0x28
    572a:	e00e      	b.n	574a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10a>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    572c:	f107 0208 	add.w	r2, r7, #8
    5730:	1d3b      	adds	r3, r7, #4
    5732:	4611      	mov	r1, r2
    5734:	4618      	mov	r0, r3
    5736:	f000 fdb2 	bl	629e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    573a:	4603      	mov	r3, r0
    573c:	623b      	str	r3, [r7, #32]
    573e:	f107 0320 	add.w	r3, r7, #32
    5742:	4618      	mov	r0, r3
    5744:	f000 fd6b 	bl	621e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5748:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    574a:	2301      	movs	r3, #1
    574c:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    574e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    5752:	2b00      	cmp	r3, #0
    5754:	d02f      	beq.n	57b6 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x176>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    5756:	f107 0308 	add.w	r3, r7, #8
    575a:	4618      	mov	r0, r3
    575c:	f7ff ff5c 	bl	5618 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    5760:	4603      	mov	r3, r0
    5762:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    5764:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5766:	b29b      	uxth	r3, r3
    5768:	fb12 f303 	smulbb	r3, r2, r3
    576c:	b29b      	uxth	r3, r3
    576e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    5770:	fb12 f303 	smulbb	r3, r2, r3
    5774:	b29b      	uxth	r3, r3
    5776:	005b      	lsls	r3, r3, #1
    5778:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    577a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    577c:	2b9b      	cmp	r3, #155	; 0x9b
    577e:	d903      	bls.n	5788 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x148>
      {
        calculating = false;
    5780:	2300      	movs	r3, #0
    5782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    5786:	e7e2      	b.n	574e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    5788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    578a:	005b      	lsls	r3, r3, #1
    578c:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    578e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    5790:	2b07      	cmp	r3, #7
    5792:	d9dc      	bls.n	574e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
    5794:	f240 1311 	movw	r3, #273	; 0x111
    5798:	4a09      	ldr	r2, [pc, #36]	; (57c0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    579a:	490d      	ldr	r1, [pc, #52]	; (57d0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    579c:	480d      	ldr	r0, [pc, #52]	; (57d4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x194>)
    579e:	f7ff f99b 	bl	4ad8 <printf>
    57a2:	480a      	ldr	r0, [pc, #40]	; (57cc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    57a4:	f7fe f83a 	bl	381c <puts>
    57a8:	2100      	movs	r1, #0
    57aa:	2001      	movs	r0, #1
    57ac:	f7fd fdc6 	bl	333c <sjsu::debug::PrintBacktrace(bool, void*)>
    57b0:	f7fd fe10 	bl	33d4 <sjsu::Halt()>
    while (calculating)
    57b4:	e7cb      	b.n	574e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    57b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    57b8:	4618      	mov	r0, r3
    57ba:	3734      	adds	r7, #52	; 0x34
    57bc:	46bd      	mov	sp, r7
    57be:	bd90      	pop	{r4, r7, pc}
    57c0:	0000928c 	.word	0x0000928c
    57c4:	000097e4 	.word	0x000097e4
    57c8:	00009308 	.word	0x00009308
    57cc:	00009274 	.word	0x00009274
    57d0:	000097fc 	.word	0x000097fc
    57d4:	000093f8 	.word	0x000093f8

000057d8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    57d8:	b580      	push	{r7, lr}
    57da:	b086      	sub	sp, #24
    57dc:	af00      	add	r7, sp, #0
    57de:	60f8      	str	r0, [r7, #12]
    57e0:	60b9      	str	r1, [r7, #8]
    57e2:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    57e4:	2301      	movs	r3, #1
    57e6:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    57e8:	687a      	ldr	r2, [r7, #4]
    57ea:	68b9      	ldr	r1, [r7, #8]
    57ec:	68f8      	ldr	r0, [r7, #12]
    57ee:	f7ff ff27 	bl	5640 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    57f2:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    57f4:	2100      	movs	r1, #0
    57f6:	68f8      	ldr	r0, [r7, #12]
    57f8:	f7ff fe24 	bl	5444 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    57fc:	2100      	movs	r1, #0
    57fe:	68f8      	ldr	r0, [r7, #12]
    5800:	f7ff fe44 	bl	548c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    5804:	2100      	movs	r1, #0
    5806:	68f8      	ldr	r0, [r7, #12]
    5808:	f7ff fe64 	bl	54d4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    580c:	2100      	movs	r1, #0
    580e:	68f8      	ldr	r0, [r7, #12]
    5810:	f7ff fe84 	bl	551c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5814:	4b21      	ldr	r3, [pc, #132]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5816:	681b      	ldr	r3, [r3, #0]
    5818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    581c:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    5820:	693b      	ldr	r3, [r7, #16]
    5822:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    5824:	4b1d      	ldr	r3, [pc, #116]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5826:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    5828:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    582a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    582e:	4b1b      	ldr	r3, [pc, #108]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5836:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    583a:	8afb      	ldrh	r3, [r7, #22]
    583c:	015b      	lsls	r3, r3, #5
    583e:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    5840:	4b16      	ldr	r3, [pc, #88]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5842:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    5844:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    5846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    584a:	4b14      	ldr	r3, [pc, #80]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5852:	4b12      	ldr	r3, [pc, #72]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	f042 0201 	orr.w	r2, r2, #1
    585a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    585e:	4b0f      	ldr	r3, [pc, #60]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5860:	681b      	ldr	r3, [r3, #0]
    5862:	22aa      	movs	r2, #170	; 0xaa
    5864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    5868:	4b0c      	ldr	r3, [pc, #48]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	2255      	movs	r2, #85	; 0x55
    586e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    5872:	4b0a      	ldr	r3, [pc, #40]	; (589c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    587a:	210a      	movs	r1, #10
    587c:	4618      	mov	r0, r3
    587e:	f7fc fd58 	bl	2332 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    5882:	4603      	mov	r3, r0
    5884:	f083 0301 	eor.w	r3, r3, #1
    5888:	b2db      	uxtb	r3, r3
    588a:	2b00      	cmp	r3, #0
    588c:	d001      	beq.n	5892 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    588e:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    5890:	e7ef      	b.n	5872 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    5892:	bf00      	nop
    5894:	3718      	adds	r7, #24
    5896:	46bd      	mov	sp, r7
    5898:	bd80      	pop	{r7, pc}
    589a:	bf00      	nop
    589c:	10001194 	.word	0x10001194

000058a0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    58a0:	b590      	push	{r4, r7, lr}
    58a2:	b083      	sub	sp, #12
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
    58a8:	460b      	mov	r3, r1
    58aa:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    58ac:	78fb      	ldrb	r3, [r7, #3]
    58ae:	2b1f      	cmp	r3, #31
    58b0:	d90f      	bls.n	58d2 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x32>
    58b2:	f44f 73a9 	mov.w	r3, #338	; 0x152
    58b6:	4a13      	ldr	r2, [pc, #76]	; (5904 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    58b8:	4913      	ldr	r1, [pc, #76]	; (5908 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    58ba:	4814      	ldr	r0, [pc, #80]	; (590c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    58bc:	f7ff f90c 	bl	4ad8 <printf>
    58c0:	4813      	ldr	r0, [pc, #76]	; (5910 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    58c2:	f7fd ffab 	bl	381c <puts>
    58c6:	2100      	movs	r1, #0
    58c8:	2001      	movs	r0, #1
    58ca:	f7fd fd37 	bl	333c <sjsu::debug::PrintBacktrace(bool, void*)>
    58ce:	f7fd fd81 	bl	33d4 <sjsu::Halt()>

    system_controller->CCLKSEL = bit::Insert(
    58d2:	4b10      	ldr	r3, [pc, #64]	; (5914 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    58d4:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    58d6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    58da:	4b0e      	ldr	r3, [pc, #56]	; (5914 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    58dc:	681c      	ldr	r4, [r3, #0]
    58de:	4b0e      	ldr	r3, [pc, #56]	; (5918 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    58e0:	78f9      	ldrb	r1, [r7, #3]
    58e2:	781a      	ldrb	r2, [r3, #0]
    58e4:	785b      	ldrb	r3, [r3, #1]
    58e6:	021b      	lsls	r3, r3, #8
    58e8:	431a      	orrs	r2, r3
    58ea:	2300      	movs	r3, #0
    58ec:	f362 030f 	bfi	r3, r2, #0, #16
    58f0:	461a      	mov	r2, r3
    58f2:	f7fc fb6b 	bl	1fcc <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    58f6:	4603      	mov	r3, r0
    58f8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    58fc:	bf00      	nop
    58fe:	370c      	adds	r7, #12
    5900:	46bd      	mov	sp, r7
    5902:	bd90      	pop	{r4, r7, pc}
    5904:	000094a0 	.word	0x000094a0
    5908:	00009814 	.word	0x00009814
    590c:	000094e8 	.word	0x000094e8
    5910:	00009274 	.word	0x00009274
    5914:	10001194 	.word	0x10001194
    5918:	000097bc 	.word	0x000097bc

0000591c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    591c:	b590      	push	{r4, r7, lr}
    591e:	b083      	sub	sp, #12
    5920:	af00      	add	r7, sp, #0
    5922:	6078      	str	r0, [r7, #4]
    5924:	460b      	mov	r3, r1
    5926:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    5928:	4b0c      	ldr	r3, [pc, #48]	; (595c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    5930:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    5932:	4b0a      	ldr	r3, [pc, #40]	; (595c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    5934:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    5936:	4b0a      	ldr	r3, [pc, #40]	; (5960 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    5938:	781a      	ldrb	r2, [r3, #0]
    593a:	785b      	ldrb	r3, [r3, #1]
    593c:	021b      	lsls	r3, r3, #8
    593e:	431a      	orrs	r2, r3
    5940:	2300      	movs	r3, #0
    5942:	f362 030f 	bfi	r3, r2, #0, #16
    5946:	461a      	mov	r2, r3
    5948:	f000 fc97 	bl	627a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    594c:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    594e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    5952:	bf00      	nop
    5954:	370c      	adds	r7, #12
    5956:	46bd      	mov	sp, r7
    5958:	bd90      	pop	{r4, r7, pc}
    595a:	bf00      	nop
    595c:	10001194 	.word	0x10001194
    5960:	000097b8 	.word	0x000097b8

00005964 <sjsu::Pin::PullUp() const>:
  void PullUp() const
    5964:	b580      	push	{r7, lr}
    5966:	b082      	sub	sp, #8
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
    SetPull(Resistor::kPullUp);
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	3308      	adds	r3, #8
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	2102      	movs	r1, #2
    5976:	6878      	ldr	r0, [r7, #4]
    5978:	4798      	blx	r3
  }
    597a:	bf00      	nop
    597c:	3708      	adds	r7, #8
    597e:	46bd      	mov	sp, r7
    5980:	bd80      	pop	{r7, pc}

00005982 <sjsu::Uart::Flush() const>:
  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// The default implementation reads out all of the bytes by checking
  /// HasData() repeatedly and use Read() to read each. Some implementations may
  /// have more efficient methods of clearing their buffers.
  virtual void Flush() const
    5982:	b580      	push	{r7, lr}
    5984:	b082      	sub	sp, #8
    5986:	af00      	add	r7, sp, #0
    5988:	6078      	str	r0, [r7, #4]
  {
    PollingFlush();
    598a:	6878      	ldr	r0, [r7, #4]
    598c:	f000 f820 	bl	59d0 <sjsu::Uart::PollingFlush() const>
  }
    5990:	bf00      	nop
    5992:	3708      	adds	r7, #8
    5994:	46bd      	mov	sp, r7
    5996:	bd80      	pop	{r7, pc}

00005998 <sjsu::Uart::Read() const>:
  }

  /// @return Retrieves a single byte from UART RX line. Users must ensure that
  /// HasData() is true before reading using this method. Otherwise contents of
  /// read data will not be correct and the returned byte will be 0xFF.
  uint8_t Read() const
    5998:	b580      	push	{r7, lr}
    599a:	b084      	sub	sp, #16
    599c:	af00      	add	r7, sp, #0
    599e:	6078      	str	r0, [r7, #4]
  {
    uint8_t byte;
    if (Read(&byte, sizeof(byte)) == 0)
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	681b      	ldr	r3, [r3, #0]
    59a4:	330c      	adds	r3, #12
    59a6:	681b      	ldr	r3, [r3, #0]
    59a8:	f107 010f 	add.w	r1, r7, #15
    59ac:	2201      	movs	r2, #1
    59ae:	6878      	ldr	r0, [r7, #4]
    59b0:	4798      	blx	r3
    59b2:	4603      	mov	r3, r0
    59b4:	2b00      	cmp	r3, #0
    59b6:	bf0c      	ite	eq
    59b8:	2301      	moveq	r3, #1
    59ba:	2300      	movne	r3, #0
    59bc:	b2db      	uxtb	r3, r3
    59be:	2b00      	cmp	r3, #0
    59c0:	d001      	beq.n	59c6 <sjsu::Uart::Read() const+0x2e>
    {
      byte = 0xFF;
    59c2:	23ff      	movs	r3, #255	; 0xff
    59c4:	73fb      	strb	r3, [r7, #15]
    }
    return byte;
    59c6:	7bfb      	ldrb	r3, [r7, #15]
  }
    59c8:	4618      	mov	r0, r3
    59ca:	3710      	adds	r7, #16
    59cc:	46bd      	mov	sp, r7
    59ce:	bd80      	pop	{r7, pc}

000059d0 <sjsu::Uart::PollingFlush() const>:

  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// by checking HasData() repeatedly and use Read() to read each. Some
  /// implementations may have more efficient methods of clearing their buffers.
  void PollingFlush() const
    59d0:	b580      	push	{r7, lr}
    59d2:	b082      	sub	sp, #8
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
  {
    while (HasData())
    59d8:	687b      	ldr	r3, [r7, #4]
    59da:	681b      	ldr	r3, [r3, #0]
    59dc:	3310      	adds	r3, #16
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	6878      	ldr	r0, [r7, #4]
    59e2:	4798      	blx	r3
    59e4:	4603      	mov	r3, r0
    59e6:	2b00      	cmp	r3, #0
    59e8:	d003      	beq.n	59f2 <sjsu::Uart::PollingFlush() const+0x22>
    {
      Read();
    59ea:	6878      	ldr	r0, [r7, #4]
    59ec:	f7ff ffd4 	bl	5998 <sjsu::Uart::Read() const>
    while (HasData())
    59f0:	e7f2      	b.n	59d8 <sjsu::Uart::PollingFlush() const+0x8>
    }
  }
    59f2:	bf00      	nop
    59f4:	3708      	adds	r7, #8
    59f6:	46bd      	mov	sp, r7
    59f8:	bd80      	pop	{r7, pc}
    59fa:	Address 0x00000000000059fa is out of bounds.


000059fc <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    59fc:	b480      	push	{r7}
    59fe:	b089      	sub	sp, #36	; 0x24
    5a00:	af00      	add	r7, sp, #0
    5a02:	6078      	str	r0, [r7, #4]
    5a04:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	2200      	movs	r2, #0
    5a0c:	601a      	str	r2, [r3, #0]
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	2200      	movs	r2, #0
    5a12:	605a      	str	r2, [r3, #4]
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	2201      	movs	r2, #1
    5a18:	609a      	str	r2, [r3, #8]
  bool finished = false;
    5a1a:	2300      	movs	r3, #0
    5a1c:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    5a1e:	2300      	movs	r3, #0
    5a20:	61bb      	str	r3, [r7, #24]
    5a22:	69bb      	ldr	r3, [r7, #24]
    5a24:	2b0e      	cmp	r3, #14
    5a26:	dc4f      	bgt.n	5ac8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    5a28:	7ffb      	ldrb	r3, [r7, #31]
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d14c      	bne.n	5ac8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    5a2e:	69bb      	ldr	r3, [r7, #24]
    5a30:	3301      	adds	r3, #1
    5a32:	617b      	str	r3, [r7, #20]
    5a34:	697b      	ldr	r3, [r7, #20]
    5a36:	2b0e      	cmp	r3, #14
    5a38:	dc42      	bgt.n	5ac0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    5a3a:	7ffb      	ldrb	r3, [r7, #31]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d13f      	bne.n	5ac0 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    5a40:	69bb      	ldr	r3, [r7, #24]
    5a42:	ee07 3a90 	vmov	s15, r3
    5a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5a4a:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    5a4e:	697b      	ldr	r3, [r7, #20]
    5a50:	ee07 3a90 	vmov	s15, r3
    5a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5a58:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    5a5c:	edd7 6a04 	vldr	s13, [r7, #16]
    5a60:	ed97 7a03 	vldr	s14, [r7, #12]
    5a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
    5a70:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    5a74:	edd7 7a02 	vldr	s15, [r7, #8]
    5a78:	ed9f 7a17 	vldr	s14, [pc, #92]	; 5ad8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    5a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
    5a80:	ed97 7a00 	vldr	s14, [r7]
    5a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a8c:	d814      	bhi.n	5ab8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    5a8e:	edd7 7a02 	vldr	s15, [r7, #8]
    5a92:	ed9f 7a11 	vldr	s14, [pc, #68]	; 5ad8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    5a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    5a9a:	ed97 7a00 	vldr	s14, [r7]
    5a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5aa6:	db07      	blt.n	5ab8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    5aa8:	69ba      	ldr	r2, [r7, #24]
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    5aae:	697a      	ldr	r2, [r7, #20]
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	609a      	str	r2, [r3, #8]
        finished          = true;
    5ab4:	2301      	movs	r3, #1
    5ab6:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    5ab8:	697b      	ldr	r3, [r7, #20]
    5aba:	3301      	adds	r3, #1
    5abc:	617b      	str	r3, [r7, #20]
    5abe:	e7b9      	b.n	5a34 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    5ac0:	69bb      	ldr	r3, [r7, #24]
    5ac2:	3301      	adds	r3, #1
    5ac4:	61bb      	str	r3, [r7, #24]
    5ac6:	e7ac      	b.n	5a22 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    5ac8:	bf00      	nop
}
    5aca:	6878      	ldr	r0, [r7, #4]
    5acc:	3724      	adds	r7, #36	; 0x24
    5ace:	46bd      	mov	sp, r7
    5ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ad4:	4770      	bx	lr
    5ad6:	bf00      	nop
    5ad8:	3c23d70a 	.word	0x3c23d70a

00005adc <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    5adc:	b480      	push	{r7}
    5ade:	b087      	sub	sp, #28
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	ed87 0a03 	vstr	s0, [r7, #12]
    5ae6:	edc7 0a02 	vstr	s1, [r7, #8]
    5aea:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	ee07 3a90 	vmov	s15, r3
    5af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5af6:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    5afa:	edd7 7a03 	vldr	s15, [r7, #12]
    5afe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    5b02:	ee27 7a87 	vmul.f32	s14, s15, s14
    5b06:	edd7 7a02 	vldr	s15, [r7, #8]
    5b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
    5b0e:	ed97 7a05 	vldr	s14, [r7, #20]
    5b12:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5b16:	eef0 7a66 	vmov.f32	s15, s13
}
    5b1a:	eeb0 0a67 	vmov.f32	s0, s15
    5b1e:	371c      	adds	r7, #28
    5b20:	46bd      	mov	sp, r7
    5b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b26:	4770      	bx	lr

00005b28 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    5b28:	b480      	push	{r7}
    5b2a:	b087      	sub	sp, #28
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	ed87 0a03 	vstr	s0, [r7, #12]
    5b32:	edc7 0a02 	vstr	s1, [r7, #8]
    5b36:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	ee07 3a90 	vmov	s15, r3
    5b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5b42:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    5b46:	edd7 7a03 	vldr	s15, [r7, #12]
    5b4a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    5b4e:	ee27 7a87 	vmul.f32	s14, s15, s14
    5b52:	edd7 7a02 	vldr	s15, [r7, #8]
    5b56:	ee67 7a27 	vmul.f32	s15, s14, s15
    5b5a:	ed97 7a05 	vldr	s14, [r7, #20]
    5b5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5b62:	eef0 7a66 	vmov.f32	s15, s13
}
    5b66:	eeb0 0a67 	vmov.f32	s0, s15
    5b6a:	371c      	adds	r7, #28
    5b6c:	46bd      	mov	sp, r7
    5b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b72:	4770      	bx	lr

00005b74 <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    5b74:	b480      	push	{r7}
    5b76:	b083      	sub	sp, #12
    5b78:	af00      	add	r7, sp, #0
    5b7a:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    5b7e:	edd7 7a01 	vldr	s15, [r7, #4]
    5b82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    5b86:	ee77 7a87 	vadd.f32	s15, s15, s14
    5b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    5b92:	eeb0 0a67 	vmov.f32	s0, s15
    5b96:	370c      	adds	r7, #12
    5b98:	46bd      	mov	sp, r7
    5b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b9e:	4770      	bx	lr

00005ba0 <sjsu::lpc40xx::uart::IsDecimal(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecimal(float value)
{
    5ba0:	b580      	push	{r7, lr}
    5ba2:	b086      	sub	sp, #24
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    5baa:	2300      	movs	r3, #0
    5bac:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    5bae:	ed97 0a01 	vldr	s0, [r7, #4]
    5bb2:	f7ff ffdf 	bl	5b74 <sjsu::lpc40xx::uart::RoundFloat(float)>
    5bb6:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    5bba:	ed97 7a01 	vldr	s14, [r7, #4]
    5bbe:	edd7 7a04 	vldr	s15, [r7, #16]
    5bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
    5bc6:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    5bca:	edd7 7a03 	vldr	s15, [r7, #12]
    5bce:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 5bfc <sjsu::lpc40xx::uart::IsDecimal(float)+0x5c>
    5bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
    5bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bda:	db0a      	blt.n	5bf2 <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
    5bdc:	edd7 7a03 	vldr	s15, [r7, #12]
    5be0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 5c00 <sjsu::lpc40xx::uart::IsDecimal(float)+0x60>
    5be4:	eef4 7ac7 	vcmpe.f32	s15, s14
    5be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bec:	d801      	bhi.n	5bf2 <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
  {
    result = true;
    5bee:	2301      	movs	r3, #1
    5bf0:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    5bf2:	7dfb      	ldrb	r3, [r7, #23]
}
    5bf4:	4618      	mov	r0, r3
    5bf6:	3718      	adds	r7, #24
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bd80      	pop	{r7, pc}
    5bfc:	bc23d70a 	.word	0xbc23d70a
    5c00:	3c23d70a 	.word	0x3c23d70a

00005c04 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    5c04:	b590      	push	{r4, r7, lr}
    5c06:	b091      	sub	sp, #68	; 0x44
    5c08:	af00      	add	r7, sp, #0
    5c0a:	61f8      	str	r0, [r7, #28]
    5c0c:	61b9      	str	r1, [r7, #24]
    5c0e:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    5c10:	f107 0314 	add.w	r3, r7, #20
    5c14:	4618      	mov	r0, r3
    5c16:	f7ff fa83 	bl	5120 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5c1a:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    5c1c:	2300      	movs	r3, #0
    5c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    5c20:	69fb      	ldr	r3, [r7, #28]
    5c22:	2200      	movs	r2, #0
    5c24:	601a      	str	r2, [r3, #0]
    5c26:	69fb      	ldr	r3, [r7, #28]
    5c28:	2200      	movs	r2, #0
    5c2a:	605a      	str	r2, [r3, #4]
    5c2c:	69fb      	ldr	r3, [r7, #28]
    5c2e:	2201      	movs	r2, #1
    5c30:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    5c32:	69bb      	ldr	r3, [r7, #24]
    5c34:	ee07 3a90 	vmov	s15, r3
    5c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5c3c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    5c40:	f04f 0300 	mov.w	r3, #0
    5c44:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    5c46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    5c4a:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    5c4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5c50:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    5c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    5c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5c5a:	2b04      	cmp	r3, #4
    5c5c:	f000 80be 	beq.w	5ddc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
    5c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5c62:	2b03      	cmp	r3, #3
    5c64:	f200 80b8 	bhi.w	5dd8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    5c68:	a201      	add	r2, pc, #4	; (adr r2, 5c70 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    5c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c6e:	bf00      	nop
    5c70:	00005c81 	.word	0x00005c81
    5c74:	00005cdb 	.word	0x00005cdb
    5c78:	00005d3b 	.word	0x00005d3b
    5c7c:	00005dab 	.word	0x00005dab
    switch (state)
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);
    5c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5c82:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    5c86:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5c8a:	f7ff ff27 	bl	5adc <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5c8e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

        if (divide_estimate < 1.0f)
    5c92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
    5c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ca2:	d505      	bpl.n	5cb0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    5ca4:	69fb      	ldr	r3, [r7, #28]
    5ca6:	2200      	movs	r2, #0
    5ca8:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    5caa:	2304      	movs	r3, #4
    5cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    5cae:	e094      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecimal(divide_estimate))
    5cb0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    5cb4:	f7ff ff74 	bl	5ba0 <sjsu::lpc40xx::uart::IsDecimal(float)>
    5cb8:	4603      	mov	r3, r0
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d00a      	beq.n	5cd4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    5cbe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5cc6:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    5cca:	69fb      	ldr	r3, [r7, #28]
    5ccc:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    5cce:	2304      	movs	r3, #4
    5cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5cd2:	e082      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    5cd4:	2301      	movs	r3, #1
    5cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5cd8:	e07f      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    5cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5cdc:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    5ce0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5ce4:	f7ff fefa 	bl	5adc <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5ce8:	eef0 7a40 	vmov.f32	s15, s0
    5cec:	eeb0 0a67 	vmov.f32	s0, s15
    5cf0:	f7ff ff40 	bl	5b74 <sjsu::lpc40xx::uart::RoundFloat(float)>
    5cf4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    5cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5cfa:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    5cfe:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5d02:	f7ff ff11 	bl	5b28 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    5d06:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    5d0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5d0e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 5de8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    5d12:	eef4 7ac7 	vcmpe.f32	s15, s14
    5d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d1a:	db0b      	blt.n	5d34 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    5d1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5d20:	ed9f 7a32 	vldr	s14, [pc, #200]	; 5dec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    5d24:	eef4 7ac7 	vcmpe.f32	s15, s14
    5d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d2c:	d802      	bhi.n	5d34 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    5d2e:	2303      	movs	r3, #3
    5d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    5d32:	e052      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    5d34:	2302      	movs	r3, #2
    5d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5d38:	e04f      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    5d3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    5d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5d42:	ee77 7a87 	vadd.f32	s15, s15, s14
    5d46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    5d4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5d4e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    5d52:	eef4 7ac7 	vcmpe.f32	s15, s14
    5d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d5a:	dd02      	ble.n	5d62 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    5d5c:	2304      	movs	r3, #4
    5d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    5d60:	e03b      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    5d62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    5d66:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    5d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
    5d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d72:	dd0f      	ble.n	5d94 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    5d74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
    5d80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    5d84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
    5d90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    5d94:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    5d98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    5d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5da0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    5da4:	2301      	movs	r3, #1
    5da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5da8:	e017      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    5daa:	69fc      	ldr	r4, [r7, #28]
    5dac:	463b      	mov	r3, r7
    5dae:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    5db2:	4618      	mov	r0, r3
    5db4:	f7ff fe22 	bl	59fc <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    5db8:	463b      	mov	r3, r7
    5dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5dbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    5dc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    5dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5dca:	ee17 2a90 	vmov	r2, s15
    5dce:	69fb      	ldr	r3, [r7, #28]
    5dd0:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    5dd2:	2304      	movs	r3, #4
    5dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5dd6:	e000      	b.n	5dda <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    5dd8:	bf00      	nop
  while (state != States::kDone)
    5dda:	e73d      	b.n	5c58 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    5ddc:	bf00      	nop
}
    5dde:	69f8      	ldr	r0, [r7, #28]
    5de0:	3744      	adds	r7, #68	; 0x44
    5de2:	46bd      	mov	sp, r7
    5de4:	bd90      	pop	{r4, r7, pc}
    5de6:	bf00      	nop
    5de8:	3f8ccccd 	.word	0x3f8ccccd
    5dec:	3ff33333 	.word	0x3ff33333

00005df0 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
  };

  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  explicit constexpr Uart(const Port_t & port) : port_(port) {}

  Status Initialize(uint32_t baud_rate) const override
    5df0:	b580      	push	{r7, lr}
    5df2:	b084      	sub	sp, #16
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
    5df8:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    5dfa:	2307      	movs	r3, #7
    5dfc:	73fb      	strb	r3, [r7, #15]
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5dfe:	f7fa fce1 	bl	7c4 <sjsu::SystemController::GetPlatformController()>
    5e02:	4603      	mov	r3, r0
        port_.power_on_id);
    5e04:	681a      	ldr	r2, [r3, #0]
    5e06:	3214      	adds	r2, #20
    5e08:	6812      	ldr	r2, [r2, #0]
    5e0a:	6879      	ldr	r1, [r7, #4]
    5e0c:	6849      	ldr	r1, [r1, #4]
    5e0e:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    5e10:	4618      	mov	r0, r3
    5e12:	4790      	blx	r2

    SetBaudRate(baud_rate);
    5e14:	6839      	ldr	r1, [r7, #0]
    5e16:	6878      	ldr	r0, [r7, #4]
    5e18:	f000 f83f 	bl	5e9a <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	685b      	ldr	r3, [r3, #4]
    5e20:	68db      	ldr	r3, [r3, #12]
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	3304      	adds	r3, #4
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	687a      	ldr	r2, [r7, #4]
    5e2a:	6852      	ldr	r2, [r2, #4]
    5e2c:	68d0      	ldr	r0, [r2, #12]
    5e2e:	687a      	ldr	r2, [r7, #4]
    5e30:	6852      	ldr	r2, [r2, #4]
    5e32:	7c12      	ldrb	r2, [r2, #16]
    5e34:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    5e38:	b2d2      	uxtb	r2, r2
    5e3a:	4611      	mov	r1, r2
    5e3c:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    5e3e:	687b      	ldr	r3, [r7, #4]
    5e40:	685b      	ldr	r3, [r3, #4]
    5e42:	689b      	ldr	r3, [r3, #8]
    5e44:	681b      	ldr	r3, [r3, #0]
    5e46:	3304      	adds	r3, #4
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	687a      	ldr	r2, [r7, #4]
    5e4c:	6852      	ldr	r2, [r2, #4]
    5e4e:	6890      	ldr	r0, [r2, #8]
    5e50:	687a      	ldr	r2, [r7, #4]
    5e52:	6852      	ldr	r2, [r2, #4]
    5e54:	7c12      	ldrb	r2, [r2, #16]
    5e56:	f3c2 0202 	ubfx	r2, r2, #0, #3
    5e5a:	b2d2      	uxtb	r2, r2
    5e5c:	4611      	mov	r1, r2
    5e5e:	4798      	blx	r3
    port_.rx.PullUp();
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	685b      	ldr	r3, [r3, #4]
    5e64:	68db      	ldr	r3, [r3, #12]
    5e66:	4618      	mov	r0, r3
    5e68:	f7ff fd7c 	bl	5964 <sjsu::Pin::PullUp() const>
    port_.tx.PullUp();
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	685b      	ldr	r3, [r3, #4]
    5e70:	689b      	ldr	r3, [r3, #8]
    5e72:	4618      	mov	r0, r3
    5e74:	f7ff fd76 	bl	5964 <sjsu::Pin::PullUp() const>
    port_.registers->FCR |= kFIFOEnableAndReset;
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	685b      	ldr	r3, [r3, #4]
    5e7c:	681b      	ldr	r3, [r3, #0]
    5e7e:	7a1b      	ldrb	r3, [r3, #8]
    5e80:	b2da      	uxtb	r2, r3
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	685b      	ldr	r3, [r3, #4]
    5e86:	681b      	ldr	r3, [r3, #0]
    5e88:	f042 0207 	orr.w	r2, r2, #7
    5e8c:	b2d2      	uxtb	r2, r2
    5e8e:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    5e90:	2300      	movs	r3, #0
  }
    5e92:	4618      	mov	r0, r3
    5e94:	3710      	adds	r7, #16
    5e96:	46bd      	mov	sp, r7
    5e98:	bd80      	pop	{r7, pc}

00005e9a <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    5e9a:	b580      	push	{r7, lr}
    5e9c:	b088      	sub	sp, #32
    5e9e:	af00      	add	r7, sp, #0
    5ea0:	6078      	str	r0, [r7, #4]
    5ea2:	6039      	str	r1, [r7, #0]
  {
    auto peripheral_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    5ea4:	f7fa fc8e 	bl	7c4 <sjsu::SystemController::GetPlatformController()>
    5ea8:	4602      	mov	r2, r0
            port_.power_on_id);
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	685b      	ldr	r3, [r3, #4]
    5eae:	3304      	adds	r3, #4
    5eb0:	4619      	mov	r1, r3
    5eb2:	4610      	mov	r0, r2
    5eb4:	f7fa fc92 	bl	7dc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    5eb8:	4603      	mov	r3, r0
    5eba:	61bb      	str	r3, [r7, #24]

    uart::UartCalibration_t calibration =
        uart::GenerateUartCalibration(baud_rate, peripheral_frequency);
    5ebc:	f107 030c 	add.w	r3, r7, #12
    5ec0:	69ba      	ldr	r2, [r7, #24]
    5ec2:	6839      	ldr	r1, [r7, #0]
    5ec4:	4618      	mov	r0, r3
    5ec6:	f7ff fe9d 	bl	5c04 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    5eca:	2380      	movs	r3, #128	; 0x80
    5ecc:	77fb      	strb	r3, [r7, #31]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    5ece:	68fb      	ldr	r3, [r7, #12]
    5ed0:	0a1b      	lsrs	r3, r3, #8
    5ed2:	77bb      	strb	r3, [r7, #30]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    5ed4:	68fb      	ldr	r3, [r7, #12]
    5ed6:	777b      	strb	r3, [r7, #29]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5ed8:	697b      	ldr	r3, [r7, #20]
    5eda:	b2db      	uxtb	r3, r3
    5edc:	011b      	lsls	r3, r3, #4
    5ede:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    5ee0:	693b      	ldr	r3, [r7, #16]
    5ee2:	b2db      	uxtb	r3, r3
    5ee4:	f003 030f 	and.w	r3, r3, #15
    5ee8:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5eea:	4313      	orrs	r3, r2
    5eec:	773b      	strb	r3, [r7, #28]

    port_.registers->LCR = kDlabBit;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	685b      	ldr	r3, [r3, #4]
    5ef2:	681b      	ldr	r3, [r3, #0]
    5ef4:	2280      	movs	r2, #128	; 0x80
    5ef6:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	685b      	ldr	r3, [r3, #4]
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	7fba      	ldrb	r2, [r7, #30]
    5f00:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	685b      	ldr	r3, [r3, #4]
    5f06:	681b      	ldr	r3, [r3, #0]
    5f08:	7f7a      	ldrb	r2, [r7, #29]
    5f0a:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	685b      	ldr	r3, [r3, #4]
    5f10:	681b      	ldr	r3, [r3, #0]
    5f12:	7f3a      	ldrb	r2, [r7, #28]
    5f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	685b      	ldr	r3, [r3, #4]
    5f1c:	681b      	ldr	r3, [r3, #0]
    5f1e:	2203      	movs	r2, #3
    5f20:	731a      	strb	r2, [r3, #12]
    return true;
    5f22:	2301      	movs	r3, #1
  }
    5f24:	4618      	mov	r0, r3
    5f26:	3720      	adds	r7, #32
    5f28:	46bd      	mov	sp, r7
    5f2a:	bd80      	pop	{r7, pc}

00005f2c <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>:

  void Write(const void * data, size_t size) const override
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b086      	sub	sp, #24
    5f30:	af00      	add	r7, sp, #0
    5f32:	60f8      	str	r0, [r7, #12]
    5f34:	60b9      	str	r1, [r7, #8]
    5f36:	607a      	str	r2, [r7, #4]
  {
    const uint8_t * data_buffer = reinterpret_cast<const uint8_t *>(data);
    5f38:	68bb      	ldr	r3, [r7, #8]
    5f3a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++)
    5f3c:	2300      	movs	r3, #0
    5f3e:	617b      	str	r3, [r7, #20]
    5f40:	697a      	ldr	r2, [r7, #20]
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	429a      	cmp	r2, r3
    5f46:	d216      	bcs.n	5f76 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x4a>
    {
      port_.registers->THR = data_buffer[i];
    5f48:	693a      	ldr	r2, [r7, #16]
    5f4a:	697b      	ldr	r3, [r7, #20]
    5f4c:	441a      	add	r2, r3
    5f4e:	68fb      	ldr	r3, [r7, #12]
    5f50:	685b      	ldr	r3, [r3, #4]
    5f52:	681b      	ldr	r3, [r3, #0]
    5f54:	7812      	ldrb	r2, [r2, #0]
    5f56:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    5f58:	68f8      	ldr	r0, [r7, #12]
    5f5a:	f000 f843 	bl	5fe4 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    5f5e:	4603      	mov	r3, r0
    5f60:	f083 0301 	eor.w	r3, r3, #1
    5f64:	b2db      	uxtb	r3, r3
    5f66:	2b00      	cmp	r3, #0
    5f68:	d001      	beq.n	5f6e <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x42>
      {
        continue;
    5f6a:	bf00      	nop
      while (!TransmissionComplete())
    5f6c:	e7f4      	b.n	5f58 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x2c>
    for (size_t i = 0; i < size; i++)
    5f6e:	697b      	ldr	r3, [r7, #20]
    5f70:	3301      	adds	r3, #1
    5f72:	617b      	str	r3, [r7, #20]
    5f74:	e7e4      	b.n	5f40 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x14>
      }
    }
  }
    5f76:	bf00      	nop
    5f78:	3718      	adds	r7, #24
    5f7a:	46bd      	mov	sp, r7
    5f7c:	bd80      	pop	{r7, pc}

00005f7e <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>:

  size_t Read(void * data, size_t size) const override
    5f7e:	b580      	push	{r7, lr}
    5f80:	b086      	sub	sp, #24
    5f82:	af00      	add	r7, sp, #0
    5f84:	60f8      	str	r0, [r7, #12]
    5f86:	60b9      	str	r1, [r7, #8]
    5f88:	607a      	str	r2, [r7, #4]
  {
    uint8_t * data_buffer = reinterpret_cast<uint8_t *>(data);
    5f8a:	68bb      	ldr	r3, [r7, #8]
    5f8c:	613b      	str	r3, [r7, #16]
    size_t index          = 0;
    5f8e:	2300      	movs	r3, #0
    5f90:	617b      	str	r3, [r7, #20]
    while (FifoHasData())
    5f92:	68f8      	ldr	r0, [r7, #12]
    5f94:	f000 f838 	bl	6008 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5f98:	4603      	mov	r3, r0
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d011      	beq.n	5fc2 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x44>
    {
      if (index >= size)
    5f9e:	697a      	ldr	r2, [r7, #20]
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	429a      	cmp	r2, r3
    5fa4:	d20c      	bcs.n	5fc0 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x42>
      {
        break;
      }
      data_buffer[index++] = port_.registers->RBR;
    5fa6:	68fb      	ldr	r3, [r7, #12]
    5fa8:	685b      	ldr	r3, [r3, #4]
    5faa:	681b      	ldr	r3, [r3, #0]
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	b2d9      	uxtb	r1, r3
    5fb0:	697b      	ldr	r3, [r7, #20]
    5fb2:	1c5a      	adds	r2, r3, #1
    5fb4:	617a      	str	r2, [r7, #20]
    5fb6:	693a      	ldr	r2, [r7, #16]
    5fb8:	4413      	add	r3, r2
    5fba:	460a      	mov	r2, r1
    5fbc:	701a      	strb	r2, [r3, #0]
    while (FifoHasData())
    5fbe:	e7e8      	b.n	5f92 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x14>
        break;
    5fc0:	bf00      	nop
    }
    return index;
    5fc2:	697b      	ldr	r3, [r7, #20]
  }
    5fc4:	4618      	mov	r0, r3
    5fc6:	3718      	adds	r7, #24
    5fc8:	46bd      	mov	sp, r7
    5fca:	bd80      	pop	{r7, pc}

00005fcc <sjsu::lpc40xx::Uart::HasData() const>:

  bool HasData() const override
    5fcc:	b580      	push	{r7, lr}
    5fce:	b082      	sub	sp, #8
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
  {
    return FifoHasData();
    5fd4:	6878      	ldr	r0, [r7, #4]
    5fd6:	f000 f817 	bl	6008 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5fda:	4603      	mov	r3, r0
  }
    5fdc:	4618      	mov	r0, r3
    5fde:	3708      	adds	r7, #8
    5fe0:	46bd      	mov	sp, r7
    5fe2:	bd80      	pop	{r7, pc}

00005fe4 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b082      	sub	sp, #8
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	685b      	ldr	r3, [r3, #4]
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	7d1b      	ldrb	r3, [r3, #20]
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	2105      	movs	r1, #5
    5ff8:	4618      	mov	r0, r3
    5ffa:	f000 f99a 	bl	6332 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5ffe:	4603      	mov	r3, r0
  }
    6000:	4618      	mov	r0, r3
    6002:	3708      	adds	r7, #8
    6004:	46bd      	mov	sp, r7
    6006:	bd80      	pop	{r7, pc}

00006008 <sjsu::lpc40xx::Uart::FifoHasData() const>:
  /// @return true if fifo contains receive data.
  bool FifoHasData() const
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	685b      	ldr	r3, [r3, #4]
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	7d1b      	ldrb	r3, [r3, #20]
    6018:	b2db      	uxtb	r3, r3
    601a:	2100      	movs	r1, #0
    601c:	4618      	mov	r0, r3
    601e:	f000 f988 	bl	6332 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    6022:	4603      	mov	r3, r0
  }
    6024:	4618      	mov	r0, r3
    6026:	3708      	adds	r7, #8
    6028:	46bd      	mov	sp, r7
    602a:	bd80      	pop	{r7, pc}

0000602c <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::InterruptController<sjsu::lpc40xx::kNumberOfIrqs,
                                  __NVIC_PRIO_BITS>
    interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    602c:	b580      	push	{r7, lr}
    602e:	b082      	sub	sp, #8
    6030:	af00      	add	r7, sp, #0
    6032:	6078      	str	r0, [r7, #4]
    6034:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    6036:	683a      	ldr	r2, [r7, #0]
    6038:	6879      	ldr	r1, [r7, #4]
    603a:	4804      	ldr	r0, [pc, #16]	; (604c <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    603c:	f7ff ff76 	bl	5f2c <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>
  return length;
    6040:	683b      	ldr	r3, [r7, #0]
}
    6042:	4618      	mov	r0, r3
    6044:	3708      	adds	r7, #8
    6046:	46bd      	mov	sp, r7
    6048:	bd80      	pop	{r7, pc}
    604a:	bf00      	nop
    604c:	10000c78 	.word	0x10000c78

00006050 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    6050:	b580      	push	{r7, lr}
    6052:	b082      	sub	sp, #8
    6054:	af00      	add	r7, sp, #0
    6056:	6078      	str	r0, [r7, #4]
    6058:	6039      	str	r1, [r7, #0]
  // Wait until data comes in
  while (!uart0.HasData())
    605a:	480a      	ldr	r0, [pc, #40]	; (6084 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    605c:	f7ff ffb6 	bl	5fcc <sjsu::lpc40xx::Uart::HasData() const>
    6060:	4603      	mov	r3, r0
    6062:	f083 0301 	eor.w	r3, r3, #1
    6066:	b2db      	uxtb	r3, r3
    6068:	2b00      	cmp	r3, #0
    606a:	d001      	beq.n	6070 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x20>
  {
    continue;
    606c:	bf00      	nop
  while (!uart0.HasData())
    606e:	e7f4      	b.n	605a <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0xa>
  }
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    6070:	683a      	ldr	r2, [r7, #0]
    6072:	6879      	ldr	r1, [r7, #4]
    6074:	4803      	ldr	r0, [pc, #12]	; (6084 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    6076:	f7ff ff82 	bl	5f7e <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>
  return length;
    607a:	683b      	ldr	r3, [r7, #0]
}
    607c:	4618      	mov	r0, r3
    607e:	3708      	adds	r7, #8
    6080:	46bd      	mov	sp, r7
    6082:	bd80      	pop	{r7, pc}
    6084:	10000c78 	.word	0x10000c78

00006088 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    6088:	b580      	push	{r7, lr}
    608a:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    608c:	4802      	ldr	r0, [pc, #8]	; (6098 <ThreadRuntimeCounter+0x10>)
    608e:	f7fe fdf7 	bl	4c80 <sjsu::cortex::DwtCounter::GetCount()>
    6092:	4603      	mov	r3, r0
}
    6094:	4618      	mov	r0, r3
    6096:	bd80      	pop	{r7, pc}
    6098:	10001354 	.word	0x10001354

0000609c <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    609c:	b580      	push	{r7, lr}
    609e:	b086      	sub	sp, #24
    60a0:	af00      	add	r7, sp, #0
  // Enable FPU (Floating Point Unit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    60a2:	f7fe fdfd 	bl	4ca0 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set the platform's interrupt controller.
  // This will be used by other libraries to enable and disable interrupts.
  sjsu::InterruptController::SetPlatformController(&interrupt_controller);
    60a6:	4828      	ldr	r0, [pc, #160]	; (6148 <sjsu::InitializePlatform()+0xac>)
    60a8:	f7fe fe0e 	bl	4cc8 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>
  sjsu::SystemController::SetPlatformController(&system_controller);
    60ac:	4827      	ldr	r0, [pc, #156]	; (614c <sjsu::InitializePlatform()+0xb0>)
    60ae:	f7fe fe9d 	bl	4dec <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    60b2:	4b27      	ldr	r3, [pc, #156]	; (6150 <sjsu::InitializePlatform()+0xb4>)
    60b4:	6819      	ldr	r1, [r3, #0]
    60b6:	4825      	ldr	r0, [pc, #148]	; (614c <sjsu::InitializePlatform()+0xb0>)
    60b8:	f7ff f8d8 	bl	526c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    60bc:	23ff      	movs	r3, #255	; 0xff
    60be:	703b      	strb	r3, [r7, #0]
    60c0:	463b      	mov	r3, r7
    60c2:	2201      	movs	r2, #1
    60c4:	4619      	mov	r1, r3
    60c6:	4821      	ldr	r0, [pc, #132]	; (614c <sjsu::InitializePlatform()+0xb0>)
    60c8:	f7ff f91e 	bl	5308 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    60cc:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    60d0:	4820      	ldr	r0, [pc, #128]	; (6154 <sjsu::InitializePlatform()+0xb8>)
    60d2:	f7ff fe8d 	bl	5df0 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    60d6:	4820      	ldr	r0, [pc, #128]	; (6158 <sjsu::InitializePlatform()+0xbc>)
    60d8:	f000 fd66 	bl	6ba8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    60dc:	481f      	ldr	r0, [pc, #124]	; (615c <sjsu::InitializePlatform()+0xc0>)
    60de:	f000 fd73 	bl	6bc8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.Initialize();
    60e2:	481f      	ldr	r0, [pc, #124]	; (6160 <sjsu::InitializePlatform()+0xc4>)
    60e4:	f7fe ff54 	bl	4f90 <sjsu::cortex::SystemTimer::Initialize() const>
  system_timer.SetTickFrequency(config::kRtosFrequency);
    60e8:	4b1e      	ldr	r3, [pc, #120]	; (6164 <sjsu::InitializePlatform()+0xc8>)
    60ea:	6819      	ldr	r1, [r3, #0]
    60ec:	481c      	ldr	r0, [pc, #112]	; (6160 <sjsu::InitializePlatform()+0xc4>)
    60ee:	f7ff f835 	bl	515c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    60f2:	481b      	ldr	r0, [pc, #108]	; (6160 <sjsu::InitializePlatform()+0xc4>)
    60f4:	f7fe ffa4 	bl	5040 <sjsu::cortex::SystemTimer::StartTimer() const>
    60f8:	6178      	str	r0, [r7, #20]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    60fa:	697b      	ldr	r3, [r7, #20]
    60fc:	2b00      	cmp	r3, #0
    60fe:	d00e      	beq.n	611e <sjsu::InitializePlatform()+0x82>
    6100:	23ba      	movs	r3, #186	; 0xba
    6102:	4a19      	ldr	r2, [pc, #100]	; (6168 <sjsu::InitializePlatform()+0xcc>)
    6104:	4919      	ldr	r1, [pc, #100]	; (616c <sjsu::InitializePlatform()+0xd0>)
    6106:	481a      	ldr	r0, [pc, #104]	; (6170 <sjsu::InitializePlatform()+0xd4>)
    6108:	f7fe fce6 	bl	4ad8 <printf>
    610c:	4819      	ldr	r0, [pc, #100]	; (6174 <sjsu::InitializePlatform()+0xd8>)
    610e:	f7fd fb85 	bl	381c <puts>
    6112:	2100      	movs	r1, #0
    6114:	2001      	movs	r0, #1
    6116:	f7fd f911 	bl	333c <sjsu::debug::PrintBacktrace(bool, void*)>
    611a:	f7fd f95b 	bl	33d4 <sjsu::Halt()>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    611e:	4816      	ldr	r0, [pc, #88]	; (6178 <sjsu::InitializePlatform()+0xdc>)
    6120:	f7fe fd8c 	bl	4c3c <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    6124:	1d3b      	adds	r3, r7, #4
    6126:	4915      	ldr	r1, [pc, #84]	; (617c <sjsu::InitializePlatform()+0xe0>)
    6128:	4618      	mov	r0, r3
    612a:	f7fb ffa7 	bl	207c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    612e:	1d3b      	adds	r3, r7, #4
    6130:	4618      	mov	r0, r3
    6132:	f7fe fe4d 	bl	4dd0 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>
    6136:	1d3b      	adds	r3, r7, #4
    6138:	4618      	mov	r0, r3
    613a:	f7fa fbd3 	bl	8e4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
}
    613e:	bf00      	nop
    6140:	3718      	adds	r7, #24
    6142:	46bd      	mov	sp, r7
    6144:	bd80      	pop	{r7, pc}
    6146:	bf00      	nop
    6148:	10000c94 	.word	0x10000c94
    614c:	10000c74 	.word	0x10000c74
    6150:	00009060 	.word	0x00009060
    6154:	10000c78 	.word	0x10000c78
    6158:	0000602d 	.word	0x0000602d
    615c:	00006051 	.word	0x00006051
    6160:	10000c80 	.word	0x10000c80
    6164:	00009064 	.word	0x00009064
    6168:	00009584 	.word	0x00009584
    616c:	00009880 	.word	0x00009880
    6170:	000095a4 	.word	0x000095a4
    6174:	00009274 	.word	0x00009274
    6178:	10001354 	.word	0x10001354
    617c:	00004f19 	.word	0x00004f19

00006180 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
      operator=(const function& __x)
    6180:	b580      	push	{r7, lr}
    6182:	b086      	sub	sp, #24
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
    6188:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    618a:	f107 0308 	add.w	r3, r7, #8
    618e:	6839      	ldr	r1, [r7, #0]
    6190:	4618      	mov	r0, r3
    6192:	f000 f925 	bl	63e0 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
    6196:	f107 0308 	add.w	r3, r7, #8
    619a:	6879      	ldr	r1, [r7, #4]
    619c:	4618      	mov	r0, r3
    619e:	f000 f941 	bl	6424 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>
    61a2:	f107 0308 	add.w	r3, r7, #8
    61a6:	4618      	mov	r0, r3
    61a8:	f7fa fb9c 	bl	8e4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
	return *this;
    61ac:	687b      	ldr	r3, [r7, #4]
      }
    61ae:	4618      	mov	r0, r3
    61b0:	3718      	adds	r7, #24
    61b2:	46bd      	mov	sp, r7
    61b4:	bd80      	pop	{r7, pc}

000061b6 <std::function<void ()>::function(decltype(nullptr))>:
      function(nullptr_t) noexcept
    61b6:	b580      	push	{r7, lr}
    61b8:	b082      	sub	sp, #8
    61ba:	af00      	add	r7, sp, #0
    61bc:	6078      	str	r0, [r7, #4]
    61be:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	4618      	mov	r0, r3
    61c4:	f7fa f900 	bl	3c8 <std::_Function_base::_Function_base()>
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	4618      	mov	r0, r3
    61cc:	3708      	adds	r7, #8
    61ce:	46bd      	mov	sp, r7
    61d0:	bd80      	pop	{r7, pc}

000061d2 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    61d2:	b580      	push	{r7, lr}
    61d4:	b082      	sub	sp, #8
    61d6:	af00      	add	r7, sp, #0
    61d8:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	4618      	mov	r0, r3
    61de:	f000 f942 	bl	6466 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    61e2:	bf00      	nop
    61e4:	6878      	ldr	r0, [r7, #4]
    61e6:	3708      	adds	r7, #8
    61e8:	46bd      	mov	sp, r7
    61ea:	bd80      	pop	{r7, pc}

000061ec <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    61ec:	b580      	push	{r7, lr}
    61ee:	b082      	sub	sp, #8
    61f0:	af00      	add	r7, sp, #0
    61f2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    61f4:	6878      	ldr	r0, [r7, #4]
    61f6:	f7fe ff9f 	bl	5138 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    61fa:	4603      	mov	r3, r0
		}
    61fc:	4618      	mov	r0, r3
    61fe:	3708      	adds	r7, #8
    6200:	46bd      	mov	sp, r7
    6202:	bd80      	pop	{r7, pc}

00006204 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      operator""ns()
    6204:	b580      	push	{r7, lr}
    6206:	b082      	sub	sp, #8
    6208:	af00      	add	r7, sp, #0
    620a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	4618      	mov	r0, r3
    6210:	f000 f93e 	bl	6490 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    6214:	bf00      	nop
    6216:	6878      	ldr	r0, [r7, #4]
    6218:	3708      	adds	r7, #8
    621a:	46bd      	mov	sp, r7
    621c:	bd80      	pop	{r7, pc}

0000621e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    621e:	b580      	push	{r7, lr}
    6220:	b084      	sub	sp, #16
    6222:	af00      	add	r7, sp, #0
    6224:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	4618      	mov	r0, r3
    622a:	f7fb f80d 	bl	1248 <units::linear_scale<float>::operator()() const>
    622e:	eef0 7a40 	vmov.f32	s15, s0
    6232:	edc7 7a03 	vstr	s15, [r7, #12]
    6236:	f107 030c 	add.w	r3, r7, #12
    623a:	4618      	mov	r0, r3
    623c:	f000 f940 	bl	64c0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    6240:	eef0 7a40 	vmov.f32	s15, s0
    6244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6248:	ee17 3a90 	vmov	r3, s15
		}
    624c:	4618      	mov	r0, r3
    624e:	3710      	adds	r7, #16
    6250:	46bd      	mov	sp, r7
    6252:	bd80      	pop	{r7, pc}

00006254 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    6254:	b580      	push	{r7, lr}
    6256:	b082      	sub	sp, #8
    6258:	af00      	add	r7, sp, #0
    625a:	6078      	str	r0, [r7, #4]
    625c:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    625e:	683b      	ldr	r3, [r7, #0]
    6260:	4618      	mov	r0, r3
    6262:	f7fe ffdd 	bl	5220 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    6266:	eef0 7a40 	vmov.f32	s15, s0
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    6270:	687b      	ldr	r3, [r7, #4]
		}
    6272:	4618      	mov	r0, r3
    6274:	3708      	adds	r7, #8
    6276:	46bd      	mov	sp, r7
    6278:	bd80      	pop	{r7, pc}

0000627a <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    627a:	b580      	push	{r7, lr}
    627c:	b084      	sub	sp, #16
    627e:	af00      	add	r7, sp, #0
    6280:	60f8      	str	r0, [r7, #12]
    6282:	60b9      	str	r1, [r7, #8]
    6284:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    6286:	793b      	ldrb	r3, [r7, #4]
    6288:	461a      	mov	r2, r3
    628a:	797b      	ldrb	r3, [r7, #5]
    628c:	68b9      	ldr	r1, [r7, #8]
    628e:	68f8      	ldr	r0, [r7, #12]
    6290:	f000 f924 	bl	64dc <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    6294:	4603      	mov	r3, r0
}
    6296:	4618      	mov	r0, r3
    6298:	3710      	adds	r7, #16
    629a:	46bd      	mov	sp, r7
    629c:	bd80      	pop	{r7, pc}

0000629e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    629e:	b580      	push	{r7, lr}
    62a0:	ed2d 8b02 	vpush	{d8}
    62a4:	b084      	sub	sp, #16
    62a6:	af00      	add	r7, sp, #0
    62a8:	6078      	str	r0, [r7, #4]
    62aa:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	4618      	mov	r0, r3
    62b0:	f7fa ffca 	bl	1248 <units::linear_scale<float>::operator()() const>
    62b4:	eeb0 8a40 	vmov.f32	s16, s0
    62b8:	683b      	ldr	r3, [r7, #0]
    62ba:	4618      	mov	r0, r3
    62bc:	f7fa ffc4 	bl	1248 <units::linear_scale<float>::operator()() const>
    62c0:	eef0 7a40 	vmov.f32	s15, s0
    62c4:	edc7 7a03 	vstr	s15, [r7, #12]
    62c8:	f107 030c 	add.w	r3, r7, #12
    62cc:	4618      	mov	r0, r3
    62ce:	f7fe fd21 	bl	4d14 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    62d2:	eeb0 7a40 	vmov.f32	s14, s0
    62d6:	eec8 7a07 	vdiv.f32	s15, s16, s14
    62da:	f107 0308 	add.w	r3, r7, #8
    62de:	eeb0 0a67 	vmov.f32	s0, s15
    62e2:	4618      	mov	r0, r3
    62e4:	f7fb f8e8 	bl	14b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    62e8:	68bb      	ldr	r3, [r7, #8]
	}
    62ea:	4618      	mov	r0, r3
    62ec:	3710      	adds	r7, #16
    62ee:	46bd      	mov	sp, r7
    62f0:	ecbd 8b02 	vpop	{d8}
    62f4:	bd80      	pop	{r7, pc}

000062f6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    62f6:	b580      	push	{r7, lr}
    62f8:	b084      	sub	sp, #16
    62fa:	af00      	add	r7, sp, #0
    62fc:	6078      	str	r0, [r7, #4]
    62fe:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    6300:	687b      	ldr	r3, [r7, #4]
    6302:	4618      	mov	r0, r3
    6304:	f7fa ffa0 	bl	1248 <units::linear_scale<float>::operator()() const>
    6308:	eeb0 7a40 	vmov.f32	s14, s0
    630c:	683b      	ldr	r3, [r7, #0]
    630e:	ee07 3a90 	vmov	s15, r3
    6312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6316:	ee77 7a27 	vadd.f32	s15, s14, s15
    631a:	f107 030c 	add.w	r3, r7, #12
    631e:	eeb0 0a67 	vmov.f32	s0, s15
    6322:	4618      	mov	r0, r3
    6324:	f7fb f8c8 	bl	14b8 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    6328:	68fb      	ldr	r3, [r7, #12]
	}
    632a:	4618      	mov	r0, r3
    632c:	3710      	adds	r7, #16
    632e:	46bd      	mov	sp, r7
    6330:	bd80      	pop	{r7, pc}

00006332 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    6332:	b480      	push	{r7}
    6334:	b083      	sub	sp, #12
    6336:	af00      	add	r7, sp, #0
    6338:	4603      	mov	r3, r0
    633a:	6039      	str	r1, [r7, #0]
    633c:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    633e:	79fa      	ldrb	r2, [r7, #7]
    6340:	683b      	ldr	r3, [r7, #0]
    6342:	fa42 f303 	asr.w	r3, r2, r3
    6346:	f003 0301 	and.w	r3, r3, #1
    634a:	2b00      	cmp	r3, #0
    634c:	bf14      	ite	ne
    634e:	2301      	movne	r3, #1
    6350:	2300      	moveq	r3, #0
    6352:	b2db      	uxtb	r3, r3
}
    6354:	4618      	mov	r0, r3
    6356:	370c      	adds	r7, #12
    6358:	46bd      	mov	sp, r7
    635a:	f85d 7b04 	ldr.w	r7, [sp], #4
    635e:	4770      	bx	lr

00006360 <std::array<std::function<void ()>, 59u>::array()>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
    6360:	b5b0      	push	{r4, r5, r7, lr}
    6362:	b082      	sub	sp, #8
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	243a      	movs	r4, #58	; 0x3a
    636c:	461d      	mov	r5, r3
    636e:	2c00      	cmp	r4, #0
    6370:	db05      	blt.n	637e <std::array<std::function<void ()>, 59u>::array()+0x1e>
    6372:	4628      	mov	r0, r5
    6374:	f7fb ff95 	bl	22a2 <std::function<void ()>::function()>
    6378:	3510      	adds	r5, #16
    637a:	3c01      	subs	r4, #1
    637c:	e7f7      	b.n	636e <std::array<std::function<void ()>, 59u>::array()+0xe>
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	4618      	mov	r0, r3
    6382:	3708      	adds	r7, #8
    6384:	46bd      	mov	sp, r7
    6386:	bdb0      	pop	{r4, r5, r7, pc}

00006388 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()>:

  /// This must be put into the interrupt vector table for all of the interrupts
  /// this lookup handler will work for in ROM at compile time.
  /// @note This must not be executed directly, only by the processor when an
  ///       interrupt occurs.
  static void LookupHandler()
    6388:	b580      	push	{r7, lr}
    638a:	b086      	sub	sp, #24
    638c:	af00      	add	r7, sp, #0
  {
    int active_interrupt     = (scb->ICSR & 0xFF);
    638e:	4b11      	ldr	r3, [pc, #68]	; (63d4 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x4c>)
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	685b      	ldr	r3, [r3, #4]
    6394:	b2db      	uxtb	r3, r3
    6396:	617b      	str	r3, [r7, #20]
    current_vector           = IndexToIRQ(active_interrupt);
    6398:	6978      	ldr	r0, [r7, #20]
    639a:	f000 f8cb 	bl	6534 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>
    639e:	4603      	mov	r3, r0
    63a0:	4a0d      	ldr	r2, [pc, #52]	; (63d8 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x50>)
    63a2:	6013      	str	r3, [r2, #0]
    InterruptHandler handler = table[active_interrupt];
    63a4:	697b      	ldr	r3, [r7, #20]
    63a6:	4619      	mov	r1, r3
    63a8:	480c      	ldr	r0, [pc, #48]	; (63dc <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x54>)
    63aa:	f000 f8cf 	bl	654c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    63ae:	4602      	mov	r2, r0
    63b0:	1d3b      	adds	r3, r7, #4
    63b2:	4611      	mov	r1, r2
    63b4:	4618      	mov	r0, r3
    63b6:	f7fc fa8f 	bl	28d8 <std::function<void ()>::function(std::function<void ()> const&)>
    handler();
    63ba:	1d3b      	adds	r3, r7, #4
    63bc:	4618      	mov	r0, r3
    63be:	f7fb ff7d 	bl	22bc <std::function<void ()>::operator()() const>
    InterruptHandler handler = table[active_interrupt];
    63c2:	1d3b      	adds	r3, r7, #4
    63c4:	4618      	mov	r0, r3
    63c6:	f7fa fde2 	bl	f8e <std::function<void ()>::~function()>
  }
    63ca:	bf00      	nop
    63cc:	3718      	adds	r7, #24
    63ce:	46bd      	mov	sp, r7
    63d0:	bd80      	pop	{r7, pc}
    63d2:	bf00      	nop
    63d4:	10000c88 	.word	0x10000c88
    63d8:	10000c90 	.word	0x10000c90
    63dc:	10001358 	.word	0x10001358

000063e0 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
    function<_Res(_ArgTypes...)>::
    63e0:	b580      	push	{r7, lr}
    63e2:	b082      	sub	sp, #8
    63e4:	af00      	add	r7, sp, #0
    63e6:	6078      	str	r0, [r7, #4]
    63e8:	6039      	str	r1, [r7, #0]
    : _Function_base()
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	4618      	mov	r0, r3
    63ee:	f7f9 ffeb 	bl	3c8 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    63f2:	6838      	ldr	r0, [r7, #0]
    63f4:	f000 f8b9 	bl	656a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>
    63f8:	4603      	mov	r3, r0
    63fa:	2b00      	cmp	r3, #0
    63fc:	d00d      	beq.n	641a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    63fe:	683b      	ldr	r3, [r7, #0]
    6400:	689b      	ldr	r3, [r3, #8]
    6402:	6878      	ldr	r0, [r7, #4]
    6404:	6839      	ldr	r1, [r7, #0]
    6406:	2202      	movs	r2, #2
    6408:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    640a:	683b      	ldr	r3, [r7, #0]
    640c:	68da      	ldr	r2, [r3, #12]
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    6412:	683b      	ldr	r3, [r7, #0]
    6414:	689a      	ldr	r2, [r3, #8]
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	609a      	str	r2, [r3, #8]
    }
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	4618      	mov	r0, r3
    641e:	3708      	adds	r7, #8
    6420:	46bd      	mov	sp, r7
    6422:	bd80      	pop	{r7, pc}

00006424 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>:
      void swap(function& __x) noexcept
    6424:	b580      	push	{r7, lr}
    6426:	b082      	sub	sp, #8
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
    642c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    642e:	687b      	ldr	r3, [r7, #4]
    6430:	683a      	ldr	r2, [r7, #0]
    6432:	4611      	mov	r1, r2
    6434:	4618      	mov	r0, r3
    6436:	f7fc fbae 	bl	2b96 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	f103 0208 	add.w	r2, r3, #8
    6440:	683b      	ldr	r3, [r7, #0]
    6442:	3308      	adds	r3, #8
    6444:	4619      	mov	r1, r3
    6446:	4610      	mov	r0, r2
    6448:	f7fc fbd7 	bl	2bfa <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	f103 020c 	add.w	r2, r3, #12
    6452:	683b      	ldr	r3, [r7, #0]
    6454:	330c      	adds	r3, #12
    6456:	4619      	mov	r1, r3
    6458:	4610      	mov	r0, r2
    645a:	f000 f8a1 	bl	65a0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
      }
    645e:	bf00      	nop
    6460:	3708      	adds	r7, #8
    6462:	46bd      	mov	sp, r7
    6464:	bd80      	pop	{r7, pc}

00006466 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    6466:	b580      	push	{r7, lr}
    6468:	b084      	sub	sp, #16
    646a:	af00      	add	r7, sp, #0
    646c:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    646e:	f04f 0201 	mov.w	r2, #1
    6472:	f04f 0300 	mov.w	r3, #0
    6476:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    647a:	f107 0308 	add.w	r3, r7, #8
    647e:	4619      	mov	r1, r3
    6480:	6878      	ldr	r0, [r7, #4]
    6482:	f7fa f98d 	bl	7a0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    6486:	6878      	ldr	r0, [r7, #4]
    6488:	3710      	adds	r7, #16
    648a:	46bd      	mov	sp, r7
    648c:	bd80      	pop	{r7, pc}
    648e:	Address 0x000000000000648e is out of bounds.


00006490 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    6490:	b580      	push	{r7, lr}
    6492:	b084      	sub	sp, #16
    6494:	af00      	add	r7, sp, #0
    6496:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    6498:	a307      	add	r3, pc, #28	; (adr r3, 64b8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()+0x28>)
    649a:	e9d3 2300 	ldrd	r2, r3, [r3]
    649e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    64a2:	f107 0308 	add.w	r3, r7, #8
    64a6:	4619      	mov	r1, r3
    64a8:	6878      	ldr	r0, [r7, #4]
    64aa:	f7fa f8ff 	bl	6ac <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    64ae:	6878      	ldr	r0, [r7, #4]
    64b0:	3710      	adds	r7, #16
    64b2:	46bd      	mov	sp, r7
    64b4:	bd80      	pop	{r7, pc}
    64b6:	bf00      	nop
    64b8:	3b9aca00 	.word	0x3b9aca00
    64bc:	00000000 	.word	0x00000000

000064c0 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    64c0:	b580      	push	{r7, lr}
    64c2:	b086      	sub	sp, #24
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    64c8:	6878      	ldr	r0, [r7, #4]
    64ca:	f000 f888 	bl	65de <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    64ce:	eef0 7a40 	vmov.f32	s15, s0
	}
    64d2:	eeb0 0a67 	vmov.f32	s0, s15
    64d6:	3718      	adds	r7, #24
    64d8:	46bd      	mov	sp, r7
    64da:	bd80      	pop	{r7, pc}

000064dc <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    64dc:	b480      	push	{r7}
    64de:	b089      	sub	sp, #36	; 0x24
    64e0:	af00      	add	r7, sp, #0
    64e2:	60f8      	str	r0, [r7, #12]
    64e4:	60b9      	str	r1, [r7, #8]
    64e6:	607a      	str	r2, [r7, #4]
    64e8:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    64ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64ee:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    64f0:	2320      	movs	r3, #32
    64f2:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    64f4:	683b      	ldr	r3, [r7, #0]
    64f6:	f1c3 0320 	rsb	r3, r3, #32
    64fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    64fe:	fa22 f303 	lsr.w	r3, r2, r3
    6502:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    6504:	697a      	ldr	r2, [r7, #20]
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	fa02 f303 	lsl.w	r3, r2, r3
    650c:	43db      	mvns	r3, r3
    650e:	68fa      	ldr	r2, [r7, #12]
    6510:	4013      	ands	r3, r2
    6512:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    6514:	68ba      	ldr	r2, [r7, #8]
    6516:	697b      	ldr	r3, [r7, #20]
    6518:	401a      	ands	r2, r3
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	fa02 f303 	lsl.w	r3, r2, r3
    6520:	68fa      	ldr	r2, [r7, #12]
    6522:	4313      	orrs	r3, r2
    6524:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    6526:	68fb      	ldr	r3, [r7, #12]
}
    6528:	4618      	mov	r0, r3
    652a:	3724      	adds	r7, #36	; 0x24
    652c:	46bd      	mov	sp, r7
    652e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6532:	4770      	bx	lr

00006534 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>:
  static int IndexToIRQ(int index)
    6534:	b480      	push	{r7}
    6536:	b083      	sub	sp, #12
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
    return index - kArmExceptionOffset;
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	3b10      	subs	r3, #16
  }
    6540:	4618      	mov	r0, r3
    6542:	370c      	adds	r7, #12
    6544:	46bd      	mov	sp, r7
    6546:	f85d 7b04 	ldr.w	r7, [sp], #4
    654a:	4770      	bx	lr

0000654c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
    654c:	b580      	push	{r7, lr}
    654e:	b082      	sub	sp, #8
    6550:	af00      	add	r7, sp, #0
    6552:	6078      	str	r0, [r7, #4]
    6554:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	6839      	ldr	r1, [r7, #0]
    655a:	4618      	mov	r0, r3
    655c:	f000 f851 	bl	6602 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>
    6560:	4603      	mov	r3, r0
    6562:	4618      	mov	r0, r3
    6564:	3708      	adds	r7, #8
    6566:	46bd      	mov	sp, r7
    6568:	bd80      	pop	{r7, pc}

0000656a <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>:
      explicit operator bool() const noexcept
    656a:	b580      	push	{r7, lr}
    656c:	b082      	sub	sp, #8
    656e:	af00      	add	r7, sp, #0
    6570:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	4618      	mov	r0, r3
    6576:	f7f9 ff48 	bl	40a <std::_Function_base::_M_empty() const>
    657a:	4603      	mov	r3, r0
    657c:	f083 0301 	eor.w	r3, r3, #1
    6580:	b2db      	uxtb	r3, r3
    6582:	4618      	mov	r0, r3
    6584:	3708      	adds	r7, #8
    6586:	46bd      	mov	sp, r7
    6588:	bd80      	pop	{r7, pc}

0000658a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    658a:	b480      	push	{r7}
    658c:	b083      	sub	sp, #12
    658e:	af00      	add	r7, sp, #0
    6590:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	4618      	mov	r0, r3
    6596:	370c      	adds	r7, #12
    6598:	46bd      	mov	sp, r7
    659a:	f85d 7b04 	ldr.w	r7, [sp], #4
    659e:	4770      	bx	lr

000065a0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    65a0:	b580      	push	{r7, lr}
    65a2:	b084      	sub	sp, #16
    65a4:	af00      	add	r7, sp, #0
    65a6:	6078      	str	r0, [r7, #4]
    65a8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    65aa:	6878      	ldr	r0, [r7, #4]
    65ac:	f7ff ffed 	bl	658a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    65b0:	4603      	mov	r3, r0
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    65b6:	6838      	ldr	r0, [r7, #0]
    65b8:	f7ff ffe7 	bl	658a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    65bc:	4603      	mov	r3, r0
    65be:	681a      	ldr	r2, [r3, #0]
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    65c4:	f107 030c 	add.w	r3, r7, #12
    65c8:	4618      	mov	r0, r3
    65ca:	f7ff ffde 	bl	658a <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    65ce:	4603      	mov	r3, r0
    65d0:	681a      	ldr	r2, [r3, #0]
    65d2:	683b      	ldr	r3, [r7, #0]
    65d4:	601a      	str	r2, [r3, #0]
    }
    65d6:	bf00      	nop
    65d8:	3710      	adds	r7, #16
    65da:	46bd      	mov	sp, r7
    65dc:	bd80      	pop	{r7, pc}

000065de <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    65de:	b480      	push	{r7}
    65e0:	b085      	sub	sp, #20
    65e2:	af00      	add	r7, sp, #0
    65e4:	60f8      	str	r0, [r7, #12]
    65e6:	7239      	strb	r1, [r7, #8]
    65e8:	713a      	strb	r2, [r7, #4]
    65ea:	703b      	strb	r3, [r7, #0]
			return value;
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	681b      	ldr	r3, [r3, #0]
    65f0:	ee07 3a90 	vmov	s15, r3
		}
    65f4:	eeb0 0a67 	vmov.f32	s0, s15
    65f8:	3714      	adds	r7, #20
    65fa:	46bd      	mov	sp, r7
    65fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6600:	4770      	bx	lr

00006602 <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    6602:	b480      	push	{r7}
    6604:	b083      	sub	sp, #12
    6606:	af00      	add	r7, sp, #0
    6608:	6078      	str	r0, [r7, #4]
    660a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    660c:	683b      	ldr	r3, [r7, #0]
    660e:	011b      	lsls	r3, r3, #4
    6610:	687a      	ldr	r2, [r7, #4]
    6612:	4413      	add	r3, r2
    6614:	4618      	mov	r0, r3
    6616:	370c      	adds	r7, #12
    6618:	46bd      	mov	sp, r7
    661a:	f85d 7b04 	ldr.w	r7, [sp], #4
    661e:	4770      	bx	lr

00006620 <std::array<std::function<void ()>, 59u>::~array()>:
    struct array
    6620:	b590      	push	{r4, r7, lr}
    6622:	b083      	sub	sp, #12
    6624:	af00      	add	r7, sp, #0
    6626:	6078      	str	r0, [r7, #4]
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	2b00      	cmp	r3, #0
    662c:	d00a      	beq.n	6644 <std::array<std::function<void ()>, 59u>::~array()+0x24>
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	429c      	cmp	r4, r3
    6638:	d004      	beq.n	6644 <std::array<std::function<void ()>, 59u>::~array()+0x24>
    663a:	3c10      	subs	r4, #16
    663c:	4620      	mov	r0, r4
    663e:	f7fa fca6 	bl	f8e <std::function<void ()>::~function()>
    6642:	e7f7      	b.n	6634 <std::array<std::function<void ()>, 59u>::~array()+0x14>
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	4618      	mov	r0, r3
    6648:	370c      	adds	r7, #12
    664a:	46bd      	mov	sp, r7
    664c:	bd90      	pop	{r4, r7, pc}
    664e:	Address 0x000000000000664e is out of bounds.


00006650 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    6650:	b580      	push	{r7, lr}
    6652:	b082      	sub	sp, #8
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
    6658:	6039      	str	r1, [r7, #0]
    665a:	687b      	ldr	r3, [r7, #4]
    665c:	2b01      	cmp	r3, #1
    665e:	d175      	bne.n	674c <__static_initialization_and_destruction_0(int, int)+0xfc>
    6660:	683b      	ldr	r3, [r7, #0]
    6662:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6666:	4293      	cmp	r3, r2
    6668:	d170      	bne.n	674c <__static_initialization_and_destruction_0(int, int)+0xfc>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    666a:	4b3a      	ldr	r3, [pc, #232]	; (6754 <__static_initialization_and_destruction_0(int, int)+0x104>)
    666c:	681b      	ldr	r3, [r3, #0]
    666e:	f003 0301 	and.w	r3, r3, #1
    6672:	2b00      	cmp	r3, #0
    6674:	d10b      	bne.n	668e <__static_initialization_and_destruction_0(int, int)+0x3e>
    6676:	4b37      	ldr	r3, [pc, #220]	; (6754 <__static_initialization_and_destruction_0(int, int)+0x104>)
    6678:	2201      	movs	r2, #1
    667a:	601a      	str	r2, [r3, #0]
    667c:	4936      	ldr	r1, [pc, #216]	; (6758 <__static_initialization_and_destruction_0(int, int)+0x108>)
    667e:	4837      	ldr	r0, [pc, #220]	; (675c <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6680:	f7fb fcfc 	bl	207c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    6684:	4a36      	ldr	r2, [pc, #216]	; (6760 <__static_initialization_and_destruction_0(int, int)+0x110>)
    6686:	4937      	ldr	r1, [pc, #220]	; (6764 <__static_initialization_and_destruction_0(int, int)+0x114>)
    6688:	4834      	ldr	r0, [pc, #208]	; (675c <__static_initialization_and_destruction_0(int, int)+0x10c>)
    668a:	f000 faad 	bl	6be8 <__aeabi_atexit>
  inline static InterruptCallback callback = nullptr;
    668e:	4b36      	ldr	r3, [pc, #216]	; (6768 <__static_initialization_and_destruction_0(int, int)+0x118>)
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	f003 0301 	and.w	r3, r3, #1
    6696:	2b00      	cmp	r3, #0
    6698:	d10b      	bne.n	66b2 <__static_initialization_and_destruction_0(int, int)+0x62>
    669a:	4b33      	ldr	r3, [pc, #204]	; (6768 <__static_initialization_and_destruction_0(int, int)+0x118>)
    669c:	2201      	movs	r2, #1
    669e:	601a      	str	r2, [r3, #0]
    66a0:	2100      	movs	r1, #0
    66a2:	4832      	ldr	r0, [pc, #200]	; (676c <__static_initialization_and_destruction_0(int, int)+0x11c>)
    66a4:	f7ff fd87 	bl	61b6 <std::function<void ()>::function(decltype(nullptr))>
    66a8:	4a2d      	ldr	r2, [pc, #180]	; (6760 <__static_initialization_and_destruction_0(int, int)+0x110>)
    66aa:	4931      	ldr	r1, [pc, #196]	; (6770 <__static_initialization_and_destruction_0(int, int)+0x120>)
    66ac:	482f      	ldr	r0, [pc, #188]	; (676c <__static_initialization_and_destruction_0(int, int)+0x11c>)
    66ae:	f000 fa9b 	bl	6be8 <__aeabi_atexit>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    66b2:	4b30      	ldr	r3, [pc, #192]	; (6774 <__static_initialization_and_destruction_0(int, int)+0x124>)
    66b4:	681b      	ldr	r3, [r3, #0]
    66b6:	f003 0301 	and.w	r3, r3, #1
    66ba:	2b00      	cmp	r3, #0
    66bc:	d105      	bne.n	66ca <__static_initialization_and_destruction_0(int, int)+0x7a>
    66be:	4b2d      	ldr	r3, [pc, #180]	; (6774 <__static_initialization_and_destruction_0(int, int)+0x124>)
    66c0:	2201      	movs	r2, #1
    66c2:	601a      	str	r2, [r3, #0]
    66c4:	4a2c      	ldr	r2, [pc, #176]	; (6778 <__static_initialization_and_destruction_0(int, int)+0x128>)
    66c6:	4b2d      	ldr	r3, [pc, #180]	; (677c <__static_initialization_and_destruction_0(int, int)+0x12c>)
    66c8:	601a      	str	r2, [r3, #0]
    66ca:	4b2d      	ldr	r3, [pc, #180]	; (6780 <__static_initialization_and_destruction_0(int, int)+0x130>)
    66cc:	681b      	ldr	r3, [r3, #0]
    66ce:	f003 0301 	and.w	r3, r3, #1
    66d2:	2b00      	cmp	r3, #0
    66d4:	d105      	bne.n	66e2 <__static_initialization_and_destruction_0(int, int)+0x92>
    66d6:	4b2a      	ldr	r3, [pc, #168]	; (6780 <__static_initialization_and_destruction_0(int, int)+0x130>)
    66d8:	2201      	movs	r2, #1
    66da:	601a      	str	r2, [r3, #0]
    66dc:	4a29      	ldr	r2, [pc, #164]	; (6784 <__static_initialization_and_destruction_0(int, int)+0x134>)
    66de:	4b2a      	ldr	r3, [pc, #168]	; (6788 <__static_initialization_and_destruction_0(int, int)+0x138>)
    66e0:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    66e2:	4b2a      	ldr	r3, [pc, #168]	; (678c <__static_initialization_and_destruction_0(int, int)+0x13c>)
    66e4:	681b      	ldr	r3, [r3, #0]
    66e6:	f003 0301 	and.w	r3, r3, #1
    66ea:	2b00      	cmp	r3, #0
    66ec:	d105      	bne.n	66fa <__static_initialization_and_destruction_0(int, int)+0xaa>
    66ee:	4b27      	ldr	r3, [pc, #156]	; (678c <__static_initialization_and_destruction_0(int, int)+0x13c>)
    66f0:	2201      	movs	r2, #1
    66f2:	601a      	str	r2, [r3, #0]
    };
    66f4:	4a26      	ldr	r2, [pc, #152]	; (6790 <__static_initialization_and_destruction_0(int, int)+0x140>)
    66f6:	4b27      	ldr	r3, [pc, #156]	; (6794 <__static_initialization_and_destruction_0(int, int)+0x144>)
    66f8:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    66fa:	4b27      	ldr	r3, [pc, #156]	; (6798 <__static_initialization_and_destruction_0(int, int)+0x148>)
    66fc:	681b      	ldr	r3, [r3, #0]
    66fe:	f003 0301 	and.w	r3, r3, #1
    6702:	2b00      	cmp	r3, #0
    6704:	d105      	bne.n	6712 <__static_initialization_and_destruction_0(int, int)+0xc2>
    6706:	4b24      	ldr	r3, [pc, #144]	; (6798 <__static_initialization_and_destruction_0(int, int)+0x148>)
    6708:	2201      	movs	r2, #1
    670a:	601a      	str	r2, [r3, #0]
    };
    670c:	4a23      	ldr	r2, [pc, #140]	; (679c <__static_initialization_and_destruction_0(int, int)+0x14c>)
    670e:	4b24      	ldr	r3, [pc, #144]	; (67a0 <__static_initialization_and_destruction_0(int, int)+0x150>)
    6710:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    6712:	4b24      	ldr	r3, [pc, #144]	; (67a4 <__static_initialization_and_destruction_0(int, int)+0x154>)
    6714:	681b      	ldr	r3, [r3, #0]
    6716:	f003 0301 	and.w	r3, r3, #1
    671a:	2b00      	cmp	r3, #0
    671c:	d105      	bne.n	672a <__static_initialization_and_destruction_0(int, int)+0xda>
    671e:	4b21      	ldr	r3, [pc, #132]	; (67a4 <__static_initialization_and_destruction_0(int, int)+0x154>)
    6720:	2201      	movs	r2, #1
    6722:	601a      	str	r2, [r3, #0]
    };
    6724:	4a20      	ldr	r2, [pc, #128]	; (67a8 <__static_initialization_and_destruction_0(int, int)+0x158>)
    6726:	4b21      	ldr	r3, [pc, #132]	; (67ac <__static_initialization_and_destruction_0(int, int)+0x15c>)
    6728:	601a      	str	r2, [r3, #0]
  }

 private:
  static inline std::array<InterruptHandler,
                           kNumberOfInterrupts + kArmExceptionOffset>
      table;
    672a:	4b21      	ldr	r3, [pc, #132]	; (67b0 <__static_initialization_and_destruction_0(int, int)+0x160>)
    672c:	681b      	ldr	r3, [r3, #0]
    672e:	f003 0301 	and.w	r3, r3, #1
    6732:	2b00      	cmp	r3, #0
    6734:	d10a      	bne.n	674c <__static_initialization_and_destruction_0(int, int)+0xfc>
    6736:	4b1e      	ldr	r3, [pc, #120]	; (67b0 <__static_initialization_and_destruction_0(int, int)+0x160>)
    6738:	2201      	movs	r2, #1
    673a:	601a      	str	r2, [r3, #0]
    673c:	481d      	ldr	r0, [pc, #116]	; (67b4 <__static_initialization_and_destruction_0(int, int)+0x164>)
    673e:	f7ff fe0f 	bl	6360 <std::array<std::function<void ()>, 59u>::array()>
    6742:	4a07      	ldr	r2, [pc, #28]	; (6760 <__static_initialization_and_destruction_0(int, int)+0x110>)
    6744:	491c      	ldr	r1, [pc, #112]	; (67b8 <__static_initialization_and_destruction_0(int, int)+0x168>)
    6746:	481b      	ldr	r0, [pc, #108]	; (67b4 <__static_initialization_and_destruction_0(int, int)+0x164>)
    6748:	f000 fa4e 	bl	6be8 <__aeabi_atexit>
    674c:	bf00      	nop
    674e:	3708      	adds	r7, #8
    6750:	46bd      	mov	sp, r7
    6752:	bd80      	pop	{r7, pc}
    6754:	10001278 	.word	0x10001278
    6758:	0000089d 	.word	0x0000089d
    675c:	10000d30 	.word	0x10000d30
    6760:	10000000 	.word	0x10000000
    6764:	000008e5 	.word	0x000008e5
    6768:	10001708 	.word	0x10001708
    676c:	10001338 	.word	0x10001338
    6770:	00000f8f 	.word	0x00000f8f
    6774:	1000128c 	.word	0x1000128c
    6778:	400fc000 	.word	0x400fc000
    677c:	10001194 	.word	0x10001194
    6780:	10001274 	.word	0x10001274
    6784:	4002c000 	.word	0x4002c000
    6788:	10000d20 	.word	0x10000d20
    678c:	1000170c 	.word	0x1000170c
    6790:	40098000 	.word	0x40098000
    6794:	10000c38 	.word	0x10000c38
    6798:	10001710 	.word	0x10001710
    679c:	4009c000 	.word	0x4009c000
    67a0:	10000c4c 	.word	0x10000c4c
    67a4:	10001714 	.word	0x10001714
    67a8:	400a4000 	.word	0x400a4000
    67ac:	10000c60 	.word	0x10000c60
    67b0:	10001718 	.word	0x10001718
    67b4:	10001358 	.word	0x10001358
    67b8:	00006621 	.word	0x00006621

000067bc <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)>:
  void Initialize(
    67bc:	b590      	push	{r4, r7, lr}
    67be:	b083      	sub	sp, #12
    67c0:	af00      	add	r7, sp, #0
    67c2:	6078      	str	r0, [r7, #4]
    67c4:	6039      	str	r1, [r7, #0]
    std::fill(table.begin(), table.end(), unregistered_handler);
    67c6:	4808      	ldr	r0, [pc, #32]	; (67e8 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    67c8:	f000 f85e 	bl	6888 <std::array<std::function<void ()>, 59u>::begin()>
    67cc:	4604      	mov	r4, r0
    67ce:	4806      	ldr	r0, [pc, #24]	; (67e8 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    67d0:	f000 f866 	bl	68a0 <std::array<std::function<void ()>, 59u>::end()>
    67d4:	4603      	mov	r3, r0
    67d6:	683a      	ldr	r2, [r7, #0]
    67d8:	4619      	mov	r1, r3
    67da:	4620      	mov	r0, r4
    67dc:	f000 f86e 	bl	68bc <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
  }
    67e0:	bf00      	nop
    67e2:	370c      	adds	r7, #12
    67e4:	46bd      	mov	sp, r7
    67e6:	bd90      	pop	{r4, r7, pc}
    67e8:	10001358 	.word	0x10001358

000067ec <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)>:
  void Enable(RegistrationInfo_t register_info) override
    67ec:	b590      	push	{r4, r7, lr}
    67ee:	b085      	sub	sp, #20
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
    67f4:	6039      	str	r1, [r7, #0]
    int irq                = register_info.interrupt_request_number;
    67f6:	683b      	ldr	r3, [r7, #0]
    67f8:	681b      	ldr	r3, [r3, #0]
    67fa:	60fb      	str	r3, [r7, #12]
    table[IRQToIndex(irq)] = register_info.interrupt_handler;
    67fc:	683b      	ldr	r3, [r7, #0]
    67fe:	1d1c      	adds	r4, r3, #4
    6800:	68f8      	ldr	r0, [r7, #12]
    6802:	f000 f872 	bl	68ea <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    6806:	4603      	mov	r3, r0
    6808:	4619      	mov	r1, r3
    680a:	480e      	ldr	r0, [pc, #56]	; (6844 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x58>)
    680c:	f7ff fe9e 	bl	654c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6810:	4603      	mov	r3, r0
    6812:	4621      	mov	r1, r4
    6814:	4618      	mov	r0, r3
    6816:	f7fb fdcd 	bl	23b4 <std::function<void ()>::operator=(std::function<void ()> const&)>
    if (irq >= 0)
    681a:	68fb      	ldr	r3, [r7, #12]
    681c:	2b00      	cmp	r3, #0
    681e:	db02      	blt.n	6826 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x3a>
      NvicEnableIRQ(irq);
    6820:	68f8      	ldr	r0, [r7, #12]
    6822:	f000 f86f 	bl	6904 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>
    if (register_info.priority > -1)
    6826:	683b      	ldr	r3, [r7, #0]
    6828:	695b      	ldr	r3, [r3, #20]
    682a:	2b00      	cmp	r3, #0
    682c:	db05      	blt.n	683a <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x4e>
      NvicSetPriority(irq, register_info.priority);
    682e:	683b      	ldr	r3, [r7, #0]
    6830:	695b      	ldr	r3, [r3, #20]
    6832:	4619      	mov	r1, r3
    6834:	68f8      	ldr	r0, [r7, #12]
    6836:	f000 f87d 	bl	6934 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>
  }
    683a:	bf00      	nop
    683c:	3714      	adds	r7, #20
    683e:	46bd      	mov	sp, r7
    6840:	bd90      	pop	{r4, r7, pc}
    6842:	bf00      	nop
    6844:	10001358 	.word	0x10001358

00006848 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)>:
  void Disable(int interrupt_request_number) override
    6848:	b580      	push	{r7, lr}
    684a:	b082      	sub	sp, #8
    684c:	af00      	add	r7, sp, #0
    684e:	6078      	str	r0, [r7, #4]
    6850:	6039      	str	r1, [r7, #0]
    if (interrupt_request_number >= 0)
    6852:	683b      	ldr	r3, [r7, #0]
    6854:	2b00      	cmp	r3, #0
    6856:	db02      	blt.n	685e <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x16>
      NvicDisableIRQ(interrupt_request_number);
    6858:	6838      	ldr	r0, [r7, #0]
    685a:	f000 f897 	bl	698c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    table[IRQToIndex(interrupt_request_number)] = UnregisteredHandler;
    685e:	6838      	ldr	r0, [r7, #0]
    6860:	f000 f843 	bl	68ea <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    6864:	4603      	mov	r3, r0
    6866:	4619      	mov	r1, r3
    6868:	4805      	ldr	r0, [pc, #20]	; (6880 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x38>)
    686a:	f7ff fe6f 	bl	654c <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    686e:	4603      	mov	r3, r0
    6870:	4904      	ldr	r1, [pc, #16]	; (6884 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x3c>)
    6872:	4618      	mov	r0, r3
    6874:	f000 f8c4 	bl	6a00 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
  }
    6878:	bf00      	nop
    687a:	3708      	adds	r7, #8
    687c:	46bd      	mov	sp, r7
    687e:	bd80      	pop	{r7, pc}
    6880:	10001358 	.word	0x10001358
    6884:	000069c1 	.word	0x000069c1

00006888 <std::array<std::function<void ()>, 59u>::begin()>:
      begin() noexcept
    6888:	b580      	push	{r7, lr}
    688a:	b082      	sub	sp, #8
    688c:	af00      	add	r7, sp, #0
    688e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
    6890:	6878      	ldr	r0, [r7, #4]
    6892:	f000 f8d4 	bl	6a3e <std::array<std::function<void ()>, 59u>::data()>
    6896:	4603      	mov	r3, r0
    6898:	4618      	mov	r0, r3
    689a:	3708      	adds	r7, #8
    689c:	46bd      	mov	sp, r7
    689e:	bd80      	pop	{r7, pc}

000068a0 <std::array<std::function<void ()>, 59u>::end()>:
      end() noexcept
    68a0:	b580      	push	{r7, lr}
    68a2:	b082      	sub	sp, #8
    68a4:	af00      	add	r7, sp, #0
    68a6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
    68a8:	6878      	ldr	r0, [r7, #4]
    68aa:	f000 f8c8 	bl	6a3e <std::array<std::function<void ()>, 59u>::data()>
    68ae:	4603      	mov	r3, r0
    68b0:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    68b4:	4618      	mov	r0, r3
    68b6:	3708      	adds	r7, #8
    68b8:	46bd      	mov	sp, r7
    68ba:	bd80      	pop	{r7, pc}

000068bc <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    68bc:	b590      	push	{r4, r7, lr}
    68be:	b085      	sub	sp, #20
    68c0:	af00      	add	r7, sp, #0
    68c2:	60f8      	str	r0, [r7, #12]
    68c4:	60b9      	str	r1, [r7, #8]
    68c6:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
    68c8:	68f8      	ldr	r0, [r7, #12]
    68ca:	f000 f8c5 	bl	6a58 <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    68ce:	4604      	mov	r4, r0
    68d0:	68b8      	ldr	r0, [r7, #8]
    68d2:	f000 f8c1 	bl	6a58 <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    68d6:	4603      	mov	r3, r0
    68d8:	687a      	ldr	r2, [r7, #4]
    68da:	4619      	mov	r1, r3
    68dc:	4620      	mov	r0, r4
    68de:	f000 f8c6 	bl	6a6e <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
		    __value);
    }
    68e2:	bf00      	nop
    68e4:	3714      	adds	r7, #20
    68e6:	46bd      	mov	sp, r7
    68e8:	bd90      	pop	{r4, r7, pc}

000068ea <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>:
  static int IRQToIndex(int irq)
    68ea:	b480      	push	{r7}
    68ec:	b083      	sub	sp, #12
    68ee:	af00      	add	r7, sp, #0
    68f0:	6078      	str	r0, [r7, #4]
    return irq + kArmExceptionOffset;
    68f2:	687b      	ldr	r3, [r7, #4]
    68f4:	3310      	adds	r3, #16
  }
    68f6:	4618      	mov	r0, r3
    68f8:	370c      	adds	r7, #12
    68fa:	46bd      	mov	sp, r7
    68fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6900:	4770      	bx	lr
    6902:	Address 0x0000000000006902 is out of bounds.


00006904 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>:
  /// Enable External Interrupt
  /// Enables a device-specific interrupt in the NVIC interrupt controller.
  ///
  /// @param irq - External interrupt number. Value cannot be negative.
  static void NvicEnableIRQ(int irq)
    6904:	b480      	push	{r7}
    6906:	b083      	sub	sp, #12
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
  {
    nvic->ISER[(irq >> 5)] = (1 << (irq & 0x1F));
    690c:	687b      	ldr	r3, [r7, #4]
    690e:	f003 031f 	and.w	r3, r3, #31
    6912:	2201      	movs	r2, #1
    6914:	fa02 f103 	lsl.w	r1, r2, r3
    6918:	4b05      	ldr	r3, [pc, #20]	; (6930 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)+0x2c>)
    691a:	681b      	ldr	r3, [r3, #0]
    691c:	687a      	ldr	r2, [r7, #4]
    691e:	1152      	asrs	r2, r2, #5
    6920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    6924:	bf00      	nop
    6926:	370c      	adds	r7, #12
    6928:	46bd      	mov	sp, r7
    692a:	f85d 7b04 	ldr.w	r7, [sp], #4
    692e:	4770      	bx	lr
    6930:	10000c8c 	.word	0x10000c8c

00006934 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>:
  /// Set Interrupt Priority
  /// Sets the priority of an interrupt.
  /// @note    The priority cannot be set for every core interrupt.
  /// @param irq -  Interrupt number.
  /// @param priority -  Priority to set.
  static void NvicSetPriority(int irq, uint32_t priority)
    6934:	b480      	push	{r7}
    6936:	b085      	sub	sp, #20
    6938:	af00      	add	r7, sp, #0
    693a:	6078      	str	r0, [r7, #4]
    693c:	6039      	str	r1, [r7, #0]
  {
    uint32_t priority_mask = priority << (8U - kNvicPriorityBits);
    693e:	683b      	ldr	r3, [r7, #0]
    6940:	00db      	lsls	r3, r3, #3
    6942:	60fb      	str	r3, [r7, #12]
    if (irq < 0)
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	2b00      	cmp	r3, #0
    6948:	da0b      	bge.n	6962 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x2e>
    {
      scb->SHP[(irq & 0xFUL) - 4UL] = static_cast<uint8_t>(priority_mask);
    694a:	4b0e      	ldr	r3, [pc, #56]	; (6984 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x50>)
    694c:	681a      	ldr	r2, [r3, #0]
    694e:	687b      	ldr	r3, [r7, #4]
    6950:	f003 030f 	and.w	r3, r3, #15
    6954:	3b04      	subs	r3, #4
    6956:	68f9      	ldr	r1, [r7, #12]
    6958:	b2c9      	uxtb	r1, r1
    695a:	4413      	add	r3, r2
    695c:	460a      	mov	r2, r1
    695e:	761a      	strb	r2, [r3, #24]
    }
    else
    {
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    }
  }
    6960:	e009      	b.n	6976 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x42>
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    6962:	4b09      	ldr	r3, [pc, #36]	; (6988 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x54>)
    6964:	681a      	ldr	r2, [r3, #0]
    6966:	68fb      	ldr	r3, [r7, #12]
    6968:	b2d9      	uxtb	r1, r3
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	4413      	add	r3, r2
    696e:	f503 7340 	add.w	r3, r3, #768	; 0x300
    6972:	460a      	mov	r2, r1
    6974:	701a      	strb	r2, [r3, #0]
  }
    6976:	bf00      	nop
    6978:	3714      	adds	r7, #20
    697a:	46bd      	mov	sp, r7
    697c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6980:	4770      	bx	lr
    6982:	bf00      	nop
    6984:	10000c88 	.word	0x10000c88
    6988:	10000c8c 	.word	0x10000c8c

0000698c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>:
  static void NvicDisableIRQ(int irq)
    698c:	b480      	push	{r7}
    698e:	b083      	sub	sp, #12
    6990:	af00      	add	r7, sp, #0
    6992:	6078      	str	r0, [r7, #4]
    nvic->ICER[(irq >> 5)] = (1 << (irq & 0x1F));
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	f003 031f 	and.w	r3, r3, #31
    699a:	2201      	movs	r2, #1
    699c:	fa02 f103 	lsl.w	r1, r2, r3
    69a0:	4b06      	ldr	r3, [pc, #24]	; (69bc <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)+0x30>)
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	687a      	ldr	r2, [r7, #4]
    69a6:	1152      	asrs	r2, r2, #5
    69a8:	3220      	adds	r2, #32
    69aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    69ae:	bf00      	nop
    69b0:	370c      	adds	r7, #12
    69b2:	46bd      	mov	sp, r7
    69b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    69b8:	4770      	bx	lr
    69ba:	bf00      	nop
    69bc:	10000c8c 	.word	0x10000c8c

000069c0 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()>:

  /// Program will call this if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void UnregisteredHandler()
    69c0:	b580      	push	{r7, lr}
    69c2:	b082      	sub	sp, #8
    69c4:	af02      	add	r7, sp, #8
  {
    LOG_DEBUG("No interrupt handler found. Disabling interrupt request %d!",
    69c6:	4b0a      	ldr	r3, [pc, #40]	; (69f0 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	9300      	str	r3, [sp, #0]
    69cc:	2385      	movs	r3, #133	; 0x85
    69ce:	4a09      	ldr	r2, [pc, #36]	; (69f4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x34>)
    69d0:	4909      	ldr	r1, [pc, #36]	; (69f8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x38>)
    69d2:	480a      	ldr	r0, [pc, #40]	; (69fc <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x3c>)
    69d4:	f7fe f880 	bl	4ad8 <printf>
              current_vector);
    if (current_vector >= 0)
    69d8:	4b05      	ldr	r3, [pc, #20]	; (69f0 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	2b00      	cmp	r3, #0
    69de:	db04      	blt.n	69ea <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x2a>
    {
      NvicDisableIRQ(current_vector);
    69e0:	4b03      	ldr	r3, [pc, #12]	; (69f0 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    69e2:	681b      	ldr	r3, [r3, #0]
    69e4:	4618      	mov	r0, r3
    69e6:	f7ff ffd1 	bl	698c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    }
  }
    69ea:	bf00      	nop
    69ec:	46bd      	mov	sp, r7
    69ee:	bd80      	pop	{r7, pc}
    69f0:	10000c90 	.word	0x10000c90
    69f4:	00009674 	.word	0x00009674
    69f8:	000098fc 	.word	0x000098fc
    69fc:	00009738 	.word	0x00009738

00006a00 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
	operator=(_Functor&& __f)
    6a00:	b580      	push	{r7, lr}
    6a02:	b086      	sub	sp, #24
    6a04:	af00      	add	r7, sp, #0
    6a06:	6078      	str	r0, [r7, #4]
    6a08:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
    6a0a:	6838      	ldr	r0, [r7, #0]
    6a0c:	f000 f845 	bl	6a9a <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    6a10:	4602      	mov	r2, r0
    6a12:	f107 0308 	add.w	r3, r7, #8
    6a16:	4611      	mov	r1, r2
    6a18:	4618      	mov	r0, r3
    6a1a:	f7fb fca1 	bl	2360 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    6a1e:	f107 0308 	add.w	r3, r7, #8
    6a22:	6879      	ldr	r1, [r7, #4]
    6a24:	4618      	mov	r0, r3
    6a26:	f7fb ff79 	bl	291c <std::function<void ()>::swap(std::function<void ()>&)>
    6a2a:	f107 0308 	add.w	r3, r7, #8
    6a2e:	4618      	mov	r0, r3
    6a30:	f7fa faad 	bl	f8e <std::function<void ()>::~function()>
	  return *this;
    6a34:	687b      	ldr	r3, [r7, #4]
	}
    6a36:	4618      	mov	r0, r3
    6a38:	3718      	adds	r7, #24
    6a3a:	46bd      	mov	sp, r7
    6a3c:	bd80      	pop	{r7, pc}

00006a3e <std::array<std::function<void ()>, 59u>::data()>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
    6a3e:	b580      	push	{r7, lr}
    6a40:	b082      	sub	sp, #8
    6a42:	af00      	add	r7, sp, #0
    6a44:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	4618      	mov	r0, r3
    6a4a:	f000 f831 	bl	6ab0 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>
    6a4e:	4603      	mov	r3, r0
    6a50:	4618      	mov	r0, r3
    6a52:	3708      	adds	r7, #8
    6a54:	46bd      	mov	sp, r7
    6a56:	bd80      	pop	{r7, pc}

00006a58 <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>:
    __niter_base(_Iterator __it)
    6a58:	b480      	push	{r7}
    6a5a:	b083      	sub	sp, #12
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	6078      	str	r0, [r7, #4]
    { return __it; }
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	4618      	mov	r0, r3
    6a64:	370c      	adds	r7, #12
    6a66:	46bd      	mov	sp, r7
    6a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a6c:	4770      	bx	lr

00006a6e <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
    6a6e:	b580      	push	{r7, lr}
    6a70:	b084      	sub	sp, #16
    6a72:	af00      	add	r7, sp, #0
    6a74:	60f8      	str	r0, [r7, #12]
    6a76:	60b9      	str	r1, [r7, #8]
    6a78:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
    6a7a:	68fa      	ldr	r2, [r7, #12]
    6a7c:	68bb      	ldr	r3, [r7, #8]
    6a7e:	429a      	cmp	r2, r3
    6a80:	d007      	beq.n	6a92 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0x24>
	*__first = __value;
    6a82:	6879      	ldr	r1, [r7, #4]
    6a84:	68f8      	ldr	r0, [r7, #12]
    6a86:	f7fb fc95 	bl	23b4 <std::function<void ()>::operator=(std::function<void ()> const&)>
      for (; __first != __last; ++__first)
    6a8a:	68fb      	ldr	r3, [r7, #12]
    6a8c:	3310      	adds	r3, #16
    6a8e:	60fb      	str	r3, [r7, #12]
    6a90:	e7f3      	b.n	6a7a <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0xc>
    }
    6a92:	bf00      	nop
    6a94:	3710      	adds	r7, #16
    6a96:	46bd      	mov	sp, r7
    6a98:	bd80      	pop	{r7, pc}

00006a9a <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    6a9a:	b480      	push	{r7}
    6a9c:	b083      	sub	sp, #12
    6a9e:	af00      	add	r7, sp, #0
    6aa0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	4618      	mov	r0, r3
    6aa6:	370c      	adds	r7, #12
    6aa8:	46bd      	mov	sp, r7
    6aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aae:	4770      	bx	lr

00006ab0 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>:
      _S_ptr(const _Type& __t) noexcept
    6ab0:	b480      	push	{r7}
    6ab2:	b083      	sub	sp, #12
    6ab4:	af00      	add	r7, sp, #0
    6ab6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	4618      	mov	r0, r3
    6abc:	370c      	adds	r7, #12
    6abe:	46bd      	mov	sp, r7
    6ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ac4:	4770      	bx	lr

00006ac6 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    6ac6:	b580      	push	{r7, lr}
    6ac8:	af00      	add	r7, sp, #0
    6aca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6ace:	2001      	movs	r0, #1
    6ad0:	f7ff fdbe 	bl	6650 <__static_initialization_and_destruction_0(int, int)>
    6ad4:	bd80      	pop	{r7, pc}
    6ad6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6ada:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6ade:	Address 0x0000000000006ade is out of bounds.


00006ae0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    6ae0:	4b07      	ldr	r3, [pc, #28]	; (6b00 <pxCurrentTCBConst2>)
    6ae2:	6819      	ldr	r1, [r3, #0]
    6ae4:	6808      	ldr	r0, [r1, #0]
    6ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6aea:	f380 8809 	msr	PSP, r0
    6aee:	f3bf 8f6f 	isb	sy
    6af2:	f04f 0000 	mov.w	r0, #0
    6af6:	f380 8811 	msr	BASEPRI, r0
    6afa:	4770      	bx	lr
    6afc:	f3af 8000 	nop.w

00006b00 <pxCurrentTCBConst2>:
    6b00:	100012b8 	.word	0x100012b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    6b04:	bf00      	nop
    6b06:	bf00      	nop
    6b08:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    6b0c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006b10 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6b10:	f3ef 8009 	mrs	r0, PSP
    6b14:	f3bf 8f6f 	isb	sy
    6b18:	4b15      	ldr	r3, [pc, #84]	; (6b70 <pxCurrentTCBConst>)
    6b1a:	681a      	ldr	r2, [r3, #0]
    6b1c:	f01e 0f10 	tst.w	lr, #16
    6b20:	bf08      	it	eq
    6b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b2a:	6010      	str	r0, [r2, #0]
    6b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
    6b30:	f04f 0028 	mov.w	r0, #40	; 0x28
    6b34:	f380 8811 	msr	BASEPRI, r0
    6b38:	f3bf 8f4f 	dsb	sy
    6b3c:	f3bf 8f6f 	isb	sy
    6b40:	f7fc fddc 	bl	36fc <vTaskSwitchContext>
    6b44:	f04f 0000 	mov.w	r0, #0
    6b48:	f380 8811 	msr	BASEPRI, r0
    6b4c:	bc09      	pop	{r0, r3}
    6b4e:	6819      	ldr	r1, [r3, #0]
    6b50:	6808      	ldr	r0, [r1, #0]
    6b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b56:	f01e 0f10 	tst.w	lr, #16
    6b5a:	bf08      	it	eq
    6b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    6b60:	f380 8809 	msr	PSP, r0
    6b64:	f3bf 8f6f 	isb	sy
    6b68:	4770      	bx	lr
    6b6a:	bf00      	nop
    6b6c:	f3af 8000 	nop.w

00006b70 <pxCurrentTCBConst>:
    6b70:	100012b8 	.word	0x100012b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6b74:	bf00      	nop
    6b76:	bf00      	nop

00006b78 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6b78:	b480      	push	{r7}
    6b7a:	b083      	sub	sp, #12
    6b7c:	af00      	add	r7, sp, #0
    6b7e:	6078      	str	r0, [r7, #4]
    6b80:	6039      	str	r1, [r7, #0]
  return 1;
    6b82:	2301      	movs	r3, #1
}
    6b84:	4618      	mov	r0, r3
    6b86:	370c      	adds	r7, #12
    6b88:	46bd      	mov	sp, r7
    6b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b8e:	4770      	bx	lr

00006b90 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6b90:	b480      	push	{r7}
    6b92:	b083      	sub	sp, #12
    6b94:	af00      	add	r7, sp, #0
    6b96:	6078      	str	r0, [r7, #4]
    6b98:	6039      	str	r1, [r7, #0]
  return 0;
    6b9a:	2300      	movs	r3, #0
}
    6b9c:	4618      	mov	r0, r3
    6b9e:	370c      	adds	r7, #12
    6ba0:	46bd      	mov	sp, r7
    6ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ba6:	4770      	bx	lr

00006ba8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6ba8:	b480      	push	{r7}
    6baa:	b083      	sub	sp, #12
    6bac:	af00      	add	r7, sp, #0
    6bae:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    6bb0:	4a04      	ldr	r2, [pc, #16]	; (6bc4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	6013      	str	r3, [r2, #0]
}
    6bb6:	bf00      	nop
    6bb8:	370c      	adds	r7, #12
    6bba:	46bd      	mov	sp, r7
    6bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bc0:	4770      	bx	lr
    6bc2:	bf00      	nop
    6bc4:	10000c10 	.word	0x10000c10

00006bc8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    6bc8:	b480      	push	{r7}
    6bca:	b083      	sub	sp, #12
    6bcc:	af00      	add	r7, sp, #0
    6bce:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    6bd0:	4a04      	ldr	r2, [pc, #16]	; (6be4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	6013      	str	r3, [r2, #0]
}
    6bd6:	bf00      	nop
    6bd8:	370c      	adds	r7, #12
    6bda:	46bd      	mov	sp, r7
    6bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6be0:	4770      	bx	lr
    6be2:	bf00      	nop
    6be4:	10000c14 	.word	0x10000c14

00006be8 <__aeabi_atexit>:
    6be8:	460b      	mov	r3, r1
    6bea:	4601      	mov	r1, r0
    6bec:	4618      	mov	r0, r3
    6bee:	f001 ba9d 	b.w	812c <__cxa_atexit>

00006bf2 <__cxa_pure_virtual>:
    6bf2:	b508      	push	{r3, lr}
    6bf4:	f000 f810 	bl	6c18 <std::terminate()>

00006bf8 <std::__throw_bad_function_call()>:
    6bf8:	b508      	push	{r3, lr}
    6bfa:	f001 fa8f 	bl	811c <abort>

00006bfe <__cxxabiv1::__terminate(void (*)())>:
    6bfe:	b508      	push	{r3, lr}
    6c00:	4780      	blx	r0
    6c02:	f001 fa8b 	bl	811c <abort>
    6c06:	Address 0x0000000000006c06 is out of bounds.


00006c08 <std::get_terminate()>:
    6c08:	4b02      	ldr	r3, [pc, #8]	; (6c14 <std::get_terminate()+0xc>)
    6c0a:	6818      	ldr	r0, [r3, #0]
    6c0c:	f3bf 8f5b 	dmb	ish
    6c10:	4770      	bx	lr
    6c12:	bf00      	nop
    6c14:	10000c98 	.word	0x10000c98

00006c18 <std::terminate()>:
    6c18:	b508      	push	{r3, lr}
    6c1a:	f7ff fff5 	bl	6c08 <std::get_terminate()>
    6c1e:	f7ff ffee 	bl	6bfe <__cxxabiv1::__terminate(void (*)())>
    6c22:	Address 0x0000000000006c22 is out of bounds.


00006c24 <__aeabi_d2f>:
    6c24:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6c28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6c2c:	bf24      	itt	cs
    6c2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6c32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6c36:	d90d      	bls.n	6c54 <__aeabi_d2f+0x30>
    6c38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6c3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6c40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6c44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6c48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6c4c:	bf08      	it	eq
    6c4e:	f020 0001 	biceq.w	r0, r0, #1
    6c52:	4770      	bx	lr
    6c54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6c58:	d121      	bne.n	6c9e <__aeabi_d2f+0x7a>
    6c5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6c5e:	bfbc      	itt	lt
    6c60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6c64:	4770      	bxlt	lr
    6c66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6c6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6c6e:	f1c2 0218 	rsb	r2, r2, #24
    6c72:	f1c2 0c20 	rsb	ip, r2, #32
    6c76:	fa10 f30c 	lsls.w	r3, r0, ip
    6c7a:	fa20 f002 	lsr.w	r0, r0, r2
    6c7e:	bf18      	it	ne
    6c80:	f040 0001 	orrne.w	r0, r0, #1
    6c84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6c88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6c8c:	fa03 fc0c 	lsl.w	ip, r3, ip
    6c90:	ea40 000c 	orr.w	r0, r0, ip
    6c94:	fa23 f302 	lsr.w	r3, r3, r2
    6c98:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6c9c:	e7cc      	b.n	6c38 <__aeabi_d2f+0x14>
    6c9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6ca2:	d107      	bne.n	6cb4 <__aeabi_d2f+0x90>
    6ca4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6ca8:	bf1e      	ittt	ne
    6caa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6cae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6cb2:	4770      	bxne	lr
    6cb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    6cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6cbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6cc0:	4770      	bx	lr
    6cc2:	bf00      	nop

00006cc4 <__aeabi_frsub>:
    6cc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6cc8:	e002      	b.n	6cd0 <__addsf3>
    6cca:	bf00      	nop

00006ccc <__aeabi_fsub>:
    6ccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006cd0 <__addsf3>:
    6cd0:	0042      	lsls	r2, r0, #1
    6cd2:	bf1f      	itttt	ne
    6cd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    6cd8:	ea92 0f03 	teqne	r2, r3
    6cdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6ce0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6ce4:	d06a      	beq.n	6dbc <__addsf3+0xec>
    6ce6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    6cea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6cee:	bfc1      	itttt	gt
    6cf0:	18d2      	addgt	r2, r2, r3
    6cf2:	4041      	eorgt	r1, r0
    6cf4:	4048      	eorgt	r0, r1
    6cf6:	4041      	eorgt	r1, r0
    6cf8:	bfb8      	it	lt
    6cfa:	425b      	neglt	r3, r3
    6cfc:	2b19      	cmp	r3, #25
    6cfe:	bf88      	it	hi
    6d00:	4770      	bxhi	lr
    6d02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6d06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6d0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6d0e:	bf18      	it	ne
    6d10:	4240      	negne	r0, r0
    6d12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6d16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6d1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6d1e:	bf18      	it	ne
    6d20:	4249      	negne	r1, r1
    6d22:	ea92 0f03 	teq	r2, r3
    6d26:	d03f      	beq.n	6da8 <__addsf3+0xd8>
    6d28:	f1a2 0201 	sub.w	r2, r2, #1
    6d2c:	fa41 fc03 	asr.w	ip, r1, r3
    6d30:	eb10 000c 	adds.w	r0, r0, ip
    6d34:	f1c3 0320 	rsb	r3, r3, #32
    6d38:	fa01 f103 	lsl.w	r1, r1, r3
    6d3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6d40:	d502      	bpl.n	6d48 <__addsf3+0x78>
    6d42:	4249      	negs	r1, r1
    6d44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6d48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6d4c:	d313      	bcc.n	6d76 <__addsf3+0xa6>
    6d4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6d52:	d306      	bcc.n	6d62 <__addsf3+0x92>
    6d54:	0840      	lsrs	r0, r0, #1
    6d56:	ea4f 0131 	mov.w	r1, r1, rrx
    6d5a:	f102 0201 	add.w	r2, r2, #1
    6d5e:	2afe      	cmp	r2, #254	; 0xfe
    6d60:	d251      	bcs.n	6e06 <__addsf3+0x136>
    6d62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6d66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6d6a:	bf08      	it	eq
    6d6c:	f020 0001 	biceq.w	r0, r0, #1
    6d70:	ea40 0003 	orr.w	r0, r0, r3
    6d74:	4770      	bx	lr
    6d76:	0049      	lsls	r1, r1, #1
    6d78:	eb40 0000 	adc.w	r0, r0, r0
    6d7c:	3a01      	subs	r2, #1
    6d7e:	bf28      	it	cs
    6d80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    6d84:	d2ed      	bcs.n	6d62 <__addsf3+0x92>
    6d86:	fab0 fc80 	clz	ip, r0
    6d8a:	f1ac 0c08 	sub.w	ip, ip, #8
    6d8e:	ebb2 020c 	subs.w	r2, r2, ip
    6d92:	fa00 f00c 	lsl.w	r0, r0, ip
    6d96:	bfaa      	itet	ge
    6d98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6d9c:	4252      	neglt	r2, r2
    6d9e:	4318      	orrge	r0, r3
    6da0:	bfbc      	itt	lt
    6da2:	40d0      	lsrlt	r0, r2
    6da4:	4318      	orrlt	r0, r3
    6da6:	4770      	bx	lr
    6da8:	f092 0f00 	teq	r2, #0
    6dac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6db0:	bf06      	itte	eq
    6db2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6db6:	3201      	addeq	r2, #1
    6db8:	3b01      	subne	r3, #1
    6dba:	e7b5      	b.n	6d28 <__addsf3+0x58>
    6dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6dc4:	bf18      	it	ne
    6dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6dca:	d021      	beq.n	6e10 <__addsf3+0x140>
    6dcc:	ea92 0f03 	teq	r2, r3
    6dd0:	d004      	beq.n	6ddc <__addsf3+0x10c>
    6dd2:	f092 0f00 	teq	r2, #0
    6dd6:	bf08      	it	eq
    6dd8:	4608      	moveq	r0, r1
    6dda:	4770      	bx	lr
    6ddc:	ea90 0f01 	teq	r0, r1
    6de0:	bf1c      	itt	ne
    6de2:	2000      	movne	r0, #0
    6de4:	4770      	bxne	lr
    6de6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6dea:	d104      	bne.n	6df6 <__addsf3+0x126>
    6dec:	0040      	lsls	r0, r0, #1
    6dee:	bf28      	it	cs
    6df0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6df4:	4770      	bx	lr
    6df6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6dfa:	bf3c      	itt	cc
    6dfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6e00:	4770      	bxcc	lr
    6e02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6e06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6e0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6e0e:	4770      	bx	lr
    6e10:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6e14:	bf16      	itet	ne
    6e16:	4608      	movne	r0, r1
    6e18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6e1c:	4601      	movne	r1, r0
    6e1e:	0242      	lsls	r2, r0, #9
    6e20:	bf06      	itte	eq
    6e22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6e26:	ea90 0f01 	teqeq	r0, r1
    6e2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6e2e:	4770      	bx	lr

00006e30 <__aeabi_ui2f>:
    6e30:	f04f 0300 	mov.w	r3, #0
    6e34:	e004      	b.n	6e40 <__aeabi_i2f+0x8>
    6e36:	bf00      	nop

00006e38 <__aeabi_i2f>:
    6e38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6e3c:	bf48      	it	mi
    6e3e:	4240      	negmi	r0, r0
    6e40:	ea5f 0c00 	movs.w	ip, r0
    6e44:	bf08      	it	eq
    6e46:	4770      	bxeq	lr
    6e48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6e4c:	4601      	mov	r1, r0
    6e4e:	f04f 0000 	mov.w	r0, #0
    6e52:	e01c      	b.n	6e8e <__aeabi_l2f+0x2a>

00006e54 <__aeabi_ul2f>:
    6e54:	ea50 0201 	orrs.w	r2, r0, r1
    6e58:	bf08      	it	eq
    6e5a:	4770      	bxeq	lr
    6e5c:	f04f 0300 	mov.w	r3, #0
    6e60:	e00a      	b.n	6e78 <__aeabi_l2f+0x14>
    6e62:	bf00      	nop

00006e64 <__aeabi_l2f>:
    6e64:	ea50 0201 	orrs.w	r2, r0, r1
    6e68:	bf08      	it	eq
    6e6a:	4770      	bxeq	lr
    6e6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6e70:	d502      	bpl.n	6e78 <__aeabi_l2f+0x14>
    6e72:	4240      	negs	r0, r0
    6e74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6e78:	ea5f 0c01 	movs.w	ip, r1
    6e7c:	bf02      	ittt	eq
    6e7e:	4684      	moveq	ip, r0
    6e80:	4601      	moveq	r1, r0
    6e82:	2000      	moveq	r0, #0
    6e84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6e88:	bf08      	it	eq
    6e8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6e8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6e92:	fabc f28c 	clz	r2, ip
    6e96:	3a08      	subs	r2, #8
    6e98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6e9c:	db10      	blt.n	6ec0 <__aeabi_l2f+0x5c>
    6e9e:	fa01 fc02 	lsl.w	ip, r1, r2
    6ea2:	4463      	add	r3, ip
    6ea4:	fa00 fc02 	lsl.w	ip, r0, r2
    6ea8:	f1c2 0220 	rsb	r2, r2, #32
    6eac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6eb0:	fa20 f202 	lsr.w	r2, r0, r2
    6eb4:	eb43 0002 	adc.w	r0, r3, r2
    6eb8:	bf08      	it	eq
    6eba:	f020 0001 	biceq.w	r0, r0, #1
    6ebe:	4770      	bx	lr
    6ec0:	f102 0220 	add.w	r2, r2, #32
    6ec4:	fa01 fc02 	lsl.w	ip, r1, r2
    6ec8:	f1c2 0220 	rsb	r2, r2, #32
    6ecc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6ed0:	fa21 f202 	lsr.w	r2, r1, r2
    6ed4:	eb43 0002 	adc.w	r0, r3, r2
    6ed8:	bf08      	it	eq
    6eda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6ede:	4770      	bx	lr

00006ee0 <__aeabi_ldivmod>:
    6ee0:	b97b      	cbnz	r3, 6f02 <__aeabi_ldivmod+0x22>
    6ee2:	b972      	cbnz	r2, 6f02 <__aeabi_ldivmod+0x22>
    6ee4:	2900      	cmp	r1, #0
    6ee6:	bfbe      	ittt	lt
    6ee8:	2000      	movlt	r0, #0
    6eea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    6eee:	e006      	blt.n	6efe <__aeabi_ldivmod+0x1e>
    6ef0:	bf08      	it	eq
    6ef2:	2800      	cmpeq	r0, #0
    6ef4:	bf1c      	itt	ne
    6ef6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    6efa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6efe:	f001 b90b 	b.w	8118 <__aeabi_idiv0>
    6f02:	f1ad 0c08 	sub.w	ip, sp, #8
    6f06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6f0a:	2900      	cmp	r1, #0
    6f0c:	db09      	blt.n	6f22 <__aeabi_ldivmod+0x42>
    6f0e:	2b00      	cmp	r3, #0
    6f10:	db1a      	blt.n	6f48 <__aeabi_ldivmod+0x68>
    6f12:	f000 f84d 	bl	6fb0 <__udivmoddi4>
    6f16:	f8dd e004 	ldr.w	lr, [sp, #4]
    6f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f1e:	b004      	add	sp, #16
    6f20:	4770      	bx	lr
    6f22:	4240      	negs	r0, r0
    6f24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6f28:	2b00      	cmp	r3, #0
    6f2a:	db1b      	blt.n	6f64 <__aeabi_ldivmod+0x84>
    6f2c:	f000 f840 	bl	6fb0 <__udivmoddi4>
    6f30:	f8dd e004 	ldr.w	lr, [sp, #4]
    6f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f38:	b004      	add	sp, #16
    6f3a:	4240      	negs	r0, r0
    6f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6f40:	4252      	negs	r2, r2
    6f42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6f46:	4770      	bx	lr
    6f48:	4252      	negs	r2, r2
    6f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6f4e:	f000 f82f 	bl	6fb0 <__udivmoddi4>
    6f52:	f8dd e004 	ldr.w	lr, [sp, #4]
    6f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f5a:	b004      	add	sp, #16
    6f5c:	4240      	negs	r0, r0
    6f5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6f62:	4770      	bx	lr
    6f64:	4252      	negs	r2, r2
    6f66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6f6a:	f000 f821 	bl	6fb0 <__udivmoddi4>
    6f6e:	f8dd e004 	ldr.w	lr, [sp, #4]
    6f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f76:	b004      	add	sp, #16
    6f78:	4252      	negs	r2, r2
    6f7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6f7e:	4770      	bx	lr

00006f80 <__aeabi_uldivmod>:
    6f80:	b953      	cbnz	r3, 6f98 <__aeabi_uldivmod+0x18>
    6f82:	b94a      	cbnz	r2, 6f98 <__aeabi_uldivmod+0x18>
    6f84:	2900      	cmp	r1, #0
    6f86:	bf08      	it	eq
    6f88:	2800      	cmpeq	r0, #0
    6f8a:	bf1c      	itt	ne
    6f8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6f90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6f94:	f001 b8c0 	b.w	8118 <__aeabi_idiv0>
    6f98:	f1ad 0c08 	sub.w	ip, sp, #8
    6f9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6fa0:	f000 f806 	bl	6fb0 <__udivmoddi4>
    6fa4:	f8dd e004 	ldr.w	lr, [sp, #4]
    6fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6fac:	b004      	add	sp, #16
    6fae:	4770      	bx	lr

00006fb0 <__udivmoddi4>:
    6fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6fb4:	9d08      	ldr	r5, [sp, #32]
    6fb6:	4604      	mov	r4, r0
    6fb8:	468c      	mov	ip, r1
    6fba:	2b00      	cmp	r3, #0
    6fbc:	f040 8083 	bne.w	70c6 <__udivmoddi4+0x116>
    6fc0:	428a      	cmp	r2, r1
    6fc2:	4617      	mov	r7, r2
    6fc4:	d947      	bls.n	7056 <__udivmoddi4+0xa6>
    6fc6:	fab2 f282 	clz	r2, r2
    6fca:	b142      	cbz	r2, 6fde <__udivmoddi4+0x2e>
    6fcc:	f1c2 0020 	rsb	r0, r2, #32
    6fd0:	fa24 f000 	lsr.w	r0, r4, r0
    6fd4:	4091      	lsls	r1, r2
    6fd6:	4097      	lsls	r7, r2
    6fd8:	ea40 0c01 	orr.w	ip, r0, r1
    6fdc:	4094      	lsls	r4, r2
    6fde:	ea4f 4817 	mov.w	r8, r7, lsr #16
    6fe2:	0c23      	lsrs	r3, r4, #16
    6fe4:	fbbc f6f8 	udiv	r6, ip, r8
    6fe8:	fa1f fe87 	uxth.w	lr, r7
    6fec:	fb08 c116 	mls	r1, r8, r6, ip
    6ff0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6ff4:	fb06 f10e 	mul.w	r1, r6, lr
    6ff8:	4299      	cmp	r1, r3
    6ffa:	d909      	bls.n	7010 <__udivmoddi4+0x60>
    6ffc:	18fb      	adds	r3, r7, r3
    6ffe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    7002:	f080 8119 	bcs.w	7238 <__udivmoddi4+0x288>
    7006:	4299      	cmp	r1, r3
    7008:	f240 8116 	bls.w	7238 <__udivmoddi4+0x288>
    700c:	3e02      	subs	r6, #2
    700e:	443b      	add	r3, r7
    7010:	1a5b      	subs	r3, r3, r1
    7012:	b2a4      	uxth	r4, r4
    7014:	fbb3 f0f8 	udiv	r0, r3, r8
    7018:	fb08 3310 	mls	r3, r8, r0, r3
    701c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7020:	fb00 fe0e 	mul.w	lr, r0, lr
    7024:	45a6      	cmp	lr, r4
    7026:	d909      	bls.n	703c <__udivmoddi4+0x8c>
    7028:	193c      	adds	r4, r7, r4
    702a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    702e:	f080 8105 	bcs.w	723c <__udivmoddi4+0x28c>
    7032:	45a6      	cmp	lr, r4
    7034:	f240 8102 	bls.w	723c <__udivmoddi4+0x28c>
    7038:	3802      	subs	r0, #2
    703a:	443c      	add	r4, r7
    703c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    7040:	eba4 040e 	sub.w	r4, r4, lr
    7044:	2600      	movs	r6, #0
    7046:	b11d      	cbz	r5, 7050 <__udivmoddi4+0xa0>
    7048:	40d4      	lsrs	r4, r2
    704a:	2300      	movs	r3, #0
    704c:	e9c5 4300 	strd	r4, r3, [r5]
    7050:	4631      	mov	r1, r6
    7052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7056:	b902      	cbnz	r2, 705a <__udivmoddi4+0xaa>
    7058:	deff      	udf	#255	; 0xff
    705a:	fab2 f282 	clz	r2, r2
    705e:	2a00      	cmp	r2, #0
    7060:	d150      	bne.n	7104 <__udivmoddi4+0x154>
    7062:	1bcb      	subs	r3, r1, r7
    7064:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    7068:	fa1f f887 	uxth.w	r8, r7
    706c:	2601      	movs	r6, #1
    706e:	fbb3 fcfe 	udiv	ip, r3, lr
    7072:	0c21      	lsrs	r1, r4, #16
    7074:	fb0e 331c 	mls	r3, lr, ip, r3
    7078:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    707c:	fb08 f30c 	mul.w	r3, r8, ip
    7080:	428b      	cmp	r3, r1
    7082:	d907      	bls.n	7094 <__udivmoddi4+0xe4>
    7084:	1879      	adds	r1, r7, r1
    7086:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    708a:	d202      	bcs.n	7092 <__udivmoddi4+0xe2>
    708c:	428b      	cmp	r3, r1
    708e:	f200 80e9 	bhi.w	7264 <__udivmoddi4+0x2b4>
    7092:	4684      	mov	ip, r0
    7094:	1ac9      	subs	r1, r1, r3
    7096:	b2a3      	uxth	r3, r4
    7098:	fbb1 f0fe 	udiv	r0, r1, lr
    709c:	fb0e 1110 	mls	r1, lr, r0, r1
    70a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    70a4:	fb08 f800 	mul.w	r8, r8, r0
    70a8:	45a0      	cmp	r8, r4
    70aa:	d907      	bls.n	70bc <__udivmoddi4+0x10c>
    70ac:	193c      	adds	r4, r7, r4
    70ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    70b2:	d202      	bcs.n	70ba <__udivmoddi4+0x10a>
    70b4:	45a0      	cmp	r8, r4
    70b6:	f200 80d9 	bhi.w	726c <__udivmoddi4+0x2bc>
    70ba:	4618      	mov	r0, r3
    70bc:	eba4 0408 	sub.w	r4, r4, r8
    70c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    70c4:	e7bf      	b.n	7046 <__udivmoddi4+0x96>
    70c6:	428b      	cmp	r3, r1
    70c8:	d909      	bls.n	70de <__udivmoddi4+0x12e>
    70ca:	2d00      	cmp	r5, #0
    70cc:	f000 80b1 	beq.w	7232 <__udivmoddi4+0x282>
    70d0:	2600      	movs	r6, #0
    70d2:	e9c5 0100 	strd	r0, r1, [r5]
    70d6:	4630      	mov	r0, r6
    70d8:	4631      	mov	r1, r6
    70da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70de:	fab3 f683 	clz	r6, r3
    70e2:	2e00      	cmp	r6, #0
    70e4:	d14a      	bne.n	717c <__udivmoddi4+0x1cc>
    70e6:	428b      	cmp	r3, r1
    70e8:	d302      	bcc.n	70f0 <__udivmoddi4+0x140>
    70ea:	4282      	cmp	r2, r0
    70ec:	f200 80b8 	bhi.w	7260 <__udivmoddi4+0x2b0>
    70f0:	1a84      	subs	r4, r0, r2
    70f2:	eb61 0103 	sbc.w	r1, r1, r3
    70f6:	2001      	movs	r0, #1
    70f8:	468c      	mov	ip, r1
    70fa:	2d00      	cmp	r5, #0
    70fc:	d0a8      	beq.n	7050 <__udivmoddi4+0xa0>
    70fe:	e9c5 4c00 	strd	r4, ip, [r5]
    7102:	e7a5      	b.n	7050 <__udivmoddi4+0xa0>
    7104:	f1c2 0320 	rsb	r3, r2, #32
    7108:	fa20 f603 	lsr.w	r6, r0, r3
    710c:	4097      	lsls	r7, r2
    710e:	fa01 f002 	lsl.w	r0, r1, r2
    7112:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    7116:	40d9      	lsrs	r1, r3
    7118:	4330      	orrs	r0, r6
    711a:	0c03      	lsrs	r3, r0, #16
    711c:	fbb1 f6fe 	udiv	r6, r1, lr
    7120:	fa1f f887 	uxth.w	r8, r7
    7124:	fb0e 1116 	mls	r1, lr, r6, r1
    7128:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    712c:	fb06 f108 	mul.w	r1, r6, r8
    7130:	4299      	cmp	r1, r3
    7132:	fa04 f402 	lsl.w	r4, r4, r2
    7136:	d909      	bls.n	714c <__udivmoddi4+0x19c>
    7138:	18fb      	adds	r3, r7, r3
    713a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    713e:	f080 808d 	bcs.w	725c <__udivmoddi4+0x2ac>
    7142:	4299      	cmp	r1, r3
    7144:	f240 808a 	bls.w	725c <__udivmoddi4+0x2ac>
    7148:	3e02      	subs	r6, #2
    714a:	443b      	add	r3, r7
    714c:	1a5b      	subs	r3, r3, r1
    714e:	b281      	uxth	r1, r0
    7150:	fbb3 f0fe 	udiv	r0, r3, lr
    7154:	fb0e 3310 	mls	r3, lr, r0, r3
    7158:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    715c:	fb00 f308 	mul.w	r3, r0, r8
    7160:	428b      	cmp	r3, r1
    7162:	d907      	bls.n	7174 <__udivmoddi4+0x1c4>
    7164:	1879      	adds	r1, r7, r1
    7166:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    716a:	d273      	bcs.n	7254 <__udivmoddi4+0x2a4>
    716c:	428b      	cmp	r3, r1
    716e:	d971      	bls.n	7254 <__udivmoddi4+0x2a4>
    7170:	3802      	subs	r0, #2
    7172:	4439      	add	r1, r7
    7174:	1acb      	subs	r3, r1, r3
    7176:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    717a:	e778      	b.n	706e <__udivmoddi4+0xbe>
    717c:	f1c6 0c20 	rsb	ip, r6, #32
    7180:	fa03 f406 	lsl.w	r4, r3, r6
    7184:	fa22 f30c 	lsr.w	r3, r2, ip
    7188:	431c      	orrs	r4, r3
    718a:	fa20 f70c 	lsr.w	r7, r0, ip
    718e:	fa01 f306 	lsl.w	r3, r1, r6
    7192:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    7196:	fa21 f10c 	lsr.w	r1, r1, ip
    719a:	431f      	orrs	r7, r3
    719c:	0c3b      	lsrs	r3, r7, #16
    719e:	fbb1 f9fe 	udiv	r9, r1, lr
    71a2:	fa1f f884 	uxth.w	r8, r4
    71a6:	fb0e 1119 	mls	r1, lr, r9, r1
    71aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    71ae:	fb09 fa08 	mul.w	sl, r9, r8
    71b2:	458a      	cmp	sl, r1
    71b4:	fa02 f206 	lsl.w	r2, r2, r6
    71b8:	fa00 f306 	lsl.w	r3, r0, r6
    71bc:	d908      	bls.n	71d0 <__udivmoddi4+0x220>
    71be:	1861      	adds	r1, r4, r1
    71c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    71c4:	d248      	bcs.n	7258 <__udivmoddi4+0x2a8>
    71c6:	458a      	cmp	sl, r1
    71c8:	d946      	bls.n	7258 <__udivmoddi4+0x2a8>
    71ca:	f1a9 0902 	sub.w	r9, r9, #2
    71ce:	4421      	add	r1, r4
    71d0:	eba1 010a 	sub.w	r1, r1, sl
    71d4:	b2bf      	uxth	r7, r7
    71d6:	fbb1 f0fe 	udiv	r0, r1, lr
    71da:	fb0e 1110 	mls	r1, lr, r0, r1
    71de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    71e2:	fb00 f808 	mul.w	r8, r0, r8
    71e6:	45b8      	cmp	r8, r7
    71e8:	d907      	bls.n	71fa <__udivmoddi4+0x24a>
    71ea:	19e7      	adds	r7, r4, r7
    71ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    71f0:	d22e      	bcs.n	7250 <__udivmoddi4+0x2a0>
    71f2:	45b8      	cmp	r8, r7
    71f4:	d92c      	bls.n	7250 <__udivmoddi4+0x2a0>
    71f6:	3802      	subs	r0, #2
    71f8:	4427      	add	r7, r4
    71fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    71fe:	eba7 0708 	sub.w	r7, r7, r8
    7202:	fba0 8902 	umull	r8, r9, r0, r2
    7206:	454f      	cmp	r7, r9
    7208:	46c6      	mov	lr, r8
    720a:	4649      	mov	r1, r9
    720c:	d31a      	bcc.n	7244 <__udivmoddi4+0x294>
    720e:	d017      	beq.n	7240 <__udivmoddi4+0x290>
    7210:	b15d      	cbz	r5, 722a <__udivmoddi4+0x27a>
    7212:	ebb3 020e 	subs.w	r2, r3, lr
    7216:	eb67 0701 	sbc.w	r7, r7, r1
    721a:	fa07 fc0c 	lsl.w	ip, r7, ip
    721e:	40f2      	lsrs	r2, r6
    7220:	ea4c 0202 	orr.w	r2, ip, r2
    7224:	40f7      	lsrs	r7, r6
    7226:	e9c5 2700 	strd	r2, r7, [r5]
    722a:	2600      	movs	r6, #0
    722c:	4631      	mov	r1, r6
    722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7232:	462e      	mov	r6, r5
    7234:	4628      	mov	r0, r5
    7236:	e70b      	b.n	7050 <__udivmoddi4+0xa0>
    7238:	4606      	mov	r6, r0
    723a:	e6e9      	b.n	7010 <__udivmoddi4+0x60>
    723c:	4618      	mov	r0, r3
    723e:	e6fd      	b.n	703c <__udivmoddi4+0x8c>
    7240:	4543      	cmp	r3, r8
    7242:	d2e5      	bcs.n	7210 <__udivmoddi4+0x260>
    7244:	ebb8 0e02 	subs.w	lr, r8, r2
    7248:	eb69 0104 	sbc.w	r1, r9, r4
    724c:	3801      	subs	r0, #1
    724e:	e7df      	b.n	7210 <__udivmoddi4+0x260>
    7250:	4608      	mov	r0, r1
    7252:	e7d2      	b.n	71fa <__udivmoddi4+0x24a>
    7254:	4660      	mov	r0, ip
    7256:	e78d      	b.n	7174 <__udivmoddi4+0x1c4>
    7258:	4681      	mov	r9, r0
    725a:	e7b9      	b.n	71d0 <__udivmoddi4+0x220>
    725c:	4666      	mov	r6, ip
    725e:	e775      	b.n	714c <__udivmoddi4+0x19c>
    7260:	4630      	mov	r0, r6
    7262:	e74a      	b.n	70fa <__udivmoddi4+0x14a>
    7264:	f1ac 0c02 	sub.w	ip, ip, #2
    7268:	4439      	add	r1, r7
    726a:	e713      	b.n	7094 <__udivmoddi4+0xe4>
    726c:	3802      	subs	r0, #2
    726e:	443c      	add	r4, r7
    7270:	e724      	b.n	70bc <__udivmoddi4+0x10c>
    7272:	bf00      	nop

00007274 <selfrel_offset31>:
    7274:	6803      	ldr	r3, [r0, #0]
    7276:	005a      	lsls	r2, r3, #1
    7278:	bf4c      	ite	mi
    727a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    727e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    7282:	4418      	add	r0, r3
    7284:	4770      	bx	lr
    7286:	bf00      	nop

00007288 <search_EIT_table>:
    7288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    728c:	b329      	cbz	r1, 72da <search_EIT_table+0x52>
    728e:	1e4f      	subs	r7, r1, #1
    7290:	4604      	mov	r4, r0
    7292:	4615      	mov	r5, r2
    7294:	463e      	mov	r6, r7
    7296:	f04f 0800 	mov.w	r8, #0
    729a:	eb08 0106 	add.w	r1, r8, r6
    729e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    72a2:	1049      	asrs	r1, r1, #1
    72a4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    72a8:	4648      	mov	r0, r9
    72aa:	f7ff ffe3 	bl	7274 <selfrel_offset31>
    72ae:	4603      	mov	r3, r0
    72b0:	00c8      	lsls	r0, r1, #3
    72b2:	3008      	adds	r0, #8
    72b4:	428f      	cmp	r7, r1
    72b6:	4420      	add	r0, r4
    72b8:	d009      	beq.n	72ce <search_EIT_table+0x46>
    72ba:	42ab      	cmp	r3, r5
    72bc:	d809      	bhi.n	72d2 <search_EIT_table+0x4a>
    72be:	f7ff ffd9 	bl	7274 <selfrel_offset31>
    72c2:	3801      	subs	r0, #1
    72c4:	42a8      	cmp	r0, r5
    72c6:	d20a      	bcs.n	72de <search_EIT_table+0x56>
    72c8:	f101 0801 	add.w	r8, r1, #1
    72cc:	e7e5      	b.n	729a <search_EIT_table+0x12>
    72ce:	42ab      	cmp	r3, r5
    72d0:	d905      	bls.n	72de <search_EIT_table+0x56>
    72d2:	4588      	cmp	r8, r1
    72d4:	d001      	beq.n	72da <search_EIT_table+0x52>
    72d6:	1e4e      	subs	r6, r1, #1
    72d8:	e7df      	b.n	729a <search_EIT_table+0x12>
    72da:	f04f 0900 	mov.w	r9, #0
    72de:	4648      	mov	r0, r9
    72e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000072e4 <__gnu_unwind_get_pr_addr>:
    72e4:	2801      	cmp	r0, #1
    72e6:	d007      	beq.n	72f8 <__gnu_unwind_get_pr_addr+0x14>
    72e8:	2802      	cmp	r0, #2
    72ea:	d007      	beq.n	72fc <__gnu_unwind_get_pr_addr+0x18>
    72ec:	4b04      	ldr	r3, [pc, #16]	; (7300 <__gnu_unwind_get_pr_addr+0x1c>)
    72ee:	2800      	cmp	r0, #0
    72f0:	bf0c      	ite	eq
    72f2:	4618      	moveq	r0, r3
    72f4:	2000      	movne	r0, #0
    72f6:	4770      	bx	lr
    72f8:	4802      	ldr	r0, [pc, #8]	; (7304 <__gnu_unwind_get_pr_addr+0x20>)
    72fa:	4770      	bx	lr
    72fc:	4802      	ldr	r0, [pc, #8]	; (7308 <__gnu_unwind_get_pr_addr+0x24>)
    72fe:	4770      	bx	lr
    7300:	000079a9 	.word	0x000079a9
    7304:	000079ad 	.word	0x000079ad
    7308:	000079b1 	.word	0x000079b1

0000730c <get_eit_entry>:
    730c:	b530      	push	{r4, r5, lr}
    730e:	4b23      	ldr	r3, [pc, #140]	; (739c <get_eit_entry+0x90>)
    7310:	b083      	sub	sp, #12
    7312:	4604      	mov	r4, r0
    7314:	1e8d      	subs	r5, r1, #2
    7316:	b33b      	cbz	r3, 7368 <get_eit_entry+0x5c>
    7318:	a901      	add	r1, sp, #4
    731a:	4628      	mov	r0, r5
    731c:	f3af 8000 	nop.w
    7320:	b1e8      	cbz	r0, 735e <get_eit_entry+0x52>
    7322:	9901      	ldr	r1, [sp, #4]
    7324:	462a      	mov	r2, r5
    7326:	f7ff ffaf 	bl	7288 <search_EIT_table>
    732a:	4601      	mov	r1, r0
    732c:	b1b8      	cbz	r0, 735e <get_eit_entry+0x52>
    732e:	f7ff ffa1 	bl	7274 <selfrel_offset31>
    7332:	684b      	ldr	r3, [r1, #4]
    7334:	64a0      	str	r0, [r4, #72]	; 0x48
    7336:	2b01      	cmp	r3, #1
    7338:	d02b      	beq.n	7392 <get_eit_entry+0x86>
    733a:	2b00      	cmp	r3, #0
    733c:	f101 0004 	add.w	r0, r1, #4
    7340:	db23      	blt.n	738a <get_eit_entry+0x7e>
    7342:	f7ff ff97 	bl	7274 <selfrel_offset31>
    7346:	2300      	movs	r3, #0
    7348:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    734c:	6803      	ldr	r3, [r0, #0]
    734e:	2b00      	cmp	r3, #0
    7350:	db10      	blt.n	7374 <get_eit_entry+0x68>
    7352:	f7ff ff8f 	bl	7274 <selfrel_offset31>
    7356:	6120      	str	r0, [r4, #16]
    7358:	2000      	movs	r0, #0
    735a:	b003      	add	sp, #12
    735c:	bd30      	pop	{r4, r5, pc}
    735e:	2300      	movs	r3, #0
    7360:	2009      	movs	r0, #9
    7362:	6123      	str	r3, [r4, #16]
    7364:	b003      	add	sp, #12
    7366:	bd30      	pop	{r4, r5, pc}
    7368:	490d      	ldr	r1, [pc, #52]	; (73a0 <get_eit_entry+0x94>)
    736a:	480e      	ldr	r0, [pc, #56]	; (73a4 <get_eit_entry+0x98>)
    736c:	1a09      	subs	r1, r1, r0
    736e:	10c9      	asrs	r1, r1, #3
    7370:	9101      	str	r1, [sp, #4]
    7372:	e7d7      	b.n	7324 <get_eit_entry+0x18>
    7374:	f3c3 6003 	ubfx	r0, r3, #24, #4
    7378:	f7ff ffb4 	bl	72e4 <__gnu_unwind_get_pr_addr>
    737c:	2800      	cmp	r0, #0
    737e:	6120      	str	r0, [r4, #16]
    7380:	bf14      	ite	ne
    7382:	2000      	movne	r0, #0
    7384:	2009      	moveq	r0, #9
    7386:	b003      	add	sp, #12
    7388:	bd30      	pop	{r4, r5, pc}
    738a:	2301      	movs	r3, #1
    738c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    7390:	e7dc      	b.n	734c <get_eit_entry+0x40>
    7392:	2300      	movs	r3, #0
    7394:	6123      	str	r3, [r4, #16]
    7396:	2005      	movs	r0, #5
    7398:	e7df      	b.n	735a <get_eit_entry+0x4e>
    739a:	bf00      	nop
    739c:	00000000 	.word	0x00000000
    73a0:	00009a3c 	.word	0x00009a3c
    73a4:	00009984 	.word	0x00009984

000073a8 <restore_non_core_regs>:
    73a8:	6803      	ldr	r3, [r0, #0]
    73aa:	07da      	lsls	r2, r3, #31
    73ac:	b510      	push	{r4, lr}
    73ae:	4604      	mov	r4, r0
    73b0:	d406      	bmi.n	73c0 <restore_non_core_regs+0x18>
    73b2:	079b      	lsls	r3, r3, #30
    73b4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    73b8:	d509      	bpl.n	73ce <restore_non_core_regs+0x26>
    73ba:	f000 fc4b 	bl	7c54 <__gnu_Unwind_Restore_VFP_D>
    73be:	6823      	ldr	r3, [r4, #0]
    73c0:	0759      	lsls	r1, r3, #29
    73c2:	d509      	bpl.n	73d8 <restore_non_core_regs+0x30>
    73c4:	071a      	lsls	r2, r3, #28
    73c6:	d50e      	bpl.n	73e6 <restore_non_core_regs+0x3e>
    73c8:	06db      	lsls	r3, r3, #27
    73ca:	d513      	bpl.n	73f4 <restore_non_core_regs+0x4c>
    73cc:	bd10      	pop	{r4, pc}
    73ce:	f000 fc39 	bl	7c44 <__gnu_Unwind_Restore_VFP>
    73d2:	6823      	ldr	r3, [r4, #0]
    73d4:	0759      	lsls	r1, r3, #29
    73d6:	d4f5      	bmi.n	73c4 <restore_non_core_regs+0x1c>
    73d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    73dc:	f000 fc42 	bl	7c64 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    73e0:	6823      	ldr	r3, [r4, #0]
    73e2:	071a      	lsls	r2, r3, #28
    73e4:	d4f0      	bmi.n	73c8 <restore_non_core_regs+0x20>
    73e6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    73ea:	f000 fc43 	bl	7c74 <__gnu_Unwind_Restore_WMMXD>
    73ee:	6823      	ldr	r3, [r4, #0]
    73f0:	06db      	lsls	r3, r3, #27
    73f2:	d4eb      	bmi.n	73cc <restore_non_core_regs+0x24>
    73f4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    73f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73fc:	f000 bc7e 	b.w	7cfc <__gnu_Unwind_Restore_WMMXC>

00007400 <_Unwind_decode_typeinfo_ptr.isra.0>:
    7400:	4603      	mov	r3, r0
    7402:	6800      	ldr	r0, [r0, #0]
    7404:	b100      	cbz	r0, 7408 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    7406:	4418      	add	r0, r3
    7408:	4770      	bx	lr
    740a:	bf00      	nop

0000740c <__gnu_unwind_24bit.isra.0>:
    740c:	2009      	movs	r0, #9
    740e:	4770      	bx	lr

00007410 <_Unwind_DebugHook>:
    7410:	4770      	bx	lr
    7412:	bf00      	nop

00007414 <unwind_phase2>:
    7414:	b570      	push	{r4, r5, r6, lr}
    7416:	4604      	mov	r4, r0
    7418:	460e      	mov	r6, r1
    741a:	6c31      	ldr	r1, [r6, #64]	; 0x40
    741c:	4620      	mov	r0, r4
    741e:	f7ff ff75 	bl	730c <get_eit_entry>
    7422:	4605      	mov	r5, r0
    7424:	b988      	cbnz	r0, 744a <unwind_phase2+0x36>
    7426:	6c33      	ldr	r3, [r6, #64]	; 0x40
    7428:	6163      	str	r3, [r4, #20]
    742a:	4632      	mov	r2, r6
    742c:	6923      	ldr	r3, [r4, #16]
    742e:	4621      	mov	r1, r4
    7430:	2001      	movs	r0, #1
    7432:	4798      	blx	r3
    7434:	2808      	cmp	r0, #8
    7436:	d0f0      	beq.n	741a <unwind_phase2+0x6>
    7438:	2807      	cmp	r0, #7
    743a:	d106      	bne.n	744a <unwind_phase2+0x36>
    743c:	4628      	mov	r0, r5
    743e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    7440:	f7ff ffe6 	bl	7410 <_Unwind_DebugHook>
    7444:	1d30      	adds	r0, r6, #4
    7446:	f000 fbf1 	bl	7c2c <__restore_core_regs>
    744a:	f000 fe67 	bl	811c <abort>
    744e:	bf00      	nop

00007450 <unwind_phase2_forced>:
    7450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7454:	1d0d      	adds	r5, r1, #4
    7456:	4606      	mov	r6, r0
    7458:	4614      	mov	r4, r2
    745a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    745c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    7460:	f10d 0c0c 	add.w	ip, sp, #12
    7464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    746a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    746e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7474:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7478:	ad02      	add	r5, sp, #8
    747a:	68f7      	ldr	r7, [r6, #12]
    747c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    7480:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    7484:	2300      	movs	r3, #0
    7486:	602b      	str	r3, [r5, #0]
    7488:	e021      	b.n	74ce <unwind_phase2_forced+0x7e>
    748a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    748c:	6173      	str	r3, [r6, #20]
    748e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    7492:	4629      	mov	r1, r5
    7494:	a87a      	add	r0, sp, #488	; 0x1e8
    7496:	f000 fe7b 	bl	8190 <memcpy>
    749a:	6933      	ldr	r3, [r6, #16]
    749c:	aa7a      	add	r2, sp, #488	; 0x1e8
    749e:	4631      	mov	r1, r6
    74a0:	4650      	mov	r0, sl
    74a2:	4798      	blx	r3
    74a4:	9b88      	ldr	r3, [sp, #544]	; 0x220
    74a6:	e9cd 5800 	strd	r5, r8, [sp]
    74aa:	4621      	mov	r1, r4
    74ac:	646b      	str	r3, [r5, #68]	; 0x44
    74ae:	4681      	mov	r9, r0
    74b0:	4633      	mov	r3, r6
    74b2:	4632      	mov	r2, r6
    74b4:	2001      	movs	r0, #1
    74b6:	47b8      	blx	r7
    74b8:	4604      	mov	r4, r0
    74ba:	b9e8      	cbnz	r0, 74f8 <unwind_phase2_forced+0xa8>
    74bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    74c0:	a97a      	add	r1, sp, #488	; 0x1e8
    74c2:	4628      	mov	r0, r5
    74c4:	f000 fe64 	bl	8190 <memcpy>
    74c8:	f1b9 0f08 	cmp.w	r9, #8
    74cc:	d11b      	bne.n	7506 <unwind_phase2_forced+0xb6>
    74ce:	6c29      	ldr	r1, [r5, #64]	; 0x40
    74d0:	4630      	mov	r0, r6
    74d2:	f7ff ff1b 	bl	730c <get_eit_entry>
    74d6:	3409      	adds	r4, #9
    74d8:	fa5f fa84 	uxtb.w	sl, r4
    74dc:	4681      	mov	r9, r0
    74de:	2800      	cmp	r0, #0
    74e0:	d0d3      	beq.n	748a <unwind_phase2_forced+0x3a>
    74e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    74e4:	f04a 0110 	orr.w	r1, sl, #16
    74e8:	e9cd 5800 	strd	r5, r8, [sp]
    74ec:	4632      	mov	r2, r6
    74ee:	646b      	str	r3, [r5, #68]	; 0x44
    74f0:	2001      	movs	r0, #1
    74f2:	4633      	mov	r3, r6
    74f4:	47b8      	blx	r7
    74f6:	b108      	cbz	r0, 74fc <unwind_phase2_forced+0xac>
    74f8:	f04f 0909 	mov.w	r9, #9
    74fc:	4648      	mov	r0, r9
    74fe:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    7502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7506:	f1b9 0f07 	cmp.w	r9, #7
    750a:	d1f5      	bne.n	74f8 <unwind_phase2_forced+0xa8>
    750c:	4620      	mov	r0, r4
    750e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7510:	f7ff ff7e 	bl	7410 <_Unwind_DebugHook>
    7514:	a803      	add	r0, sp, #12
    7516:	f000 fb89 	bl	7c2c <__restore_core_regs>
    751a:	bf00      	nop

0000751c <_Unwind_GetCFA>:
    751c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    751e:	4770      	bx	lr

00007520 <__gnu_Unwind_RaiseException>:
    7520:	b5f0      	push	{r4, r5, r6, r7, lr}
    7522:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7524:	640b      	str	r3, [r1, #64]	; 0x40
    7526:	1d0e      	adds	r6, r1, #4
    7528:	460f      	mov	r7, r1
    752a:	4605      	mov	r5, r0
    752c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    752e:	b0f9      	sub	sp, #484	; 0x1e4
    7530:	ac01      	add	r4, sp, #4
    7532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7534:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7538:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    753a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    753c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    7540:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    7544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    7548:	9600      	str	r6, [sp, #0]
    754a:	e006      	b.n	755a <__gnu_Unwind_RaiseException+0x3a>
    754c:	692b      	ldr	r3, [r5, #16]
    754e:	466a      	mov	r2, sp
    7550:	4629      	mov	r1, r5
    7552:	4798      	blx	r3
    7554:	2808      	cmp	r0, #8
    7556:	4604      	mov	r4, r0
    7558:	d108      	bne.n	756c <__gnu_Unwind_RaiseException+0x4c>
    755a:	9910      	ldr	r1, [sp, #64]	; 0x40
    755c:	4628      	mov	r0, r5
    755e:	f7ff fed5 	bl	730c <get_eit_entry>
    7562:	2800      	cmp	r0, #0
    7564:	d0f2      	beq.n	754c <__gnu_Unwind_RaiseException+0x2c>
    7566:	2009      	movs	r0, #9
    7568:	b079      	add	sp, #484	; 0x1e4
    756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    756c:	4668      	mov	r0, sp
    756e:	f7ff ff1b 	bl	73a8 <restore_non_core_regs>
    7572:	2c06      	cmp	r4, #6
    7574:	d1f7      	bne.n	7566 <__gnu_Unwind_RaiseException+0x46>
    7576:	4639      	mov	r1, r7
    7578:	4628      	mov	r0, r5
    757a:	f7ff ff4b 	bl	7414 <unwind_phase2>
    757e:	bf00      	nop

00007580 <__gnu_Unwind_ForcedUnwind>:
    7580:	b430      	push	{r4, r5}
    7582:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    7584:	60c1      	str	r1, [r0, #12]
    7586:	6182      	str	r2, [r0, #24]
    7588:	4619      	mov	r1, r3
    758a:	641d      	str	r5, [r3, #64]	; 0x40
    758c:	2200      	movs	r2, #0
    758e:	bc30      	pop	{r4, r5}
    7590:	e75e      	b.n	7450 <unwind_phase2_forced>
    7592:	bf00      	nop

00007594 <__gnu_Unwind_Resume>:
    7594:	b570      	push	{r4, r5, r6, lr}
    7596:	68c6      	ldr	r6, [r0, #12]
    7598:	6943      	ldr	r3, [r0, #20]
    759a:	640b      	str	r3, [r1, #64]	; 0x40
    759c:	b9ae      	cbnz	r6, 75ca <__gnu_Unwind_Resume+0x36>
    759e:	6903      	ldr	r3, [r0, #16]
    75a0:	460a      	mov	r2, r1
    75a2:	4604      	mov	r4, r0
    75a4:	460d      	mov	r5, r1
    75a6:	4601      	mov	r1, r0
    75a8:	2002      	movs	r0, #2
    75aa:	4798      	blx	r3
    75ac:	2807      	cmp	r0, #7
    75ae:	d005      	beq.n	75bc <__gnu_Unwind_Resume+0x28>
    75b0:	2808      	cmp	r0, #8
    75b2:	d10f      	bne.n	75d4 <__gnu_Unwind_Resume+0x40>
    75b4:	4629      	mov	r1, r5
    75b6:	4620      	mov	r0, r4
    75b8:	f7ff ff2c 	bl	7414 <unwind_phase2>
    75bc:	4630      	mov	r0, r6
    75be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    75c0:	f7ff ff26 	bl	7410 <_Unwind_DebugHook>
    75c4:	1d28      	adds	r0, r5, #4
    75c6:	f000 fb31 	bl	7c2c <__restore_core_regs>
    75ca:	2201      	movs	r2, #1
    75cc:	f7ff ff40 	bl	7450 <unwind_phase2_forced>
    75d0:	f000 fda4 	bl	811c <abort>
    75d4:	f000 fda2 	bl	811c <abort>

000075d8 <__gnu_Unwind_Resume_or_Rethrow>:
    75d8:	68c2      	ldr	r2, [r0, #12]
    75da:	b11a      	cbz	r2, 75e4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    75dc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    75de:	640a      	str	r2, [r1, #64]	; 0x40
    75e0:	2200      	movs	r2, #0
    75e2:	e735      	b.n	7450 <unwind_phase2_forced>
    75e4:	e79c      	b.n	7520 <__gnu_Unwind_RaiseException>
    75e6:	bf00      	nop

000075e8 <_Unwind_Complete>:
    75e8:	4770      	bx	lr
    75ea:	bf00      	nop

000075ec <_Unwind_DeleteException>:
    75ec:	6883      	ldr	r3, [r0, #8]
    75ee:	4601      	mov	r1, r0
    75f0:	b10b      	cbz	r3, 75f6 <_Unwind_DeleteException+0xa>
    75f2:	2001      	movs	r0, #1
    75f4:	4718      	bx	r3
    75f6:	4770      	bx	lr

000075f8 <_Unwind_VRS_Get>:
    75f8:	2901      	cmp	r1, #1
    75fa:	d012      	beq.n	7622 <_Unwind_VRS_Get+0x2a>
    75fc:	d809      	bhi.n	7612 <_Unwind_VRS_Get+0x1a>
    75fe:	b973      	cbnz	r3, 761e <_Unwind_VRS_Get+0x26>
    7600:	2a0f      	cmp	r2, #15
    7602:	d80c      	bhi.n	761e <_Unwind_VRS_Get+0x26>
    7604:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    7608:	4618      	mov	r0, r3
    760a:	6853      	ldr	r3, [r2, #4]
    760c:	9a00      	ldr	r2, [sp, #0]
    760e:	6013      	str	r3, [r2, #0]
    7610:	4770      	bx	lr
    7612:	3903      	subs	r1, #3
    7614:	2901      	cmp	r1, #1
    7616:	bf94      	ite	ls
    7618:	2001      	movls	r0, #1
    761a:	2002      	movhi	r0, #2
    761c:	4770      	bx	lr
    761e:	2002      	movs	r0, #2
    7620:	4770      	bx	lr
    7622:	4608      	mov	r0, r1
    7624:	4770      	bx	lr
    7626:	bf00      	nop

00007628 <_Unwind_GetGR>:
    7628:	b510      	push	{r4, lr}
    762a:	b084      	sub	sp, #16
    762c:	2300      	movs	r3, #0
    762e:	ac03      	add	r4, sp, #12
    7630:	460a      	mov	r2, r1
    7632:	9400      	str	r4, [sp, #0]
    7634:	4619      	mov	r1, r3
    7636:	f7ff ffdf 	bl	75f8 <_Unwind_VRS_Get>
    763a:	9803      	ldr	r0, [sp, #12]
    763c:	b004      	add	sp, #16
    763e:	bd10      	pop	{r4, pc}

00007640 <_Unwind_VRS_Set>:
    7640:	2901      	cmp	r1, #1
    7642:	d012      	beq.n	766a <_Unwind_VRS_Set+0x2a>
    7644:	d809      	bhi.n	765a <_Unwind_VRS_Set+0x1a>
    7646:	b973      	cbnz	r3, 7666 <_Unwind_VRS_Set+0x26>
    7648:	2a0f      	cmp	r2, #15
    764a:	d80c      	bhi.n	7666 <_Unwind_VRS_Set+0x26>
    764c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    7650:	9a00      	ldr	r2, [sp, #0]
    7652:	6812      	ldr	r2, [r2, #0]
    7654:	6042      	str	r2, [r0, #4]
    7656:	4618      	mov	r0, r3
    7658:	4770      	bx	lr
    765a:	3903      	subs	r1, #3
    765c:	2901      	cmp	r1, #1
    765e:	bf94      	ite	ls
    7660:	2001      	movls	r0, #1
    7662:	2002      	movhi	r0, #2
    7664:	4770      	bx	lr
    7666:	2002      	movs	r0, #2
    7668:	4770      	bx	lr
    766a:	4608      	mov	r0, r1
    766c:	4770      	bx	lr
    766e:	bf00      	nop

00007670 <_Unwind_SetGR>:
    7670:	b510      	push	{r4, lr}
    7672:	b084      	sub	sp, #16
    7674:	2300      	movs	r3, #0
    7676:	ac03      	add	r4, sp, #12
    7678:	9203      	str	r2, [sp, #12]
    767a:	9400      	str	r4, [sp, #0]
    767c:	460a      	mov	r2, r1
    767e:	4619      	mov	r1, r3
    7680:	f7ff ffde 	bl	7640 <_Unwind_VRS_Set>
    7684:	b004      	add	sp, #16
    7686:	bd10      	pop	{r4, pc}

00007688 <__gnu_Unwind_Backtrace>:
    7688:	b5f0      	push	{r4, r5, r6, r7, lr}
    768a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    768c:	6413      	str	r3, [r2, #64]	; 0x40
    768e:	1d15      	adds	r5, r2, #4
    7690:	468c      	mov	ip, r1
    7692:	4606      	mov	r6, r0
    7694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7696:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    769a:	ac17      	add	r4, sp, #92	; 0x5c
    769c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    769e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    76a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    76a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    76a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    76a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    76aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    76ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    76b2:	4665      	mov	r5, ip
    76b4:	9716      	str	r7, [sp, #88]	; 0x58
    76b6:	e010      	b.n	76da <__gnu_Unwind_Backtrace+0x52>
    76b8:	f7ff ffda 	bl	7670 <_Unwind_SetGR>
    76bc:	4629      	mov	r1, r5
    76be:	a816      	add	r0, sp, #88	; 0x58
    76c0:	47b0      	blx	r6
    76c2:	4603      	mov	r3, r0
    76c4:	aa16      	add	r2, sp, #88	; 0x58
    76c6:	4669      	mov	r1, sp
    76c8:	2008      	movs	r0, #8
    76ca:	b983      	cbnz	r3, 76ee <__gnu_Unwind_Backtrace+0x66>
    76cc:	9b04      	ldr	r3, [sp, #16]
    76ce:	4798      	blx	r3
    76d0:	2805      	cmp	r0, #5
    76d2:	4604      	mov	r4, r0
    76d4:	d00c      	beq.n	76f0 <__gnu_Unwind_Backtrace+0x68>
    76d6:	2809      	cmp	r0, #9
    76d8:	d009      	beq.n	76ee <__gnu_Unwind_Backtrace+0x66>
    76da:	9926      	ldr	r1, [sp, #152]	; 0x98
    76dc:	4668      	mov	r0, sp
    76de:	f7ff fe15 	bl	730c <get_eit_entry>
    76e2:	4603      	mov	r3, r0
    76e4:	466a      	mov	r2, sp
    76e6:	210c      	movs	r1, #12
    76e8:	a816      	add	r0, sp, #88	; 0x58
    76ea:	2b00      	cmp	r3, #0
    76ec:	d0e4      	beq.n	76b8 <__gnu_Unwind_Backtrace+0x30>
    76ee:	2409      	movs	r4, #9
    76f0:	a816      	add	r0, sp, #88	; 0x58
    76f2:	f7ff fe59 	bl	73a8 <restore_non_core_regs>
    76f6:	4620      	mov	r0, r4
    76f8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    76fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76fe:	bf00      	nop

00007700 <__gnu_unwind_pr_common>:
    7700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7704:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    7706:	b089      	sub	sp, #36	; 0x24
    7708:	460d      	mov	r5, r1
    770a:	f854 1b04 	ldr.w	r1, [r4], #4
    770e:	9406      	str	r4, [sp, #24]
    7710:	4617      	mov	r7, r2
    7712:	f000 0803 	and.w	r8, r0, #3
    7716:	461e      	mov	r6, r3
    7718:	2b00      	cmp	r3, #0
    771a:	d079      	beq.n	7810 <__gnu_unwind_pr_common+0x110>
    771c:	0c0b      	lsrs	r3, r1, #16
    771e:	b2da      	uxtb	r2, r3
    7720:	0409      	lsls	r1, r1, #16
    7722:	f88d 301d 	strb.w	r3, [sp, #29]
    7726:	2302      	movs	r3, #2
    7728:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    772c:	9105      	str	r1, [sp, #20]
    772e:	f88d 301c 	strb.w	r3, [sp, #28]
    7732:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7734:	f1b8 0f02 	cmp.w	r8, #2
    7738:	bf08      	it	eq
    773a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    773c:	f013 0301 	ands.w	r3, r3, #1
    7740:	d00c      	beq.n	775c <__gnu_unwind_pr_common+0x5c>
    7742:	4638      	mov	r0, r7
    7744:	a905      	add	r1, sp, #20
    7746:	f000 fb73 	bl	7e30 <__gnu_unwind_execute>
    774a:	b918      	cbnz	r0, 7754 <__gnu_unwind_pr_common+0x54>
    774c:	2008      	movs	r0, #8
    774e:	b009      	add	sp, #36	; 0x24
    7750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7754:	2009      	movs	r0, #9
    7756:	b009      	add	sp, #36	; 0x24
    7758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    775c:	f8d4 a000 	ldr.w	sl, [r4]
    7760:	f1ba 0f00 	cmp.w	sl, #0
    7764:	d0ed      	beq.n	7742 <__gnu_unwind_pr_common+0x42>
    7766:	9301      	str	r3, [sp, #4]
    7768:	f000 0308 	and.w	r3, r0, #8
    776c:	9302      	str	r3, [sp, #8]
    776e:	2e02      	cmp	r6, #2
    7770:	d04a      	beq.n	7808 <__gnu_unwind_pr_common+0x108>
    7772:	f8b4 a000 	ldrh.w	sl, [r4]
    7776:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    777a:	3404      	adds	r4, #4
    777c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    777e:	f029 0b01 	bic.w	fp, r9, #1
    7782:	210f      	movs	r1, #15
    7784:	4638      	mov	r0, r7
    7786:	4493      	add	fp, r2
    7788:	f7ff ff4e 	bl	7628 <_Unwind_GetGR>
    778c:	4583      	cmp	fp, r0
    778e:	d839      	bhi.n	7804 <__gnu_unwind_pr_common+0x104>
    7790:	f02a 0201 	bic.w	r2, sl, #1
    7794:	445a      	add	r2, fp
    7796:	4282      	cmp	r2, r0
    7798:	bf94      	ite	ls
    779a:	2000      	movls	r0, #0
    779c:	2001      	movhi	r0, #1
    779e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    77a2:	f003 0302 	and.w	r3, r3, #2
    77a6:	f00a 0a01 	and.w	sl, sl, #1
    77aa:	ea43 030a 	orr.w	r3, r3, sl
    77ae:	2b01      	cmp	r3, #1
    77b0:	d049      	beq.n	7846 <__gnu_unwind_pr_common+0x146>
    77b2:	2b02      	cmp	r3, #2
    77b4:	d032      	beq.n	781c <__gnu_unwind_pr_common+0x11c>
    77b6:	2b00      	cmp	r3, #0
    77b8:	d1cc      	bne.n	7754 <__gnu_unwind_pr_common+0x54>
    77ba:	f1b8 0f00 	cmp.w	r8, #0
    77be:	d002      	beq.n	77c6 <__gnu_unwind_pr_common+0xc6>
    77c0:	2800      	cmp	r0, #0
    77c2:	f040 80cd 	bne.w	7960 <__gnu_unwind_pr_common+0x260>
    77c6:	3404      	adds	r4, #4
    77c8:	f8d4 a000 	ldr.w	sl, [r4]
    77cc:	f1ba 0f00 	cmp.w	sl, #0
    77d0:	d1cd      	bne.n	776e <__gnu_unwind_pr_common+0x6e>
    77d2:	a905      	add	r1, sp, #20
    77d4:	4638      	mov	r0, r7
    77d6:	f000 fb2b 	bl	7e30 <__gnu_unwind_execute>
    77da:	2800      	cmp	r0, #0
    77dc:	d1ba      	bne.n	7754 <__gnu_unwind_pr_common+0x54>
    77de:	9b01      	ldr	r3, [sp, #4]
    77e0:	2b00      	cmp	r3, #0
    77e2:	d0b3      	beq.n	774c <__gnu_unwind_pr_common+0x4c>
    77e4:	210f      	movs	r1, #15
    77e6:	4638      	mov	r0, r7
    77e8:	f7ff ff1e 	bl	7628 <_Unwind_GetGR>
    77ec:	210e      	movs	r1, #14
    77ee:	4602      	mov	r2, r0
    77f0:	4638      	mov	r0, r7
    77f2:	f7ff ff3d 	bl	7670 <_Unwind_SetGR>
    77f6:	4638      	mov	r0, r7
    77f8:	4a6a      	ldr	r2, [pc, #424]	; (79a4 <__gnu_unwind_pr_common+0x2a4>)
    77fa:	210f      	movs	r1, #15
    77fc:	f7ff ff38 	bl	7670 <_Unwind_SetGR>
    7800:	2007      	movs	r0, #7
    7802:	e7a8      	b.n	7756 <__gnu_unwind_pr_common+0x56>
    7804:	2000      	movs	r0, #0
    7806:	e7ca      	b.n	779e <__gnu_unwind_pr_common+0x9e>
    7808:	f8d4 9004 	ldr.w	r9, [r4, #4]
    780c:	3408      	adds	r4, #8
    780e:	e7b5      	b.n	777c <__gnu_unwind_pr_common+0x7c>
    7810:	0209      	lsls	r1, r1, #8
    7812:	2303      	movs	r3, #3
    7814:	9105      	str	r1, [sp, #20]
    7816:	f8ad 301c 	strh.w	r3, [sp, #28]
    781a:	e78a      	b.n	7732 <__gnu_unwind_pr_common+0x32>
    781c:	6823      	ldr	r3, [r4, #0]
    781e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    7822:	f1b8 0f00 	cmp.w	r8, #0
    7826:	d145      	bne.n	78b4 <__gnu_unwind_pr_common+0x1b4>
    7828:	b128      	cbz	r0, 7836 <__gnu_unwind_pr_common+0x136>
    782a:	9a02      	ldr	r2, [sp, #8]
    782c:	2a00      	cmp	r2, #0
    782e:	d05c      	beq.n	78ea <__gnu_unwind_pr_common+0x1ea>
    7830:	f1bb 0f00 	cmp.w	fp, #0
    7834:	d074      	beq.n	7920 <__gnu_unwind_pr_common+0x220>
    7836:	2b00      	cmp	r3, #0
    7838:	da00      	bge.n	783c <__gnu_unwind_pr_common+0x13c>
    783a:	3404      	adds	r4, #4
    783c:	f10b 0b01 	add.w	fp, fp, #1
    7840:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    7844:	e7c0      	b.n	77c8 <__gnu_unwind_pr_common+0xc8>
    7846:	f1b8 0f00 	cmp.w	r8, #0
    784a:	d119      	bne.n	7880 <__gnu_unwind_pr_common+0x180>
    784c:	b1b0      	cbz	r0, 787c <__gnu_unwind_pr_common+0x17c>
    784e:	e9d4 2300 	ldrd	r2, r3, [r4]
    7852:	1c99      	adds	r1, r3, #2
    7854:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    7858:	f43f af7c 	beq.w	7754 <__gnu_unwind_pr_common+0x54>
    785c:	f105 0158 	add.w	r1, r5, #88	; 0x58
    7860:	3301      	adds	r3, #1
    7862:	9104      	str	r1, [sp, #16]
    7864:	f000 8090 	beq.w	7988 <__gnu_unwind_pr_common+0x288>
    7868:	1d20      	adds	r0, r4, #4
    786a:	f7ff fdc9 	bl	7400 <_Unwind_decode_typeinfo_ptr.isra.0>
    786e:	ab04      	add	r3, sp, #16
    7870:	4601      	mov	r1, r0
    7872:	4628      	mov	r0, r5
    7874:	f3af 8000 	nop.w
    7878:	2800      	cmp	r0, #0
    787a:	d15b      	bne.n	7934 <__gnu_unwind_pr_common+0x234>
    787c:	3408      	adds	r4, #8
    787e:	e7a3      	b.n	77c8 <__gnu_unwind_pr_common+0xc8>
    7880:	210d      	movs	r1, #13
    7882:	4638      	mov	r0, r7
    7884:	f8d5 9020 	ldr.w	r9, [r5, #32]
    7888:	f7ff fece 	bl	7628 <_Unwind_GetGR>
    788c:	4581      	cmp	r9, r0
    788e:	d1f5      	bne.n	787c <__gnu_unwind_pr_common+0x17c>
    7890:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7892:	429c      	cmp	r4, r3
    7894:	d1f2      	bne.n	787c <__gnu_unwind_pr_common+0x17c>
    7896:	4620      	mov	r0, r4
    7898:	f7ff fcec 	bl	7274 <selfrel_offset31>
    789c:	210f      	movs	r1, #15
    789e:	4602      	mov	r2, r0
    78a0:	4638      	mov	r0, r7
    78a2:	f7ff fee5 	bl	7670 <_Unwind_SetGR>
    78a6:	4638      	mov	r0, r7
    78a8:	462a      	mov	r2, r5
    78aa:	2100      	movs	r1, #0
    78ac:	f7ff fee0 	bl	7670 <_Unwind_SetGR>
    78b0:	2007      	movs	r0, #7
    78b2:	e750      	b.n	7756 <__gnu_unwind_pr_common+0x56>
    78b4:	210d      	movs	r1, #13
    78b6:	4638      	mov	r0, r7
    78b8:	f8d5 9020 	ldr.w	r9, [r5, #32]
    78bc:	f7ff feb4 	bl	7628 <_Unwind_GetGR>
    78c0:	4581      	cmp	r9, r0
    78c2:	d001      	beq.n	78c8 <__gnu_unwind_pr_common+0x1c8>
    78c4:	6823      	ldr	r3, [r4, #0]
    78c6:	e7b6      	b.n	7836 <__gnu_unwind_pr_common+0x136>
    78c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78ca:	429c      	cmp	r4, r3
    78cc:	d1fa      	bne.n	78c4 <__gnu_unwind_pr_common+0x1c4>
    78ce:	2204      	movs	r2, #4
    78d0:	2100      	movs	r1, #0
    78d2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    78d6:	18a3      	adds	r3, r4, r2
    78d8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    78dc:	636b      	str	r3, [r5, #52]	; 0x34
    78de:	6823      	ldr	r3, [r4, #0]
    78e0:	428b      	cmp	r3, r1
    78e2:	db59      	blt.n	7998 <__gnu_unwind_pr_common+0x298>
    78e4:	2301      	movs	r3, #1
    78e6:	9301      	str	r3, [sp, #4]
    78e8:	e7a8      	b.n	783c <__gnu_unwind_pr_common+0x13c>
    78ea:	f105 0358 	add.w	r3, r5, #88	; 0x58
    78ee:	f8cd 800c 	str.w	r8, [sp, #12]
    78f2:	f104 0a04 	add.w	sl, r4, #4
    78f6:	46b0      	mov	r8, r6
    78f8:	4691      	mov	r9, r2
    78fa:	461e      	mov	r6, r3
    78fc:	e00d      	b.n	791a <__gnu_unwind_pr_common+0x21a>
    78fe:	9604      	str	r6, [sp, #16]
    7900:	f7ff fd7e 	bl	7400 <_Unwind_decode_typeinfo_ptr.isra.0>
    7904:	ab04      	add	r3, sp, #16
    7906:	4601      	mov	r1, r0
    7908:	2200      	movs	r2, #0
    790a:	4628      	mov	r0, r5
    790c:	f3af 8000 	nop.w
    7910:	f109 0901 	add.w	r9, r9, #1
    7914:	f10a 0a04 	add.w	sl, sl, #4
    7918:	b9e8      	cbnz	r0, 7956 <__gnu_unwind_pr_common+0x256>
    791a:	45d9      	cmp	r9, fp
    791c:	4650      	mov	r0, sl
    791e:	d1ee      	bne.n	78fe <__gnu_unwind_pr_common+0x1fe>
    7920:	4638      	mov	r0, r7
    7922:	210d      	movs	r1, #13
    7924:	f7ff fe80 	bl	7628 <_Unwind_GetGR>
    7928:	9b04      	ldr	r3, [sp, #16]
    792a:	6228      	str	r0, [r5, #32]
    792c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    7930:	2006      	movs	r0, #6
    7932:	e710      	b.n	7756 <__gnu_unwind_pr_common+0x56>
    7934:	4681      	mov	r9, r0
    7936:	210d      	movs	r1, #13
    7938:	4638      	mov	r0, r7
    793a:	f7ff fe75 	bl	7628 <_Unwind_GetGR>
    793e:	f1b9 0f02 	cmp.w	r9, #2
    7942:	6228      	str	r0, [r5, #32]
    7944:	d125      	bne.n	7992 <__gnu_unwind_pr_common+0x292>
    7946:	462b      	mov	r3, r5
    7948:	9a04      	ldr	r2, [sp, #16]
    794a:	f843 2f2c 	str.w	r2, [r3, #44]!
    794e:	626b      	str	r3, [r5, #36]	; 0x24
    7950:	62ac      	str	r4, [r5, #40]	; 0x28
    7952:	2006      	movs	r0, #6
    7954:	e6ff      	b.n	7756 <__gnu_unwind_pr_common+0x56>
    7956:	4646      	mov	r6, r8
    7958:	6823      	ldr	r3, [r4, #0]
    795a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    795e:	e76a      	b.n	7836 <__gnu_unwind_pr_common+0x136>
    7960:	4620      	mov	r0, r4
    7962:	f7ff fc87 	bl	7274 <selfrel_offset31>
    7966:	3404      	adds	r4, #4
    7968:	4602      	mov	r2, r0
    796a:	63ac      	str	r4, [r5, #56]	; 0x38
    796c:	4628      	mov	r0, r5
    796e:	4614      	mov	r4, r2
    7970:	f3af 8000 	nop.w
    7974:	2800      	cmp	r0, #0
    7976:	f43f aeed 	beq.w	7754 <__gnu_unwind_pr_common+0x54>
    797a:	4638      	mov	r0, r7
    797c:	4622      	mov	r2, r4
    797e:	210f      	movs	r1, #15
    7980:	f7ff fe76 	bl	7670 <_Unwind_SetGR>
    7984:	2007      	movs	r0, #7
    7986:	e6e6      	b.n	7756 <__gnu_unwind_pr_common+0x56>
    7988:	4638      	mov	r0, r7
    798a:	210d      	movs	r1, #13
    798c:	f7ff fe4c 	bl	7628 <_Unwind_GetGR>
    7990:	6228      	str	r0, [r5, #32]
    7992:	9b04      	ldr	r3, [sp, #16]
    7994:	626b      	str	r3, [r5, #36]	; 0x24
    7996:	e7db      	b.n	7950 <__gnu_unwind_pr_common+0x250>
    7998:	f10b 0001 	add.w	r0, fp, #1
    799c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    79a0:	e77a      	b.n	7898 <__gnu_unwind_pr_common+0x198>
    79a2:	bf00      	nop
    79a4:	00000000 	.word	0x00000000

000079a8 <__aeabi_unwind_cpp_pr0>:
    79a8:	2300      	movs	r3, #0
    79aa:	e6a9      	b.n	7700 <__gnu_unwind_pr_common>

000079ac <__aeabi_unwind_cpp_pr1>:
    79ac:	2301      	movs	r3, #1
    79ae:	e6a7      	b.n	7700 <__gnu_unwind_pr_common>

000079b0 <__aeabi_unwind_cpp_pr2>:
    79b0:	2302      	movs	r3, #2
    79b2:	e6a5      	b.n	7700 <__gnu_unwind_pr_common>

000079b4 <_Unwind_VRS_Pop>:
    79b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    79b8:	4606      	mov	r6, r0
    79ba:	b0c3      	sub	sp, #268	; 0x10c
    79bc:	4615      	mov	r5, r2
    79be:	461c      	mov	r4, r3
    79c0:	2904      	cmp	r1, #4
    79c2:	f200 80b9 	bhi.w	7b38 <_Unwind_VRS_Pop+0x184>
    79c6:	e8df f001 	tbb	[pc, r1]
    79ca:	539a      	.short	0x539a
    79cc:	29b7      	.short	0x29b7
    79ce:	03          	.byte	0x03
    79cf:	00          	.byte	0x00
    79d0:	2c00      	cmp	r4, #0
    79d2:	f040 80b1 	bne.w	7b38 <_Unwind_VRS_Pop+0x184>
    79d6:	2a10      	cmp	r2, #16
    79d8:	f200 80ae 	bhi.w	7b38 <_Unwind_VRS_Pop+0x184>
    79dc:	6803      	ldr	r3, [r0, #0]
    79de:	06d8      	lsls	r0, r3, #27
    79e0:	f100 80f3 	bmi.w	7bca <_Unwind_VRS_Pop+0x216>
    79e4:	af20      	add	r7, sp, #128	; 0x80
    79e6:	4638      	mov	r0, r7
    79e8:	f000 f992 	bl	7d10 <__gnu_Unwind_Save_WMMXC>
    79ec:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    79ee:	2300      	movs	r3, #0
    79f0:	2401      	movs	r4, #1
    79f2:	fa04 f203 	lsl.w	r2, r4, r3
    79f6:	422a      	tst	r2, r5
    79f8:	4601      	mov	r1, r0
    79fa:	d004      	beq.n	7a06 <_Unwind_VRS_Pop+0x52>
    79fc:	f851 2b04 	ldr.w	r2, [r1], #4
    7a00:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    7a04:	4608      	mov	r0, r1
    7a06:	3301      	adds	r3, #1
    7a08:	2b04      	cmp	r3, #4
    7a0a:	d1f2      	bne.n	79f2 <_Unwind_VRS_Pop+0x3e>
    7a0c:	63b0      	str	r0, [r6, #56]	; 0x38
    7a0e:	4638      	mov	r0, r7
    7a10:	f000 f974 	bl	7cfc <__gnu_Unwind_Restore_WMMXC>
    7a14:	2000      	movs	r0, #0
    7a16:	b043      	add	sp, #268	; 0x10c
    7a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a1c:	2c03      	cmp	r4, #3
    7a1e:	f040 808b 	bne.w	7b38 <_Unwind_VRS_Pop+0x184>
    7a22:	b294      	uxth	r4, r2
    7a24:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    7a28:	2b10      	cmp	r3, #16
    7a2a:	ea4f 4512 	mov.w	r5, r2, lsr #16
    7a2e:	f200 8083 	bhi.w	7b38 <_Unwind_VRS_Pop+0x184>
    7a32:	6803      	ldr	r3, [r0, #0]
    7a34:	071f      	lsls	r7, r3, #28
    7a36:	f100 80d0 	bmi.w	7bda <_Unwind_VRS_Pop+0x226>
    7a3a:	af20      	add	r7, sp, #128	; 0x80
    7a3c:	4638      	mov	r0, r7
    7a3e:	f000 f93b 	bl	7cb8 <__gnu_Unwind_Save_WMMXD>
    7a42:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    7a46:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    7a48:	b154      	cbz	r4, 7a60 <_Unwind_VRS_Pop+0xac>
    7a4a:	460b      	mov	r3, r1
    7a4c:	1ae8      	subs	r0, r5, r3
    7a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    7a52:	00e4      	lsls	r4, r4, #3
    7a54:	581a      	ldr	r2, [r3, r0]
    7a56:	f843 2b04 	str.w	r2, [r3], #4
    7a5a:	428b      	cmp	r3, r1
    7a5c:	d1fa      	bne.n	7a54 <_Unwind_VRS_Pop+0xa0>
    7a5e:	4425      	add	r5, r4
    7a60:	4638      	mov	r0, r7
    7a62:	63b5      	str	r5, [r6, #56]	; 0x38
    7a64:	f000 f906 	bl	7c74 <__gnu_Unwind_Restore_WMMXD>
    7a68:	2000      	movs	r0, #0
    7a6a:	b043      	add	sp, #268	; 0x10c
    7a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a70:	2c01      	cmp	r4, #1
    7a72:	ea4f 4812 	mov.w	r8, r2, lsr #16
    7a76:	b295      	uxth	r5, r2
    7a78:	d05a      	beq.n	7b30 <_Unwind_VRS_Pop+0x17c>
    7a7a:	2c05      	cmp	r4, #5
    7a7c:	d15c      	bne.n	7b38 <_Unwind_VRS_Pop+0x184>
    7a7e:	eb08 0905 	add.w	r9, r8, r5
    7a82:	f1b9 0f20 	cmp.w	r9, #32
    7a86:	d857      	bhi.n	7b38 <_Unwind_VRS_Pop+0x184>
    7a88:	f1b8 0f0f 	cmp.w	r8, #15
    7a8c:	d977      	bls.n	7b7e <_Unwind_VRS_Pop+0x1ca>
    7a8e:	46a9      	mov	r9, r5
    7a90:	2d00      	cmp	r5, #0
    7a92:	f040 8088 	bne.w	7ba6 <_Unwind_VRS_Pop+0x1f2>
    7a96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7a98:	b36d      	cbz	r5, 7af6 <_Unwind_VRS_Pop+0x142>
    7a9a:	af20      	add	r7, sp, #128	; 0x80
    7a9c:	f04f 0900 	mov.w	r9, #0
    7aa0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    7aa4:	3f04      	subs	r7, #4
    7aa6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    7aaa:	f853 1b04 	ldr.w	r1, [r3], #4
    7aae:	f847 1f04 	str.w	r1, [r7, #4]!
    7ab2:	42ab      	cmp	r3, r5
    7ab4:	d1f9      	bne.n	7aaa <_Unwind_VRS_Pop+0xf6>
    7ab6:	f1b9 0f00 	cmp.w	r9, #0
    7aba:	d00f      	beq.n	7adc <_Unwind_VRS_Pop+0x128>
    7abc:	466f      	mov	r7, sp
    7abe:	4641      	mov	r1, r8
    7ac0:	2910      	cmp	r1, #16
    7ac2:	bf38      	it	cc
    7ac4:	2110      	movcc	r1, #16
    7ac6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    7aca:	3984      	subs	r1, #132	; 0x84
    7acc:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    7ad0:	f853 0b04 	ldr.w	r0, [r3], #4
    7ad4:	f841 0f04 	str.w	r0, [r1, #4]!
    7ad8:	42ab      	cmp	r3, r5
    7ada:	d1f9      	bne.n	7ad0 <_Unwind_VRS_Pop+0x11c>
    7adc:	2c01      	cmp	r4, #1
    7ade:	f000 8084 	beq.w	7bea <_Unwind_VRS_Pop+0x236>
    7ae2:	f1b8 0f0f 	cmp.w	r8, #15
    7ae6:	63b5      	str	r5, [r6, #56]	; 0x38
    7ae8:	d945      	bls.n	7b76 <_Unwind_VRS_Pop+0x1c2>
    7aea:	f1b9 0f00 	cmp.w	r9, #0
    7aee:	d002      	beq.n	7af6 <_Unwind_VRS_Pop+0x142>
    7af0:	4668      	mov	r0, sp
    7af2:	f000 f8b7 	bl	7c64 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    7af6:	2000      	movs	r0, #0
    7af8:	b043      	add	sp, #268	; 0x10c
    7afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7afe:	b9dc      	cbnz	r4, 7b38 <_Unwind_VRS_Pop+0x184>
    7b00:	6b87      	ldr	r7, [r0, #56]	; 0x38
    7b02:	4623      	mov	r3, r4
    7b04:	2001      	movs	r0, #1
    7b06:	b294      	uxth	r4, r2
    7b08:	f106 0c04 	add.w	ip, r6, #4
    7b0c:	fa00 f203 	lsl.w	r2, r0, r3
    7b10:	4222      	tst	r2, r4
    7b12:	4639      	mov	r1, r7
    7b14:	d004      	beq.n	7b20 <_Unwind_VRS_Pop+0x16c>
    7b16:	f851 2b04 	ldr.w	r2, [r1], #4
    7b1a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    7b1e:	460f      	mov	r7, r1
    7b20:	3301      	adds	r3, #1
    7b22:	2b10      	cmp	r3, #16
    7b24:	d1f2      	bne.n	7b0c <_Unwind_VRS_Pop+0x158>
    7b26:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    7b2a:	d1e4      	bne.n	7af6 <_Unwind_VRS_Pop+0x142>
    7b2c:	63b7      	str	r7, [r6, #56]	; 0x38
    7b2e:	e004      	b.n	7b3a <_Unwind_VRS_Pop+0x186>
    7b30:	eb08 0305 	add.w	r3, r8, r5
    7b34:	2b10      	cmp	r3, #16
    7b36:	d903      	bls.n	7b40 <_Unwind_VRS_Pop+0x18c>
    7b38:	2002      	movs	r0, #2
    7b3a:	b043      	add	sp, #268	; 0x10c
    7b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7b40:	f1b8 0f0f 	cmp.w	r8, #15
    7b44:	d8f8      	bhi.n	7b38 <_Unwind_VRS_Pop+0x184>
    7b46:	6833      	ldr	r3, [r6, #0]
    7b48:	07da      	lsls	r2, r3, #31
    7b4a:	d506      	bpl.n	7b5a <_Unwind_VRS_Pop+0x1a6>
    7b4c:	4630      	mov	r0, r6
    7b4e:	f023 0303 	bic.w	r3, r3, #3
    7b52:	f840 3b48 	str.w	r3, [r0], #72
    7b56:	f000 f879 	bl	7c4c <__gnu_Unwind_Save_VFP>
    7b5a:	af20      	add	r7, sp, #128	; 0x80
    7b5c:	4638      	mov	r0, r7
    7b5e:	f000 f875 	bl	7c4c <__gnu_Unwind_Save_VFP>
    7b62:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7b64:	2d00      	cmp	r5, #0
    7b66:	d199      	bne.n	7a9c <_Unwind_VRS_Pop+0xe8>
    7b68:	461d      	mov	r5, r3
    7b6a:	3504      	adds	r5, #4
    7b6c:	63b5      	str	r5, [r6, #56]	; 0x38
    7b6e:	4638      	mov	r0, r7
    7b70:	f000 f868 	bl	7c44 <__gnu_Unwind_Restore_VFP>
    7b74:	e7bf      	b.n	7af6 <_Unwind_VRS_Pop+0x142>
    7b76:	a820      	add	r0, sp, #128	; 0x80
    7b78:	f000 f86c 	bl	7c54 <__gnu_Unwind_Restore_VFP_D>
    7b7c:	e7b5      	b.n	7aea <_Unwind_VRS_Pop+0x136>
    7b7e:	f1b9 0f10 	cmp.w	r9, #16
    7b82:	d940      	bls.n	7c06 <_Unwind_VRS_Pop+0x252>
    7b84:	f1a9 0910 	sub.w	r9, r9, #16
    7b88:	6833      	ldr	r3, [r6, #0]
    7b8a:	07d9      	lsls	r1, r3, #31
    7b8c:	d508      	bpl.n	7ba0 <_Unwind_VRS_Pop+0x1ec>
    7b8e:	f023 0301 	bic.w	r3, r3, #1
    7b92:	4630      	mov	r0, r6
    7b94:	f043 0302 	orr.w	r3, r3, #2
    7b98:	f840 3b48 	str.w	r3, [r0], #72
    7b9c:	f000 f85e 	bl	7c5c <__gnu_Unwind_Save_VFP_D>
    7ba0:	f1b9 0f00 	cmp.w	r9, #0
    7ba4:	d032      	beq.n	7c0c <_Unwind_VRS_Pop+0x258>
    7ba6:	6833      	ldr	r3, [r6, #0]
    7ba8:	075a      	lsls	r2, r3, #29
    7baa:	d420      	bmi.n	7bee <_Unwind_VRS_Pop+0x23a>
    7bac:	f1b8 0f0f 	cmp.w	r8, #15
    7bb0:	d925      	bls.n	7bfe <_Unwind_VRS_Pop+0x24a>
    7bb2:	466f      	mov	r7, sp
    7bb4:	4638      	mov	r0, r7
    7bb6:	f1c8 0510 	rsb	r5, r8, #16
    7bba:	f000 f857 	bl	7c6c <__gnu_Unwind_Save_VFP_D_16_to_31>
    7bbe:	2d00      	cmp	r5, #0
    7bc0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7bc2:	f77f af7c 	ble.w	7abe <_Unwind_VRS_Pop+0x10a>
    7bc6:	af20      	add	r7, sp, #128	; 0x80
    7bc8:	e76a      	b.n	7aa0 <_Unwind_VRS_Pop+0xec>
    7bca:	f023 0310 	bic.w	r3, r3, #16
    7bce:	6033      	str	r3, [r6, #0]
    7bd0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    7bd4:	f000 f89c 	bl	7d10 <__gnu_Unwind_Save_WMMXC>
    7bd8:	e704      	b.n	79e4 <_Unwind_VRS_Pop+0x30>
    7bda:	f023 0308 	bic.w	r3, r3, #8
    7bde:	6003      	str	r3, [r0, #0]
    7be0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7be4:	f000 f868 	bl	7cb8 <__gnu_Unwind_Save_WMMXD>
    7be8:	e727      	b.n	7a3a <_Unwind_VRS_Pop+0x86>
    7bea:	af20      	add	r7, sp, #128	; 0x80
    7bec:	e7bd      	b.n	7b6a <_Unwind_VRS_Pop+0x1b6>
    7bee:	4630      	mov	r0, r6
    7bf0:	f023 0304 	bic.w	r3, r3, #4
    7bf4:	f840 3bd0 	str.w	r3, [r0], #208
    7bf8:	f000 f838 	bl	7c6c <__gnu_Unwind_Save_VFP_D_16_to_31>
    7bfc:	e7d6      	b.n	7bac <_Unwind_VRS_Pop+0x1f8>
    7bfe:	a820      	add	r0, sp, #128	; 0x80
    7c00:	f000 f82c 	bl	7c5c <__gnu_Unwind_Save_VFP_D>
    7c04:	e7d5      	b.n	7bb2 <_Unwind_VRS_Pop+0x1fe>
    7c06:	f04f 0900 	mov.w	r9, #0
    7c0a:	e7bd      	b.n	7b88 <_Unwind_VRS_Pop+0x1d4>
    7c0c:	f1b8 0f0f 	cmp.w	r8, #15
    7c10:	f63f af41 	bhi.w	7a96 <_Unwind_VRS_Pop+0xe2>
    7c14:	af20      	add	r7, sp, #128	; 0x80
    7c16:	4638      	mov	r0, r7
    7c18:	f000 f820 	bl	7c5c <__gnu_Unwind_Save_VFP_D>
    7c1c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7c1e:	2d00      	cmp	r5, #0
    7c20:	f47f af3c 	bne.w	7a9c <_Unwind_VRS_Pop+0xe8>
    7c24:	4638      	mov	r0, r7
    7c26:	f000 f815 	bl	7c54 <__gnu_Unwind_Restore_VFP_D>
    7c2a:	e764      	b.n	7af6 <_Unwind_VRS_Pop+0x142>

00007c2c <__restore_core_regs>:
    7c2c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    7c30:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    7c34:	469c      	mov	ip, r3
    7c36:	46a6      	mov	lr, r4
    7c38:	f84c 5d04 	str.w	r5, [ip, #-4]!
    7c3c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    7c40:	46e5      	mov	sp, ip
    7c42:	bd00      	pop	{pc}

00007c44 <__gnu_Unwind_Restore_VFP>:
    7c44:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    7c48:	4770      	bx	lr
    7c4a:	bf00      	nop

00007c4c <__gnu_Unwind_Save_VFP>:
    7c4c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    7c50:	4770      	bx	lr
    7c52:	bf00      	nop

00007c54 <__gnu_Unwind_Restore_VFP_D>:
    7c54:	ec90 0b20 	vldmia	r0, {d0-d15}
    7c58:	4770      	bx	lr
    7c5a:	bf00      	nop

00007c5c <__gnu_Unwind_Save_VFP_D>:
    7c5c:	ec80 0b20 	vstmia	r0, {d0-d15}
    7c60:	4770      	bx	lr
    7c62:	bf00      	nop

00007c64 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    7c64:	ecd0 0b20 	vldmia	r0, {d16-d31}
    7c68:	4770      	bx	lr
    7c6a:	bf00      	nop

00007c6c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    7c6c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7c70:	4770      	bx	lr
    7c72:	bf00      	nop

00007c74 <__gnu_Unwind_Restore_WMMXD>:
    7c74:	ecf0 0102 	ldfe	f0, [r0], #8
    7c78:	ecf0 1102 	ldfe	f1, [r0], #8
    7c7c:	ecf0 2102 	ldfe	f2, [r0], #8
    7c80:	ecf0 3102 	ldfe	f3, [r0], #8
    7c84:	ecf0 4102 	ldfe	f4, [r0], #8
    7c88:	ecf0 5102 	ldfe	f5, [r0], #8
    7c8c:	ecf0 6102 	ldfe	f6, [r0], #8
    7c90:	ecf0 7102 	ldfe	f7, [r0], #8
    7c94:	ecf0 8102 	ldfp	f0, [r0], #8
    7c98:	ecf0 9102 	ldfp	f1, [r0], #8
    7c9c:	ecf0 a102 	ldfp	f2, [r0], #8
    7ca0:	ecf0 b102 	ldfp	f3, [r0], #8
    7ca4:	ecf0 c102 	ldfp	f4, [r0], #8
    7ca8:	ecf0 d102 	ldfp	f5, [r0], #8
    7cac:	ecf0 e102 	ldfp	f6, [r0], #8
    7cb0:	ecf0 f102 	ldfp	f7, [r0], #8
    7cb4:	4770      	bx	lr
    7cb6:	bf00      	nop

00007cb8 <__gnu_Unwind_Save_WMMXD>:
    7cb8:	ece0 0102 	stfe	f0, [r0], #8
    7cbc:	ece0 1102 	stfe	f1, [r0], #8
    7cc0:	ece0 2102 	stfe	f2, [r0], #8
    7cc4:	ece0 3102 	stfe	f3, [r0], #8
    7cc8:	ece0 4102 	stfe	f4, [r0], #8
    7ccc:	ece0 5102 	stfe	f5, [r0], #8
    7cd0:	ece0 6102 	stfe	f6, [r0], #8
    7cd4:	ece0 7102 	stfe	f7, [r0], #8
    7cd8:	ece0 8102 	stfp	f0, [r0], #8
    7cdc:	ece0 9102 	stfp	f1, [r0], #8
    7ce0:	ece0 a102 	stfp	f2, [r0], #8
    7ce4:	ece0 b102 	stfp	f3, [r0], #8
    7ce8:	ece0 c102 	stfp	f4, [r0], #8
    7cec:	ece0 d102 	stfp	f5, [r0], #8
    7cf0:	ece0 e102 	stfp	f6, [r0], #8
    7cf4:	ece0 f102 	stfp	f7, [r0], #8
    7cf8:	4770      	bx	lr
    7cfa:	bf00      	nop

00007cfc <__gnu_Unwind_Restore_WMMXC>:
    7cfc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    7d00:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    7d04:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    7d08:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    7d0c:	4770      	bx	lr
    7d0e:	bf00      	nop

00007d10 <__gnu_Unwind_Save_WMMXC>:
    7d10:	fca0 8101 	stc2	1, cr8, [r0], #4
    7d14:	fca0 9101 	stc2	1, cr9, [r0], #4
    7d18:	fca0 a101 	stc2	1, cr10, [r0], #4
    7d1c:	fca0 b101 	stc2	1, cr11, [r0], #4
    7d20:	4770      	bx	lr
    7d22:	bf00      	nop

00007d24 <_Unwind_RaiseException>:
    7d24:	46ec      	mov	ip, sp
    7d26:	b500      	push	{lr}
    7d28:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d2c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d30:	f04f 0300 	mov.w	r3, #0
    7d34:	e92d 000c 	stmdb	sp!, {r2, r3}
    7d38:	a901      	add	r1, sp, #4
    7d3a:	f7ff fbf1 	bl	7520 <__gnu_Unwind_RaiseException>
    7d3e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7d42:	b012      	add	sp, #72	; 0x48
    7d44:	4770      	bx	lr
    7d46:	bf00      	nop

00007d48 <_Unwind_Resume>:
    7d48:	46ec      	mov	ip, sp
    7d4a:	b500      	push	{lr}
    7d4c:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d50:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d54:	f04f 0300 	mov.w	r3, #0
    7d58:	e92d 000c 	stmdb	sp!, {r2, r3}
    7d5c:	a901      	add	r1, sp, #4
    7d5e:	f7ff fc19 	bl	7594 <__gnu_Unwind_Resume>
    7d62:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7d66:	b012      	add	sp, #72	; 0x48
    7d68:	4770      	bx	lr
    7d6a:	bf00      	nop

00007d6c <_Unwind_Resume_or_Rethrow>:
    7d6c:	46ec      	mov	ip, sp
    7d6e:	b500      	push	{lr}
    7d70:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d74:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d78:	f04f 0300 	mov.w	r3, #0
    7d7c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7d80:	a901      	add	r1, sp, #4
    7d82:	f7ff fc29 	bl	75d8 <__gnu_Unwind_Resume_or_Rethrow>
    7d86:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7d8a:	b012      	add	sp, #72	; 0x48
    7d8c:	4770      	bx	lr
    7d8e:	bf00      	nop

00007d90 <_Unwind_ForcedUnwind>:
    7d90:	46ec      	mov	ip, sp
    7d92:	b500      	push	{lr}
    7d94:	e92d 5000 	stmdb	sp!, {ip, lr}
    7d98:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7d9c:	f04f 0300 	mov.w	r3, #0
    7da0:	e92d 000c 	stmdb	sp!, {r2, r3}
    7da4:	ab01      	add	r3, sp, #4
    7da6:	f7ff fbeb 	bl	7580 <__gnu_Unwind_ForcedUnwind>
    7daa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7dae:	b012      	add	sp, #72	; 0x48
    7db0:	4770      	bx	lr
    7db2:	bf00      	nop

00007db4 <_Unwind_Backtrace>:
    7db4:	46ec      	mov	ip, sp
    7db6:	b500      	push	{lr}
    7db8:	e92d 5000 	stmdb	sp!, {ip, lr}
    7dbc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7dc0:	f04f 0300 	mov.w	r3, #0
    7dc4:	e92d 000c 	stmdb	sp!, {r2, r3}
    7dc8:	aa01      	add	r2, sp, #4
    7dca:	f7ff fc5d 	bl	7688 <__gnu_Unwind_Backtrace>
    7dce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7dd2:	b012      	add	sp, #72	; 0x48
    7dd4:	4770      	bx	lr
    7dd6:	bf00      	nop

00007dd8 <next_unwind_byte>:
    7dd8:	7a02      	ldrb	r2, [r0, #8]
    7dda:	b97a      	cbnz	r2, 7dfc <next_unwind_byte+0x24>
    7ddc:	7a43      	ldrb	r3, [r0, #9]
    7dde:	b1a3      	cbz	r3, 7e0a <next_unwind_byte+0x32>
    7de0:	6842      	ldr	r2, [r0, #4]
    7de2:	3b01      	subs	r3, #1
    7de4:	b410      	push	{r4}
    7de6:	7243      	strb	r3, [r0, #9]
    7de8:	6813      	ldr	r3, [r2, #0]
    7dea:	2103      	movs	r1, #3
    7dec:	1d14      	adds	r4, r2, #4
    7dee:	7201      	strb	r1, [r0, #8]
    7df0:	021a      	lsls	r2, r3, #8
    7df2:	6044      	str	r4, [r0, #4]
    7df4:	6002      	str	r2, [r0, #0]
    7df6:	bc10      	pop	{r4}
    7df8:	0e18      	lsrs	r0, r3, #24
    7dfa:	4770      	bx	lr
    7dfc:	6803      	ldr	r3, [r0, #0]
    7dfe:	3a01      	subs	r2, #1
    7e00:	7202      	strb	r2, [r0, #8]
    7e02:	021a      	lsls	r2, r3, #8
    7e04:	6002      	str	r2, [r0, #0]
    7e06:	0e18      	lsrs	r0, r3, #24
    7e08:	4770      	bx	lr
    7e0a:	20b0      	movs	r0, #176	; 0xb0
    7e0c:	4770      	bx	lr
    7e0e:	bf00      	nop

00007e10 <_Unwind_GetGR.constprop.0>:
    7e10:	b500      	push	{lr}
    7e12:	b085      	sub	sp, #20
    7e14:	aa03      	add	r2, sp, #12
    7e16:	2300      	movs	r3, #0
    7e18:	9200      	str	r2, [sp, #0]
    7e1a:	4619      	mov	r1, r3
    7e1c:	220c      	movs	r2, #12
    7e1e:	f7ff fbeb 	bl	75f8 <_Unwind_VRS_Get>
    7e22:	9803      	ldr	r0, [sp, #12]
    7e24:	b005      	add	sp, #20
    7e26:	f85d fb04 	ldr.w	pc, [sp], #4
    7e2a:	bf00      	nop

00007e2c <unwind_UCB_from_context>:
    7e2c:	e7f0      	b.n	7e10 <_Unwind_GetGR.constprop.0>
    7e2e:	bf00      	nop

00007e30 <__gnu_unwind_execute>:
    7e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7e34:	4605      	mov	r5, r0
    7e36:	b085      	sub	sp, #20
    7e38:	460e      	mov	r6, r1
    7e3a:	f04f 0800 	mov.w	r8, #0
    7e3e:	4630      	mov	r0, r6
    7e40:	f7ff ffca 	bl	7dd8 <next_unwind_byte>
    7e44:	28b0      	cmp	r0, #176	; 0xb0
    7e46:	4604      	mov	r4, r0
    7e48:	f000 80b2 	beq.w	7fb0 <__gnu_unwind_execute+0x180>
    7e4c:	0607      	lsls	r7, r0, #24
    7e4e:	d520      	bpl.n	7e92 <__gnu_unwind_execute+0x62>
    7e50:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7e54:	2b80      	cmp	r3, #128	; 0x80
    7e56:	d04d      	beq.n	7ef4 <__gnu_unwind_execute+0xc4>
    7e58:	2b90      	cmp	r3, #144	; 0x90
    7e5a:	d036      	beq.n	7eca <__gnu_unwind_execute+0x9a>
    7e5c:	2ba0      	cmp	r3, #160	; 0xa0
    7e5e:	d060      	beq.n	7f22 <__gnu_unwind_execute+0xf2>
    7e60:	2bb0      	cmp	r3, #176	; 0xb0
    7e62:	d074      	beq.n	7f4e <__gnu_unwind_execute+0x11e>
    7e64:	2bc0      	cmp	r3, #192	; 0xc0
    7e66:	f000 808b 	beq.w	7f80 <__gnu_unwind_execute+0x150>
    7e6a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7e6e:	2bd0      	cmp	r3, #208	; 0xd0
    7e70:	d10b      	bne.n	7e8a <__gnu_unwind_execute+0x5a>
    7e72:	f000 0207 	and.w	r2, r0, #7
    7e76:	3201      	adds	r2, #1
    7e78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7e7c:	2305      	movs	r3, #5
    7e7e:	2101      	movs	r1, #1
    7e80:	4628      	mov	r0, r5
    7e82:	f7ff fd97 	bl	79b4 <_Unwind_VRS_Pop>
    7e86:	2800      	cmp	r0, #0
    7e88:	d0d9      	beq.n	7e3e <__gnu_unwind_execute+0xe>
    7e8a:	2009      	movs	r0, #9
    7e8c:	b005      	add	sp, #20
    7e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7e92:	f10d 090c 	add.w	r9, sp, #12
    7e96:	2300      	movs	r3, #0
    7e98:	4619      	mov	r1, r3
    7e9a:	0087      	lsls	r7, r0, #2
    7e9c:	f8cd 9000 	str.w	r9, [sp]
    7ea0:	220d      	movs	r2, #13
    7ea2:	4628      	mov	r0, r5
    7ea4:	f7ff fba8 	bl	75f8 <_Unwind_VRS_Get>
    7ea8:	b2ff      	uxtb	r7, r7
    7eaa:	9b03      	ldr	r3, [sp, #12]
    7eac:	f8cd 9000 	str.w	r9, [sp]
    7eb0:	3704      	adds	r7, #4
    7eb2:	0660      	lsls	r0, r4, #25
    7eb4:	bf4c      	ite	mi
    7eb6:	1bdf      	submi	r7, r3, r7
    7eb8:	18ff      	addpl	r7, r7, r3
    7eba:	2300      	movs	r3, #0
    7ebc:	4619      	mov	r1, r3
    7ebe:	220d      	movs	r2, #13
    7ec0:	4628      	mov	r0, r5
    7ec2:	9703      	str	r7, [sp, #12]
    7ec4:	f7ff fbbc 	bl	7640 <_Unwind_VRS_Set>
    7ec8:	e7b9      	b.n	7e3e <__gnu_unwind_execute+0xe>
    7eca:	f000 030d 	and.w	r3, r0, #13
    7ece:	2b0d      	cmp	r3, #13
    7ed0:	d0db      	beq.n	7e8a <__gnu_unwind_execute+0x5a>
    7ed2:	af03      	add	r7, sp, #12
    7ed4:	2300      	movs	r3, #0
    7ed6:	f000 020f 	and.w	r2, r0, #15
    7eda:	4619      	mov	r1, r3
    7edc:	9700      	str	r7, [sp, #0]
    7ede:	4628      	mov	r0, r5
    7ee0:	f7ff fb8a 	bl	75f8 <_Unwind_VRS_Get>
    7ee4:	2300      	movs	r3, #0
    7ee6:	9700      	str	r7, [sp, #0]
    7ee8:	4619      	mov	r1, r3
    7eea:	220d      	movs	r2, #13
    7eec:	4628      	mov	r0, r5
    7eee:	f7ff fba7 	bl	7640 <_Unwind_VRS_Set>
    7ef2:	e7a4      	b.n	7e3e <__gnu_unwind_execute+0xe>
    7ef4:	4630      	mov	r0, r6
    7ef6:	f7ff ff6f 	bl	7dd8 <next_unwind_byte>
    7efa:	0224      	lsls	r4, r4, #8
    7efc:	4320      	orrs	r0, r4
    7efe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    7f02:	d0c2      	beq.n	7e8a <__gnu_unwind_execute+0x5a>
    7f04:	0104      	lsls	r4, r0, #4
    7f06:	2300      	movs	r3, #0
    7f08:	b2a2      	uxth	r2, r4
    7f0a:	4619      	mov	r1, r3
    7f0c:	4628      	mov	r0, r5
    7f0e:	f7ff fd51 	bl	79b4 <_Unwind_VRS_Pop>
    7f12:	2800      	cmp	r0, #0
    7f14:	d1b9      	bne.n	7e8a <__gnu_unwind_execute+0x5a>
    7f16:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    7f1a:	bf18      	it	ne
    7f1c:	f04f 0801 	movne.w	r8, #1
    7f20:	e78d      	b.n	7e3e <__gnu_unwind_execute+0xe>
    7f22:	43c2      	mvns	r2, r0
    7f24:	f002 0307 	and.w	r3, r2, #7
    7f28:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    7f2c:	411a      	asrs	r2, r3
    7f2e:	0701      	lsls	r1, r0, #28
    7f30:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7f34:	f04f 0300 	mov.w	r3, #0
    7f38:	bf48      	it	mi
    7f3a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    7f3e:	4619      	mov	r1, r3
    7f40:	4628      	mov	r0, r5
    7f42:	f7ff fd37 	bl	79b4 <_Unwind_VRS_Pop>
    7f46:	2800      	cmp	r0, #0
    7f48:	f43f af79 	beq.w	7e3e <__gnu_unwind_execute+0xe>
    7f4c:	e79d      	b.n	7e8a <__gnu_unwind_execute+0x5a>
    7f4e:	28b1      	cmp	r0, #177	; 0xb1
    7f50:	d033      	beq.n	7fba <__gnu_unwind_execute+0x18a>
    7f52:	28b2      	cmp	r0, #178	; 0xb2
    7f54:	f000 808b 	beq.w	806e <__gnu_unwind_execute+0x23e>
    7f58:	28b3      	cmp	r0, #179	; 0xb3
    7f5a:	d039      	beq.n	7fd0 <__gnu_unwind_execute+0x1a0>
    7f5c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7f60:	2bb4      	cmp	r3, #180	; 0xb4
    7f62:	d092      	beq.n	7e8a <__gnu_unwind_execute+0x5a>
    7f64:	f000 0207 	and.w	r2, r0, #7
    7f68:	3201      	adds	r2, #1
    7f6a:	2301      	movs	r3, #1
    7f6c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7f70:	4619      	mov	r1, r3
    7f72:	4628      	mov	r0, r5
    7f74:	f7ff fd1e 	bl	79b4 <_Unwind_VRS_Pop>
    7f78:	2800      	cmp	r0, #0
    7f7a:	f43f af60 	beq.w	7e3e <__gnu_unwind_execute+0xe>
    7f7e:	e784      	b.n	7e8a <__gnu_unwind_execute+0x5a>
    7f80:	28c6      	cmp	r0, #198	; 0xc6
    7f82:	d042      	beq.n	800a <__gnu_unwind_execute+0x1da>
    7f84:	28c7      	cmp	r0, #199	; 0xc7
    7f86:	d04c      	beq.n	8022 <__gnu_unwind_execute+0x1f2>
    7f88:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    7f8c:	2bc0      	cmp	r3, #192	; 0xc0
    7f8e:	d05b      	beq.n	8048 <__gnu_unwind_execute+0x218>
    7f90:	28c8      	cmp	r0, #200	; 0xc8
    7f92:	d060      	beq.n	8056 <__gnu_unwind_execute+0x226>
    7f94:	28c9      	cmp	r0, #201	; 0xc9
    7f96:	f47f af78 	bne.w	7e8a <__gnu_unwind_execute+0x5a>
    7f9a:	4630      	mov	r0, r6
    7f9c:	f7ff ff1c 	bl	7dd8 <next_unwind_byte>
    7fa0:	0302      	lsls	r2, r0, #12
    7fa2:	f000 000f 	and.w	r0, r0, #15
    7fa6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    7faa:	3001      	adds	r0, #1
    7fac:	4302      	orrs	r2, r0
    7fae:	e765      	b.n	7e7c <__gnu_unwind_execute+0x4c>
    7fb0:	f1b8 0f00 	cmp.w	r8, #0
    7fb4:	d018      	beq.n	7fe8 <__gnu_unwind_execute+0x1b8>
    7fb6:	2000      	movs	r0, #0
    7fb8:	e768      	b.n	7e8c <__gnu_unwind_execute+0x5c>
    7fba:	4630      	mov	r0, r6
    7fbc:	f7ff ff0c 	bl	7dd8 <next_unwind_byte>
    7fc0:	4602      	mov	r2, r0
    7fc2:	2800      	cmp	r0, #0
    7fc4:	f43f af61 	beq.w	7e8a <__gnu_unwind_execute+0x5a>
    7fc8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7fcc:	d0d0      	beq.n	7f70 <__gnu_unwind_execute+0x140>
    7fce:	e75c      	b.n	7e8a <__gnu_unwind_execute+0x5a>
    7fd0:	4630      	mov	r0, r6
    7fd2:	f7ff ff01 	bl	7dd8 <next_unwind_byte>
    7fd6:	0301      	lsls	r1, r0, #12
    7fd8:	f000 000f 	and.w	r0, r0, #15
    7fdc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    7fe0:	1c42      	adds	r2, r0, #1
    7fe2:	2301      	movs	r3, #1
    7fe4:	430a      	orrs	r2, r1
    7fe6:	e7c3      	b.n	7f70 <__gnu_unwind_execute+0x140>
    7fe8:	ac03      	add	r4, sp, #12
    7fea:	4643      	mov	r3, r8
    7fec:	220e      	movs	r2, #14
    7fee:	4641      	mov	r1, r8
    7ff0:	9400      	str	r4, [sp, #0]
    7ff2:	4628      	mov	r0, r5
    7ff4:	f7ff fb00 	bl	75f8 <_Unwind_VRS_Get>
    7ff8:	9400      	str	r4, [sp, #0]
    7ffa:	4628      	mov	r0, r5
    7ffc:	4643      	mov	r3, r8
    7ffe:	220f      	movs	r2, #15
    8000:	4641      	mov	r1, r8
    8002:	f7ff fb1d 	bl	7640 <_Unwind_VRS_Set>
    8006:	4640      	mov	r0, r8
    8008:	e740      	b.n	7e8c <__gnu_unwind_execute+0x5c>
    800a:	4630      	mov	r0, r6
    800c:	f7ff fee4 	bl	7dd8 <next_unwind_byte>
    8010:	0301      	lsls	r1, r0, #12
    8012:	f000 000f 	and.w	r0, r0, #15
    8016:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    801a:	1c42      	adds	r2, r0, #1
    801c:	2303      	movs	r3, #3
    801e:	430a      	orrs	r2, r1
    8020:	e7a6      	b.n	7f70 <__gnu_unwind_execute+0x140>
    8022:	4630      	mov	r0, r6
    8024:	f7ff fed8 	bl	7dd8 <next_unwind_byte>
    8028:	4602      	mov	r2, r0
    802a:	2800      	cmp	r0, #0
    802c:	f43f af2d 	beq.w	7e8a <__gnu_unwind_execute+0x5a>
    8030:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    8034:	f47f af29 	bne.w	7e8a <__gnu_unwind_execute+0x5a>
    8038:	2104      	movs	r1, #4
    803a:	4628      	mov	r0, r5
    803c:	f7ff fcba 	bl	79b4 <_Unwind_VRS_Pop>
    8040:	2800      	cmp	r0, #0
    8042:	f43f aefc 	beq.w	7e3e <__gnu_unwind_execute+0xe>
    8046:	e720      	b.n	7e8a <__gnu_unwind_execute+0x5a>
    8048:	f000 020f 	and.w	r2, r0, #15
    804c:	3201      	adds	r2, #1
    804e:	2303      	movs	r3, #3
    8050:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    8054:	e78c      	b.n	7f70 <__gnu_unwind_execute+0x140>
    8056:	4630      	mov	r0, r6
    8058:	f7ff febe 	bl	7dd8 <next_unwind_byte>
    805c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    8060:	f000 030f 	and.w	r3, r0, #15
    8064:	3210      	adds	r2, #16
    8066:	3301      	adds	r3, #1
    8068:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    806c:	e706      	b.n	7e7c <__gnu_unwind_execute+0x4c>
    806e:	2300      	movs	r3, #0
    8070:	f10d 090c 	add.w	r9, sp, #12
    8074:	220d      	movs	r2, #13
    8076:	4619      	mov	r1, r3
    8078:	f8cd 9000 	str.w	r9, [sp]
    807c:	4628      	mov	r0, r5
    807e:	f7ff fabb 	bl	75f8 <_Unwind_VRS_Get>
    8082:	4630      	mov	r0, r6
    8084:	f7ff fea8 	bl	7dd8 <next_unwind_byte>
    8088:	0602      	lsls	r2, r0, #24
    808a:	f04f 0702 	mov.w	r7, #2
    808e:	d50c      	bpl.n	80aa <__gnu_unwind_execute+0x27a>
    8090:	9b03      	ldr	r3, [sp, #12]
    8092:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    8096:	40b8      	lsls	r0, r7
    8098:	4403      	add	r3, r0
    809a:	4630      	mov	r0, r6
    809c:	9303      	str	r3, [sp, #12]
    809e:	f7ff fe9b 	bl	7dd8 <next_unwind_byte>
    80a2:	0603      	lsls	r3, r0, #24
    80a4:	f107 0707 	add.w	r7, r7, #7
    80a8:	d4f2      	bmi.n	8090 <__gnu_unwind_execute+0x260>
    80aa:	9b03      	ldr	r3, [sp, #12]
    80ac:	f8cd 9000 	str.w	r9, [sp]
    80b0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    80b4:	f503 7201 	add.w	r2, r3, #516	; 0x204
    80b8:	40bc      	lsls	r4, r7
    80ba:	2300      	movs	r3, #0
    80bc:	4414      	add	r4, r2
    80be:	4619      	mov	r1, r3
    80c0:	220d      	movs	r2, #13
    80c2:	4628      	mov	r0, r5
    80c4:	9403      	str	r4, [sp, #12]
    80c6:	f7ff fabb 	bl	7640 <_Unwind_VRS_Set>
    80ca:	e6b8      	b.n	7e3e <__gnu_unwind_execute+0xe>

000080cc <__gnu_unwind_frame>:
    80cc:	b510      	push	{r4, lr}
    80ce:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    80d0:	b084      	sub	sp, #16
    80d2:	6853      	ldr	r3, [r2, #4]
    80d4:	2403      	movs	r4, #3
    80d6:	f88d 400c 	strb.w	r4, [sp, #12]
    80da:	021b      	lsls	r3, r3, #8
    80dc:	f102 0408 	add.w	r4, r2, #8
    80e0:	4608      	mov	r0, r1
    80e2:	79d2      	ldrb	r2, [r2, #7]
    80e4:	9301      	str	r3, [sp, #4]
    80e6:	a901      	add	r1, sp, #4
    80e8:	9402      	str	r4, [sp, #8]
    80ea:	f88d 200d 	strb.w	r2, [sp, #13]
    80ee:	f7ff fe9f 	bl	7e30 <__gnu_unwind_execute>
    80f2:	b004      	add	sp, #16
    80f4:	bd10      	pop	{r4, pc}
    80f6:	bf00      	nop

000080f8 <_Unwind_GetRegionStart>:
    80f8:	b508      	push	{r3, lr}
    80fa:	f7ff fe97 	bl	7e2c <unwind_UCB_from_context>
    80fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
    8100:	bd08      	pop	{r3, pc}
    8102:	bf00      	nop

00008104 <_Unwind_GetLanguageSpecificData>:
    8104:	b508      	push	{r3, lr}
    8106:	f7ff fe91 	bl	7e2c <unwind_UCB_from_context>
    810a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    810c:	79c3      	ldrb	r3, [r0, #7]
    810e:	3302      	adds	r3, #2
    8110:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8114:	bd08      	pop	{r3, pc}
    8116:	bf00      	nop

00008118 <__aeabi_idiv0>:
    8118:	4770      	bx	lr
    811a:	bf00      	nop

0000811c <abort>:
    811c:	b508      	push	{r3, lr}
    811e:	2006      	movs	r0, #6
    8120:	f000 f874 	bl	820c <raise>
    8124:	2001      	movs	r0, #1
    8126:	f7fb fb9d 	bl	3864 <_exit>
    812a:	Address 0x000000000000812a is out of bounds.


0000812c <__cxa_atexit>:
    812c:	b510      	push	{r4, lr}
    812e:	4c05      	ldr	r4, [pc, #20]	; (8144 <__cxa_atexit+0x18>)
    8130:	4613      	mov	r3, r2
    8132:	b12c      	cbz	r4, 8140 <__cxa_atexit+0x14>
    8134:	460a      	mov	r2, r1
    8136:	4601      	mov	r1, r0
    8138:	2002      	movs	r0, #2
    813a:	f3af 8000 	nop.w
    813e:	bd10      	pop	{r4, pc}
    8140:	4620      	mov	r0, r4
    8142:	e7fc      	b.n	813e <__cxa_atexit+0x12>
    8144:	00000000 	.word	0x00000000

00008148 <__libc_init_array>:
    8148:	b570      	push	{r4, r5, r6, lr}
    814a:	4d0d      	ldr	r5, [pc, #52]	; (8180 <__libc_init_array+0x38>)
    814c:	4c0d      	ldr	r4, [pc, #52]	; (8184 <__libc_init_array+0x3c>)
    814e:	1b64      	subs	r4, r4, r5
    8150:	10a4      	asrs	r4, r4, #2
    8152:	2600      	movs	r6, #0
    8154:	42a6      	cmp	r6, r4
    8156:	d109      	bne.n	816c <__libc_init_array+0x24>
    8158:	4d0b      	ldr	r5, [pc, #44]	; (8188 <__libc_init_array+0x40>)
    815a:	4c0c      	ldr	r4, [pc, #48]	; (818c <__libc_init_array+0x44>)
    815c:	f7f8 f8d0 	bl	300 <_init>
    8160:	1b64      	subs	r4, r4, r5
    8162:	10a4      	asrs	r4, r4, #2
    8164:	2600      	movs	r6, #0
    8166:	42a6      	cmp	r6, r4
    8168:	d105      	bne.n	8176 <__libc_init_array+0x2e>
    816a:	bd70      	pop	{r4, r5, r6, pc}
    816c:	f855 3b04 	ldr.w	r3, [r5], #4
    8170:	4798      	blx	r3
    8172:	3601      	adds	r6, #1
    8174:	e7ee      	b.n	8154 <__libc_init_array+0xc>
    8176:	f855 3b04 	ldr.w	r3, [r5], #4
    817a:	4798      	blx	r3
    817c:	3601      	adds	r6, #1
    817e:	e7f2      	b.n	8166 <__libc_init_array+0x1e>
    8180:	0000030c 	.word	0x0000030c
    8184:	0000030c 	.word	0x0000030c
    8188:	0000030c 	.word	0x0000030c
    818c:	00000320 	.word	0x00000320

00008190 <memcpy>:
    8190:	440a      	add	r2, r1
    8192:	4291      	cmp	r1, r2
    8194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    8198:	d100      	bne.n	819c <memcpy+0xc>
    819a:	4770      	bx	lr
    819c:	b510      	push	{r4, lr}
    819e:	f811 4b01 	ldrb.w	r4, [r1], #1
    81a2:	f803 4f01 	strb.w	r4, [r3, #1]!
    81a6:	4291      	cmp	r1, r2
    81a8:	d1f9      	bne.n	819e <memcpy+0xe>
    81aa:	bd10      	pop	{r4, pc}

000081ac <memset>:
    81ac:	4402      	add	r2, r0
    81ae:	4603      	mov	r3, r0
    81b0:	4293      	cmp	r3, r2
    81b2:	d100      	bne.n	81b6 <memset+0xa>
    81b4:	4770      	bx	lr
    81b6:	f803 1b01 	strb.w	r1, [r3], #1
    81ba:	e7f9      	b.n	81b0 <memset+0x4>

000081bc <_raise_r>:
    81bc:	291f      	cmp	r1, #31
    81be:	b538      	push	{r3, r4, r5, lr}
    81c0:	4604      	mov	r4, r0
    81c2:	460d      	mov	r5, r1
    81c4:	d904      	bls.n	81d0 <_raise_r+0x14>
    81c6:	2316      	movs	r3, #22
    81c8:	6003      	str	r3, [r0, #0]
    81ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81ce:	bd38      	pop	{r3, r4, r5, pc}
    81d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    81d2:	b112      	cbz	r2, 81da <_raise_r+0x1e>
    81d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    81d8:	b94b      	cbnz	r3, 81ee <_raise_r+0x32>
    81da:	4620      	mov	r0, r4
    81dc:	f000 f830 	bl	8240 <_getpid_r>
    81e0:	462a      	mov	r2, r5
    81e2:	4601      	mov	r1, r0
    81e4:	4620      	mov	r0, r4
    81e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    81ea:	f000 b817 	b.w	821c <_kill_r>
    81ee:	2b01      	cmp	r3, #1
    81f0:	d00a      	beq.n	8208 <_raise_r+0x4c>
    81f2:	1c59      	adds	r1, r3, #1
    81f4:	d103      	bne.n	81fe <_raise_r+0x42>
    81f6:	2316      	movs	r3, #22
    81f8:	6003      	str	r3, [r0, #0]
    81fa:	2001      	movs	r0, #1
    81fc:	e7e7      	b.n	81ce <_raise_r+0x12>
    81fe:	2400      	movs	r4, #0
    8200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    8204:	4628      	mov	r0, r5
    8206:	4798      	blx	r3
    8208:	2000      	movs	r0, #0
    820a:	e7e0      	b.n	81ce <_raise_r+0x12>

0000820c <raise>:
    820c:	4b02      	ldr	r3, [pc, #8]	; (8218 <raise+0xc>)
    820e:	4601      	mov	r1, r0
    8210:	6818      	ldr	r0, [r3, #0]
    8212:	f7ff bfd3 	b.w	81bc <_raise_r>
    8216:	bf00      	nop
    8218:	10000c9c 	.word	0x10000c9c

0000821c <_kill_r>:
    821c:	b538      	push	{r3, r4, r5, lr}
    821e:	4d07      	ldr	r5, [pc, #28]	; (823c <_kill_r+0x20>)
    8220:	2300      	movs	r3, #0
    8222:	4604      	mov	r4, r0
    8224:	4608      	mov	r0, r1
    8226:	4611      	mov	r1, r2
    8228:	602b      	str	r3, [r5, #0]
    822a:	f7fb fad1 	bl	37d0 <_kill>
    822e:	1c43      	adds	r3, r0, #1
    8230:	d102      	bne.n	8238 <_kill_r+0x1c>
    8232:	682b      	ldr	r3, [r5, #0]
    8234:	b103      	cbz	r3, 8238 <_kill_r+0x1c>
    8236:	6023      	str	r3, [r4, #0]
    8238:	bd38      	pop	{r3, r4, r5, pc}
    823a:	bf00      	nop
    823c:	1000171c 	.word	0x1000171c

00008240 <_getpid_r>:
    8240:	f7fb babe 	b.w	37c0 <_getpid>

00008244 <strlen>:
    8244:	4603      	mov	r3, r0
    8246:	f813 2b01 	ldrb.w	r2, [r3], #1
    824a:	2a00      	cmp	r2, #0
    824c:	d1fb      	bne.n	8246 <strlen+0x2>
    824e:	1a18      	subs	r0, r3, r0
    8250:	3801      	subs	r0, #1
    8252:	4770      	bx	lr

00008254 <sjsu::lpc40xx::Pin::kFunction>:
    8254:	0300 ffff                                   ....

00008258 <sjsu::lpc40xx::Pin::kResistor>:
    8258:	0203 ffff                                   ....

0000825c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    825c:	0107 ffff                                   ....

00008260 <sjsu::lpc40xx::Pin::kOpenDrain>:
    8260:	010a ffff                                   ....

00008264 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    8264:	0302 0100                                   ....

00008268 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    8268:	6970 2e6e 7068 0070 6976 7472 6175 206c     pin.hpp.virtual 
    8278:	6f76 6469 7320 736a 3a75 6c3a 6370 3731     void sjsu::lpc17
    8288:	7878 3a3a 6950 3a6e 533a 7465 7341 6e41     xx::Pin::SetAsAn
    8298:	6c61 676f 6f4d 6564 6228 6f6f 296c 6320     alogMode(bool) c
    82a8:	6e6f 7473 0000 0000 5b1b 3334 206d 4157     onst.....[43m WA
    82b8:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    82c8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    82d8:	256d 3e64 1b20 305b 333b 6d37 6e55 7573     m%d> .[0;37mUnsu
    82e8:	7070 726f 6574 2064 706f 7265 7461 6f69     pported operatio
    82f8:	1b6e 305b 0a6d 0000 6f62 6c6f 7320 736a     n.[0m...bool sjs
    8308:	3a75 6c3a 6370 3034 7878 3a3a 7047 6f69     u::lpc40xx::Gpio
    8318:	3a3a 7349 5641 6c61 6469 6f50 7472 2928     ::IsAValidPort()
    8328:	6320 6e6f 7473 0000 5b1b 3334 206d 4157      const...[43m WA
    8338:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    8348:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8358:	256d 3e64 1b20 305b 333b 6d37 6854 7369     m%d> .[0;37mThis
    8368:	6720 6970 206f 6f70 7472 6320 6e61 6f6e      gpio port canno
    8378:	2074 6562 7520 6573 2064 6f66 2072 7845     t be used for Ex
    8388:	6574 6e72 6c61 4920 746e 7265 7572 7470     ternal Interrupt
    8398:	2e73 4e20 6565 2064 6f74 7520 6573 4720     s. Need to use G
    83a8:	4950 734f 6f20 206e 6f50 7472 3020 6f20     PIOs on Port 0 o
    83b8:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    83c8:	6f76 6469 7320 736a 3a75 533a 6473 3331     void sjsu::Ssd13
    83d8:	3630 3a3a 7257 7469 2865 6975 746e 3233     06::Write(uint32
    83e8:	745f 202c 6a73 7573 3a3a 7353 3164 3033     _t, sjsu::Ssd130
    83f8:	3a36 543a 6172 736e 6361 6974 6e6f 202c     6::Transaction, 
    8408:	6973 657a 745f 0029 2020 4420 4245 4755     size_t).   DEBUG
    8418:	5b1b 3b30 3439 3a6d 7325 1b3a 305b 393b     .[0;94m:%s:.[0;9
    8428:	6d32 7325 1b3a 305b 393b 6d33 6425 203e     2m%s:.[0;93m%d> 
    8438:	5b1b 3b30 3733 736d 6e65 2064 203d 7830     .[0;37msend = 0x
    8448:	5825 5b1b 6d30 000a 6e69 2074 616d 6e69     %X.[0m..int main
    8458:	2928 0000 5b1b 3234 206d 2020 4920 464e     ()...[42m    INF
    8468:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    8478:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8488:	1b20 305b 333b 6d37 7453 7261 6974 676e      .[0;37mStarting
    8498:	4f20 656c 5064 6972 746e 4120 7070 696c      OledPrint Appli
    84a8:	6163 6974 6e6f 2e2e 1b2e 305b 0a6d 0000     cation....[0m...
    84b8:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    84c8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    84d8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    84e8:	333b 6d37 6544 6f6d 736e 7274 7461 6e69     ;37mDemonstratin
    84f8:	2067 7270 6e69 6674 6320 7061 6261 6c69     g printf capabil
    8508:	7469 6569 2e73 2e2e 5b1b 6d30 000a 0000     ities....[0m....
    8518:	6956 636e 6e65 2074 6153 0a77 0000 0000     Vincent Saw.....
    8528:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    8538:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8548:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8558:	333b 6d37 7453 7261 6974 676e 4820 6c65     ;37mStarting Hel
    8568:	6f6c 5720 726f 646c 4120 7070 696c 6163     lo World Applica
    8578:	6974 6e6f 5b1b 6d30 000a 0000 5b1b 3234     tion.[0m.....[42
    8588:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    8598:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    85a8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    85b8:	4d43 4550 3330 2d30 2034 7830 5825 5b1b     CMPE030-4 0x%X.[
    85c8:	6d30 000a                                   0m..

000085cc <sjsu::lpc40xx::Gpio::IsAValidPort() const::file>:
    85cc:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000085d8 <sjsu::lpc40xx::I2c::Bus::kI2c0SdaPin>:
    85d8:	875c 0000 0000 0000                         \.......

000085e0 <sjsu::lpc40xx::I2c::Bus::kI2c0SclPin>:
    85e0:	875c 0000 0100 0000                         \.......

000085e8 <sjsu::lpc40xx::I2c::Bus::kI2c1SdaPin>:
    85e8:	875c 0000 1e01 0000                         \.......

000085f0 <sjsu::lpc40xx::I2c::Bus::kI2c1SclPin>:
    85f0:	875c 0000 1f01 0000                         \.......

000085f8 <sjsu::lpc40xx::I2c::Bus::kI2c2SdaPin>:
    85f8:	875c 0000 0a00 0000                         \.......

00008600 <sjsu::lpc40xx::I2c::Bus::kI2c2SclPin>:
    8600:	875c 0000 0b00 0000                         \.......

00008608 <sjsu::lpc40xx::Spi::ControlRegister0::kDataBit>:
    8608:	0400 ffff                                   ....

0000860c <sjsu::lpc40xx::Spi::ControlRegister0::kFrameBit>:
    860c:	0204 ffff                                   ....

00008610 <sjsu::lpc40xx::Spi::ControlRegister0::kPolarityBit>:
    8610:	0106 ffff                                   ....

00008614 <sjsu::lpc40xx::Spi::ControlRegister0::kPhaseBit>:
    8614:	0107 ffff                                   ....

00008618 <sjsu::lpc40xx::Spi::ControlRegister0::kDividerBit>:
    8618:	0808 ffff                                   ....

0000861c <sjsu::lpc40xx::Spi::ControlRegister1::kSpiEnable>:
    861c:	0101 ffff                                   ....

00008620 <sjsu::lpc40xx::Spi::ControlRegister1::kSlaveModeBit>:
    8620:	0102 ffff                                   ....

00008624 <sjsu::lpc40xx::Spi::StatusRegister::kDataLineBusyBit>:
    8624:	0104 ffff                                   ....

00008628 <sjsu::lpc40xx::Spi::Bus::kMosi0>:
    8628:	875c 0000 1200 0000                         \.......

00008630 <sjsu::lpc40xx::Spi::Bus::kMiso0>:
    8630:	875c 0000 1100 0000                         \.......

00008638 <sjsu::lpc40xx::Spi::Bus::kSck0>:
    8638:	875c 0000 0f00 0000                         \.......

00008640 <sjsu::lpc40xx::Spi::Bus::kMosi1>:
    8640:	875c 0000 0900 0000                         \.......

00008648 <sjsu::lpc40xx::Spi::Bus::kMiso1>:
    8648:	875c 0000 0800 0000                         \.......

00008650 <sjsu::lpc40xx::Spi::Bus::kSck1>:
    8650:	875c 0000 0700 0000                         \.......

00008658 <sjsu::lpc40xx::Spi::Bus::kMosi2>:
    8658:	875c 0000 0101 0000                         \.......

00008660 <sjsu::lpc40xx::Spi::Bus::kMiso2>:
    8660:	875c 0000 0401 0000                         \.......

00008668 <sjsu::lpc40xx::Spi::Bus::kSck2>:
    8668:	875c 0000 0001 0000                         \.......

00008670 <sjsu::Ssd1306::Write(unsigned long, sjsu::Ssd1306::Transaction, unsigned int)::file>:
    8670:	7373 3164 3033 2e36 7068 0070               ssd1306.hpp.

0000867c <main::file>:
    867c:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008688 <main::file>:
    8688:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008694 <main::file>:
    8694:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000086a0 <main::file>:
    86a0:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000086ac <vtable for sjsu::Ssd1306>:
	...
    86b4:	162f 0000 1645 0000 165b 0000 174d 0000     /...E...[...M...
    86c4:	1607 0000 161b 0000 192d 0000 194d 0000     ........-...M...
    86d4:	19cb 0000                                   ....

000086d8 <vtable for sjsu::lpc40xx::Spi>:
	...
    86e0:	1269 0000 13a5 0000 13f5 0000 14dd 0000     i...............

000086f0 <vtable for sjsu::lpc40xx::Gpio>:
	...
    86f8:	0e79 0000 0ee1 0000 0f25 0000 0f53 0000     y.......%...S...
    8708:	0f77 0000 0fc5 0000 10a1 0000               w...........

00008714 <vtable for sjsu::lpc17xx::Pin>:
	...
    871c:	0aa9 0000 0abd 0000 0b1d 0000 0ba5 0000     ................
    872c:	0b79 0000                                   y...

00008730 <vtable for sjsu::Gpio>:
	...
    8738:	6bf3 0000 6bf3 0000 6bf3 0000 6bf3 0000     .k...k...k...k..
    8748:	6bf3 0000 6bf3 0000 6bf3 0000               .k...k...k..

00008754 <vtable for sjsu::lpc40xx::Pin>:
	...
    875c:	04d9 0000 04ed 0000 0521 0000 0591 0000     ........!.......
    876c:	0555 0000                                   U...

00008770 <vtable for sjsu::Pin>:
	...
    8778:	6bf3 0000 6bf3 0000 6bf3 0000 6bf3 0000     .k...k...k...k..
    8788:	6bf3 0000 2020 6425 2029 7830 3025 5838     .k..  %d) 0x%08X
    8798:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    87a8:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    87b8:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    87c8:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    87d8:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    87e8:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    87f8:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8808:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8818:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8828:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8838:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8848:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8858:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8868:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8878:	6175 206c 6f76 6469 7320 736a 3a75 723a     ual void sjsu::r
    8888:	6f74 3a73 543a 7361 536b 6863 6465 6c75     tos::TaskSchedul
    8898:	7265 3a3a 6441 5464 7361 286b 6a73 7573     er::AddTask(sjsu
    88a8:	3a3a 7472 736f 3a3a 6154 6b73 6e49 6574     ::rtos::TaskInte
    88b8:	6672 6361 2a65 0029 5b1b 3534 206d 2020     rface*)..[45m   
    88c8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    88d8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    88e8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    88f8:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8908:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8918:	2820 6174 6b73 635f 756f 746e 205f 202b      (task_count_ + 
    8928:	2031 203c 6f63 666e 6769 3a3a 546b 7361     1 < config::kTas
    8938:	536b 6863 6465 6c75 7265 6953 657a 0a29     kSchedulerSize).
    8948:	2020 2020 2020 2020 2020 6854 2065 6373               The sc
    8958:	6568 7564 656c 2072 7369 6320 7275 6572     heduler is curre
    8968:	746e 796c 6620 6c75 2c6c 7420 6568 7420     ntly full, the t
    8978:	7361 206b 6977 6c6c 6e20 746f 6220 2065     ask will not be 
    8988:	6461 6564 2e64 4320 6e6f 6973 6564 2072     added. Consider 
    8998:	6e69 7263 6165 6973 676e 7420 6568 7320     increasing the s
    89a8:	6863 6465 6c75 7265 7320 7a69 2065 6f63     cheduler size co
    89b8:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
    89c8:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    89d8:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    89e8:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    89f8:	3a3a 7472 736f 3a3a 6154 6b73 6353 6568     ::rtos::TaskSche
    8a08:	7564 656c 3a72 523a 6e75 6154 6b73 7628     duler::RunTask(v
    8a18:	696f 2a64 0029 0000 5b1b 3534 206d 2020     oid*)....[45m   
    8a28:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8a38:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8a48:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8a58:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8a68:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8a78:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    8a88:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    8a98:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    8aa8:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    8ab8:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    8ac8:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    8ad8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8ae8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8af8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8b08:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8b18:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8b28:	5420 7365 6574 3a64 2820 6174 6b73 502e      Tested: (task.P
    8b38:	6572 7552 286e 2929 200a 2020 2020 2020     reRun()).       
    8b48:	2020 5020 6572 7552 286e 2029 6166 6c69        PreRun() fail
    8b58:	6465 6620 726f 7420 7361 3a6b 2520 2c73     ed for task: %s,
    8b68:	7420 7265 696d 616e 6974 676e 7320 6863      terminating sch
    8b78:	6465 6c75 7265 1b21 305b 1b6d 305b 0a6d     eduler!.[0m.[0m.
    8b88:	0000 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    8b98:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    8ba8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8bb8:	1b20 305b 333b 6d37 6e41 6520 7272 726f      .[0;37mAn error
    8bc8:	6f20 6363 7275 6572 2c64 7420 6568 6620      occurred, the f
    8bd8:	6c6f 6f6c 6977 676e 7420 7361 206b 6977     ollowing task wi
    8be8:	6c6c 6220 2065 7573 7073 6e65 6564 3a64     ll be suspended:
    8bf8:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8c08:	6f76 6469 7320 736a 3a75 723a 6f74 3a73     void sjsu::rtos:
    8c18:	543a 7361 536b 6863 6465 6c75 7265 3a3a     :TaskScheduler::
    8c28:	6e49 7469 6169 696c 657a 6c41 546c 7361     InitializeAllTas
    8c38:	736b 2928 0000 0000 5b1b 3534 206d 2020     ks().....[45m   
    8c48:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8c58:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8c68:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8c78:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8c88:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8c98:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    8ca8:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    8cb8:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    8cc8:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    8cd8:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8ce8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8cf8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8d08:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8d18:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8d28:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8d38:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    8d48:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    8d58:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    8d68:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    8d78:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    8d88:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    8d98:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8da8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8db8:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8dc8:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8dd8:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    8de8:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    8df8:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    8e08:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    8e18:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    8e28:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    8e38:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    8e48:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    8e58:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    8e68:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    8e78:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    8e88:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    8e98:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    8ea8:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    8eb8:	6b63 7274 6361 2065 5254 4341 5345 223d     cktrace TRACES="
    8ec8:	0000 0000 7830 7025 0020 0000 0a22 1b0a     ....0x%p ..."...
    8ed8:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    8ee8:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    8ef8:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    8f08:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    8f18:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    8f28:	6c6c 6465 002e 0000 5b1b 3134 486d 7261     lled.....[41mHar
    8f38:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    8f48:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    8f58:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    8f68:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    8f78:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    8f88:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    8f98:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    8fa8:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    8fb8:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    8fc8:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    8fd8:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    8fe8:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    8ff8:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    9008:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    9018:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    9028:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00009034 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    9034:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    9044:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    9054:	bc20 4cbe 6b28 4e6e 743a 0074                ..L(knN:tt.

00009060 <config::kSystemClockRateMhz>:
    9060:	0000 4240                                   ..@B

00009064 <config::kRtosFrequency>:
    9064:	0000 447a 2020 6425 2029 7830 3025 5838     ..zD  %d) 0x%08X
    9074:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    9084:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    9094:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    90a4:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    90b4:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    90c4:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    90d4:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    90e4:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    90f4:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    9104:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    9114:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    9124:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    9134:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    9144:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    9154:	6175 206c 6f76 6469 7320 736a 3a75 6c3a     ual void sjsu::l
    9164:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    9174:	746e 6f72 6c6c 7265 3a3a 6553 5074 7265     ntroller::SetPer
    9184:	7069 6568 6172 436c 6f6c 6b63 6944 6976     ipheralClockDivi
    9194:	6564 2872 6f63 736e 2074 6a73 7573 3a3a     der(const sjsu::
    91a4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    91b4:	3a3a 6550 6972 6870 7265 6c61 4449 2c26     ::PeripheralID&,
    91c4:	7520 6e69 3874 745f 2029 6f63 736e 0074      uint8_t) const.
    91d4:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    91e4:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    91f4:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    9204:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    9214:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    9224:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    9234:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    9244:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    9254:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    9264:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    9274:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    9284:	7254 6361 3a65 000a 6975 746e 3233 745f     Trace:..uint32_t
    9294:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    92a4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    92b4:	3a3a 6143 636c 6c75 7461 5065 6c6c 7528     ::CalculatePll(u
    92c4:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    92d4:	6d3a 6765 6861 7265 7a74 745f 202c 6e75     :megahertz_t, un
    92e4:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    92f4:	656d 6167 6568 7472 5f7a 2974 6320 6e6f     megahertz_t) con
    9304:	7473 0000 5b1b 3534 206d 2020 5245 4f52     st...[45m   ERRO
    9314:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9324:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9334:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9344:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9354:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    9364:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    9374:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    9384:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    9394:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    93a4:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    93b4:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    93c4:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    93d4:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    93e4:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    93f4:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    9404:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9414:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9424:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9434:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9444:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    9454:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    9464:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    9474:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    9484:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    9494:	305b 1b6d 305b 0a6d 0000 0000 6f76 6469     [0m.[0m.....void
    94a4:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    94b4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    94c4:	3a3a 6553 4374 7570 6c43 636f 446b 7669     ::SetCpuClockDiv
    94d4:	6469 7265 7528 6e69 3874 745f 2029 6f63     ider(uint8_t) co
    94e4:	736e 0074 5b1b 3534 206d 2020 5245 4f52     nst..[45m   ERRO
    94f4:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9504:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9514:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9524:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9534:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    9544:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    9554:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    9564:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    9574:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    9584:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    9594:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    95a4:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    95b4:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    95c4:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    95d4:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    95e4:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    95f4:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    9604:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    9614:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    9624:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    9634:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    9644:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    9654:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    9664:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..
    9674:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    9684:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    9694:	7075 4374 6e6f 7274 6c6f 656c 3c72 4e6b     uptController<kN
    96a4:	6d75 6562 4f72 4966 746e 7265 7572 7470     umberOfInterrupt
    96b4:	2c73 6b20 764e 6369 7250 6f69 6972 7974     s, kNvicPriority
    96c4:	6942 7374 3a3e 553a 726e 6765 7369 6574     Bits>::Unregiste
    96d4:	6572 4864 6e61 6c64 7265 2928 5b20 6977     redHandler() [wi
    96e4:	6874 7520 736e 6769 656e 2064 6e69 2074     th unsigned int 
    96f4:	4e6b 6d75 6562 4f72 4966 746e 7265 7572     kNumberOfInterru
    9704:	7470 2073 203d 3334 203b 6f6c 676e 7520     pts = 43; long u
    9714:	736e 6769 656e 2064 6e69 2074 4e6b 6976     nsigned int kNvi
    9724:	5063 6972 726f 7469 4279 7469 2073 203d     cPriorityBits = 
    9734:	5d35 0000 2020 4420 4245 4755 5b1b 3b30     5]..   DEBUG.[0;
    9744:	3439 3a6d 7325 1b3a 305b 393b 6d32 7325     94m:%s:.[0;92m%s
    9754:	1b3a 305b 393b 6d33 6425 203e 5b1b 3b30     :.[0;93m%d> .[0;
    9764:	3733 4e6d 206f 6e69 6574 7272 7075 2074     37mNo interrupt 
    9774:	6168 646e 656c 2072 6f66 6e75 2e64 4420     handler found. D
    9784:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
    9794:	7470 7220 7165 6575 7473 2520 2164 5b1b     pt request %d!.[
    97a4:	6d30 000a                                   0m..

000097a8 <sjsu::cortex::SystemTimer::kFixedPointScaling>:
    97a8:	4240 000f                                   @B..

000097ac <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    97ac:	0000 4140                                   ..@A

000097b0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    97b0:	0000 4140                                   ..@A

000097b4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    97b4:	0100 ffff                                   ....

000097b8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    97b8:	0100 ffff                                   ....

000097bc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    97bc:	0500 ffff                                   ....

000097c0 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    97c0:	0108 ffff                                   ....

000097c4 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    97c4:	0208 ffff                                   ....

000097c8 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    97c8:	0208 ffff                                   ....

000097cc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    97cc:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    97dc:	2e72 7068 0070 ffff                         r.hpp...

000097e4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    97e4:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    97f4:	2e72 7068 0070 ffff                         r.hpp...

000097fc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    97fc:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    980c:	2e72 7068 0070 ffff                         r.hpp...

00009814 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    9814:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9824:	2e72 7068 0070 ffff                         r.hpp...

0000982c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    982c:	875c 0000 0200 0000                         \.......

00009834 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    9834:	875c 0000 0300 0000                         \.......

0000983c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    983c:	875c 0000 0802 0000                         \.......

00009844 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    9844:	875c 0000 0902 0000                         \.......

0000984c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    984c:	875c 0000 1c04 0000                         \.......

00009854 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    9854:	875c 0000 1d04 0000                         \.......

0000985c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    985c:	875c 0000 1d01 0000                         \.......

00009864 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    9864:	875c 0000 0902 0000                         \.......

0000986c <sjsu::lpc40xx::Uart::Port::kUart0>:
    986c:	c000 4000 0003 0000 982c 0000 9834 0000     ...@....,...4...
    987c:	0009 0000                                   ....

00009880 <sjsu::InitializePlatform()::file>:
    9880:	7473 7261 7574 2e70 7063 0070               startup.cpp.

0000988c <vtable for sjsu::cortex::InterruptController<43u, 5ul>>:
	...
    9894:	67bd 0000 67ed 0000 6849 0000               .g...g..Ih..

000098a0 <vtable for sjsu::lpc40xx::Uart>:
	...
    98a8:	5df1 0000 5e9b 0000 5f2d 0000 5f7f 0000     .]...^..-_..._..
    98b8:	5fcd 0000 5983 0000                         ._...Y..

000098c0 <vtable for sjsu::lpc40xx::SystemController>:
	...
    98c8:	526d 0000 5309 0000 5361 0000 5385 0000     mR...S..aS...S..
    98d8:	53a1 0000 53dd 0000 5411 0000               .S...S...T..

000098e4 <vtable for sjsu::cortex::SystemTimer>:
	...
    98ec:	4f91 0000 5021 0000 515d 0000 5041 0000     .O..!P..]Q..AP..

000098fc <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file>:
    98fc:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

0000990c <__sf_fake_stderr>:
	...

0000992c <__sf_fake_stdin>:
	...

0000994c <__sf_fake_stdout>:
	...
